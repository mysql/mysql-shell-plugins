{
  "stats": {
    "suites": 4,
    "tests": 34,
    "passes": 33,
    "pending": 1,
    "failures": 0,
    "start": "2023-09-01T16:46:39.729Z",
    "end": "2023-09-01T16:50:40.690Z",
    "duration": 240961,
    "testsRegistered": 34,
    "passPercent": 100,
    "pendingPercent": 2.941176470588235,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "84174d98-f035-4322-8098-7537f14ffbcd",
      "title": "",
      "fullFile": "/Users/gsaraiva/Documents/shell-plugins/gui/extension/tests/e2e/output/tests/ui-rest.js",
      "file": "/output/tests/ui-rest.js",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 8652,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(45000);\n    const start = Date.now();\n    const binPath = process.platform === 'darwin' ? yield self.createShortcut(code.getCodeFolder(), self.tmpLink) : self.chromeBin;\n    yield browser.start(binPath);\n    yield browser.openResources(...resources);\n    yield browser.waitForWorkbench();\n    yield new Promise((res) => { setTimeout(res, 2000); });\n    console.log(`Browser ready in ${Date.now() - start} ms`);\n    console.log('Launching tests...');\n});",
          "err": {},
          "uuid": "b0752fa3-e289-4b5c-b7f1-4bcd9bae94a0",
          "parentUUID": "84174d98-f035-4322-8098-7537f14ffbcd",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 3204,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    this.timeout(30000);\n    yield browser.quit();\n    if (process.platform === 'darwin') {\n        if (yield fs.pathExists(self.tmpLink)) {\n            try {\n                fs.unlinkSync(self.tmpLink);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n    }\n    code.uninstallExtension(self.cleanup);\n});",
          "err": {},
          "uuid": "e2e08c2d-2975-443a-982c-a392fdb940aa",
          "parentUUID": "84174d98-f035-4322-8098-7537f14ffbcd",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "return __awaiter(this, void 0, void 0, function* () {\n    if (this.currentTest && this.currentTest.state !== 'passed') {\n        try {\n            const filename = sanitize(this.currentTest.fullTitle());\n            yield browser.takeScreenshot(filename);\n        }\n        catch (err) {\n            console.log('Screenshot capture failed.', err);\n        }\n    }\n});",
          "err": {},
          "uuid": "2448f757-ef9e-4bf4-86cd-99a137c99f80",
          "parentUUID": "84174d98-f035-4322-8098-7537f14ffbcd",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "072bfa90-6f41-45b3-a053-9f03853004bd",
          "title": "MySQL REST Service",
          "fullFile": "/Users/gsaraiva/Documents/shell-plugins/gui/extension/tests/e2e/output/tests/ui-rest.js",
          "file": "/output/tests/ui-rest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"MySQL REST Service\"",
              "fullTitle": "MySQL REST Service \"before all\" hook in \"MySQL REST Service\"",
              "timedOut": false,
              "duration": 43907,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield misc_1.Misc.loadDriver();\n    try {\n        yield misc_1.Misc.cleanCredentials();\n        yield misc_1.driver.wait(until_1.Until.extensionIsReady(), constants.extensionReadyWait, \"Extension was not ready\");\n        yield misc_1.Misc.toggleBottomBar(false);\n        yield misc_1.Misc.sectionFocus(constants.dbTreeSection);\n        const randomCaption = String(Math.floor(Math.random() * (9000 - 2000 + 1) + 2000));\n        globalConn.caption += randomCaption;\n        yield db_1.Database.createConnection(globalConn);\n        const conn = yield db_1.Database.getWebViewConnection(globalConn.caption, true);\n        yield misc_1.Misc.switchToWebView();\n        yield misc_1.driver.executeScript(\"arguments[0].click();\", conn);\n        yield misc_1.driver.wait(db_1.Database.isConnectionLoaded(), constants.explicitWait * 3, \"DB Connection was not loaded\");\n        yield db_1.Database.setDBConnectionCredentials(globalConn);\n        let result = yield misc_1.Misc.execCmd(\"DROP SCHEMA IF EXISTS `mysql_rest_service_metadata`;\", undefined, constants.explicitWait * 2);\n        (0, chai_1.expect)(result[0]).to.match(/OK/);\n        result = yield misc_1.Misc.execCmd(`DROP TABLE IF EXISTS ${tableToDump}; CREATE TABLE ${tableToDump} (id int);`);\n        (0, chai_1.expect)(result[0]).to.match(/OK/);\n        const sql = `DROP SCHEMA IF EXISTS \\`${schemaToDump}\\`; CREATE SCHEMA \\`${schemaToDump}\\`;`;\n        result = yield misc_1.Misc.execCmd(sql);\n        (0, chai_1.expect)(result[0]).to.match(/OK/);\n        yield misc_1.driver.switchTo().defaultContent();\n        const treeGlobalConn = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, globalConn.caption, true);\n        yield treeGlobalConn.expand();\n        yield misc_1.Misc.setInputPassword(treeGlobalConn, globalConn.basic.password);\n        yield misc_1.Misc.openContextMenuItem(treeGlobalConn, constants.configureREST, constants.checkNotif);\n        const ntf = yield misc_1.Misc.getNotification(`Do you want to configure this instance for MySQL REST Service Support?`, false);\n        yield misc_1.Misc.clickOnNotificationButton(ntf, \"Yes\");\n        yield misc_1.Misc.setInputPassword(treeGlobalConn, globalConn.basic.password);\n        yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n        yield misc_1.Misc.getNotification(\"MySQL REST Service configured successfully.\");\n        yield misc_1.Misc.openContextMenuItem(treeGlobalConn, constants.showSystemSchemas, undefined);\n        (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, \"mysql_rest_service_metadata\")).to.be.true;\n    }\n    catch (e) {\n        yield misc_1.Misc.processFailure(this);\n        throw e;\n    }\n});",
              "err": {},
              "uuid": "7ddcc84d-3a5d-4857-b4fd-2840ec1ef6b5",
              "parentUUID": "072bfa90-6f41-45b3-a053-9f03853004bd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "023f53bc-fa39-4cd7-afe1-10f582480bda",
              "title": "Main Context Menus",
              "fullFile": "/Users/gsaraiva/Documents/shell-plugins/gui/extension/tests/e2e/output/tests/ui-rest.js",
              "file": "/output/tests/ui-rest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Main Context Menus\"",
                  "fullTitle": "MySQL REST Service Main Context Menus \"before all\" hook in \"Main Context Menus\"",
                  "timedOut": false,
                  "duration": 344,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    try {\n        yield misc_1.Misc.cleanCredentials();\n    }\n    catch (e) {\n        yield misc_1.Misc.processFailure(this);\n        throw e;\n    }\n});",
                  "err": {},
                  "uuid": "10034bc4-c014-47a7-884c-5f98e53c8558",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"Main Context Menus\"",
                  "fullTitle": "MySQL REST Service Main Context Menus \"after all\" hook in \"Main Context Menus\"",
                  "timedOut": false,
                  "duration": 151,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    try {\n        yield new vscode_extension_tester_1.BottomBarPanel().toggle(false);\n    }\n    catch (e) {\n        yield misc_1.Misc.processFailure(this);\n        throw e;\n    }\n});",
                  "err": {},
                  "uuid": "a6d97929-e792-490f-a2ef-01c00048434e",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"after each\" hook in \"Main Context Menus\"",
                  "fullTitle": "MySQL REST Service Main Context Menus \"after each\" hook in \"Main Context Menus\"",
                  "timedOut": false,
                  "duration": 77,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield misc_1.driver.switchTo().defaultContent();\n    if (this.currentTest.state === \"failed\") {\n        const notifications = yield new vscode_extension_tester_1.Workbench().getNotifications();\n        if (notifications.length > 0) {\n            yield notifications[notifications.length - 1].expand();\n        }\n        yield misc_1.Misc.processFailure(this);\n        if (notifications.length > 0) {\n            yield notifications[notifications.length - 1].dismiss();\n        }\n    }\n});",
                  "err": {},
                  "uuid": "2687ee6a-cd5f-462e-b453-ad52c2059fd8",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Disable MySQL REST Service",
                  "fullTitle": "MySQL REST Service Main Context Menus Disable MySQL REST Service",
                  "timedOut": false,
                  "duration": 3638,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            const treeGlobalConn = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, globalConn.caption, true);\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.disableRESTService, constants.checkInput);\n            yield misc_1.Misc.setInputPassword(treeGlobalConn, globalConn.basic.password);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            yield misc_1.Misc.getNotification(\"MySQL REST Service configured successfully.\");\n            (0, chai_1.expect)(yield misc_1.Misc.isMRSDisabled(treeMySQLRESTService)).to.equals(true);\n        })",
                  "err": {},
                  "uuid": "836779a9-a19d-4413-960a-45b99a5e18fe",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Enable MySQL REST Service",
                  "fullTitle": "MySQL REST Service Main Context Menus Enable MySQL REST Service",
                  "timedOut": false,
                  "duration": 3423,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            const treeGlobalConn = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, globalConn.caption, true);\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.enableRESTService, constants.checkInput);\n            yield misc_1.Misc.setInputPassword(treeGlobalConn, globalConn.basic.password);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            yield misc_1.Misc.getNotification(\"MySQL REST Service configured successfully.\");\n            (0, chai_1.expect)(yield misc_1.Misc.isMRSDisabled(treeMySQLRESTService)).to.equals(false);\n        })",
                  "err": {},
                  "uuid": "0fda2169-1689-48e7-98f6-bc505ad18bc0",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Bootstrap Local MySQL Router Instance",
                  "fullTitle": "MySQL REST Service Main Context Menus Bootstrap Local MySQL Router Instance",
                  "timedOut": false,
                  "duration": 17074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            (0, chai_1.expect)(yield misc_1.Misc.isRouterInstalled(), \"Please install MySQL Router manually\").to.be.true;\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            yield treeMySQLRESTService.expand();\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.bootstrapRouter, constants.checkTerminal);\n            yield misc_1.Misc.waitForTerminalText(\"Please enter MySQL password for root:\", constants.explicitWait * 2);\n            yield misc_1.Misc.execOnTerminal(globalConn.basic.password, constants.explicitWait * 2);\n            yield misc_1.Misc.waitForTerminalText(\"JWT secret:\", constants.explicitWait * 2);\n            yield misc_1.Misc.execOnTerminal(\"1234\", constants.explicitWait * 2);\n            yield misc_1.Misc.waitForTerminalText(\"Once the MySQL Router is started\", constants.explicitWait * 2);\n            (0, chai_1.expect)(yield misc_1.Misc.terminalHasErrors()).to.be.false;\n            yield misc_1.Misc.getRouter(globalConn.caption);\n        })",
                  "err": {},
                  "uuid": "666a0285-5250-4399-a137-497969b124db",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Bootstrap a running Local MySQL Router Instance",
                  "fullTitle": "MySQL REST Service Main Context Menus Bootstrap a running Local MySQL Router Instance",
                  "timedOut": false,
                  "duration": 14631,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            (0, chai_1.expect)(yield misc_1.Misc.isRouterInstalled(), \"Please install MySQL Router manually\").to.be.true;\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            yield treeMySQLRESTService.expand();\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.bootstrapRouter, constants.checkNotif);\n            const ntf = yield misc_1.Misc.getNotification(\"Do you want to rename the existing directory and proceed\", false);\n            yield misc_1.Misc.clickOnNotificationButton(ntf, \"Yes\");\n            yield misc_1.Misc.waitForTerminalText(\"Please enter MySQL password for root:\", constants.explicitWait * 2);\n            yield misc_1.Misc.execOnTerminal(globalConn.basic.password, constants.explicitWait * 2);\n            yield misc_1.Misc.waitForTerminalText(\"JWT secret:\", constants.explicitWait * 2);\n            yield misc_1.Misc.execOnTerminal(\"1234\", constants.explicitWait * 2);\n            yield misc_1.Misc.waitForTerminalText(\"Once the MySQL Router is started\", constants.explicitWait * 2);\n            (0, chai_1.expect)(yield misc_1.Misc.terminalHasErrors()).to.be.false;\n            yield misc_1.Misc.getRouter(globalConn.caption);\n        })",
                  "err": {},
                  "uuid": "de1583a2-b2ad-47a5-bc56-c5248eeb527d",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Start Local MySQL Router Instance",
                  "fullTitle": "MySQL REST Service Main Context Menus Start Local MySQL Router Instance",
                  "timedOut": false,
                  "duration": 6704,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            yield treeMySQLRESTService.expand();\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.startRouter, constants.checkTerminal);\n            yield misc_1.Misc.waitForTerminalText(\"Start accepting connections for routing routing:bootstrap_x_rw listening on\", constants.explicitWait * 2);\n            (0, chai_1.expect)(yield misc_1.Misc.terminalHasErrors()).to.be.false;\n            yield misc_1.driver.wait(() => __awaiter(void 0, void 0, void 0, function* () {\n                const treeRouter = yield misc_1.Misc.getRouter(globalConn.caption);\n                return (yield misc_1.Misc.isRouterActive(treeRouter)) === true;\n            }), constants.explicitWait * 2, `Router did not became active`);\n        })",
                  "err": {},
                  "uuid": "663a515b-d70b-4c2f-b08d-373e1d541ba4",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Stop Local MySQL Router Instance",
                  "fullTitle": "MySQL REST Service Main Context Menus Stop Local MySQL Router Instance",
                  "timedOut": false,
                  "duration": 11320,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.stopRouter, constants.checkTerminal);\n            yield misc_1.Misc.waitForTerminalText([\"mysqlrouter\\\\stop\", \"Unloading all plugins\"], constants.explicitWait * 2);\n            (0, chai_1.expect)(yield misc_1.Misc.terminalHasErrors()).to.be.false;\n            yield misc_1.driver.wait(() => __awaiter(void 0, void 0, void 0, function* () {\n                const treeRouter = yield misc_1.Misc.getRouter(globalConn.caption);\n                return (yield misc_1.Misc.isRouterActive(treeRouter)) === false;\n            }), constants.explicitWait * 3, `Router did not became inactive`);\n        })",
                  "err": {},
                  "uuid": "8a5a47dd-17f7-4384-9ffe-cd897e06bed6",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Browse the MySQL REST Service Documentation",
                  "fullTitle": "MySQL REST Service Main Context Menus Browse the MySQL REST Service Documentation",
                  "timedOut": false,
                  "duration": 2452,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.browseRESTDocs, constants.checkNewTabAndWebView);\n            try {\n                yield misc_1.driver.wait(() => __awaiter(void 0, void 0, void 0, function* () {\n                    const titles = yield misc_1.driver.findElements(vscode_extension_tester_1.By.css(\"h1\"));\n                    for (const title of titles) {\n                        if ((yield title.getText()) === \"MRS Developer's Guide\") {\n                            return true;\n                        }\n                    }\n                }), constants.explicitWait, \"Could not find the title 'MRS Developer's Guide'\");\n            }\n            finally {\n                yield misc_1.driver.switchTo().defaultContent();\n                yield new vscode_extension_tester_1.EditorView().closeEditor(constants.mrsDocs);\n            }\n        })",
                  "err": {},
                  "uuid": "7b1ccba7-57ec-4dad-ae75-61484e2082d7",
                  "parentUUID": "023f53bc-fa39-4cd7-afe1-10f582480bda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "836779a9-a19d-4413-960a-45b99a5e18fe",
                "0fda2169-1689-48e7-98f6-bc505ad18bc0",
                "666a0285-5250-4399-a137-497969b124db",
                "de1583a2-b2ad-47a5-bc56-c5248eeb527d",
                "663a515b-d70b-4c2f-b08d-373e1d541ba4",
                "8a5a47dd-17f7-4384-9ffe-cd897e06bed6",
                "7b1ccba7-57ec-4dad-ae75-61484e2082d7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 59242,
              "root": false,
              "rootEmpty": false,
              "_timeout": 250000
            },
            {
              "uuid": "6f757e5c-278c-473e-9a62-eec80d89eadd",
              "title": "Service Context Menus",
              "fullFile": "/Users/gsaraiva/Documents/shell-plugins/gui/extension/tests/e2e/output/tests/ui-rest.js",
              "file": "/output/tests/ui-rest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Service Context Menus\"",
                  "fullTitle": "MySQL REST Service Service Context Menus \"before all\" hook in \"Service Context Menus\"",
                  "timedOut": false,
                  "duration": 8793,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    try {\n        const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n        yield treeMySQLRESTService.expand();\n        const services = [globalService, serviceToEdit];\n        for (const service of services) {\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.addRESTService, constants.checkWebViewDialog);\n            yield db_1.Database.setRestService(service);\n            yield misc_1.driver.switchTo().defaultContent();\n            yield misc_1.Misc.getNotification(\"The MRS service has been created\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `${service.servicePath} (${service.settings.hostNameFilter})`)).to.be.true;\n        }\n    }\n    catch (e) {\n        yield misc_1.Misc.processFailure(this);\n        throw e;\n    }\n});",
                  "err": {},
                  "uuid": "9a700b12-dc47-47e6-b729-f6bc5a058abf",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after each\" hook in \"Service Context Menus\"",
                  "fullTitle": "MySQL REST Service Service Context Menus \"after each\" hook in \"Service Context Menus\"",
                  "timedOut": false,
                  "duration": 153,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    yield misc_1.driver.switchTo().defaultContent();\n    if (this.currentTest.state === \"failed\") {\n        yield misc_1.Misc.expandNotifications();\n        yield misc_1.Misc.processFailure(this);\n        yield misc_1.Misc.dismissNotifications();\n    }\n    yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n});",
                  "err": {},
                  "uuid": "4ab2f8b8-882c-4568-8e49-ec32d3ad0e2d",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Edit REST Service",
                  "fullTitle": "MySQL REST Service Service Context Menus Edit REST Service",
                  "timedOut": false,
                  "duration": 7061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${serviceToEdit.servicePath} (${serviceToEdit.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.editRESTService, constants.checkWebViewDialog);\n            const editedService = {\n                servicePath: `/edited`,\n                enabled: true,\n                default: true,\n                settings: {\n                    hostNameFilter: \"127.0.0.1\",\n                    comments: \"change testing\",\n                },\n                options: `{\"test\":\"value\"}`,\n                authentication: {\n                    authenticationPath: \"/authenticationPath\",\n                    redirectionUrl: \"localhost:8001\",\n                    redirectionUrlValid: \"(.*)(.*)\",\n                    authCompletedChangeCont: \"<body>\",\n                },\n                authenticationApps: {\n                    vendor: \"Google\",\n                    name: \"testing\",\n                    description: \"testing description\",\n                    enabled: true,\n                    limitToRegisteredUsers: true,\n                    appId: \"OAuth3\",\n                    accessToken: \"12345\",\n                    customUrl: \"http://testingTest\",\n                    customUrlForAccessToken: \"http://testing/123456\",\n                },\n            };\n            yield db_1.Database.setRestService(editedService);\n            yield misc_1.driver.switchTo().defaultContent();\n            yield misc_1.Misc.getNotification(\"The MRS service has been successfully updated.\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            treeRandomService = yield misc_1.Misc\n                .getTreeElement(constants.dbTreeSection, `${editedService.servicePath} (${editedService.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.editRESTService, constants.checkWebViewDialog);\n            const service = yield db_1.Database.getRestService();\n            (0, chai_1.expect)(editedService).to.deep.equal(service);\n            serviceToEdit = editedService;\n        })",
                  "err": {},
                  "uuid": "4a8ef0a0-b991-4bc6-8099-d48978ed619c",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add REST Service Schemas",
                  "fullTitle": "MySQL REST Service Service Context Menus Add REST Service Schemas",
                  "timedOut": false,
                  "duration": 12067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const schemas = [sakilaRestSchema, worldRestSchema, restSchemaToDump];\n            for (const schema of schemas) {\n                const treeSchema = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, schema.settings.schemaName);\n                yield misc_1.Misc.openContextMenuItem(treeSchema, constants.addSchemaToREST, constants.checkWebViewDialog);\n                yield db_1.Database.setRestSchema(schema);\n                yield misc_1.driver.switchTo().defaultContent();\n                yield misc_1.Misc.getNotification(\"The MRS schema has been added successfully.\");\n                yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n                const treeService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n                yield treeService.expand();\n                (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `${schema.restSchemaPath} (${schema.settings.schemaName})`)).to.exist;\n            }\n        })",
                  "err": {},
                  "uuid": "d550dadc-e8e8-4020-a23e-0fdb35edb9c0",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Edit REST Schema",
                  "fullTitle": "MySQL REST Service Service Context Menus Edit REST Schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9a93488b-a0fa-4746-a074-ae47fa134a9b",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Set as Current REST Service",
                  "fullTitle": "MySQL REST Service Service Context Menus Set as Current REST Service",
                  "timedOut": false,
                  "duration": 2049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.setAsCurrentREST, constants.checkNotif);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            yield misc_1.Misc.getNotification(\"The MRS service has been set as the new default service.\");\n            yield misc_1.driver.wait(() => __awaiter(void 0, void 0, void 0, function* () {\n                return misc_1.Misc.isDefaultItem(treeRandomService, \"rest\");\n            }), constants.explicitWait, \"REST Service tree item did not became default\");\n        })",
                  "err": {},
                  "uuid": "9fa59e59-6b8d-4a19-a453-0af3c9b89f2a",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add Tables to REST Service",
                  "fullTitle": "MySQL REST Service Service Context Menus Add Tables to REST Service",
                  "timedOut": false,
                  "duration": 12740,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeRestSakila = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${sakilaRestSchema.restSchemaPath} (${sakilaRestSchema.settings.schemaName})`);\n            yield treeRestSakila.collapse();\n            const treeSakila = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, sakilaRestSchema.settings.schemaName);\n            yield treeSakila.expand();\n            const treeTables = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"Tables\");\n            yield treeTables.expand();\n            const tables = [\"actor\", \"address\", tableToDump];\n            for (const table of tables) {\n                const treeTable = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, table);\n                yield misc_1.Misc.openContextMenuItem(treeTable, constants.addDBObjToREST, constants.checkNewTabAndWebView);\n                yield db_1.Database.setRestObject({\n                    restServicePath: `${globalService.settings.hostNameFilter}${globalService.servicePath}`,\n                });\n                yield misc_1.driver.switchTo().defaultContent();\n                yield misc_1.Misc.getNotification(`The MRS Database Object ${table} was updated successfully`);\n                yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n                yield treeRestSakila.expand();\n                yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `/${table} (${table})`, true);\n            }\n        })",
                  "err": {},
                  "uuid": "6fa736d6-5ebb-4767-b4f6-fd857bd33ff5",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Dump Rest Schema to Json file",
                  "fullTitle": "MySQL REST Service Service Context Menus Dump Rest Schema to Json file",
                  "timedOut": false,
                  "duration": 2881,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTSchema = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `/${schemaToDump} (${schemaToDump})`, true);\n            yield fs.rm(`${destDumpSchema}.mrs.json`, { recursive: true, force: true });\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTSchema, constants.dumpRESTSchemaToJSON, constants.checkInput);\n            yield misc_1.Misc.setInputPath(destDumpSchema);\n            yield misc_1.Misc.getNotification(`The REST Schema has been dumped successfully`);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            yield fs.access(`${destDumpSchema}.mrs.json`);\n        })",
                  "err": {},
                  "uuid": "088e1e33-3cb7-4851-ac22-9d39df513859",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Dump REST Object to JSON file",
                  "fullTitle": "MySQL REST Service Service Context Menus Dump REST Object to JSON file",
                  "timedOut": false,
                  "duration": 2367,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeAddressTable = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `/${tableToDump} (${tableToDump})`);\n            yield fs.rm(`${destDumpTable}.mrs.json`, { recursive: true, force: true });\n            yield misc_1.Misc.openContextMenuItem(treeAddressTable, constants.dumpRESTObjToJSON, constants.checkInput);\n            yield misc_1.Misc.setInputPath(destDumpTable);\n            yield misc_1.Misc.getNotification(`The REST Database Object has been dumped successfully`);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            yield fs.access(`${destDumpTable}.mrs.json`);\n        })",
                  "err": {},
                  "uuid": "201dffb8-c969-40c9-ad11-a29fc4e33d56",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete REST Object",
                  "fullTitle": "MySQL REST Service Service Context Menus Delete REST Object",
                  "timedOut": false,
                  "duration": 2584,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeTableToDump = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `/${tableToDump} (${tableToDump})`);\n            const tableName = yield treeTableToDump.getLabel();\n            yield misc_1.Misc.openContextMenuItem(treeTableToDump, constants.deleteRESTObj, constants.checkDialog);\n            const dialog = new vscode_extension_tester_1.ModalDialog();\n            yield dialog.pushButton(`Delete DB Object`);\n            yield misc_1.Misc.getNotification(`The REST DB Object ${tableToDump} has been deleted`);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, tableName)).to.be.false;\n        })",
                  "err": {},
                  "uuid": "0430b130-aa00-45a9-9792-94c79877c3fe",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete REST Schema",
                  "fullTitle": "MySQL REST Service Service Context Menus Delete REST Schema",
                  "timedOut": false,
                  "duration": 5854,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield treeRandomService.expand();\n            const treeMySQLRESTSchema = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `/${schemaToDump} (${schemaToDump})`, true);\n            // first we click to delete the schema but we change our mind later (BUG#35377927)\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTSchema, constants.deleteRESTSchema, constants.checkNotif);\n            let ntf = yield misc_1.Misc.getNotification(`Are you sure the MRS schema ${schemaToDump} should be deleted?`, false);\n            yield misc_1.Misc.clickOnNotificationButton(ntf, \"No\");\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `/${schemaToDump} (${schemaToDump})`)).to.be.true;\n            // now we try again, but we really want to delete the schema\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTSchema, constants.deleteRESTSchema, constants.checkNotif);\n            ntf = yield misc_1.Misc.getNotification(`Are you sure the MRS schema ${schemaToDump} should be deleted?`, false);\n            yield misc_1.Misc.clickOnNotificationButton(ntf, \"Yes\");\n            yield misc_1.Misc.getNotification(\"The MRS schema has been deleted successfully\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `/${schemaToDump} (${schemaToDump})`)).to.be.false;\n        })",
                  "err": {},
                  "uuid": "75091b1f-4734-4cc6-9396-c5964a2c01d6",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Load REST Schema from JSON file",
                  "fullTitle": "MySQL REST Service Service Context Menus Load REST Schema from JSON file",
                  "timedOut": false,
                  "duration": 3327,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.loadRESTSchemaFromJSON, constants.checkInput);\n            yield misc_1.Misc.setInputPath(`${destDumpSchema}.mrs.json`);\n            yield misc_1.Misc.getNotification(\"The REST Schema has been loaded successfully\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `/${schemaToDump} (${schemaToDump})`)).to.be.true;\n        })",
                  "err": {},
                  "uuid": "a6bfa806-6dc9-4b5d-a0d4-d708bb79bdce",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Export Rest Service SDK files",
                  "fullTitle": "MySQL REST Service Service Context Menus Export Rest Service SDK files",
                  "timedOut": false,
                  "duration": 2712,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.exportRESTSDK, constants.checkInput);\n            const dest = (0, path_1.join)(process.cwd(), \"dump.sdk\");\n            yield fs.rm(dest, { force: true, recursive: true });\n            yield misc_1.Misc.setInputPath(dest);\n            yield misc_1.Misc.getNotification(\"MRS Service REST Files exported successfully\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            const files = yield fs.readdir(dest);\n            (0, chai_1.expect)(files.length).to.be.greaterThan(0);\n        })",
                  "err": {},
                  "uuid": "3782929b-cc38-432f-8d99-86e07180570c",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Load REST Object from JSON file",
                  "fullTitle": "MySQL REST Service Service Context Menus Load REST Object from JSON file",
                  "timedOut": false,
                  "duration": 3998,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTSchema = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${sakilaRestSchema.restSchemaPath} (${sakilaRestSchema.settings.schemaName})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTSchema, constants.loadRESTObjFromJSON, constants.checkInput);\n            yield misc_1.Misc.setInputPath(`${destDumpTable}.mrs.json`);\n            yield misc_1.Misc.getNotification(\"The REST Database Object has been loaded successfully\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `/${tableToDump} (${tableToDump})`)).to.be.true;\n        })",
                  "err": {},
                  "uuid": "b91d1ada-17cd-4c98-a542-0eda971e6003",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete Authentication App",
                  "fullTitle": "MySQL REST Service Service Context Menus Delete Authentication App",
                  "timedOut": false,
                  "duration": 2891,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeAuthApp = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.authenticationApps.name} (${globalService.authenticationApps.vendor})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeAuthApp, constants.deleteAuthenticationApp, constants.checkNotif);\n            const ntf = yield misc_1.Misc.getNotification(`Are you sure the MRS authentication app ${globalService.authenticationApps.name} should be deleted`, false);\n            yield misc_1.Misc.clickOnNotificationButton(ntf, \"Yes\");\n            const test = `The MRS Authentication App ${globalService.authenticationApps.name} has been deleted`;\n            yield misc_1.Misc.getNotification(test);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `${globalService.authenticationApps.name} (${globalService.authenticationApps.vendor})`)).to.be.false;\n        })",
                  "err": {},
                  "uuid": "e9511726-5ddb-492c-9b54-1bbf198edb80",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add New Authentication App",
                  "fullTitle": "MySQL REST Service Service Context Menus Add New Authentication App",
                  "timedOut": false,
                  "duration": 6184,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.addNewAuthApp, constants.checkWebViewDialog);\n            yield db_1.Database.setRestAuthenticationApp(\"MRS\", undefined, \"new app\", \"1234\", \"123\", \"testing\", \"guiTesting123\", \"empty\", false, false);\n            yield misc_1.driver.switchTo().defaultContent();\n            yield misc_1.Misc.getNotification(\"The MRS Authentication App has been added\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            const treeGlobalConn = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, globalConn.caption, true);\n            yield (yield misc_1.Misc.getActionButton(treeGlobalConn, \"Reload Database Information\")).click();\n            treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield treeRandomService.expand();\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, \"MRS (MRS)\")).to.be.true;\n        })",
                  "err": {},
                  "uuid": "3330a3ca-2918-4d1a-9e5c-d3ff648d5658",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add User",
                  "fullTitle": "MySQL REST Service Service Context Menus Add User",
                  "timedOut": false,
                  "duration": 4619,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let treeAuthApp = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MRS (MRS)\");\n            yield misc_1.Misc.openContextMenuItem(treeAuthApp, constants.addRESTUser, constants.checkWebViewDialog);\n            yield db_1.Database.setRestUser(\"gui\", \"testing\", undefined, \"as@as.com\", undefined, false, \"{\\\"user\\\": \\\"test\\\"}\", \"123\", \"guiMapped\");\n            yield misc_1.driver.switchTo().defaultContent();\n            yield misc_1.Misc.getNotification(\"The MRS User has been added\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            treeAuthApp = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MRS (MRS)\");\n            yield misc_1.driver.wait(() => __awaiter(void 0, void 0, void 0, function* () {\n                yield treeAuthApp.expand();\n                return (yield treeAuthApp.isExpanded()) && (yield treeAuthApp.getChildren()).length > 0;\n            }), constants.explicitWait, \"MRS (MRS) was not expanded\");\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, \"gui\")).to.be.true;\n        })",
                  "err": {},
                  "uuid": "150d31e6-2e83-44ec-86b0-c94f8c61746d",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Edit Authentication App",
                  "fullTitle": "MySQL REST Service Service Context Menus Edit Authentication App",
                  "timedOut": false,
                  "duration": 5653,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            let treeAuthApp = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MRS (MRS)\");\n            yield misc_1.Misc.openContextMenuItem(treeAuthApp, constants.editAuthenticationApp, constants.checkWebViewDialog);\n            yield db_1.Database.setRestAuthenticationApp(undefined, \"MRSedited\", \"edited app\", \"4321\", \"321\", \"editedTesting\", \"guiEdited123\", \"Full Access\", true, true);\n            yield misc_1.driver.switchTo().defaultContent();\n            yield misc_1.Misc.getNotification(\"The MRS Authentication App has been updated\");\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            treeAuthApp = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MRSedited (MRS)\", true);\n            yield misc_1.Misc.openContextMenuItem(treeAuthApp, constants.editAuthenticationApp, constants.checkWebViewDialog);\n            const dialog = yield misc_1.driver.wait(vscode_extension_tester_1.until.elementLocated(vscode_extension_tester_1.By.id(\"mrsAuthenticationAppDialog\")), constants.explicitWait, \"Authentication App dialog was not displayed\");\n            try {\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.css(\"#authVendorName label\")).getText()).to.equals(\"MRS\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"name\")).getAttribute(\"value\")).to.equals(\"MRSedited\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"description\"))\n                    .getAttribute(\"value\")).to.equals(\"edited app\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"accessToken\")).getAttribute(\"value\")).to.equals(\"4321\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"appId\")).getAttribute(\"value\")).to.equals(\"321\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"url\")).getAttribute(\"value\")).to.equals(\"editedTesting\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"urlDirectAuth\"))\n                    .getAttribute(\"value\")).to.equals(\"guiEdited123\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.css(\"#defaultRoleName label\")).getText())\n                    .to.equals(\"Full Access\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"enabled\"))\n                    .getAttribute(\"class\")).to.include(\"checked valueEditor\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"limitToRegisteredUsers\"))\n                    .getAttribute(\"class\")).to.include(\"checked valueEditor\");\n            }\n            finally {\n                yield dialog.findElement(vscode_extension_tester_1.By.id(\"closeButton\")).click();\n            }\n        })",
                  "err": {},
                  "uuid": "e643137a-ca8a-4232-9ba2-2ce67e070631",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Edit User",
                  "fullTitle": "MySQL REST Service Service Context Menus Edit User",
                  "timedOut": false,
                  "duration": 6850,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeAuthApp = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MRSedited (MRS)\");\n            yield treeAuthApp.expand();\n            let treeUser = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"gui\");\n            yield misc_1.Misc.openContextMenuItem(treeUser, constants.editRESTUser, constants.checkWebViewDialog);\n            yield db_1.Database.setRestUser(\"test\", \"editPass\", undefined, \"as1@as1.com\", undefined, true, \"{\\\"user\\\": \\\"edited\\\"}\", \"321\", \"editedMapped\");\n            yield misc_1.driver.switchTo().defaultContent();\n            yield misc_1.Misc.getNotification(`The MRS User has been updated`);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            const treeGlobalConn = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, globalConn.caption, true);\n            yield (yield misc_1.Misc.getActionButton(treeGlobalConn, \"Reload Database Information\")).click();\n            treeUser = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"test\");\n            yield misc_1.Misc.openContextMenuItem(treeUser, constants.editRESTUser, constants.checkWebViewDialog);\n            const dialog = yield misc_1.driver.wait(vscode_extension_tester_1.until.elementLocated(vscode_extension_tester_1.By.id(\"mrsUserDialog\")), constants.explicitWait, \"User dialog was not displayed\");\n            try {\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"name\")).getAttribute(\"value\")).to.equals(\"test\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.css(\"#authApp label\")).getText()).to.equals(\"MRSedited\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"email\")).getAttribute(\"value\")).to.equals(\"as1@as1.com\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"email\")).getAttribute(\"value\")).to.equals(\"as1@as1.com\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.css(\"#roles label\")).getText()).to.equals(\"Full Access\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"loginPermitted\"))\n                    .getAttribute(\"class\")).to.include(\"checked valueEditor\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"appOptions\")).getAttribute(\"value\"))\n                    .to.equals(\"{\\\"user\\\":\\\"edited\\\"}\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"vendorUserId\")).getAttribute(\"value\")).to.equals(\"321\");\n                (0, chai_1.expect)(yield dialog.findElement(vscode_extension_tester_1.By.id(\"mappedUserId\")).getAttribute(\"value\")).to.equals(\"editedMapped\");\n            }\n            finally {\n                yield dialog.findElement(vscode_extension_tester_1.By.id(\"closeButton\")).click();\n            }\n        })",
                  "err": {},
                  "uuid": "c94e33b9-a858-4fd7-8cde-4bf57d8255fd",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MRS Service Documentation",
                  "fullTitle": "MySQL REST Service Service Context Menus MRS Service Documentation",
                  "timedOut": false,
                  "duration": 3117,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeRandomService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${globalService.servicePath} (${globalService.settings.hostNameFilter})`, true);\n            yield misc_1.Misc.openContextMenuItem(treeRandomService, constants.mrsServiceDocs, constants.checkNewTabAndWebView);\n            yield misc_1.driver.wait(vscode_extension_tester_1.until.elementLocated(vscode_extension_tester_1.By.id(\"rest-service-properties\")), constants.explicitWait);\n            yield misc_1.driver.switchTo().defaultContent();\n            yield new vscode_extension_tester_1.EditorView().closeEditor(constants.mrsDocs);\n        })",
                  "err": {},
                  "uuid": "ed0f2026-fc11-4cf0-b57e-5197b8171a44",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete User",
                  "fullTitle": "MySQL REST Service Service Context Menus Delete User",
                  "timedOut": false,
                  "duration": 2673,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeUser = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"test\");\n            yield misc_1.Misc.openContextMenuItem(treeUser, constants.deleteRESTUser, constants.checkNotif);\n            const ntf = yield misc_1.Misc.getNotification(`Are you sure the MRS user test should be deleted`, false);\n            yield misc_1.Misc.clickOnNotificationButton(ntf, \"Yes\");\n            yield misc_1.Misc.getNotification(`The MRS User test has been deleted`);\n            yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n            (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, \"test\")).to.be.false;\n        })",
                  "err": {},
                  "uuid": "44e66aab-0f6f-4ba8-9436-556195b4c666",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete REST Services",
                  "fullTitle": "MySQL REST Service Service Context Menus Delete REST Services",
                  "timedOut": false,
                  "duration": 5905,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const services = [globalService, serviceToEdit];\n            for (const service of services) {\n                const treeRestService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${service.servicePath} (${service.settings.hostNameFilter})`, true);\n                yield misc_1.Misc.openContextMenuItem(treeRestService, constants.deleteRESTService, constants.checkNotif);\n                const ntf = yield misc_1.Misc\n                    .getNotification(`Are you sure the MRS service ${service.servicePath} should be deleted`, false);\n                yield misc_1.Misc.clickOnNotificationButton(ntf, \"Yes\");\n                yield misc_1.Misc.getNotification(\"The MRS service has been deleted successfully\");\n                yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n                (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `${service.servicePath} (${service.settings.hostNameFilter})`)).to.be.false;\n            }\n        })",
                  "err": {},
                  "uuid": "38b414c6-4ece-4437-9575-69e1a04dda46",
                  "parentUUID": "6f757e5c-278c-473e-9a62-eec80d89eadd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a8ef0a0-b991-4bc6-8099-d48978ed619c",
                "d550dadc-e8e8-4020-a23e-0fdb35edb9c0",
                "9fa59e59-6b8d-4a19-a453-0af3c9b89f2a",
                "6fa736d6-5ebb-4767-b4f6-fd857bd33ff5",
                "088e1e33-3cb7-4851-ac22-9d39df513859",
                "201dffb8-c969-40c9-ad11-a29fc4e33d56",
                "0430b130-aa00-45a9-9792-94c79877c3fe",
                "75091b1f-4734-4cc6-9396-c5964a2c01d6",
                "a6bfa806-6dc9-4b5d-a0d4-d708bb79bdce",
                "3782929b-cc38-432f-8d99-86e07180570c",
                "b91d1ada-17cd-4c98-a542-0eda971e6003",
                "e9511726-5ddb-492c-9b54-1bbf198edb80",
                "3330a3ca-2918-4d1a-9e5c-d3ff648d5658",
                "150d31e6-2e83-44ec-86b0-c94f8c61746d",
                "e643137a-ca8a-4232-9ba2-2ce67e070631",
                "c94e33b9-a858-4fd7-8cde-4bf57d8255fd",
                "ed0f2026-fc11-4cf0-b57e-5197b8171a44",
                "44e66aab-0f6f-4ba8-9436-556195b4c666",
                "38b414c6-4ece-4437-9575-69e1a04dda46"
              ],
              "failures": [],
              "pending": [
                "9a93488b-a0fa-4746-a074-ae47fa134a9b"
              ],
              "skipped": [],
              "duration": 95532,
              "root": false,
              "rootEmpty": false,
              "_timeout": 250000
            },
            {
              "uuid": "3c0e3a92-8698-446c-ba62-50efc841d7af",
              "title": "CRUD Operations",
              "fullFile": "/Users/gsaraiva/Documents/shell-plugins/gui/extension/tests/e2e/output/tests/ui-rest.js",
              "file": "/output/tests/ui-rest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"CRUD Operations\"",
                  "fullTitle": "MySQL REST Service CRUD Operations \"before all\" hook in \"CRUD Operations\"",
                  "timedOut": false,
                  "duration": 16820,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    try {\n        process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n        yield misc_1.Misc.cleanCredentials();\n        let treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n        yield treeMySQLRESTService.expand();\n        yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.addRESTService, constants.checkNewTabAndWebView);\n        yield db_1.Database.setRestService(crudService);\n        yield misc_1.driver.switchTo().defaultContent();\n        yield misc_1.Misc.getNotification(\"The MRS service has been created.\");\n        yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n        yield misc_1.driver.wait(() => __awaiter(this, void 0, void 0, function* () {\n            const refSchema = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, crudSchema.settings.schemaName);\n            yield refSchema.expand();\n            return (yield refSchema.isExpanded()) && (refSchema.hasChildren());\n        }), constants.explicitWait, \"sakila tree item was not expanded\");\n        const treeSchema = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, crudSchema.settings.schemaName);\n        yield misc_1.Misc.openContextMenuItem(treeSchema, constants.addSchemaToREST, constants.checkWebViewDialog);\n        yield db_1.Database.setRestSchema(crudSchema);\n        yield misc_1.driver.switchTo().defaultContent();\n        yield misc_1.Misc.getNotification(\"The MRS schema has been added successfully.\");\n        yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n        const treeService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, `${crudService.servicePath} (${crudService.settings.hostNameFilter})`, true);\n        yield treeService.expand();\n        (0, chai_1.expect)(yield misc_1.Misc.existsTreeElement(constants.dbTreeSection, `${crudSchema.restSchemaPath} (${crudSchema.settings.schemaName})`)).to.exist;\n        yield (yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"Tables\")).expand();\n        const treeTable = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, crudObject.restObjectPath.replace(\"/\", \"\"));\n        yield misc_1.Misc.openContextMenuItem(treeTable, constants.addDBObjToREST, constants.checkWebViewDialog);\n        yield db_1.Database.setRestObject(crudObject);\n        yield misc_1.driver.switchTo().defaultContent();\n        let ntf = `The MRS Database Object ${crudObject.restObjectPath.replace(\"/\", \"\")}`;\n        ntf += ` was updated successfully`;\n        yield misc_1.Misc.getNotification(ntf);\n        yield misc_1.driver.wait(until_1.Until.isNotLoading(constants.dbTreeSection), constants.explicitWait * 2, `${constants.dbTreeSection} is still loading`);\n        // Start Router\n        treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n        yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.startRouter, undefined);\n        yield misc_1.Misc.waitForTerminalText(\"Start accepting connections for routing routing:bootstrap_x_rw listening on\", constants.explicitWait * 2);\n        yield misc_1.driver.wait(() => __awaiter(this, void 0, void 0, function* () {\n            const treeRouter = yield misc_1.Misc.getRouter(globalConn.caption);\n            return (yield misc_1.Misc.isRouterActive(treeRouter)) === true;\n        }), constants.explicitWait * 2, `Router did not became active`);\n        //crudService.settings.hostNameFilter = \"127.0.0.1:8443\";\n        //baseUrl = baseUrl.replace();\n    }\n    catch (e) {\n        yield misc_1.Misc.processFailure(this);\n        throw e;\n    }\n});",
                  "err": {},
                  "uuid": "759cbb49-a874-4475-8721-c1747388063d",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [
                {
                  "title": "\"after all\" hook in \"CRUD Operations\"",
                  "fullTitle": "MySQL REST Service CRUD Operations \"after all\" hook in \"CRUD Operations\"",
                  "timedOut": false,
                  "duration": 965,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const treeMySQLRESTService = yield misc_1.Misc.getTreeElement(constants.dbTreeSection, \"MySQL REST Service\");\n            yield misc_1.Misc.openContextMenuItem(treeMySQLRESTService, constants.killRouters, undefined);\n        })",
                  "err": {},
                  "uuid": "994b0c88-d971-484d-8b1d-2061a725651e",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"after each\" hook in \"CRUD Operations\"",
                  "fullTitle": "MySQL REST Service CRUD Operations \"after each\" hook in \"CRUD Operations\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    if (this.currentTest.state === \"failed\") {\n        if (response) {\n            console.log(\"---CURL RESULT---\");\n            console.log(response.status);\n            console.log(response.json());\n        }\n        yield misc_1.Misc.processFailure(this);\n    }\n    response = undefined;\n});",
                  "err": {},
                  "uuid": "f501afaa-7a8c-43f8-afbc-10b1bba71005",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "tests": [
                {
                  "title": "Get schema metadata",
                  "fullTitle": "MySQL REST Service CRUD Operations Get schema metadata",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            response = yield fetch(`${baseUrl}/metadata-catalog`);\n            const data = yield response.json();\n            (0, chai_1.expect)(response.ok).to.be.true;\n            (0, chai_1.expect)(data.items).to.exist;\n        })",
                  "err": {},
                  "uuid": "cf35b3b2-86f2-43f4-a1db-c49dcb3a55ee",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get object metadata",
                  "fullTitle": "MySQL REST Service CRUD Operations Get object metadata",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            response = yield fetch(`${baseUrl}/metadata-catalog/${crudObject.restObjectPath.replace(\"/\", \"\")}`);\n            const data = yield response.json();\n            (0, chai_1.expect)(response.ok).to.be.true;\n            (0, chai_1.expect)(data.name).equals(`/${crudObject.restObjectPath.replace(\"/\", \"\")}`);\n            (0, chai_1.expect)(data.primaryKey[0]).to.equals(\"actor_id\");\n        })",
                  "err": {},
                  "uuid": "ba8f9258-3fe9-4848-97f9-0acffdd90dc9",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Get object data",
                  "fullTitle": "MySQL REST Service CRUD Operations Get object data",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            response = yield fetch(`${baseUrl}/${crudObject.restObjectPath.replace(\"/\", \"\")}`);\n            const data = yield response.json();\n            (0, chai_1.expect)(response.ok).to.be.true;\n            (0, chai_1.expect)(data.items[0].firstName).to.equals(\"PENELOPE\");\n        })",
                  "err": {},
                  "uuid": "cf0796e8-03c8-4fa9-a739-a40ce5b528fd",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Insert table row",
                  "fullTitle": "MySQL REST Service CRUD Operations Insert table row",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            response = yield fetch(`${baseUrl}/${crudObject.restObjectPath.replace(\"/\", \"\")}`, {\n                method: \"post\",\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                body: JSON.stringify({ firstName: \"Doctor\", lastName: \"Testing\" }),\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                headers: { \"Content-Type\": \"application/json\" },\n            });\n            const data = yield response.json();\n            (0, chai_1.expect)(response.ok).to.be.true;\n            actorId = data.actorId;\n            (0, chai_1.expect)(data.actorId).to.exist;\n            (0, chai_1.expect)(data.firstName).to.equals(\"Doctor\");\n            (0, chai_1.expect)(data.lastName).to.equals(\"Testing\");\n            (0, chai_1.expect)(data.lastUpdate).to.exist;\n        })",
                  "err": {},
                  "uuid": "0113ef3c-9097-4026-881e-da4e98bac2a5",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update table row",
                  "fullTitle": "MySQL REST Service CRUD Operations Update table row",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            response = yield fetch(`${baseUrl}/${crudObject.restObjectPath.replace(\"/\", \"\")}/${actorId}`, {\n                method: \"put\",\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                body: JSON.stringify({ firstName: \"Mister\", lastName: \"Test\", lastUpdate: \"2023-06-23 13:32:54\" }),\n                // eslint-disable-next-line @typescript-eslint/naming-convention\n                headers: { \"Content-Type\": \"application/json\" },\n            });\n            const data = yield response.json();\n            (0, chai_1.expect)(actorId).to.exist;\n            (0, chai_1.expect)(data.firstName).to.equals(\"Mister\");\n            (0, chai_1.expect)(data.lastName).to.equals(\"Test\");\n            (0, chai_1.expect)(data.lastUpdate).to.exist;\n        })",
                  "err": {},
                  "uuid": "e183de2f-de14-4784-98a4-3b4ab266b1b5",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete table row",
                  "fullTitle": "MySQL REST Service CRUD Operations Delete table row",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const query = `\"actorId\":${actorId}`;\n            response = yield fetch(`${baseUrl}/${crudObject.restObjectPath.replace(\"/\", \"\")}?q={${query}}`, { method: \"delete\" });\n            const data = yield response.json();\n            (0, chai_1.expect)(response.ok).to.be.true;\n            (0, chai_1.expect)(data.itemsDeleted).to.equals(1);\n        })",
                  "err": {},
                  "uuid": "893df85a-34c3-48a3-9337-e66b7aaf51c3",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Filter object data",
                  "fullTitle": "MySQL REST Service CRUD Operations Filter object data",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "__awaiter(void 0, void 0, void 0, function* () {\n            const query = `\"firstName\":\"PENELOPE\"`;\n            response = yield fetch(`${baseUrl}/${crudObject.restObjectPath.replace(\"/\", \"\")}?q={${query}}`);\n            const data = yield response.json();\n            (0, chai_1.expect)(response.ok).to.be.true;\n            (0, chai_1.expect)(data.items).to.exist;\n        })",
                  "err": {},
                  "uuid": "c6f58a84-2a9c-4d60-9db4-902f14ee069a",
                  "parentUUID": "3c0e3a92-8698-446c-ba62-50efc841d7af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf35b3b2-86f2-43f4-a1db-c49dcb3a55ee",
                "ba8f9258-3fe9-4848-97f9-0acffdd90dc9",
                "cf0796e8-03c8-4fa9-a739-a40ce5b528fd",
                "0113ef3c-9097-4026-881e-da4e98bac2a5",
                "e183de2f-de14-4784-98a4-3b4ab266b1b5",
                "893df85a-34c3-48a3-9337-e66b7aaf51c3",
                "c6f58a84-2a9c-4d60-9db4-902f14ee069a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 63,
              "root": false,
              "rootEmpty": false,
              "_timeout": 250000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 250000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 250000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "showSkipped": true,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}