export interface IMdsProfileData {
    fingerprint: string;
    keyFile: string;
    profile: string;
    region: string;
    tenancy: string;
    user: string;
    isCurrent: boolean;
}

export interface IMdsChatStatus {
    heatwaveSupport: boolean;
    localModelSupport: boolean;
    languageSupport: boolean;
}

export interface IMdsChatConfigure {
    success: boolean;
    error: string;
}

export interface IMdsChatResult {
    data: IMdsChatData;
}

export interface IMdsChatData {
    // Input fields, only set by client.

    /** If set, the search for vector tables is limited to this database schema. */
    schemaName?: string;

    /** If set to true, a stream of tokens is sent. Otherwise the full response is returned at once. */
    stream?: boolean;

    /** Whether status should be reported during execution. */
    reportProgress?: boolean;

    /** If set to true, the GenAI component is not called. Used to test the vector store part. */
    skipGenerate?: boolean;

    /** Return queried context that was passed to the GenAI component. */
    returnPrompt?: boolean;

    /** Setting the parameter to true indicates that this request ist a re-run of a previous query. */
    reRun?: boolean;

    /** The preamble to pass to the LLM. */
    preamble?: string;

    /** Whether the list of tables should remain fixed. */
    lockTableList?: boolean;

    /** Language options for use prompts and answers. */
    languageOptions?: IMdsChatLanguageOptions;

    // Input/Output fields, that can be set by both, the client or the server.

    /** A GUID that uniquely identifies the chat conversation. */
    conversationId?: string;

    /** A GUID that uniquely identifies the specific chat query of the chat conversation. */
    chatQueryId?: string;

    /** The history of the current chat. */
    chatHistory?: IMdsChatHistoryEntry[];

    /** The list of database schema tables considered for document lookup. */
    tables?: IMdsChatTable[];

    /** Used to limit the possible documents in a table based on metadata. */
    tableMetadata? : IMdsChatTableMetadata[];

    /** The list of documents that were used to compose the response. */
    documents?: IMdsChatDocument[];

    /** The list of document ids to include in the response. */
    includeDocumentUris?: string[];

    /** The number of document segments to be used. */
    retrieveTopK?: number;

    /** the task to be executed. Inferred from the prompt if not given or AUTO. */
    task?: string;

    /** Model options specific to the LLM. */
    modelOptions?: IMdsChatModelOptions;

    // Output fields, that can only be set by the server

    /** A token of the stream of tokens */
    token?: string;

    /** The full response text consisting of all tokens */
    response?: string;

    /** Additional information text that should be displayed in the status bar to update the user. */
    info?: string;

    /** The error message, if an error has occurred. */
    error?: string;

    /** The actual prompt sent to the GenAI component, if returnExecutedPrompt was true. */
    prompt?: string;

    /** Usage information about used tokens if available from the LLM. */
    usage?: IMdsChatUsage;

    /** Set to true when this is the last response message to the request. */
    requestCompleted?: boolean;
}

export interface IMdsChatLanguageOptions {
    language?: string;
    translateUserPrompt?: boolean;
    translateResponse?: boolean;

    /** the id of the model to be used for GenAI translations. */
    modelId?: string;
}

export interface IMdsChatUsageVersion {
    version: string;
}

export interface IMdsChatUsageUnits {
    inputTokens: number;
    outputTokens: number;
}

export interface IMdsChatUsage {
    /** The version of the chat API. */
    apiVersion: IMdsChatUsageVersion;

    /** The used input- and output tokens. */
    usedUnits: IMdsChatUsageUnits;
}

export interface IMdsChatHistoryEntry {
    /** The id of the chat query that produced this message entry. */
    chatQueryId: string;

    /** The message the user sent. */
    userMessage: string;

    /** The message the chatbot replied. */
    chatBotMessage: string;
}

export interface IMdsChatDocument {
    /** The ID of the document, e.g. the full bucket file path. */
    id: string;

    /** The title of the document. */
    title: string;

    /** A segment of the document. */
    segment: string;
}

export interface IMdsChatModelOptions {
    /** The context used in the prompt to augment the query and guide the generation of the LLM. */
    context?: string;

    /** the id of the model to be used for GenAI. */
    modelId?: string;

    /** A non-negative float that tunes the degree of randomness in generation. */
    temperature?: number;

    /** Denotes the maximum number of tokens to predict per generation. */
    maxTokens?: number;

    /** Ensures only the top k most likely tokens are considered for text generation at each step. */
    topK?: number;

    /** Ensures that only the most likely tokens with the sum p of their probabilities are considered. */
    topP?: number;

    /** Assigns a penalty when a token appears frequently. */
    repeatPenalty?: number;

    /** Assigns a penalty to each token when it appears in the output. */
    tokenLikelihoods?: number;

    /** A list of characters that tells the model when to stop the generated output. */
    stopSequences?: string[];

    /** The language code of the language to use. */
    language?: string;
}

export interface IMdsChatTable {
    /** The name of the database schema. */
    schemaName: string;

    /** The name of the table. */
    tableName: string;

    /** True if the table has vector embeddings, false if it is a relational table. */
    vectorEmbeddings: boolean;

    /** Actual SQL query used for that table. */
    query: string;
}

export interface IMdsChatTableMetadata {
    /* The name of the field as stored in the metadata, e.g. title. */
    metadataField: string;

    /** The filter to use, e.g. LIKE, <, >, =, etc. */
    filterOperator: string;

    /** The value used for filtering, e.g. MySQL%, 2024-01-25, etc. */
    filterValue: string;
}

export interface IMdsCreateBucketObjectsResult {
    data: IMdsCreateBucketObjectsData;
}

export interface IMdsCreateBucketObjectsData {
    filePath?: string;
    bytesUploaded?: number;
    totalFileSize?: number;
    error?: string;
}

export interface IMdsLakehouseStatus {
    memoryStatus?: IMdsLakehouseMemoryStatus;
    tableStatus?: IMdsLakehouseTablesStatus;
    taskStatus?: IMdsLakehouseTasksStatus;
}

export interface IMdsLakehouseTablesStatus {
    hash: string;
    tables: IMdsLakehouseTableStatus[];
}

export interface IMdsLakehouseTableStatus {
    id: string;
    schemaName: string;
    tableName: string;
    loaded: boolean;
    progress: number;
    comment: string;
    rows: number;
    dataLength: number;
    lastChange: string;
}

export interface IMdsLakehouseTasksStatus {
    hash: string;
    tasks: IMdsLakehouseTaskStatus[];
}

export interface IMdsLakehouseTaskStatus {
    id: string;
    title: string;
    logTime: string;
    status: string;
    statusMessage: string;
    progress: number;
    startingTime: string;
    estimatedCompletionTime: string;
    estimatedRemainingTime: number;
}

export interface IMdsLakehouseMemoryStatus {
    memoryUsed: number;
    memoryTotal: number;
}

export interface IProtocolMdsResults {
    [ShellAPIMds.MdsGetRegions]: {};
    [ShellAPIMds.MdsListConfigProfiles]: { result: IMdsProfileData[]; };
    [ShellAPIMds.MdsSetDefaultConfigProfile]: {};
    [ShellAPIMds.MdsGetDefaultConfigProfile]: {};
    [ShellAPIMds.MdsSetCurrentCompartment]: {};
    [ShellAPIMds.MdsGetCurrentCompartmentId]: { result: string | undefined};
    [ShellAPIMds.MdsSetCurrentBastion]: {};
    [ShellAPIMds.MdsGetAvailabilityDomain]: {};
    [ShellAPIMds.MdsListCompartments]: { result: ICompartment[]; };
    [ShellAPIMds.MdsGetCompartment]: { result: ICompartment; };
    [ShellAPIMds.MdsGetCompartmentById]: { result: ICompartment | undefined; };
    [ShellAPIMds.MdsListComputeInstances]: { result: IComputeInstance[]; };
    [ShellAPIMds.MdsGetComputeInstance]: {};
    [ShellAPIMds.MdsListComputeShapes]: { result: IComputeShape[]; };
    [ShellAPIMds.MdsDeleteComputeInstance]: {};
    [ShellAPIMds.MdsUtilHeatWaveLoadData]: {};
    [ShellAPIMds.MdsUtilCreateEndpoint]: {};
    [ShellAPIMds.MdsGetDbSystemConfiguration]: {};
    [ShellAPIMds.MdsListDbSystemShapes]: { result: IMySQLDbSystemShapeSummary[]; };
    [ShellAPIMds.MdsListDbSystems]: { result: IMySQLDbSystem[]; };
    [ShellAPIMds.MdsGetDbSystem]: { result: IMySQLDbSystem; };
    [ShellAPIMds.MdsGetDbSystemId]: {};
    [ShellAPIMds.MdsUpdateDbSystem]: {};
    [ShellAPIMds.MdsCreateDbSystem]: {};
    [ShellAPIMds.MdsDeleteDbSystem]: {};
    [ShellAPIMds.MdsStopDbSystem]: {};
    [ShellAPIMds.MdsStartDbSystem]: {};
    [ShellAPIMds.MdsRestartDbSystem]: {};
    [ShellAPIMds.MdsStopHeatWaveCluster]: {};
    [ShellAPIMds.MdsStartHeatWaveCluster]: {};
    [ShellAPIMds.MdsRestartHeatWaveCluster]: {};
    [ShellAPIMds.MdsCreateHeatWaveCluster]: {};
    [ShellAPIMds.MdsUpdateHeatWaveCluster]: {};
    [ShellAPIMds.MdsDeleteHeatWaveCluster]: {};
    [ShellAPIMds.MdsListLoadBalancers]: { result: LoadBalancer[]; };
    [ShellAPIMds.MdsListBastions]: { result: IBastionSummary[]; };
    [ShellAPIMds.MdsGetBastion]: { result: IBastionSummary; };
    [ShellAPIMds.MdsCreateBastion]: { result: IBastionSummary; };
    [ShellAPIMds.MdsDeleteBastion]: {};
    [ShellAPIMds.MdsListBastionSessions]: {};
    [ShellAPIMds.MdsGetBastionSession]: {};
    [ShellAPIMds.MdsCreateBastionSession]: { result: IBastionSession; };
    [ShellAPIMds.MdsDeleteBastionSession]: {};
    [ShellAPIMds.MdsListBuckets]: { result: IBucketSummary[]; }
    [ShellAPIMds.MdsListBucketObjects]: { result: IBucketListObjects; }
    [ShellAPIMds.MdsCreateBucketObjects]: { result: IMdsCreateBucketObjectsResult; };
    [ShellAPIMds.MdsDeleteBucketObject]: {};
    [ShellAPIMds.MdsGenaiStatus]: { result: IMdsChatStatus; };
    [ShellAPIMds.MdsGenaiConfigure]: { result: IMdsChatConfigure; };
    [ShellAPIMds.MdsGenaiChat]: { result: IMdsChatResult; };
    [ShellAPIMds.MdsGenaiLakehouseStatus]: { result: IMdsLakehouseStatus; };
    [ShellAPIMds.MdsGenaiSaveChatOptions]: {};
    [ShellAPIMds.MdsGenaiLoadChatOptions]: { result: IMdsChatData };
}