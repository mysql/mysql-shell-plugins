// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Application tests Application readiness 1`] = `
<App>
  <ErrorBoundary>
    <LoginPage>
      <Container
        id="loginDialog"
        orientation="column"
      >
        <div
          className="msg container fixedScrollbar"
          id="loginDialog"
          style={
            {
              "alignItems": undefined,
              "flexDirection": "column",
              "flexWrap": undefined,
              "justifyContent": undefined,
            }
          }
        >
          <Icon
            disabled={false}
            id="loginDialogSakilaLogo"
            src="module-shell.svg"
          >
            <div
              className="msg icon"
              id="loginDialogSakilaLogo"
              style={
                {
                  "WebkitMaskImage": "url("module-shell.svg")",
                  "backgroundColor": undefined,
                  "height": undefined,
                  "maskImage": "url("module-shell.svg")",
                  "width": undefined,
                }
              }
            />
          </Icon>
          <Container
            id="heading"
            orientation="column"
          >
            <div
              className="msg container fixedScrollbar"
              id="heading"
              style={
                {
                  "alignItems": undefined,
                  "flexDirection": "column",
                  "flexWrap": undefined,
                  "justifyContent": undefined,
                }
              }
            >
              <Label
                id="headingLabel"
              >
                <label
                  className="msg label"
                  data-tooltip="expand"
                  id="headingLabel"
                  style={{}}
                >
                  MySQL Shell
                </label>
              </Label>
              <Label
                id="headingSubLabel"
              >
                <label
                  className="msg label"
                  data-tooltip="expand"
                  id="headingSubLabel"
                  style={{}}
                >
                  Welcome to the 
                  MySQL Shell Workbench
                  .
                  <br />
                  Please provide your 
                  MySQL Shell Workbench
                   credentials to log into the shell interface.
                </label>
              </Label>
            </div>
          </Container>
          <Container
            id="loginDialogLinks"
            mainAlignment="center"
            orientation="row"
            wrap="wrap"
          >
            <div
              className="msg container fixedScrollbar"
              id="loginDialogLinks"
              style={
                {
                  "alignItems": undefined,
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "justifyContent": "center",
                }
              }
            >
              <HelpLinkList
                helpUrlMap={
                  Map {
                    "Learn More" => "https://blogs.oracle.com/mysql/post/introducing-mysql-shell-for-vs-code",
                    "Documentation" => "https://dev.mysql.com/doc/mysql-shell-gui/en/",
                  }
                }
              >
                <a
                  href="https://blogs.oracle.com/mysql/post/introducing-mysql-shell-for-vs-code"
                  key="Learn More"
                  rel="noopener noreferrer"
                  tabIndex={0}
                  target="_blank"
                >
                  Learn More &gt;
                </a>
                <a
                  href="https://dev.mysql.com/doc/mysql-shell-gui/en/"
                  key="Documentation"
                  rel="noopener noreferrer"
                  tabIndex={0}
                  target="_blank"
                >
                  Documentation &gt;
                </a>
              </HelpLinkList>
            </div>
          </Container>
          <Grid
            columnGap={8}
            columns={
              [
                220,
                40,
              ]
            }
            id="loginDialogControls"
          >
            <div
              className="msg grid"
              id="loginDialogControls"
              style={
                {
                  "columnGap": "8px",
                  "gridTemplateColumns": "220px 40px",
                  "rowGap": undefined,
                }
              }
            >
              <GridCell
                orientation="column"
              >
                <Container
                  className="msg gridCell"
                  orientation="column"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "column",
                        "flexWrap": undefined,
                        "justifyContent": undefined,
                      }
                    }
                  >
                    <Input
                      id="loginUsername"
                      onChange={[Function]}
                      onConfirm={[Function]}
                      placeholder="Username"
                      spellCheck={false}
                      value=""
                    >
                      <input
                        className="msg input"
                        id="loginUsername"
                        onKeyDown={[Function]}
                        oninput={[Function]}
                        placeholder="Username"
                        spellCheck={false}
                        style={
                          {
                            "textAlign": undefined,
                          }
                        }
                        type="text"
                        value=""
                      />
                    </Input>
                  </div>
                </Container>
              </GridCell>
              <GridCell>
                <Container
                  className="msg gridCell"
                  orientation="row"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "row",
                        "flexWrap": undefined,
                        "justifyContent": undefined,
                      }
                    }
                  />
                </Container>
              </GridCell>
              <GridCell
                orientation="column"
              >
                <Container
                  className="msg gridCell"
                  orientation="column"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "column",
                        "flexWrap": undefined,
                        "justifyContent": undefined,
                      }
                    }
                  >
                    <Input
                      id="loginPassword"
                      onChange={[Function]}
                      onConfirm={[Function]}
                      password={true}
                      placeholder="Password"
                      spellCheck={true}
                      value=""
                    >
                      <input
                        className="msg input"
                        id="loginPassword"
                        onKeyDown={[Function]}
                        oninput={[Function]}
                        placeholder="Password"
                        spellCheck={true}
                        style={
                          {
                            "textAlign": undefined,
                          }
                        }
                        type="password"
                        value=""
                      />
                    </Input>
                  </div>
                </Container>
              </GridCell>
              <GridCell
                mainAlignment="center"
                orientation="column"
              >
                <Container
                  className="msg gridCell"
                  mainAlignment="center"
                  orientation="column"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "column",
                        "flexWrap": undefined,
                        "justifyContent": "center",
                      }
                    }
                  >
                    <Button
                      id="loginButton"
                      onClick={[Function]}
                      round={true}
                    >
                      <div
                        className="msg button round"
                        id="loginButton"
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        role="button"
                        style={
                          {
                            "flexDirection": undefined,
                          }
                        }
                        tabIndex={0}
                      >
                        <Icon
                          disabled={false}
                          src="chevron-right.svg"
                        >
                          <div
                            className="msg icon"
                            style={
                              {
                                "WebkitMaskImage": "url("chevron-right.svg")",
                                "backgroundColor": undefined,
                                "height": undefined,
                                "maskImage": "url("chevron-right.svg")",
                                "width": undefined,
                              }
                            }
                          />
                        </Icon>
                      </div>
                    </Button>
                  </div>
                </Container>
              </GridCell>
            </div>
          </Grid>
          <Label
            id="loginDialogSubtext"
          >
            <label
              className="msg label"
              data-tooltip="expand"
              id="loginDialogSubtext"
              style={{}}
            >
              If you do not have a 
              MySQL Shell Workbench
               account yet, please
              <br />
              ask your administrator to have one created for you.
            </label>
          </Label>
          <div
            className="copyright"
          />
        </div>
      </Container>
    </LoginPage>
    <MessagePanel>
      <Dialog
        actions={
          {
            "end": [
              <Button
                caption="Close"
                onClick={[Function]}
              />,
            ],
          }
        }
        caption={
          <g>
            <Icon
              disabled={false}
              src={126}
            />
            <Label>
              
            </Label>
          </g>
        }
        className="msg errorPanel"
        container={
          <body
            theme="dark"
          />
        }
        content={
          <Container
            orientation="column"
          >
            
          </Container>
        }
        onClose={[Function]}
      >
        <Portal
          container={
            <body
              theme="dark"
            />
          }
          onClose={[Function]}
          onOpen={[Function]}
        />
      </Dialog>
    </MessagePanel>
    <TooltipProvider
      showDelay={200}
    />
    <NotificationCenter>
      <Container
        className="msg notificationCenter"
        innerRef={
          {
            "current": <div
              class="msg container fixedScrollbar notificationCenter"
              style="flex-direction: column;"
            />,
          }
        }
        orientation="column"
      >
        <div
          className="msg container fixedScrollbar notificationCenter"
          style={
            {
              "alignItems": undefined,
              "flexDirection": "column",
              "flexWrap": undefined,
              "justifyContent": undefined,
            }
          }
        />
      </Container>
    </NotificationCenter>
    <StatusBar>
      <Container
        className="msg statusbar verticalCenterContent"
        orientation="row"
      >
        <div
          className="msg container fixedScrollbar statusbar verticalCenterContent"
          style={
            {
              "alignItems": undefined,
              "flexDirection": "row",
              "flexWrap": undefined,
              "justifyContent": undefined,
            }
          }
        >
          <Container
            className="leftItems"
            crossAlignment="stretch"
            fixedScrollbars={false}
            orientation="row"
          >
            <div
              className="msg container leftItems"
              style={
                {
                  "alignItems": "stretch",
                  "flexDirection": "row",
                  "flexWrap": undefined,
                  "justifyContent": undefined,
                }
              }
            />
          </Container>
          <Container
            className="rightItems"
            crossAlignment="stretch"
            fixedScrollbars={false}
            orientation="row"
          >
            <div
              className="msg container rightItems"
              style={
                {
                  "alignItems": "stretch",
                  "flexDirection": "row",
                  "flexWrap": undefined,
                  "justifyContent": undefined,
                }
              }
            >
              <Button
                className="statusbarItem"
                data-command="notifications:showHistory"
                disabled={false}
                id="showNotificationHistory"
                imageOnly={false}
                key="statusbarItem0"
                onClick={[Function]}
                style={
                  {
                    "backgroundColor": undefined,
                    "color": undefined,
                  }
                }
                title="No Notifications"
              >
                <div
                  className="msg button statusbarItem"
                  data-command="notifications:showHistory"
                  id="showNotificationHistory"
                  onClick={[Function]}
                  onMouseDown={[Function]}
                  role="button"
                  style={
                    {
                      "backgroundColor": undefined,
                      "color": undefined,
                    }
                  }
                  tabIndex={0}
                  title="No Notifications"
                >
                  <span
                    className="codicon codicon-bell"
                    key="icon-0-0"
                  />
                </div>
              </Button>
            </div>
          </Container>
        </div>
      </Container>
    </StatusBar>
    <ProfileSelector>
      <ValueEditDialog
        id="profileCreating"
        onClose={[Function]}
        onValidate={[Function]}
      >
        <Dialog
          actions={
            {
              "begin": [],
              "end": [
                <Button
                  caption="OK"
                  disabled={false}
                  id="ok"
                  onClick={[Function]}
                />,
                <Button
                  caption="Cancel"
                  id="cancel"
                  onClick={[Function]}
                />,
              ],
            }
          }
          caption={
            <g>
              <Icon
                disabled={false}
                src={391}
              />
              <Label />
            </g>
          }
          className="msg valueEditDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Grid
              columnGap={16}
              columns={8}
              id="contentGrid"
              rowGap={16}
            />
          }
          id="profileCreating"
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            id="profileCreating"
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
        <Menu
          onItemClick={[Function]}
          orientation="column"
          placement="right-start"
        />
      </ValueEditDialog>
      <ConfirmDialog
        id="confirmDeleteDialog"
        onClose={[Function]}
      >
        <Dialog
          actions={
            {
              "end": [],
            }
          }
          caption={
            <g>
              <Icon
                disabled={false}
                src={278}
              />
              <Label>
                Confirm
              </Label>
            </g>
          }
          className="msg confirmDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Container
              orientation="column"
            >
              
              <Container
                className="description"
                orientation="column"
              />
            </Container>
          }
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
      </ConfirmDialog>
      <Menu
        id="tileActionMenu"
        onItemClick={[Function]}
        orientation="column"
        placement="top-start"
      />
    </ProfileSelector>
    <ColorPopup>
      <Popup
        className="msg colorPopup"
        onOpen={[Function]}
        orientation="column"
        pinned={false}
        placement="bottom"
        showArrow={true}
      >
        <Portal
          className="popupPortal"
          onClose={[Function]}
          onOpen={[Function]}
        />
      </Popup>
    </ColorPopup>
  </ErrorBoundary>
</App>
`;
