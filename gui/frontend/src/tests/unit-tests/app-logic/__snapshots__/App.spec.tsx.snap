// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Application tests Application readiness 1`] = `
<App>
  <ErrorBoundary>
    <LoginPage>
      <Container
        id="loginDialog"
        orientation="column"
      >
        <div
          className="msg container fixedScrollbar"
          id="loginDialog"
          style={
            {
              "alignItems": undefined,
              "flexDirection": "column",
              "flexWrap": undefined,
              "justifyContent": undefined,
            }
          }
        >
          <Icon
            disabled={false}
            id="loginDialogSakilaLogo"
            src="module-shell.svg"
          >
            <div
              className="msg icon"
              id="loginDialogSakilaLogo"
              style={
                {
                  "WebkitMaskImage": "url(module-shell.svg)",
                  "backgroundColor": undefined,
                  "height": undefined,
                  "maskImage": "url(module-shell.svg)",
                  "width": undefined,
                }
              }
            />
          </Icon>
          <Container
            id="heading"
            orientation="column"
          >
            <div
              className="msg container fixedScrollbar"
              id="heading"
              style={
                {
                  "alignItems": undefined,
                  "flexDirection": "column",
                  "flexWrap": undefined,
                  "justifyContent": undefined,
                }
              }
            >
              <Label
                id="headingLabel"
              >
                <label
                  className="msg label"
                  data-tooltip="expand"
                  id="headingLabel"
                  style={{}}
                >
                  MySQL Shell
                </label>
              </Label>
              <Label
                id="headingSubLabel"
              >
                <label
                  className="msg label"
                  data-tooltip="expand"
                  id="headingSubLabel"
                  style={{}}
                >
                  Welcome to the MySQL Shell GUI.
                  <br />
                  Please provide your MySQL Shell GUI credentials to log into the shell interface.
                </label>
              </Label>
            </div>
          </Container>
          <Container
            id="loginDialogLinks"
            mainAlignment="center"
            orientation="row"
            wrap="wrap"
          >
            <div
              className="msg container fixedScrollbar"
              id="loginDialogLinks"
              style={
                {
                  "alignItems": undefined,
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "justifyContent": "center",
                }
              }
            >
              <a
                href="http://localhost:3001/#"
                key="Learn More >"
              >
                Learn More &gt;
              </a>
              <a
                href="http://localhost:3001/#"
                key="Browse Tutorial >"
              >
                Browse Tutorial &gt;
              </a>
              <a
                href="http://localhost:3001/#"
                key="Read Docs >"
              >
                Read Docs &gt;
              </a>
            </div>
          </Container>
          <Grid
            columnGap={8}
            columns={
              [
                220,
                40,
              ]
            }
            id="loginDialogControls"
          >
            <div
              className="msg grid"
              id="loginDialogControls"
              style={
                {
                  "columnGap": "8px",
                  "gridTemplateColumns": "220px 40px",
                  "rowGap": undefined,
                }
              }
            >
              <GridCell
                orientation="column"
              >
                <Container
                  className="msg gridCell"
                  orientation="column"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "column",
                        "flexWrap": undefined,
                        "justifyContent": undefined,
                      }
                    }
                  >
                    <Input
                      id="loginUsername"
                      onChange={[Function]}
                      onConfirm={[Function]}
                      placeholder="Username"
                      spellCheck={false}
                      value=""
                    >
                      <input
                        className="msg input"
                        id="loginUsername"
                        onKeyDown={[Function]}
                        oninput={[Function]}
                        placeholder="Username"
                        spellCheck={false}
                        style={
                          {
                            "textAlign": undefined,
                          }
                        }
                        type="text"
                        value=""
                      />
                    </Input>
                  </div>
                </Container>
              </GridCell>
              <GridCell>
                <Container
                  className="msg gridCell"
                  orientation="row"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "row",
                        "flexWrap": undefined,
                        "justifyContent": undefined,
                      }
                    }
                  />
                </Container>
              </GridCell>
              <GridCell
                orientation="column"
              >
                <Container
                  className="msg gridCell"
                  orientation="column"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "column",
                        "flexWrap": undefined,
                        "justifyContent": undefined,
                      }
                    }
                  >
                    <Input
                      id="loginPassword"
                      onChange={[Function]}
                      onConfirm={[Function]}
                      password={true}
                      placeholder="Password"
                      spellCheck={true}
                      value=""
                    >
                      <input
                        className="msg input"
                        id="loginPassword"
                        onKeyDown={[Function]}
                        oninput={[Function]}
                        placeholder="Password"
                        spellCheck={true}
                        style={
                          {
                            "textAlign": undefined,
                          }
                        }
                        type="password"
                        value=""
                      />
                    </Input>
                  </div>
                </Container>
              </GridCell>
              <GridCell
                mainAlignment="center"
                orientation="column"
              >
                <Container
                  className="msg gridCell"
                  mainAlignment="center"
                  orientation="column"
                  style={{}}
                >
                  <div
                    className="msg container fixedScrollbar gridCell"
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "column",
                        "flexWrap": undefined,
                        "justifyContent": "center",
                      }
                    }
                  >
                    <Button
                      id="loginButton"
                      onClick={[Function]}
                      round={true}
                    >
                      <div
                        className="msg button round"
                        draggable={true}
                        id="loginButton"
                        onClick={[Function]}
                        onMouseDown={[Function]}
                        role="button"
                        style={
                          {
                            "flexDirection": undefined,
                          }
                        }
                        tabIndex={0}
                      >
                        <Icon
                          disabled={false}
                          src="chevron-right.svg"
                        >
                          <div
                            className="msg icon"
                            style={
                              {
                                "WebkitMaskImage": "url(chevron-right.svg)",
                                "backgroundColor": undefined,
                                "height": undefined,
                                "maskImage": "url(chevron-right.svg)",
                                "width": undefined,
                              }
                            }
                          />
                        </Icon>
                      </div>
                    </Button>
                  </div>
                </Container>
              </GridCell>
            </div>
          </Grid>
          <Label
            id="loginDialogSubtext"
          >
            <label
              className="msg label"
              data-tooltip="expand"
              id="loginDialogSubtext"
              style={{}}
            >
              If you do not have an MySQL Shell GUI account yet, please
              <br />
              ask your administrator to have one created for you.
            </label>
          </Label>
          <div
            className="copyright"
          />
        </div>
      </Container>
    </LoginPage>
    <ErrorPanel>
      <Dialog
        actions={
          {
            "end": [
              <Button
                caption="Close"
                onClick={[Function]}
              />,
            ],
          }
        }
        caption={
          <p>
            <Icon
              disabled={false}
              src={124}
            />
            <Label>
              
            </Label>
          </p>
        }
        className="msg errorPanel"
        container={
          <body
            theme="dark"
          />
        }
        content={
          <Container
            orientation="column"
          >
            
          </Container>
        }
      >
        <Portal
          container={
            <body
              theme="dark"
            />
          }
          onClose={[Function]}
          onOpen={[Function]}
        />
      </Dialog>
    </ErrorPanel>
    <TooltipProvider
      showDelay={200}
    />
    <Statusbar
      items={
        [
          {
            "id": "profileTitle",
            "text": "Profile:",
            "type": 0,
            "visible": false,
          },
          {
            "choices": [],
            "commandId": "openPopupMenu",
            "id": "profileChoice",
            "tooltip": "Change profile",
            "type": 1,
            "visible": false,
          },
          {
            "id": "details",
            "rightAlign": true,
            "standout": false,
            "type": 0,
          },
          {
            "id": "editorLanguage",
            "rightAlign": true,
            "type": 0,
            "visible": false,
          },
          {
            "id": "editorEOL",
            "rightAlign": true,
            "type": 0,
            "visible": false,
          },
          {
            "id": "editorIndent",
            "rightAlign": true,
            "type": 0,
            "visible": false,
          },
          {
            "commandId": "scripting:editor.action.gotoLine",
            "id": "editorPosition",
            "rightAlign": true,
            "type": 1,
            "visible": false,
          },
        ]
      }
    >
      <Container
        className="msg statusbar verticalCenterContent"
        orientation="row"
      >
        <div
          className="msg container fixedScrollbar statusbar verticalCenterContent"
          style={
            {
              "alignItems": undefined,
              "flexDirection": "row",
              "flexWrap": undefined,
              "justifyContent": undefined,
            }
          }
        >
          <Container
            className="leftItems"
            crossAlignment="stretch"
            orientation="row"
          >
            <div
              className="msg container fixedScrollbar leftItems"
              style={
                {
                  "alignItems": "stretch",
                  "flexDirection": "row",
                  "flexWrap": undefined,
                  "justifyContent": undefined,
                }
              }
            />
          </Container>
          <Container
            className="rightItems"
            crossAlignment="stretch"
            orientation="row-reverse"
          >
            <div
              className="msg container fixedScrollbar rightItems"
              style={
                {
                  "alignItems": "stretch",
                  "flexDirection": "row-reverse",
                  "flexWrap": undefined,
                  "justifyContent": undefined,
                }
              }
            />
          </Container>
        </div>
      </Container>
    </Statusbar>
    <ProfileSelector>
      <ValueEditDialog
        id="profileCreating"
        onClose={[Function]}
        onValidate={[Function]}
      >
        <Dialog
          actions={
            {
              "begin": [],
              "end": [
                <Button
                  caption="OK"
                  disabled={false}
                  id="ok"
                  onClick={[Function]}
                />,
                <Button
                  caption="Cancel"
                  id="cancel"
                  onClick={[Function]}
                />,
              ],
            }
          }
          caption={
            <p>
              <Icon
                disabled={false}
                src={389}
              />
              <Label />
            </p>
          }
          className="msg valueEditDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Grid
              columnGap={16}
              columns={8}
              rowGap={16}
            />
          }
          id="profileCreating"
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            id="profileCreating"
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
        <Menu
          onItemClick={[Function]}
          orientation="column"
          placement="right-start"
        >
          <Popup
            className="msg menu"
            onClose={[Function]}
            onKeyDown={[Function]}
            onOpen={[Function]}
            orientation="column"
            pinned={false}
            placement="right-start"
            showArrow={false}
          >
            <Portal
              onClose={[Function]}
              onKeyDown={[Function]}
              onOpen={[Function]}
            />
          </Popup>
        </Menu>
      </ValueEditDialog>
      <ConfirmDialog
        id="confirmDeleteDialog"
        onClose={[Function]}
      >
        <Dialog
          actions={
            {
              "end": [],
            }
          }
          caption={
            <p>
              <Icon
                disabled={false}
                src={276}
              />
              <Label>
                Confirm
              </Label>
            </p>
          }
          className="msg confirmDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Container
              orientation="column"
            >
              
              <Container
                className="description"
                orientation="column"
              />
            </Container>
          }
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
      </ConfirmDialog>
      <Menu
        id="tileActionMenu"
        onItemClick={[Function]}
        orientation="column"
        placement="top-start"
      >
        <Popup
          className="msg menu"
          id="tileActionMenu"
          onClose={[Function]}
          onKeyDown={[Function]}
          onOpen={[Function]}
          orientation="column"
          pinned={false}
          placement="top-start"
          showArrow={false}
        >
          <Portal
            id="tileActionMenu"
            onClose={[Function]}
            onKeyDown={[Function]}
            onOpen={[Function]}
          />
        </Popup>
      </Menu>
    </ProfileSelector>
    <ColorPopup>
      <Popup
        className="msg colorPopup"
        onOpen={[Function]}
        orientation="column"
        pinned={false}
        placement="bottom"
        showArrow={true}
      >
        <Portal
          onClose={[Function]}
          onOpen={[Function]}
        />
      </Popup>
    </ColorPopup>
  </ErrorBoundary>
</App>
`;
