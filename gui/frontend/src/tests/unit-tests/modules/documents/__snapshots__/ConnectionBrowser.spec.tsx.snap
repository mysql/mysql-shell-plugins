// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Connection browser tests Test ConnectionBrowser instantiation 1`] = `
<ConnectionBrowser
  onAddConnection={[MockFunction]}
  onRemoveConnection={[MockFunction]}
  onUpdateConnection={[MockFunction]}
  toolbarItems={
    {
      "auxiliary": [],
      "editor": [],
      "execution": [],
      "navigation": [],
    }
  }
>
  <Container
    className="msg connectionBrowser"
    orientation="column"
    wrap="nowrap"
  >
    <div
      className="msg container fixedScrollbar connectionBrowser"
      style={
        {
          "alignItems": undefined,
          "flexDirection": "column",
          "flexWrap": "nowrap",
          "justifyContent": undefined,
        }
      }
    >
      <Toolbar
        dropShadow={false}
        id="connectionOverviewToolbar"
        vibrant={false}
      >
        <Container
          className="msg toolbar verticalCenterContent"
          crossAlignment="center"
          id="connectionOverviewToolbar"
          orientation="row"
        >
          <div
            className="msg container fixedScrollbar toolbar verticalCenterContent"
            id="connectionOverviewToolbar"
            style={
              {
                "alignItems": "center",
                "flexDirection": "row",
                "flexWrap": undefined,
                "justifyContent": undefined,
              }
            }
          >
            <div
              className="expander"
            />
          </div>
        </Container>
      </Toolbar>
      <ConnectionEditor
        id="connectionEditor"
        onAddConnection={[Function]}
        onUpdateConnection={[Function]}
      >
        <ValueEditDialog
          id="connectionEditor"
          onClose={[Function]}
          onSelectTab={[Function]}
          onValidate={[Function]}
        >
          <Dialog
            actions={
              {
                "begin": [],
                "end": [
                  <Button
                    caption="OK"
                    disabled={false}
                    id="ok"
                    onClick={[Function]}
                  />,
                  <Button
                    caption="Cancel"
                    id="cancel"
                    onClick={[Function]}
                  />,
                ],
              }
            }
            caption={
              <g>
                <Icon
                  disabled={false}
                  src={391}
                />
                <Label />
              </g>
            }
            className="msg valueEditDialog"
            container={
              <body
                theme="dark"
              />
            }
            content={
              <Grid
                columnGap={16}
                columns={8}
                id="contentGrid"
                rowGap={16}
              />
            }
            id="connectionEditor"
            onClose={[Function]}
            onSelectTab={[Function]}
          >
            <Portal
              container={
                <body
                  theme="dark"
                />
              }
              id="connectionEditor"
              onClose={[Function]}
              onOpen={[Function]}
              onSelectTab={[Function]}
            />
          </Dialog>
          <Menu
            onItemClick={[Function]}
            orientation="column"
            placement="right-start"
          />
        </ValueEditDialog>
        <ConfirmDialog
          id="confirmClearPasswordDlg"
        >
          <Dialog
            actions={
              {
                "end": [],
              }
            }
            caption={
              <g>
                <Icon
                  disabled={false}
                  src={278}
                />
                <Label>
                  Confirm
                </Label>
              </g>
            }
            className="msg confirmDialog"
            container={
              <body
                theme="dark"
              />
            }
            content={
              <Container
                orientation="column"
              >
                
                <Container
                  className="description"
                  orientation="column"
                />
              </Container>
            }
            onClose={[Function]}
          >
            <Portal
              container={
                <body
                  theme="dark"
                />
              }
              onClose={[Function]}
              onOpen={[Function]}
            />
          </Dialog>
        </ConfirmDialog>
        <ConfirmDialog
          id="confirmNewBastionDialog"
          onClose={[Function]}
        >
          <Dialog
            actions={
              {
                "end": [],
              }
            }
            caption={
              <g>
                <Icon
                  disabled={false}
                  src={278}
                />
                <Label>
                  Confirm
                </Label>
              </g>
            }
            className="msg confirmDialog"
            container={
              <body
                theme="dark"
              />
            }
            content={
              <Container
                orientation="column"
              >
                
                <Container
                  className="description"
                  orientation="column"
                />
              </Container>
            }
            onClose={[Function]}
          >
            <Portal
              container={
                <body
                  theme="dark"
                />
              }
              onClose={[Function]}
              onOpen={[Function]}
            />
          </Dialog>
        </ConfirmDialog>
      </ConnectionEditor>
      <Menu
        id="tileActionMenu"
        onItemClick={[Function]}
        orientation="column"
        placement="bottom-start"
      />
      <FrontPage
        caption="MySQL Shell - DB Connections"
        description="Welcome to the MySQL Shell for VS Code extension.

Click the [New Connection] tile to add a new database connection. Click a [Database Connection] tile to open a new DB Notebook.

DB Notebooks are modern editors for working with databases. You can use them to create and manage databases schema objects, write SQL queries and scripts, and work with data."
        onCloseGreeting={[Function]}
        showGreeting={true}
      >
        <Container
          className="msg frontPage"
          orientation="column"
        >
          <div
            className="msg container fixedScrollbar frontPage"
            style={
              {
                "alignItems": undefined,
                "flexDirection": "column",
                "flexWrap": undefined,
                "justifyContent": undefined,
              }
            }
          >
            <Label
              id="title"
              textAlignment="center"
            >
              <label
                className="msg label"
                data-tooltip="expand"
                id="title"
                style={
                  {
                    "textAlign": "center",
                  }
                }
              >
                MySQL Shell - DB Connections
              </label>
            </Label>
            <Label
              id="description"
              textAlignment="center"
            >
              <label
                className="msg label"
                data-tooltip="expand"
                id="description"
                style={
                  {
                    "textAlign": "center",
                  }
                }
              >
                Welcome to the MySQL Shell for VS Code extension.

Click the [New Connection] tile to add a new database connection. Click a [Database Connection] tile to open a new DB Notebook.

DB Notebooks are modern editors for working with databases. You can use them to create and manage databases schema objects, write SQL queries and scripts, and work with data.
              </label>
            </Label>
            <Container
              id="linksHost"
              mainAlignment="center"
              orientation="row"
              wrap="wrap"
            >
              <div
                className="msg container fixedScrollbar"
                id="linksHost"
                style={
                  {
                    "alignItems": undefined,
                    "flexDirection": "row",
                    "flexWrap": "wrap",
                    "justifyContent": "center",
                  }
                }
              >
                <HelpLinkList
                  helpUrlMap={
                    Map {
                      "Learn More" => "https://blogs.oracle.com/mysql/post/introducing-mysql-shell-for-vs-code",
                      "Documentation" => "https://dev.mysql.com/doc/mysql-shell-gui/en/",
                    }
                  }
                >
                  <a
                    href="https://blogs.oracle.com/mysql/post/introducing-mysql-shell-for-vs-code"
                    key="Learn More"
                    rel="noopener noreferrer"
                    tabIndex={0}
                    target="_blank"
                  >
                    Learn More &gt;
                  </a>
                  <a
                    href="https://dev.mysql.com/doc/mysql-shell-gui/en/"
                    key="Documentation"
                    rel="noopener noreferrer"
                    tabIndex={0}
                    target="_blank"
                  >
                    Documentation &gt;
                  </a>
                </HelpLinkList>
              </div>
            </Container>
            <Button
              data-tooltip="Close Greeting"
              id="closeButton"
              onClick={[Function]}
              round={true}
            >
              <div
                className="msg button round"
                data-tooltip="Close Greeting"
                id="closeButton"
                onClick={[Function]}
                onMouseDown={[Function]}
                role="button"
                style={
                  {
                    "flexDirection": undefined,
                  }
                }
                tabIndex={0}
              >
                <Icon
                  data-tooltip="inherit"
                  disabled={false}
                  src="close2.svg"
                >
                  <div
                    className="msg icon"
                    data-tooltip="inherit"
                    style={
                      {
                        "WebkitMaskImage": "url("close2.svg")",
                        "backgroundColor": undefined,
                        "height": undefined,
                        "maskComposite": undefined,
                        "maskImage": "url("close2.svg")",
                        "maskSize": undefined,
                        "width": undefined,
                      }
                    }
                  />
                </Icon>
              </div>
            </Button>
            <Container
              orientation="column"
            >
              <div
                className="msg container fixedScrollbar"
                style={
                  {
                    "alignItems": undefined,
                    "flexDirection": "column",
                    "flexWrap": undefined,
                    "justifyContent": undefined,
                  }
                }
              >
                <Label
                  caption="Database Connections"
                  id="contentTitle"
                >
                  <label
                    className="msg label"
                    data-tooltip="expand"
                    id="contentTitle"
                    style={{}}
                  >
                    Database Connections
                  </label>
                </Label>
                <Container
                  id="tilesHost"
                  innerRef={
                    {
                      "current": <div
                        class="msg container fixedScrollbar"
                        id="tilesHost"
                        style="flex-direction: row; flex-wrap: wrap;"
                      />,
                    }
                  }
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDragOver={[Function]}
                  onDrop={[Function]}
                  orientation="row"
                  wrap="wrap"
                >
                  <div
                    className="msg container fixedScrollbar"
                    id="tilesHost"
                    onDragEnter={[Function]}
                    onDragLeave={[Function]}
                    onDragOver={[Function]}
                    onDrop={[Function]}
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "row",
                        "flexWrap": "wrap",
                        "justifyContent": undefined,
                      }
                    }
                  />
                </Container>
              </div>
            </Container>
          </div>
        </Container>
      </FrontPage>
    </div>
  </Container>
</ConnectionBrowser>
`;
