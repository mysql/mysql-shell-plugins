// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Connection browser tests Test ConnectionBrowser instantiation 1`] = `
<ConnectionBrowser
  connections={
    [
      {
        "caption": "",
        "dbType": "MySQL",
        "description": "",
        "id": 0,
        "options": {
          "type": "unknown",
        },
        "useMDS": false,
        "useSSH": false,
      },
    ]
  }
  onAddConnection={[MockFunction]}
  onDropConnection={[MockFunction]}
>
  <Container
    className="msg connectionBrowser"
    orientation="column"
    wrap="nowrap"
  >
    <div
      className="msg container fixedScrollbar connectionBrowser"
      style={
        {
          "alignItems": undefined,
          "flexDirection": "column",
          "flexWrap": "nowrap",
          "justifyContent": undefined,
        }
      }
    >
      <ConfirmDialog
        id="confirmNewBastionDialog"
        onClose={[Function]}
      >
        <Dialog
          actions={
            {
              "end": [],
            }
          }
          caption={
            <p>
              <Icon
                disabled={false}
                src={276}
              />
              <Label>
                Confirm
              </Label>
            </p>
          }
          className="msg confirmDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Container
              orientation="column"
            >
              
              <Container
                className="description"
                orientation="column"
              />
            </Container>
          }
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
      </ConfirmDialog>
      <ConfirmDialog
        id="keepConnectionDialogRef"
        onClose={[Function]}
      >
        <Dialog
          actions={
            {
              "end": [],
            }
          }
          caption={
            <p>
              <Icon
                disabled={false}
                src={276}
              />
              <Label>
                Confirm
              </Label>
            </p>
          }
          className="msg confirmDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Container
              orientation="column"
            >
              
              <Container
                className="description"
                orientation="column"
              />
            </Container>
          }
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
      </ConfirmDialog>
      <ValueEditDialog
        id="connectionEditor"
        onClose={[Function]}
        onSelectTab={[Function]}
        onValidate={[Function]}
      >
        <Dialog
          actions={
            {
              "begin": [],
              "end": [
                <Button
                  caption="OK"
                  disabled={false}
                  id="ok"
                  onClick={[Function]}
                />,
                <Button
                  caption="Cancel"
                  id="cancel"
                  onClick={[Function]}
                />,
              ],
            }
          }
          caption={
            <p>
              <Icon
                disabled={false}
                src={389}
              />
              <Label />
            </p>
          }
          className="msg valueEditDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Grid
              columnGap={16}
              columns={8}
              rowGap={16}
            />
          }
          id="connectionEditor"
          onClose={[Function]}
          onSelectTab={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            id="connectionEditor"
            onClose={[Function]}
            onOpen={[Function]}
            onSelectTab={[Function]}
          />
        </Dialog>
        <Menu
          onItemClick={[Function]}
          orientation="column"
          placement="right-start"
        >
          <Popup
            className="msg menu"
            onClose={[Function]}
            onKeyDown={[Function]}
            onOpen={[Function]}
            orientation="column"
            pinned={false}
            placement="right-start"
            showArrow={false}
          >
            <Portal
              onClose={[Function]}
              onKeyDown={[Function]}
              onOpen={[Function]}
            />
          </Popup>
        </Menu>
      </ValueEditDialog>
      <ConfirmDialog
        id="confirmClearPasswordDlg"
      >
        <Dialog
          actions={
            {
              "end": [],
            }
          }
          caption={
            <p>
              <Icon
                disabled={false}
                src={276}
              />
              <Label>
                Confirm
              </Label>
            </p>
          }
          className="msg confirmDialog"
          container={
            <body
              theme="dark"
            />
          }
          content={
            <Container
              orientation="column"
            >
              
              <Container
                className="description"
                orientation="column"
              />
            </Container>
          }
          onClose={[Function]}
        >
          <Portal
            container={
              <body
                theme="dark"
              />
            }
            onClose={[Function]}
            onOpen={[Function]}
          />
        </Dialog>
      </ConfirmDialog>
      <Menu
        id="tileActionMenu"
        onItemClick={[Function]}
        orientation="column"
        placement="bottom-start"
      >
        <Popup
          className="msg menu"
          id="tileActionMenu"
          onClose={[Function]}
          onKeyDown={[Function]}
          onOpen={[Function]}
          orientation="column"
          pinned={false}
          placement="bottom-start"
          showArrow={false}
        >
          <Portal
            id="tileActionMenu"
            onClose={[Function]}
            onKeyDown={[Function]}
            onOpen={[Function]}
          />
        </Popup>
      </Menu>
      <FrontPage
        caption="MySQL Shell - DB Notebooks"
        description="DB Notebooks are modern editors for working with databases. They can be used to create and manage databases schema objects, write SQL queries and scripts, and work with data.

Click on a Database Connection to open a new DB Notebook."
        helpUrls={
          Map {
            "Learn More >" => "https://blogs.oracle.com/mysql/post/introducing-mysql-shell-for-vs-code",
            "Browse Tutorial >" => "https://www.mysql.com",
            "Read Docs >" => "https://www.mysql.com",
          }
        }
        onCloseGreeting={[Function]}
        showGreeting={true}
      >
        <Container
          className="msg frontPage"
          orientation="column"
        >
          <div
            className="msg container fixedScrollbar frontPage"
            style={
              {
                "alignItems": undefined,
                "flexDirection": "column",
                "flexWrap": undefined,
                "justifyContent": undefined,
              }
            }
          >
            <Label
              id="title"
              textAlignment="center"
            >
              <label
                className="msg label"
                data-tooltip="expand"
                id="title"
                style={
                  {
                    "textAlign": "center",
                  }
                }
              >
                MySQL Shell - DB Notebooks
              </label>
            </Label>
            <Label
              id="description"
              textAlignment="center"
            >
              <label
                className="msg label"
                data-tooltip="expand"
                id="description"
                style={
                  {
                    "textAlign": "center",
                  }
                }
              >
                DB Notebooks are modern editors for working with databases. They can be used to create and manage databases schema objects, write SQL queries and scripts, and work with data.

Click on a Database Connection to open a new DB Notebook.
              </label>
            </Label>
            <Container
              id="linksHost"
              mainAlignment="center"
              orientation="row"
              wrap="wrap"
            >
              <div
                className="msg container fixedScrollbar"
                id="linksHost"
                style={
                  {
                    "alignItems": undefined,
                    "flexDirection": "row",
                    "flexWrap": "wrap",
                    "justifyContent": "center",
                  }
                }
              >
                <a
                  href="https://blogs.oracle.com/mysql/post/introducing-mysql-shell-for-vs-code"
                  key="Learn More >"
                  onClick={[Function]}
                  rel="noopener noreferrer"
                  tabIndex={0}
                  target="_blank"
                >
                  Learn More &gt;
                </a>
                <a
                  href="https://www.mysql.com"
                  key="Browse Tutorial >"
                  onClick={[Function]}
                  rel="noopener noreferrer"
                  tabIndex={0}
                  target="_blank"
                >
                  Browse Tutorial &gt;
                </a>
                <a
                  href="https://www.mysql.com"
                  key="Read Docs >"
                  onClick={[Function]}
                  rel="noopener noreferrer"
                  tabIndex={0}
                  target="_blank"
                >
                  Read Docs &gt;
                </a>
              </div>
            </Container>
            <Button
              data-tooltip="Close Greeting"
              id="closeButton"
              onClick={[Function]}
              round={true}
            >
              <button
                className="msg button round"
                data-tooltip="Close Greeting"
                id="closeButton"
                onClick={[Function]}
                onMouseDown={[Function]}
                style={
                  {
                    "flexDirection": undefined,
                  }
                }
                tabIndex={0}
              >
                <Icon
                  data-tooltip="inherit"
                  disabled={false}
                  src="close2.svg"
                >
                  <span
                    className="msg icon"
                    data-tooltip="inherit"
                    style={
                      {
                        "WebkitMaskImage": "url(close2.svg)",
                        "backgroundColor": undefined,
                        "height": undefined,
                        "maskImage": "url(close2.svg)",
                        "width": undefined,
                      }
                    }
                  />
                </Icon>
              </button>
            </Button>
            <Container
              orientation="column"
            >
              <div
                className="msg container fixedScrollbar"
                style={
                  {
                    "alignItems": undefined,
                    "flexDirection": "column",
                    "flexWrap": undefined,
                    "justifyContent": undefined,
                  }
                }
              >
                <Label
                  caption="Database Connections"
                  id="contentTitle"
                >
                  <label
                    className="msg label"
                    data-tooltip="expand"
                    id="contentTitle"
                    style={{}}
                  >
                    Database Connections
                  </label>
                </Label>
                <Container
                  id="tilesHost"
                  innerRef={
                    {
                      "current": <div
                        class="msg container fixedScrollbar"
                        id="tilesHost"
                        style="flex-direction: row; flex-wrap: wrap;"
                      >
                        <button
                          class="msg button browserTile connectionTile"
                          draggable="true"
                          id="0"
                          tabindex="0"
                        >
                          <span
                            class="msg icon"
                            style="mask-image: url(mysql.svg);"
                          />
                          <div
                            class="msg container fixedScrollbar textHost"
                            style="flex-direction: column;"
                          >
                            <label
                              class="msg label tileCaption"
                              data-tooltip="expand"
                            >
                              
                            </label>
                            <label
                              class="msg label tileDescription"
                              data-tooltip="expand"
                            >
                              
                            </label>
                          </div>
                          <div
                            class="msg container fixedScrollbar"
                            id="actions"
                            style="flex-direction: row; justify-content: center; align-items: center;"
                          >
                            <label
                              class="msg label"
                              data-tooltip="expand"
                              id="triggerTileAction"
                            >
                              …
                            </label>
                          </div>
                        </button>
                        <button
                          class="msg button browserTile secondary connectionTile"
                          id="-1"
                          tabindex="0"
                        >
                          <span
                            class="msg icon"
                            style="mask-image: url(plus.svg);"
                          />
                          <div
                            class="msg container fixedScrollbar textHost"
                            style="flex-direction: column;"
                          >
                            <label
                              class="msg label tileCaption"
                              data-tooltip="expand"
                            >
                              New Connection
                            </label>
                            <label
                              class="msg label tileDescription"
                              data-tooltip="expand"
                            >
                              Add a new database connection
                            </label>
                          </div>
                        </button>
                      </div>,
                    }
                  }
                  onDragEnter={[Function]}
                  onDragLeave={[Function]}
                  onDragOver={[Function]}
                  onDrop={[Function]}
                  orientation="row"
                  wrap="wrap"
                >
                  <div
                    className="msg container fixedScrollbar"
                    id="tilesHost"
                    onDragEnter={[Function]}
                    onDragLeave={[Function]}
                    onDragOver={[Function]}
                    onDrop={[Function]}
                    style={
                      {
                        "alignItems": undefined,
                        "flexDirection": "row",
                        "flexWrap": "wrap",
                        "justifyContent": undefined,
                      }
                    }
                  >
                    <ConnectionTile
                      caption=""
                      className="connectionTile"
                      description=""
                      details={
                        {
                          "caption": "",
                          "dbType": "MySQL",
                          "description": "",
                          "id": 0,
                          "options": {
                            "type": "unknown",
                          },
                          "useMDS": false,
                          "useSSH": false,
                        }
                      }
                      draggable={true}
                      icon="mysql.svg"
                      onAction={[Function]}
                      tileId={0}
                      type={0}
                    >
                      <Button
                        className="msg browserTile connectionTile"
                        draggable={true}
                        id="0"
                        onClick={[Function]}
                        onDragEnter={[Function]}
                        onDragLeave={[Function]}
                        onDragOver={[Function]}
                        onDragStart={[Function]}
                        onDrop={[Function]}
                        onKeyPress={[Function]}
                      >
                        <button
                          className="msg button browserTile connectionTile"
                          draggable={true}
                          id="0"
                          onClick={[Function]}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDragOver={[Function]}
                          onDragStart={[Function]}
                          onDrop={[Function]}
                          onKeyPress={[Function]}
                          onMouseDown={[Function]}
                          style={
                            {
                              "flexDirection": undefined,
                            }
                          }
                          tabIndex={0}
                        >
                          <Icon
                            disabled={false}
                            src="mysql.svg"
                          >
                            <span
                              className="msg icon"
                              style={
                                {
                                  "WebkitMaskImage": "url(mysql.svg)",
                                  "backgroundColor": undefined,
                                  "height": undefined,
                                  "maskImage": "url(mysql.svg)",
                                  "width": undefined,
                                }
                              }
                            />
                          </Icon>
                          <Container
                            className="textHost"
                            orientation="column"
                          >
                            <div
                              className="msg container fixedScrollbar textHost"
                              style={
                                {
                                  "alignItems": undefined,
                                  "flexDirection": "column",
                                  "flexWrap": undefined,
                                  "justifyContent": undefined,
                                }
                              }
                            >
                              <Label
                                className="tileCaption"
                              >
                                <label
                                  className="msg label tileCaption"
                                  data-tooltip="expand"
                                  style={{}}
                                />
                              </Label>
                              <Label
                                className="tileDescription"
                              >
                                <label
                                  className="msg label tileDescription"
                                  data-tooltip="expand"
                                  style={{}}
                                />
                              </Label>
                            </div>
                          </Container>
                          <Container
                            crossAlignment="center"
                            id="actions"
                            innerRef={
                              {
                                "current": <div
                                  class="msg container fixedScrollbar"
                                  id="actions"
                                  style="flex-direction: row; justify-content: center; align-items: center;"
                                >
                                  <label
                                    class="msg label"
                                    data-tooltip="expand"
                                    id="triggerTileAction"
                                  >
                                    …
                                  </label>
                                </div>,
                              }
                            }
                            mainAlignment="center"
                            orientation="row"
                          >
                            <div
                              className="msg container fixedScrollbar"
                              id="actions"
                              style={
                                {
                                  "alignItems": "center",
                                  "flexDirection": "row",
                                  "flexWrap": undefined,
                                  "justifyContent": "center",
                                }
                              }
                            >
                              <Label
                                caption="…"
                                id="triggerTileAction"
                                onClick={[Function]}
                              >
                                <label
                                  className="msg label"
                                  data-tooltip="expand"
                                  id="triggerTileAction"
                                  onClick={[Function]}
                                  style={{}}
                                >
                                  …
                                </label>
                              </Label>
                            </div>
                          </Container>
                        </button>
                      </Button>
                    </ConnectionTile>
                    <ConnectionTile
                      caption="New Connection"
                      className="connectionTile"
                      description="Add a new database connection"
                      details={
                        {
                          "caption": "New Connection",
                          "dbType": "MySQL",
                          "description": "Add a new database connection",
                          "id": -1,
                          "options": {
                            "dbFile": "",
                            "dbName": "",
                          },
                          "useMDS": false,
                          "useSSH": false,
                        }
                      }
                      icon="plus.svg"
                      key={-1}
                      onAction={[Function]}
                      tileId={-1}
                      type={1}
                    >
                      <Button
                        className="msg browserTile secondary connectionTile"
                        id="-1"
                        onClick={[Function]}
                        onDragEnter={[Function]}
                        onDragLeave={[Function]}
                        onDragOver={[Function]}
                        onDragStart={[Function]}
                        onDrop={[Function]}
                        onKeyPress={[Function]}
                      >
                        <button
                          className="msg button browserTile secondary connectionTile"
                          id="-1"
                          onClick={[Function]}
                          onDragEnter={[Function]}
                          onDragLeave={[Function]}
                          onDragOver={[Function]}
                          onDragStart={[Function]}
                          onDrop={[Function]}
                          onKeyPress={[Function]}
                          onMouseDown={[Function]}
                          style={
                            {
                              "flexDirection": undefined,
                            }
                          }
                          tabIndex={0}
                        >
                          <Icon
                            disabled={false}
                            src="plus.svg"
                          >
                            <span
                              className="msg icon"
                              style={
                                {
                                  "WebkitMaskImage": "url(plus.svg)",
                                  "backgroundColor": undefined,
                                  "height": undefined,
                                  "maskImage": "url(plus.svg)",
                                  "width": undefined,
                                }
                              }
                            />
                          </Icon>
                          <Container
                            className="textHost"
                            orientation="column"
                          >
                            <div
                              className="msg container fixedScrollbar textHost"
                              style={
                                {
                                  "alignItems": undefined,
                                  "flexDirection": "column",
                                  "flexWrap": undefined,
                                  "justifyContent": undefined,
                                }
                              }
                            >
                              <Label
                                className="tileCaption"
                              >
                                <label
                                  className="msg label tileCaption"
                                  data-tooltip="expand"
                                  style={{}}
                                >
                                  New Connection
                                </label>
                              </Label>
                              <Label
                                className="tileDescription"
                              >
                                <label
                                  className="msg label tileDescription"
                                  data-tooltip="expand"
                                  style={{}}
                                >
                                  Add a new database connection
                                </label>
                              </Label>
                            </div>
                          </Container>
                        </button>
                      </Button>
                    </ConnectionTile>
                  </div>
                </Container>
              </div>
            </Container>
          </div>
        </Container>
      </FrontPage>
    </div>
  </Container>
</ConnectionBrowser>
`;
