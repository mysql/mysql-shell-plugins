/*
 * Copyright (c) 2021, 2022, Oracle and/or its affiliates.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation.  The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful,  but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

.msg.progressIndicatorHost {
    flex: 1 1 auto;
    background: var(--background);
    overflow: hidden;

    --position: 0;
    --width: 150;
    --height: 150;
    --strokeWidth: 10;

    /* 10 is the stroke width of the circle. */
    --perimeter: calc((var(--width) - calc(2 * var(--strokeWidth))) * 3.1421);
}

.msg.progressIndicatorHost svg {
    width: calc(var(--width) * 1px);
    height: calc(var(--height) * 1px);
}

.msg.progressIndicatorHost .linearBackground {
    background: var(--button-background);
    justify-content: flex-start;
    border-radius: 100px;
    align-items: center;
    position: relative;
    padding: 3px 4px;
    display: flex;
    height: calc(var(--height) * 1px);
    width: calc(var(--width) * 1px);

    overflow: hidden;
}

.msg.progressIndicatorHost .linear {
    animation: linearFrames 0.5s normal forwards;
    box-shadow: 0 10px 40px -10px var(--progressBar-background);
    border-radius: 100px;
    background: var(--progressBar-background);
    height: 100%;
    width: 0;
}

.msg.progressIndicatorHost .linear.animated {
    animation: indeterminateLinearFrames 2s normal infinite;
    width: 100%;
}

@keyframes linearFrames {
    0% {
        width: 0;
    }

    100% {
        width: calc(var(--position) * 100%);
    }
}

@keyframes indeterminateLinearFrames {
    0% {
        margin-left: 0px;
        margin-right: 100%;
    }

    50% {
        margin-left: 20%;
        margin-right: 20%;
    }

    100% {
        margin-left: 100%;
        margin-right: 0;
    }
}

.msg.progressIndicatorHost .circleBackground.animated {
    animation: rotate 3s linear infinite;
}

.msg.progressIndicatorHost .circleBackground circle {
    width: 100%;
    height: 100%;
    fill: none;
    stroke-width: calc(var(--strokeWidth) * 1px);
    stroke-linecap: round;
    transform: translate(calc(var(--strokeWidth) * 0.5px), calc(var(--strokeWidth) * 0.5px));
}

.msg.progressIndicatorHost .circleBackground circle:nth-child(1) {
    stroke-dashoffset: 0;
    stroke: var(--progressBar-foreground);
}

.msg.progressIndicatorHost .circleBackground circle:nth-child(2) {
    animation: circleFrames 1s ease-in-out forwards;
    stroke: var(--progressBar-background);

    /* Move by one quadrant to start from top. */
    stroke-dashoffset: calc(var(--perimeter) * 0.25px);
}

.msg.progressIndicatorHost .circleBackground.animated circle:nth-child(2) {
    animation: indeterminateCircleFrames 2s linear infinite;
    stroke-dashoffset: 0;
}

@keyframes circleFrames {
    0% {
        stroke-dasharray: 0 calc(var(--perimeter) * 1px);
    }

    100% {
        stroke-dasharray:
            calc(var(--position) * var(--perimeter) * 1px)
            calc((1 - var(--position)) * var(--perimeter) * 1px);
    }
}

@keyframes indeterminateCircleFrames {
    0% {
        stroke-dasharray: 0 calc(var(--perimeter) * 1px);
        stroke-dashoffset: 0;
    }

    50% {
        stroke-dasharray: calc(var(--perimeter) * 0.5px) calc(var(--perimeter) * 1px);
        stroke-dashoffset: calc(var(--perimeter) * -0.5px);
    }

    100% {
        stroke-dasharray: calc(var(--perimeter) * 1px) calc(var(--perimeter) * 1px);
        stroke-dashoffset: calc(var(--perimeter) * -1px);
    }
}

@keyframes rotate {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

