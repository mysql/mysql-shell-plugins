# Copyright (c) 2023, 2024, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,186,1642,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        1,0,1,0,4,0,299,8,0,11,0,12,0,300,1,0,5,0,304,8,0,10,0,12,0,307,
        9,0,3,0,309,8,0,1,0,3,0,312,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
        369,8,1,1,2,1,2,1,3,1,3,3,3,375,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,
        1,6,1,6,1,7,1,7,3,7,388,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,10,1,10,3,10,401,8,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,3,11,
        410,8,11,1,12,1,12,1,12,4,12,415,8,12,11,12,12,12,416,1,13,1,13,
        1,13,3,13,422,8,13,1,14,1,14,1,14,3,14,427,8,14,1,14,1,14,1,14,1,
        14,3,14,433,8,14,1,15,1,15,1,15,1,15,1,15,1,15,4,15,441,8,15,11,
        15,12,15,442,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,3,17,456,8,17,1,18,1,18,1,18,1,18,1,18,5,18,463,8,18,10,18,12,
        18,466,9,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,3,23,486,8,23,1,24,1,24,1,
        24,3,24,491,8,24,1,24,1,24,1,24,3,24,496,8,24,1,24,1,24,3,24,500,
        8,24,1,24,3,24,503,8,24,1,24,1,24,1,24,3,24,508,8,24,1,25,1,25,1,
        25,1,25,1,25,1,25,4,25,516,8,25,11,25,12,25,517,1,26,1,26,1,26,3,
        26,523,8,26,1,26,1,26,3,26,527,8,26,1,26,3,26,530,8,26,1,26,1,26,
        1,26,1,26,3,26,536,8,26,1,26,1,26,1,26,1,26,3,26,542,8,26,1,26,3,
        26,545,8,26,1,26,3,26,548,8,26,1,26,3,26,551,8,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,4,27,562,8,27,11,27,12,27,563,1,28,
        1,28,1,28,1,28,3,28,570,8,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,3,31,582,8,31,1,31,1,31,1,31,1,31,1,31,3,31,589,8,
        31,1,31,1,31,1,31,1,31,3,31,595,8,31,1,31,3,31,598,8,31,1,31,5,31,
        601,8,31,10,31,12,31,604,9,31,1,31,3,31,607,8,31,1,32,1,32,3,32,
        611,8,32,1,32,1,32,1,33,1,33,1,33,3,33,618,8,33,1,33,1,33,1,33,1,
        33,1,33,3,33,625,8,33,1,33,1,33,1,33,1,33,3,33,631,8,33,1,33,3,33,
        634,8,33,1,33,3,33,637,8,33,1,33,3,33,640,8,33,1,34,1,34,3,34,644,
        8,34,1,34,1,34,1,35,1,35,1,35,3,35,651,8,35,1,35,1,35,1,35,1,35,
        1,35,1,35,3,35,659,8,35,1,35,3,35,662,8,35,1,35,1,35,3,35,666,8,
        35,1,35,3,35,669,8,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,4,
        37,679,8,37,11,37,12,37,680,1,38,1,38,1,38,1,39,1,39,3,39,688,8,
        39,1,39,1,39,1,40,1,40,1,40,3,40,695,8,40,1,40,1,40,1,40,1,40,1,
        40,1,40,3,40,703,8,40,1,40,3,40,706,8,40,1,40,1,40,1,40,1,40,1,40,
        1,40,3,40,714,8,40,1,40,1,40,3,40,718,8,40,1,40,3,40,721,8,40,1,
        41,1,41,1,41,4,41,726,8,41,11,41,12,41,727,1,42,1,42,1,42,3,42,733,
        8,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,741,8,42,1,42,3,42,744,8,
        42,1,42,1,42,1,42,1,42,3,42,750,8,42,1,42,3,42,753,8,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,45,1,45,4,45,763,8,45,11,45,12,45,764,1,46,
        1,46,1,46,1,46,1,46,3,46,772,8,46,1,47,1,47,1,47,1,47,1,48,1,48,
        1,48,3,48,781,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
        791,8,48,1,48,3,48,794,8,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,4,
        51,803,8,51,11,51,12,51,804,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,
        54,1,54,1,54,3,54,817,8,54,1,54,1,54,1,54,1,54,1,54,3,54,824,8,54,
        1,54,1,54,1,54,1,54,3,54,830,8,54,1,54,3,54,833,8,54,3,54,835,8,
        54,1,54,3,54,838,8,54,1,55,1,55,4,55,842,8,55,11,55,12,55,843,1,
        56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
        59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,867,8,59,1,59,3,59,870,
        8,59,1,60,1,60,1,60,1,60,3,60,876,8,60,1,60,1,60,3,60,880,8,60,1,
        60,3,60,883,8,60,1,60,1,60,1,60,1,60,3,60,889,8,60,1,60,1,60,3,60,
        893,8,60,1,60,3,60,896,8,60,1,61,1,61,1,61,3,61,901,8,61,1,61,3,
        61,904,8,61,1,61,1,61,1,61,1,61,3,61,910,8,61,1,61,1,61,1,61,1,61,
        3,61,916,8,61,1,61,1,61,1,61,3,61,921,8,61,1,61,3,61,924,8,61,3,
        61,926,8,61,1,61,3,61,929,8,61,1,62,1,62,1,62,1,62,1,62,1,62,3,62,
        937,8,62,1,62,1,62,1,62,1,62,3,62,943,8,62,1,62,1,62,3,62,947,8,
        62,1,62,3,62,950,8,62,1,62,5,62,953,8,62,10,62,12,62,956,9,62,1,
        62,3,62,959,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,967,8,63,1,63,
        1,63,1,63,1,63,3,63,973,8,63,1,63,1,63,3,63,977,8,63,1,63,3,63,980,
        8,63,1,63,5,63,983,8,63,10,63,12,63,986,9,63,1,63,3,63,989,8,63,
        1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,998,8,64,1,64,3,64,1001,
        8,64,1,64,1,64,1,64,1,64,3,64,1007,8,64,1,64,3,64,1010,8,64,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1020,8,65,1,65,3,65,1023,
        8,65,1,65,1,65,1,65,3,65,1028,8,65,1,65,3,65,1031,8,65,1,66,1,66,
        1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1044,8,67,1,67,
        3,67,1047,8,67,1,68,1,68,1,68,3,68,1052,8,68,1,68,3,68,1055,8,68,
        1,68,1,68,1,68,1,68,3,68,1061,8,68,1,69,1,69,1,69,1,69,1,69,1,69,
        3,69,1069,8,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1077,8,70,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,3,71,1086,8,71,1,71,3,71,1089,8,71,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1098,8,72,1,72,3,72,1101,
        8,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        1114,8,73,1,73,3,73,1117,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,
        1138,8,76,3,76,1140,8,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,
        3,77,1150,8,77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,3,79,1163,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1172,
        8,80,3,80,1174,8,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,3,83,1195,8,83,
        1,84,1,84,1,84,3,84,1200,8,84,1,84,1,84,1,85,1,85,1,85,1,85,1,86,
        1,86,1,86,1,86,1,86,3,86,1213,8,86,1,86,3,86,1216,8,86,1,87,1,87,
        1,87,3,87,1221,8,87,1,87,3,87,1224,8,87,1,87,1,87,1,87,3,87,1229,
        8,87,1,88,1,88,1,88,1,88,1,88,3,88,1236,8,88,1,89,1,89,1,89,1,89,
        1,89,3,89,1243,8,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1251,8,90,
        1,90,3,90,1254,8,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1262,8,91,
        1,91,3,91,1265,8,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,
        1,92,3,92,1277,8,92,1,92,3,92,1280,8,92,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,3,93,1289,8,93,1,93,3,93,1292,8,93,3,93,1294,8,93,1,93,
        1,93,3,93,1298,8,93,1,93,1,93,3,93,1302,8,93,1,94,1,94,1,94,1,94,
        1,94,1,94,1,95,1,95,1,95,1,95,1,95,3,95,1315,8,95,1,96,1,96,1,96,
        1,96,1,96,3,96,1322,8,96,1,96,1,96,3,96,1326,8,96,1,96,3,96,1329,
        8,96,1,97,1,97,1,97,1,97,3,97,1335,8,97,1,97,3,97,1338,8,97,1,97,
        1,97,1,97,1,97,3,97,1344,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        3,98,1353,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1362,8,99,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1372,8,100,
        1,100,3,100,1375,8,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,3,101,1385,8,101,1,101,3,101,1388,8,101,1,101,1,101,1,101,
        1,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1402,
        8,102,1,102,3,102,1405,8,102,1,103,3,103,1408,8,103,1,103,3,103,
        1411,8,103,1,103,1,103,1,104,3,104,1416,8,104,1,104,3,104,1419,8,
        104,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,
        1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,
        1,114,1,115,1,115,1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,
        3,119,1453,8,119,1,120,1,120,1,120,5,120,1458,8,120,10,120,12,120,
        1461,9,120,1,120,3,120,1464,8,120,1,121,1,121,1,121,5,121,1469,8,
        121,10,121,12,121,1472,9,121,3,121,1474,8,121,1,122,1,122,3,122,
        1478,8,122,1,122,1,122,3,122,1482,8,122,1,123,1,123,1,123,1,123,
        3,123,1488,8,123,1,123,3,123,1491,8,123,1,124,1,124,1,125,1,125,
        1,125,1,125,5,125,1499,8,125,10,125,12,125,1502,9,125,1,125,1,125,
        1,125,1,125,3,125,1508,8,125,1,126,1,126,1,126,1,126,1,127,1,127,
        1,127,1,127,5,127,1518,8,127,10,127,12,127,1521,9,127,3,127,1523,
        8,127,1,127,1,127,1,128,1,128,3,128,1529,8,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,3,128,1538,8,128,1,129,1,129,1,129,1,129,
        5,129,1544,8,129,10,129,12,129,1547,9,129,1,129,1,129,1,129,1,129,
        3,129,1553,8,129,1,130,4,130,1556,8,130,11,130,12,130,1557,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,3,131,1578,8,131,1,131,3,131,
        1581,8,131,1,132,1,132,1,133,1,133,1,133,3,133,1588,8,133,1,134,
        1,134,3,134,1592,8,134,1,135,1,135,3,135,1596,8,135,1,136,1,136,
        3,136,1600,8,136,1,137,1,137,3,137,1604,8,137,1,138,1,138,1,139,
        1,139,1,140,1,140,1,141,1,141,1,142,1,142,1,143,1,143,1,143,5,143,
        1619,8,143,10,143,12,143,1622,9,143,1,144,1,144,1,144,1,144,1,145,
        1,145,3,145,1630,8,145,1,146,1,146,1,146,3,146,1635,8,146,3,146,
        1637,8,146,1,147,1,147,1,147,1,147,0,0,148,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
        0,12,2,0,71,71,73,73,2,0,72,72,74,74,2,0,87,87,89,90,2,0,21,21,93,
        93,1,0,55,56,3,0,1,1,34,34,50,51,1,0,8,9,1,0,180,181,1,0,138,139,
        2,0,114,116,124,128,17,0,11,16,20,20,22,22,25,26,30,34,41,41,47,
        47,61,71,73,73,75,81,83,84,86,87,89,91,93,96,98,99,101,102,105,105,
        2,0,177,177,179,179,1802,0,308,1,0,0,0,2,368,1,0,0,0,4,370,1,0,0,
        0,6,374,1,0,0,0,8,376,1,0,0,0,10,379,1,0,0,0,12,382,1,0,0,0,14,385,
        1,0,0,0,16,391,1,0,0,0,18,396,1,0,0,0,20,400,1,0,0,0,22,405,1,0,
        0,0,24,414,1,0,0,0,26,418,1,0,0,0,28,423,1,0,0,0,30,440,1,0,0,0,
        32,444,1,0,0,0,34,446,1,0,0,0,36,457,1,0,0,0,38,467,1,0,0,0,40,470,
        1,0,0,0,42,473,1,0,0,0,44,476,1,0,0,0,46,480,1,0,0,0,48,487,1,0,
        0,0,50,515,1,0,0,0,52,519,1,0,0,0,54,561,1,0,0,0,56,565,1,0,0,0,
        58,571,1,0,0,0,60,574,1,0,0,0,62,578,1,0,0,0,64,608,1,0,0,0,66,614,
        1,0,0,0,68,641,1,0,0,0,70,647,1,0,0,0,72,670,1,0,0,0,74,678,1,0,
        0,0,76,682,1,0,0,0,78,685,1,0,0,0,80,691,1,0,0,0,82,725,1,0,0,0,
        84,729,1,0,0,0,86,754,1,0,0,0,88,756,1,0,0,0,90,762,1,0,0,0,92,766,
        1,0,0,0,94,773,1,0,0,0,96,777,1,0,0,0,98,795,1,0,0,0,100,797,1,0,
        0,0,102,802,1,0,0,0,104,806,1,0,0,0,106,810,1,0,0,0,108,813,1,0,
        0,0,110,841,1,0,0,0,112,845,1,0,0,0,114,847,1,0,0,0,116,849,1,0,
        0,0,118,858,1,0,0,0,120,871,1,0,0,0,122,897,1,0,0,0,124,930,1,0,
        0,0,126,960,1,0,0,0,128,990,1,0,0,0,130,1011,1,0,0,0,132,1032,1,
        0,0,0,134,1037,1,0,0,0,136,1048,1,0,0,0,138,1062,1,0,0,0,140,1070,
        1,0,0,0,142,1078,1,0,0,0,144,1090,1,0,0,0,146,1106,1,0,0,0,148,1118,
        1,0,0,0,150,1125,1,0,0,0,152,1130,1,0,0,0,154,1149,1,0,0,0,156,1151,
        1,0,0,0,158,1153,1,0,0,0,160,1164,1,0,0,0,162,1178,1,0,0,0,164,1187,
        1,0,0,0,166,1194,1,0,0,0,168,1196,1,0,0,0,170,1203,1,0,0,0,172,1207,
        1,0,0,0,174,1217,1,0,0,0,176,1230,1,0,0,0,178,1237,1,0,0,0,180,1244,
        1,0,0,0,182,1255,1,0,0,0,184,1270,1,0,0,0,186,1281,1,0,0,0,188,1303,
        1,0,0,0,190,1309,1,0,0,0,192,1316,1,0,0,0,194,1330,1,0,0,0,196,1345,
        1,0,0,0,198,1354,1,0,0,0,200,1363,1,0,0,0,202,1376,1,0,0,0,204,1393,
        1,0,0,0,206,1407,1,0,0,0,208,1415,1,0,0,0,210,1422,1,0,0,0,212,1424,
        1,0,0,0,214,1426,1,0,0,0,216,1428,1,0,0,0,218,1430,1,0,0,0,220,1432,
        1,0,0,0,222,1434,1,0,0,0,224,1436,1,0,0,0,226,1438,1,0,0,0,228,1440,
        1,0,0,0,230,1442,1,0,0,0,232,1444,1,0,0,0,234,1446,1,0,0,0,236,1448,
        1,0,0,0,238,1452,1,0,0,0,240,1454,1,0,0,0,242,1473,1,0,0,0,244,1477,
        1,0,0,0,246,1490,1,0,0,0,248,1492,1,0,0,0,250,1507,1,0,0,0,252,1509,
        1,0,0,0,254,1513,1,0,0,0,256,1537,1,0,0,0,258,1552,1,0,0,0,260,1555,
        1,0,0,0,262,1559,1,0,0,0,264,1582,1,0,0,0,266,1587,1,0,0,0,268,1591,
        1,0,0,0,270,1595,1,0,0,0,272,1599,1,0,0,0,274,1603,1,0,0,0,276,1605,
        1,0,0,0,278,1607,1,0,0,0,280,1609,1,0,0,0,282,1611,1,0,0,0,284,1613,
        1,0,0,0,286,1615,1,0,0,0,288,1623,1,0,0,0,290,1627,1,0,0,0,292,1631,
        1,0,0,0,294,1638,1,0,0,0,296,305,3,2,1,0,297,299,5,154,0,0,298,297,
        1,0,0,0,299,300,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,302,
        1,0,0,0,302,304,3,2,1,0,303,298,1,0,0,0,304,307,1,0,0,0,305,303,
        1,0,0,0,305,306,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,308,296,
        1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,312,5,154,0,0,311,310,
        1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,5,0,0,1,314,1,1,
        0,0,0,315,369,3,22,11,0,316,369,3,28,14,0,317,369,3,48,24,0,318,
        369,3,52,26,0,319,369,3,62,31,0,320,369,3,66,33,0,321,369,3,70,35,
        0,322,369,3,80,40,0,323,369,3,84,42,0,324,369,3,108,54,0,325,369,
        3,96,48,0,326,369,3,116,58,0,327,369,3,118,59,0,328,369,3,120,60,
        0,329,369,3,122,61,0,330,369,3,124,62,0,331,369,3,126,63,0,332,369,
        3,128,64,0,333,369,3,130,65,0,334,369,3,132,66,0,335,369,3,134,67,
        0,336,369,3,136,68,0,337,369,3,138,69,0,338,369,3,140,70,0,339,369,
        3,142,71,0,340,369,3,144,72,0,341,369,3,146,73,0,342,369,3,148,74,
        0,343,369,3,150,75,0,344,369,3,158,79,0,345,369,3,152,76,0,346,369,
        3,160,80,0,347,369,3,162,81,0,348,369,3,164,82,0,349,369,3,168,84,
        0,350,369,3,170,85,0,351,369,3,172,86,0,352,369,3,174,87,0,353,369,
        3,176,88,0,354,369,3,178,89,0,355,369,3,180,90,0,356,369,3,182,91,
        0,357,369,3,184,92,0,358,369,3,186,93,0,359,369,3,188,94,0,360,369,
        3,190,95,0,361,369,3,192,96,0,362,369,3,194,97,0,363,369,3,196,98,
        0,364,369,3,198,99,0,365,369,3,200,100,0,366,369,3,202,101,0,367,
        369,3,204,102,0,368,315,1,0,0,0,368,316,1,0,0,0,368,317,1,0,0,0,
        368,318,1,0,0,0,368,319,1,0,0,0,368,320,1,0,0,0,368,321,1,0,0,0,
        368,322,1,0,0,0,368,323,1,0,0,0,368,324,1,0,0,0,368,325,1,0,0,0,
        368,326,1,0,0,0,368,327,1,0,0,0,368,328,1,0,0,0,368,329,1,0,0,0,
        368,330,1,0,0,0,368,331,1,0,0,0,368,332,1,0,0,0,368,333,1,0,0,0,
        368,334,1,0,0,0,368,335,1,0,0,0,368,336,1,0,0,0,368,337,1,0,0,0,
        368,338,1,0,0,0,368,339,1,0,0,0,368,340,1,0,0,0,368,341,1,0,0,0,
        368,342,1,0,0,0,368,343,1,0,0,0,368,344,1,0,0,0,368,345,1,0,0,0,
        368,346,1,0,0,0,368,347,1,0,0,0,368,348,1,0,0,0,368,349,1,0,0,0,
        368,350,1,0,0,0,368,351,1,0,0,0,368,352,1,0,0,0,368,353,1,0,0,0,
        368,354,1,0,0,0,368,355,1,0,0,0,368,356,1,0,0,0,368,357,1,0,0,0,
        368,358,1,0,0,0,368,359,1,0,0,0,368,360,1,0,0,0,368,361,1,0,0,0,
        368,362,1,0,0,0,368,363,1,0,0,0,368,364,1,0,0,0,368,365,1,0,0,0,
        368,366,1,0,0,0,368,367,1,0,0,0,369,3,1,0,0,0,370,371,7,0,0,0,371,
        5,1,0,0,0,372,375,3,248,124,0,373,375,5,24,0,0,374,372,1,0,0,0,374,
        373,1,0,0,0,375,7,1,0,0,0,376,377,5,26,0,0,377,378,3,256,128,0,378,
        9,1,0,0,0,379,380,5,63,0,0,380,381,3,256,128,0,381,11,1,0,0,0,382,
        383,5,78,0,0,383,384,3,248,124,0,384,13,1,0,0,0,385,387,5,21,0,0,
        386,388,5,28,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,
        389,390,5,83,0,0,390,15,1,0,0,0,391,392,5,84,0,0,392,393,5,85,0,
        0,393,394,5,30,0,0,394,395,3,18,9,0,395,17,1,0,0,0,396,397,5,172,
        0,0,397,19,1,0,0,0,398,399,5,65,0,0,399,401,3,206,103,0,400,398,
        1,0,0,0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,5,12,0,0,403,404,
        3,210,105,0,404,21,1,0,0,0,405,406,5,61,0,0,406,407,5,62,0,0,407,
        409,5,63,0,0,408,410,3,24,12,0,409,408,1,0,0,0,409,410,1,0,0,0,410,
        23,1,0,0,0,411,415,3,4,2,0,412,415,3,8,4,0,413,415,3,26,13,0,414,
        411,1,0,0,0,414,412,1,0,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,
        414,1,0,0,0,416,417,1,0,0,0,417,25,1,0,0,0,418,421,5,34,0,0,419,
        420,5,27,0,0,420,422,5,82,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        27,1,0,0,0,423,426,5,1,0,0,424,425,5,2,0,0,425,427,5,3,0,0,426,424,
        1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,5,62,0,0,429,430,
        5,65,0,0,430,432,3,206,103,0,431,433,3,30,15,0,432,431,1,0,0,0,432,
        433,1,0,0,0,433,29,1,0,0,0,434,441,3,4,2,0,435,441,3,32,16,0,436,
        441,3,36,18,0,437,441,3,8,4,0,438,441,3,12,6,0,439,441,3,10,5,0,
        440,434,1,0,0,0,440,435,1,0,0,0,440,436,1,0,0,0,440,437,1,0,0,0,
        440,438,1,0,0,0,440,439,1,0,0,0,441,442,1,0,0,0,442,440,1,0,0,0,
        442,443,1,0,0,0,443,31,1,0,0,0,444,445,7,1,0,0,445,33,1,0,0,0,446,
        455,5,75,0,0,447,456,5,76,0,0,448,456,5,77,0,0,449,450,5,76,0,0,
        450,451,5,153,0,0,451,456,5,77,0,0,452,453,5,77,0,0,453,454,5,153,
        0,0,454,456,5,76,0,0,455,447,1,0,0,0,455,448,1,0,0,0,455,449,1,0,
        0,0,455,452,1,0,0,0,456,35,1,0,0,0,457,464,5,21,0,0,458,463,3,38,
        19,0,459,463,3,40,20,0,460,463,3,42,21,0,461,463,3,44,22,0,462,458,
        1,0,0,0,462,459,1,0,0,0,462,460,1,0,0,0,462,461,1,0,0,0,463,466,
        1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,37,1,0,0,0,466,464,1,
        0,0,0,467,468,5,22,0,0,468,469,3,6,3,0,469,39,1,0,0,0,470,471,5,
        80,0,0,471,472,3,6,3,0,472,41,1,0,0,0,473,474,5,23,0,0,474,475,3,
        6,3,0,475,43,1,0,0,0,476,477,5,30,0,0,477,478,5,86,0,0,478,479,3,
        6,3,0,479,45,1,0,0,0,480,481,5,25,0,0,481,482,5,81,0,0,482,485,5,
        12,0,0,483,486,3,276,138,0,484,486,5,24,0,0,485,483,1,0,0,0,485,
        484,1,0,0,0,486,47,1,0,0,0,487,490,5,1,0,0,488,489,5,2,0,0,489,491,
        5,3,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,
        5,62,0,0,493,495,5,12,0,0,494,496,3,210,105,0,495,494,1,0,0,0,495,
        496,1,0,0,0,496,502,1,0,0,0,497,499,5,8,0,0,498,500,5,65,0,0,499,
        498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,503,3,206,103,0,
        502,497,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,505,5,9,0,0,
        505,507,3,276,138,0,506,508,3,50,25,0,507,506,1,0,0,0,507,508,1,
        0,0,0,508,49,1,0,0,0,509,516,3,4,2,0,510,516,3,14,7,0,511,516,3,
        16,8,0,512,516,3,8,4,0,513,516,3,12,6,0,514,516,3,10,5,0,515,509,
        1,0,0,0,515,510,1,0,0,0,515,511,1,0,0,0,515,512,1,0,0,0,515,513,
        1,0,0,0,515,514,1,0,0,0,516,517,1,0,0,0,517,515,1,0,0,0,517,518,
        1,0,0,0,518,51,1,0,0,0,519,522,5,1,0,0,520,521,5,2,0,0,521,523,5,
        3,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,526,5,
        62,0,0,525,527,5,47,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,529,
        1,0,0,0,528,530,5,105,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,
        1,0,0,0,531,532,5,14,0,0,532,535,3,214,107,0,533,534,5,8,0,0,534,
        536,3,20,10,0,535,533,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,
        538,5,19,0,0,538,541,3,290,145,0,539,540,5,102,0,0,540,542,3,218,
        109,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,545,3,
        260,130,0,544,543,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,548,
        3,258,129,0,547,546,1,0,0,0,547,548,1,0,0,0,548,550,1,0,0,0,549,
        551,3,54,27,0,550,549,1,0,0,0,550,551,1,0,0,0,551,53,1,0,0,0,552,
        562,3,4,2,0,553,562,3,14,7,0,554,562,3,16,8,0,555,562,3,8,4,0,556,
        562,3,12,6,0,557,562,3,10,5,0,558,562,3,56,28,0,559,562,3,58,29,
        0,560,562,3,60,30,0,561,552,1,0,0,0,561,553,1,0,0,0,561,554,1,0,
        0,0,561,555,1,0,0,0,561,556,1,0,0,0,561,557,1,0,0,0,561,558,1,0,
        0,0,561,559,1,0,0,0,561,560,1,0,0,0,562,563,1,0,0,0,563,561,1,0,
        0,0,563,564,1,0,0,0,564,55,1,0,0,0,565,566,5,87,0,0,566,569,5,32,
        0,0,567,570,3,248,124,0,568,570,5,88,0,0,569,567,1,0,0,0,569,568,
        1,0,0,0,570,57,1,0,0,0,571,572,5,33,0,0,572,573,7,2,0,0,573,59,1,
        0,0,0,574,575,5,21,0,0,575,576,5,15,0,0,576,577,3,290,145,0,577,
        61,1,0,0,0,578,581,5,1,0,0,579,580,5,2,0,0,580,582,5,3,0,0,581,579,
        1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,584,5,62,0,0,584,585,
        5,15,0,0,585,588,3,224,112,0,586,587,5,8,0,0,587,589,3,20,10,0,588,
        586,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,591,5,19,0,0,591,
        597,3,290,145,0,592,594,5,68,0,0,593,595,3,218,109,0,594,593,1,0,
        0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,3,258,129,0,597,592,
        1,0,0,0,597,598,1,0,0,0,598,602,1,0,0,0,599,601,3,64,32,0,600,599,
        1,0,0,0,601,604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,606,
        1,0,0,0,604,602,1,0,0,0,605,607,3,54,27,0,606,605,1,0,0,0,606,607,
        1,0,0,0,607,63,1,0,0,0,608,610,5,70,0,0,609,611,3,220,110,0,610,
        609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,3,258,129,0,
        613,65,1,0,0,0,614,617,5,1,0,0,615,616,5,2,0,0,616,618,5,3,0,0,617,
        615,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,5,62,0,0,620,
        621,5,16,0,0,621,624,3,226,113,0,622,623,5,8,0,0,623,625,3,20,10,
        0,624,622,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,627,5,19,0,
        0,627,633,3,290,145,0,628,630,5,68,0,0,629,631,3,218,109,0,630,629,
        1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,634,3,258,129,0,633,
        628,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,637,3,68,34,0,636,
        635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,54,27,0,639,
        638,1,0,0,0,639,640,1,0,0,0,640,67,1,0,0,0,641,643,5,70,0,0,642,
        644,3,220,110,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,
        645,646,3,258,129,0,646,69,1,0,0,0,647,650,5,1,0,0,648,649,5,2,0,
        0,649,651,5,3,0,0,650,648,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,
        0,652,653,5,62,0,0,653,654,5,86,0,0,654,655,5,38,0,0,655,661,3,232,
        116,0,656,658,5,8,0,0,657,659,5,65,0,0,658,657,1,0,0,0,658,659,1,
        0,0,0,659,660,1,0,0,0,660,662,3,206,103,0,661,656,1,0,0,0,661,662,
        1,0,0,0,662,665,1,0,0,0,663,664,5,9,0,0,664,666,3,72,36,0,665,663,
        1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,669,3,74,37,0,668,667,
        1,0,0,0,668,669,1,0,0,0,669,71,1,0,0,0,670,671,3,248,124,0,671,73,
        1,0,0,0,672,679,3,4,2,0,673,679,3,14,7,0,674,679,3,8,4,0,675,679,
        3,12,6,0,676,679,3,76,38,0,677,679,3,78,39,0,678,672,1,0,0,0,678,
        673,1,0,0,0,678,674,1,0,0,0,678,675,1,0,0,0,678,676,1,0,0,0,678,
        677,1,0,0,0,679,680,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,
        75,1,0,0,0,682,683,5,43,0,0,683,684,3,248,124,0,684,77,1,0,0,0,685,
        687,5,48,0,0,686,688,5,106,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,
        689,1,0,0,0,689,690,5,104,0,0,690,79,1,0,0,0,691,694,5,1,0,0,692,
        693,5,2,0,0,693,695,5,3,0,0,694,692,1,0,0,0,694,695,1,0,0,0,695,
        696,1,0,0,0,696,697,5,62,0,0,697,698,5,86,0,0,698,699,5,45,0,0,699,
        700,3,236,118,0,700,705,5,8,0,0,701,703,5,65,0,0,702,701,1,0,0,0,
        702,703,1,0,0,0,703,704,1,0,0,0,704,706,3,206,103,0,705,702,1,0,
        0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,5,86,0,0,708,709,5,38,
        0,0,709,717,3,232,116,0,710,711,5,9,0,0,711,718,3,72,36,0,712,714,
        5,46,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,716,
        5,86,0,0,716,718,3,248,124,0,717,710,1,0,0,0,717,713,1,0,0,0,718,
        720,1,0,0,0,719,721,3,82,41,0,720,719,1,0,0,0,720,721,1,0,0,0,721,
        81,1,0,0,0,722,726,3,4,2,0,723,726,3,14,7,0,724,726,3,8,4,0,725,
        722,1,0,0,0,725,723,1,0,0,0,725,724,1,0,0,0,726,727,1,0,0,0,727,
        725,1,0,0,0,727,728,1,0,0,0,728,83,1,0,0,0,729,732,5,1,0,0,730,731,
        5,2,0,0,731,733,5,3,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,734,
        1,0,0,0,734,735,5,62,0,0,735,736,7,3,0,0,736,737,5,95,0,0,737,743,
        3,86,43,0,738,740,5,8,0,0,739,741,5,65,0,0,740,739,1,0,0,0,740,741,
        1,0,0,0,741,742,1,0,0,0,742,744,3,206,103,0,743,738,1,0,0,0,743,
        744,1,0,0,0,744,745,1,0,0,0,745,749,5,96,0,0,746,750,5,97,0,0,747,
        750,5,98,0,0,748,750,3,88,44,0,749,746,1,0,0,0,749,747,1,0,0,0,749,
        748,1,0,0,0,750,752,1,0,0,0,751,753,3,90,45,0,752,751,1,0,0,0,752,
        753,1,0,0,0,753,85,1,0,0,0,754,755,3,248,124,0,755,87,1,0,0,0,756,
        757,3,248,124,0,757,89,1,0,0,0,758,763,3,4,2,0,759,763,3,12,6,0,
        760,763,3,92,46,0,761,763,3,94,47,0,762,758,1,0,0,0,762,759,1,0,
        0,0,762,760,1,0,0,0,762,761,1,0,0,0,763,764,1,0,0,0,764,762,1,0,
        0,0,764,765,1,0,0,0,765,91,1,0,0,0,766,767,5,100,0,0,767,768,5,7,
        0,0,768,771,5,99,0,0,769,770,5,42,0,0,770,772,5,101,0,0,771,769,
        1,0,0,0,771,772,1,0,0,0,772,93,1,0,0,0,773,774,5,24,0,0,774,775,
        5,41,0,0,775,776,3,248,124,0,776,95,1,0,0,0,777,780,5,1,0,0,778,
        779,5,2,0,0,779,781,5,3,0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,
        782,1,0,0,0,782,783,5,62,0,0,783,784,5,25,0,0,784,785,3,98,49,0,
        785,786,5,165,0,0,786,790,3,86,43,0,787,788,5,39,0,0,788,789,5,40,
        0,0,789,791,3,100,50,0,790,787,1,0,0,0,790,791,1,0,0,0,791,793,1,
        0,0,0,792,794,3,102,51,0,793,792,1,0,0,0,793,794,1,0,0,0,794,97,
        1,0,0,0,795,796,3,248,124,0,796,99,1,0,0,0,797,798,3,248,124,0,798,
        101,1,0,0,0,799,803,3,106,53,0,800,803,3,104,52,0,801,803,3,8,4,
        0,802,799,1,0,0,0,802,800,1,0,0,0,802,801,1,0,0,0,803,804,1,0,0,
        0,804,802,1,0,0,0,804,805,1,0,0,0,805,103,1,0,0,0,806,807,5,95,0,
        0,807,808,5,26,0,0,808,809,3,256,128,0,809,105,1,0,0,0,810,811,5,
        54,0,0,811,812,7,4,0,0,812,107,1,0,0,0,813,816,5,1,0,0,814,815,5,
        2,0,0,815,817,5,3,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,818,1,
        0,0,0,818,819,5,62,0,0,819,820,5,41,0,0,820,823,3,114,57,0,821,822,
        5,108,0,0,822,824,3,112,56,0,823,821,1,0,0,0,823,824,1,0,0,0,824,
        834,1,0,0,0,825,832,5,8,0,0,826,827,5,60,0,0,827,833,5,65,0,0,828,
        830,5,65,0,0,829,828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,
        833,3,206,103,0,832,826,1,0,0,0,832,829,1,0,0,0,833,835,1,0,0,0,
        834,825,1,0,0,0,834,835,1,0,0,0,835,837,1,0,0,0,836,838,3,110,55,
        0,837,836,1,0,0,0,837,838,1,0,0,0,838,109,1,0,0,0,839,842,3,8,4,
        0,840,842,3,12,6,0,841,839,1,0,0,0,841,840,1,0,0,0,842,843,1,0,0,
        0,843,841,1,0,0,0,843,844,1,0,0,0,844,111,1,0,0,0,845,846,3,248,
        124,0,846,113,1,0,0,0,847,848,3,248,124,0,848,115,1,0,0,0,849,850,
        5,44,0,0,850,851,5,62,0,0,851,852,5,65,0,0,852,853,3,206,103,0,853,
        854,5,7,0,0,854,855,5,79,0,0,855,856,5,22,0,0,856,857,3,208,104,
        0,857,117,1,0,0,0,858,859,5,4,0,0,859,860,5,62,0,0,860,861,5,65,
        0,0,861,866,3,206,103,0,862,863,5,7,0,0,863,864,5,79,0,0,864,865,
        5,22,0,0,865,867,3,208,104,0,866,862,1,0,0,0,866,867,1,0,0,0,867,
        869,1,0,0,0,868,870,3,30,15,0,869,868,1,0,0,0,869,870,1,0,0,0,870,
        119,1,0,0,0,871,872,5,4,0,0,872,873,5,62,0,0,873,875,5,12,0,0,874,
        876,3,210,105,0,875,874,1,0,0,0,875,876,1,0,0,0,876,882,1,0,0,0,
        877,879,5,8,0,0,878,880,5,65,0,0,879,878,1,0,0,0,879,880,1,0,0,0,
        880,881,1,0,0,0,881,883,3,206,103,0,882,877,1,0,0,0,882,883,1,0,
        0,0,883,888,1,0,0,0,884,885,5,7,0,0,885,886,5,79,0,0,886,887,5,22,
        0,0,887,889,3,212,106,0,888,884,1,0,0,0,888,889,1,0,0,0,889,892,
        1,0,0,0,890,891,5,9,0,0,891,893,3,276,138,0,892,890,1,0,0,0,892,
        893,1,0,0,0,893,895,1,0,0,0,894,896,3,50,25,0,895,894,1,0,0,0,895,
        896,1,0,0,0,896,121,1,0,0,0,897,898,5,4,0,0,898,900,5,62,0,0,899,
        901,5,47,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,903,1,0,0,0,902,
        904,5,105,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,905,1,0,0,0,905,
        906,5,14,0,0,906,909,3,214,107,0,907,908,5,8,0,0,908,910,3,20,10,
        0,909,907,1,0,0,0,909,910,1,0,0,0,910,915,1,0,0,0,911,912,5,7,0,
        0,912,913,5,79,0,0,913,914,5,22,0,0,914,916,3,216,108,0,915,911,
        1,0,0,0,915,916,1,0,0,0,916,925,1,0,0,0,917,918,5,102,0,0,918,920,
        3,218,109,0,919,921,3,260,130,0,920,919,1,0,0,0,920,921,1,0,0,0,
        921,923,1,0,0,0,922,924,3,258,129,0,923,922,1,0,0,0,923,924,1,0,
        0,0,924,926,1,0,0,0,925,917,1,0,0,0,925,926,1,0,0,0,926,928,1,0,
        0,0,927,929,3,54,27,0,928,927,1,0,0,0,928,929,1,0,0,0,929,123,1,
        0,0,0,930,931,5,4,0,0,931,932,5,62,0,0,932,933,5,15,0,0,933,936,
        3,224,112,0,934,935,5,8,0,0,935,937,3,20,10,0,936,934,1,0,0,0,936,
        937,1,0,0,0,937,942,1,0,0,0,938,939,5,7,0,0,939,940,5,79,0,0,940,
        941,5,22,0,0,941,943,3,228,114,0,942,938,1,0,0,0,942,943,1,0,0,0,
        943,949,1,0,0,0,944,946,5,68,0,0,945,947,3,218,109,0,946,945,1,0,
        0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,950,3,258,129,0,949,944,
        1,0,0,0,949,950,1,0,0,0,950,954,1,0,0,0,951,953,3,64,32,0,952,951,
        1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,1,0,0,0,955,958,
        1,0,0,0,956,954,1,0,0,0,957,959,3,54,27,0,958,957,1,0,0,0,958,959,
        1,0,0,0,959,125,1,0,0,0,960,961,5,4,0,0,961,962,5,62,0,0,962,963,
        5,16,0,0,963,966,3,226,113,0,964,965,5,8,0,0,965,967,3,20,10,0,966,
        964,1,0,0,0,966,967,1,0,0,0,967,972,1,0,0,0,968,969,5,7,0,0,969,
        970,5,79,0,0,970,971,5,22,0,0,971,973,3,230,115,0,972,968,1,0,0,
        0,972,973,1,0,0,0,973,979,1,0,0,0,974,976,5,68,0,0,975,977,3,218,
        109,0,976,975,1,0,0,0,976,977,1,0,0,0,977,978,1,0,0,0,978,980,3,
        258,129,0,979,974,1,0,0,0,979,980,1,0,0,0,980,984,1,0,0,0,981,983,
        3,68,34,0,982,981,1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,0,984,985,
        1,0,0,0,985,988,1,0,0,0,986,984,1,0,0,0,987,989,3,54,27,0,988,987,
        1,0,0,0,988,989,1,0,0,0,989,127,1,0,0,0,990,991,5,4,0,0,991,992,
        5,62,0,0,992,993,5,86,0,0,993,994,5,38,0,0,994,1000,3,232,116,0,
        995,997,5,8,0,0,996,998,5,65,0,0,997,996,1,0,0,0,997,998,1,0,0,0,
        998,999,1,0,0,0,999,1001,3,206,103,0,1000,995,1,0,0,0,1000,1001,
        1,0,0,0,1001,1006,1,0,0,0,1002,1003,5,7,0,0,1003,1004,5,79,0,0,1004,
        1005,5,22,0,0,1005,1007,3,234,117,0,1006,1002,1,0,0,0,1006,1007,
        1,0,0,0,1007,1009,1,0,0,0,1008,1010,3,74,37,0,1009,1008,1,0,0,0,
        1009,1010,1,0,0,0,1010,129,1,0,0,0,1011,1012,5,4,0,0,1012,1013,5,
        62,0,0,1013,1014,5,25,0,0,1014,1015,3,98,49,0,1015,1016,5,165,0,
        0,1016,1022,3,86,43,0,1017,1019,5,8,0,0,1018,1020,5,65,0,0,1019,
        1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1023,3,206,
        103,0,1022,1017,1,0,0,0,1022,1023,1,0,0,0,1023,1027,1,0,0,0,1024,
        1025,5,39,0,0,1025,1026,5,40,0,0,1026,1028,3,100,50,0,1027,1024,
        1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1031,3,102,51,0,
        1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,131,1,0,0,0,1032,1033,5,
        17,0,0,1033,1034,5,62,0,0,1034,1035,5,65,0,0,1035,1036,3,206,103,
        0,1036,133,1,0,0,0,1037,1038,5,17,0,0,1038,1039,5,62,0,0,1039,1040,
        5,12,0,0,1040,1046,3,210,105,0,1041,1043,5,9,0,0,1042,1044,5,65,
        0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1047,
        3,206,103,0,1046,1041,1,0,0,0,1046,1047,1,0,0,0,1047,135,1,0,0,0,
        1048,1049,5,17,0,0,1049,1051,5,62,0,0,1050,1052,5,47,0,0,1051,1050,
        1,0,0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,0,1053,1055,5,105,0,0,
        1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,0,0,1056,1057,
        5,14,0,0,1057,1060,3,214,107,0,1058,1059,5,9,0,0,1059,1061,3,20,
        10,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,137,1,0,0,0,1062,1063,
        5,17,0,0,1063,1064,5,62,0,0,1064,1065,5,15,0,0,1065,1068,3,224,112,
        0,1066,1067,5,9,0,0,1067,1069,3,20,10,0,1068,1066,1,0,0,0,1068,1069,
        1,0,0,0,1069,139,1,0,0,0,1070,1071,5,17,0,0,1071,1072,5,62,0,0,1072,
        1073,5,16,0,0,1073,1076,3,226,113,0,1074,1075,5,9,0,0,1075,1077,
        3,20,10,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,141,1,0,0,0,1078,
        1079,5,17,0,0,1079,1080,5,62,0,0,1080,1081,5,86,0,0,1081,1082,5,
        38,0,0,1082,1088,3,232,116,0,1083,1085,5,9,0,0,1084,1086,5,65,0,
        0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1089,
        3,206,103,0,1088,1083,1,0,0,0,1088,1089,1,0,0,0,1089,143,1,0,0,0,
        1090,1091,5,17,0,0,1091,1092,5,62,0,0,1092,1093,5,86,0,0,1093,1094,
        5,45,0,0,1094,1095,3,236,118,0,1095,1100,5,9,0,0,1096,1098,5,65,
        0,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,0,0,0,1099,1101,
        3,206,103,0,1100,1097,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,
        0,1102,1103,5,86,0,0,1103,1104,5,38,0,0,1104,1105,3,232,116,0,1105,
        145,1,0,0,0,1106,1107,5,17,0,0,1107,1108,5,62,0,0,1108,1109,7,3,
        0,0,1109,1110,5,95,0,0,1110,1116,3,86,43,0,1111,1113,5,9,0,0,1112,
        1114,5,65,0,0,1113,1112,1,0,0,0,1113,1114,1,0,0,0,1114,1115,1,0,
        0,0,1115,1117,3,206,103,0,1116,1111,1,0,0,0,1116,1117,1,0,0,0,1117,
        147,1,0,0,0,1118,1119,5,17,0,0,1119,1120,5,62,0,0,1120,1121,5,25,
        0,0,1121,1122,3,98,49,0,1122,1123,5,165,0,0,1123,1124,3,86,43,0,
        1124,149,1,0,0,0,1125,1126,5,17,0,0,1126,1127,5,62,0,0,1127,1128,
        5,41,0,0,1128,1129,3,114,57,0,1129,151,1,0,0,0,1130,1131,5,49,0,
        0,1131,1132,5,62,0,0,1132,1139,3,154,77,0,1133,1134,5,8,0,0,1134,
        1137,3,20,10,0,1135,1136,5,109,0,0,1136,1138,3,222,111,0,1137,1135,
        1,0,0,0,1137,1138,1,0,0,0,1138,1140,1,0,0,0,1139,1133,1,0,0,0,1139,
        1140,1,0,0,0,1140,1141,1,0,0,0,1141,1142,5,42,0,0,1142,1143,3,114,
        57,0,1143,153,1,0,0,0,1144,1150,3,156,78,0,1145,1146,3,156,78,0,
        1146,1147,5,153,0,0,1147,1148,3,154,77,0,1148,1150,1,0,0,0,1149,
        1144,1,0,0,0,1149,1145,1,0,0,0,1150,155,1,0,0,0,1151,1152,7,5,0,
        0,1152,157,1,0,0,0,1153,1154,5,49,0,0,1154,1155,5,62,0,0,1155,1156,
        5,41,0,0,1156,1157,3,114,57,0,1157,1158,5,42,0,0,1158,1159,3,98,
        49,0,1159,1160,5,165,0,0,1160,1162,3,86,43,0,1161,1163,3,12,6,0,
        1162,1161,1,0,0,0,1162,1163,1,0,0,0,1163,159,1,0,0,0,1164,1165,5,
        53,0,0,1165,1166,5,62,0,0,1166,1173,3,154,77,0,1167,1168,5,8,0,0,
        1168,1171,3,20,10,0,1169,1170,5,109,0,0,1170,1172,3,222,111,0,1171,
        1169,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,0,1173,1167,1,0,0,
        0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1176,5,9,0,0,1176,1177,
        3,114,57,0,1177,161,1,0,0,0,1178,1179,5,53,0,0,1179,1180,5,62,0,
        0,1180,1181,5,41,0,0,1181,1182,3,114,57,0,1182,1183,5,9,0,0,1183,
        1184,3,98,49,0,1184,1185,5,165,0,0,1185,1186,3,86,43,0,1186,163,
        1,0,0,0,1187,1188,5,18,0,0,1188,1189,5,62,0,0,1189,1190,3,166,83,
        0,1190,165,1,0,0,0,1191,1192,5,65,0,0,1192,1195,3,206,103,0,1193,
        1195,3,20,10,0,1194,1191,1,0,0,0,1194,1193,1,0,0,0,1195,167,1,0,
        0,0,1196,1197,5,5,0,0,1197,1199,5,62,0,0,1198,1200,5,63,0,0,1199,
        1198,1,0,0,0,1199,1200,1,0,0,0,1200,1201,1,0,0,0,1201,1202,5,6,0,
        0,1202,169,1,0,0,0,1203,1204,5,5,0,0,1204,1205,5,62,0,0,1205,1206,
        5,64,0,0,1206,171,1,0,0,0,1207,1208,5,5,0,0,1208,1209,5,62,0,0,1209,
        1215,5,11,0,0,1210,1212,7,6,0,0,1211,1213,5,65,0,0,1212,1211,1,0,
        0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1216,3,206,103,0,1215,
        1210,1,0,0,0,1215,1216,1,0,0,0,1216,173,1,0,0,0,1217,1218,5,5,0,
        0,1218,1220,5,62,0,0,1219,1221,5,47,0,0,1220,1219,1,0,0,0,1220,1221,
        1,0,0,0,1221,1223,1,0,0,0,1222,1224,5,105,0,0,1223,1222,1,0,0,0,
        1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1228,5,66,0,0,1226,1227,
        7,6,0,0,1227,1229,3,20,10,0,1228,1226,1,0,0,0,1228,1229,1,0,0,0,
        1229,175,1,0,0,0,1230,1231,5,5,0,0,1231,1232,5,62,0,0,1232,1235,
        5,67,0,0,1233,1234,7,6,0,0,1234,1236,3,20,10,0,1235,1233,1,0,0,0,
        1235,1236,1,0,0,0,1236,177,1,0,0,0,1237,1238,5,5,0,0,1238,1239,5,
        62,0,0,1239,1242,5,69,0,0,1240,1241,7,6,0,0,1241,1243,3,20,10,0,
        1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,179,1,0,0,0,1244,1245,5,
        5,0,0,1245,1246,5,62,0,0,1246,1247,5,86,0,0,1247,1253,5,91,0,0,1248,
        1250,7,6,0,0,1249,1251,5,65,0,0,1250,1249,1,0,0,0,1250,1251,1,0,
        0,0,1251,1252,1,0,0,0,1252,1254,3,206,103,0,1253,1248,1,0,0,0,1253,
        1254,1,0,0,0,1254,181,1,0,0,0,1255,1256,5,5,0,0,1256,1257,5,62,0,
        0,1257,1258,5,86,0,0,1258,1259,5,92,0,0,1259,1264,7,6,0,0,1260,1262,
        5,65,0,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,
        1265,3,206,103,0,1264,1261,1,0,0,0,1264,1265,1,0,0,0,1265,1266,1,
        0,0,0,1266,1267,5,86,0,0,1267,1268,5,38,0,0,1268,1269,3,232,116,
        0,1269,183,1,0,0,0,1270,1271,5,5,0,0,1271,1272,5,62,0,0,1272,1273,
        5,93,0,0,1273,1279,5,94,0,0,1274,1276,7,6,0,0,1275,1277,5,65,0,0,
        1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1278,1,0,0,0,1278,1280,
        3,206,103,0,1279,1274,1,0,0,0,1279,1280,1,0,0,0,1280,185,1,0,0,0,
        1281,1282,5,5,0,0,1282,1283,5,62,0,0,1283,1293,5,107,0,0,1284,1291,
        7,6,0,0,1285,1286,5,60,0,0,1286,1292,5,65,0,0,1287,1289,5,65,0,0,
        1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1292,
        3,206,103,0,1291,1285,1,0,0,0,1291,1288,1,0,0,0,1292,1294,1,0,0,
        0,1293,1284,1,0,0,0,1293,1294,1,0,0,0,1294,1301,1,0,0,0,1295,1297,
        5,58,0,0,1296,1298,3,98,49,0,1297,1296,1,0,0,0,1297,1298,1,0,0,0,
        1298,1299,1,0,0,0,1299,1300,5,165,0,0,1300,1302,3,86,43,0,1301,1295,
        1,0,0,0,1301,1302,1,0,0,0,1302,187,1,0,0,0,1303,1304,5,5,0,0,1304,
        1305,5,62,0,0,1305,1306,5,57,0,0,1306,1307,5,58,0,0,1307,1308,3,
        114,57,0,1308,189,1,0,0,0,1309,1310,5,5,0,0,1310,1311,5,1,0,0,1311,
        1312,5,62,0,0,1312,1314,5,65,0,0,1313,1315,3,206,103,0,1314,1313,
        1,0,0,0,1314,1315,1,0,0,0,1315,191,1,0,0,0,1316,1317,5,5,0,0,1317,
        1318,5,1,0,0,1318,1319,5,62,0,0,1319,1321,5,12,0,0,1320,1322,3,210,
        105,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1328,1,0,0,0,1323,
        1325,7,6,0,0,1324,1326,5,65,0,0,1325,1324,1,0,0,0,1325,1326,1,0,
        0,0,1326,1327,1,0,0,0,1327,1329,3,206,103,0,1328,1323,1,0,0,0,1328,
        1329,1,0,0,0,1329,193,1,0,0,0,1330,1331,5,5,0,0,1331,1332,5,1,0,
        0,1332,1334,5,62,0,0,1333,1335,5,47,0,0,1334,1333,1,0,0,0,1334,1335,
        1,0,0,0,1335,1337,1,0,0,0,1336,1338,5,105,0,0,1337,1336,1,0,0,0,
        1337,1338,1,0,0,0,1338,1339,1,0,0,0,1339,1340,5,14,0,0,1340,1343,
        3,214,107,0,1341,1342,7,6,0,0,1342,1344,3,20,10,0,1343,1341,1,0,
        0,0,1343,1344,1,0,0,0,1344,195,1,0,0,0,1345,1346,5,5,0,0,1346,1347,
        5,1,0,0,1347,1348,5,62,0,0,1348,1349,5,15,0,0,1349,1352,3,224,112,
        0,1350,1351,7,6,0,0,1351,1353,3,20,10,0,1352,1350,1,0,0,0,1352,1353,
        1,0,0,0,1353,197,1,0,0,0,1354,1355,5,5,0,0,1355,1356,5,1,0,0,1356,
        1357,5,62,0,0,1357,1358,5,16,0,0,1358,1361,3,226,113,0,1359,1360,
        7,6,0,0,1360,1362,3,20,10,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,
        1362,199,1,0,0,0,1363,1364,5,5,0,0,1364,1365,5,1,0,0,1365,1366,5,
        62,0,0,1366,1367,5,86,0,0,1367,1368,5,38,0,0,1368,1374,3,232,116,
        0,1369,1371,7,6,0,0,1370,1372,5,65,0,0,1371,1370,1,0,0,0,1371,1372,
        1,0,0,0,1372,1373,1,0,0,0,1373,1375,3,206,103,0,1374,1369,1,0,0,
        0,1374,1375,1,0,0,0,1375,201,1,0,0,0,1376,1377,5,5,0,0,1377,1378,
        5,1,0,0,1378,1379,5,62,0,0,1379,1380,5,86,0,0,1380,1381,5,45,0,0,
        1381,1382,3,236,118,0,1382,1387,7,6,0,0,1383,1385,5,65,0,0,1384,
        1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,1386,1388,3,206,
        103,0,1387,1384,1,0,0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,
        1390,5,86,0,0,1390,1391,5,38,0,0,1391,1392,3,232,116,0,1392,203,
        1,0,0,0,1393,1394,5,5,0,0,1394,1395,5,1,0,0,1395,1396,5,62,0,0,1396,
        1397,5,93,0,0,1397,1398,5,95,0,0,1398,1404,3,86,43,0,1399,1401,7,
        6,0,0,1400,1402,5,65,0,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,
        1403,1,0,0,0,1403,1405,3,206,103,0,1404,1399,1,0,0,0,1404,1405,1,
        0,0,0,1405,205,1,0,0,0,1406,1408,3,240,120,0,1407,1406,1,0,0,0,1407,
        1408,1,0,0,0,1408,1410,1,0,0,0,1409,1411,3,244,122,0,1410,1409,1,
        0,0,0,1410,1411,1,0,0,0,1411,1412,1,0,0,0,1412,1413,3,246,123,0,
        1413,207,1,0,0,0,1414,1416,3,240,120,0,1415,1414,1,0,0,0,1415,1416,
        1,0,0,0,1416,1418,1,0,0,0,1417,1419,3,244,122,0,1418,1417,1,0,0,
        0,1418,1419,1,0,0,0,1419,1420,1,0,0,0,1420,1421,3,246,123,0,1421,
        209,1,0,0,0,1422,1423,3,246,123,0,1423,211,1,0,0,0,1424,1425,3,246,
        123,0,1425,213,1,0,0,0,1426,1427,3,246,123,0,1427,215,1,0,0,0,1428,
        1429,3,246,123,0,1429,217,1,0,0,0,1430,1431,3,284,142,0,1431,219,
        1,0,0,0,1432,1433,3,284,142,0,1433,221,1,0,0,0,1434,1435,3,246,123,
        0,1435,223,1,0,0,0,1436,1437,3,246,123,0,1437,225,1,0,0,0,1438,1439,
        3,246,123,0,1439,227,1,0,0,0,1440,1441,3,246,123,0,1441,229,1,0,
        0,0,1442,1443,3,246,123,0,1443,231,1,0,0,0,1444,1445,3,246,123,0,
        1445,233,1,0,0,0,1446,1447,3,246,123,0,1447,235,1,0,0,0,1448,1449,
        3,246,123,0,1449,237,1,0,0,0,1450,1453,3,284,142,0,1451,1453,3,248,
        124,0,1452,1450,1,0,0,0,1452,1451,1,0,0,0,1453,239,1,0,0,0,1454,
        1459,3,238,119,0,1455,1456,5,153,0,0,1456,1458,3,238,119,0,1457,
        1455,1,0,0,0,1458,1461,1,0,0,0,1459,1457,1,0,0,0,1459,1460,1,0,0,
        0,1460,1463,1,0,0,0,1461,1459,1,0,0,0,1462,1464,5,165,0,0,1463,1462,
        1,0,0,0,1463,1464,1,0,0,0,1464,241,1,0,0,0,1465,1474,3,292,146,0,
        1466,1470,3,284,142,0,1467,1469,3,294,147,0,1468,1467,1,0,0,0,1469,
        1472,1,0,0,0,1470,1468,1,0,0,0,1470,1471,1,0,0,0,1471,1474,1,0,0,
        0,1472,1470,1,0,0,0,1473,1465,1,0,0,0,1473,1466,1,0,0,0,1474,243,
        1,0,0,0,1475,1478,3,242,121,0,1476,1478,5,166,0,0,1477,1475,1,0,
        0,0,1477,1476,1,0,0,0,1478,1481,1,0,0,0,1479,1480,5,155,0,0,1480,
        1482,5,172,0,0,1481,1479,1,0,0,0,1481,1482,1,0,0,0,1482,245,1,0,
        0,0,1483,1484,5,141,0,0,1484,1487,3,242,121,0,1485,1486,5,141,0,
        0,1486,1488,3,242,121,0,1487,1485,1,0,0,0,1487,1488,1,0,0,0,1488,
        1491,1,0,0,0,1489,1491,3,248,124,0,1490,1483,1,0,0,0,1490,1489,1,
        0,0,0,1491,247,1,0,0,0,1492,1493,7,7,0,0,1493,249,1,0,0,0,1494,1495,
        5,158,0,0,1495,1500,3,252,126,0,1496,1497,5,153,0,0,1497,1499,3,
        252,126,0,1498,1496,1,0,0,0,1499,1502,1,0,0,0,1500,1498,1,0,0,0,
        1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,1500,1,0,0,0,1503,1504,
        5,159,0,0,1504,1508,1,0,0,0,1505,1506,5,158,0,0,1506,1508,5,159,
        0,0,1507,1494,1,0,0,0,1507,1505,1,0,0,0,1508,251,1,0,0,0,1509,1510,
        5,180,0,0,1510,1511,5,155,0,0,1511,1512,3,256,128,0,1512,253,1,0,
        0,0,1513,1522,5,161,0,0,1514,1519,3,256,128,0,1515,1516,5,153,0,
        0,1516,1518,3,256,128,0,1517,1515,1,0,0,0,1518,1521,1,0,0,0,1519,
        1517,1,0,0,0,1519,1520,1,0,0,0,1520,1523,1,0,0,0,1521,1519,1,0,0,
        0,1522,1514,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1525,
        5,162,0,0,1525,255,1,0,0,0,1526,1538,5,180,0,0,1527,1529,7,8,0,0,
        1528,1527,1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,1538,
        5,174,0,0,1531,1538,5,172,0,0,1532,1538,3,250,125,0,1533,1538,3,
        254,127,0,1534,1538,5,36,0,0,1535,1538,5,37,0,0,1536,1538,5,35,0,
        0,1537,1526,1,0,0,0,1537,1528,1,0,0,0,1537,1531,1,0,0,0,1537,1532,
        1,0,0,0,1537,1533,1,0,0,0,1537,1534,1,0,0,0,1537,1535,1,0,0,0,1537,
        1536,1,0,0,0,1538,257,1,0,0,0,1539,1540,5,158,0,0,1540,1545,3,262,
        131,0,1541,1542,5,153,0,0,1542,1544,3,262,131,0,1543,1541,1,0,0,
        0,1544,1547,1,0,0,0,1545,1543,1,0,0,0,1545,1546,1,0,0,0,1546,1548,
        1,0,0,0,1547,1545,1,0,0,0,1548,1549,5,159,0,0,1549,1553,1,0,0,0,
        1550,1551,5,158,0,0,1551,1553,5,159,0,0,1552,1539,1,0,0,0,1552,1550,
        1,0,0,0,1553,259,1,0,0,0,1554,1556,7,9,0,0,1555,1554,1,0,0,0,1556,
        1557,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,261,1,0,0,
        0,1559,1560,3,266,133,0,1560,1561,5,155,0,0,1561,1577,3,268,134,
        0,1562,1578,5,112,0,0,1563,1578,5,113,0,0,1564,1578,5,111,0,0,1565,
        1578,5,115,0,0,1566,1578,5,117,0,0,1567,1578,5,118,0,0,1568,1578,
        5,119,0,0,1569,1578,5,120,0,0,1570,1578,5,129,0,0,1571,1572,5,121,
        0,0,1572,1573,5,156,0,0,1573,1574,3,272,136,0,1574,1575,5,157,0,
        0,1575,1578,1,0,0,0,1576,1578,3,260,130,0,1577,1562,1,0,0,0,1577,
        1563,1,0,0,0,1577,1564,1,0,0,0,1577,1565,1,0,0,0,1577,1566,1,0,0,
        0,1577,1567,1,0,0,0,1577,1568,1,0,0,0,1577,1569,1,0,0,0,1577,1570,
        1,0,0,0,1577,1571,1,0,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,
        1580,1,0,0,0,1579,1581,3,258,129,0,1580,1579,1,0,0,0,1580,1581,1,
        0,0,0,1581,263,1,0,0,0,1582,1583,7,10,0,0,1583,265,1,0,0,0,1584,
        1588,5,180,0,0,1585,1588,3,284,142,0,1586,1588,3,264,132,0,1587,
        1584,1,0,0,0,1587,1585,1,0,0,0,1587,1586,1,0,0,0,1588,267,1,0,0,
        0,1589,1592,3,290,145,0,1590,1592,3,264,132,0,1591,1589,1,0,0,0,
        1591,1590,1,0,0,0,1592,269,1,0,0,0,1593,1596,5,180,0,0,1594,1596,
        3,284,142,0,1595,1593,1,0,0,0,1595,1594,1,0,0,0,1596,271,1,0,0,0,
        1597,1600,5,180,0,0,1598,1600,3,284,142,0,1599,1597,1,0,0,0,1599,
        1598,1,0,0,0,1600,273,1,0,0,0,1601,1604,3,290,145,0,1602,1604,3,
        258,129,0,1603,1601,1,0,0,0,1603,1602,1,0,0,0,1604,275,1,0,0,0,1605,
        1606,3,284,142,0,1606,277,1,0,0,0,1607,1608,3,284,142,0,1608,279,
        1,0,0,0,1609,1610,3,284,142,0,1610,281,1,0,0,0,1611,1612,7,11,0,
        0,1612,283,1,0,0,0,1613,1614,3,282,141,0,1614,285,1,0,0,0,1615,1620,
        3,284,142,0,1616,1617,5,153,0,0,1617,1619,3,284,142,0,1618,1616,
        1,0,0,0,1619,1622,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,
        287,1,0,0,0,1622,1620,1,0,0,0,1623,1624,5,156,0,0,1624,1625,3,286,
        143,0,1625,1626,5,157,0,0,1626,289,1,0,0,0,1627,1629,3,284,142,0,
        1628,1630,3,294,147,0,1629,1628,1,0,0,0,1629,1630,1,0,0,0,1630,291,
        1,0,0,0,1631,1636,3,284,142,0,1632,1634,3,294,147,0,1633,1635,3,
        294,147,0,1634,1633,1,0,0,0,1634,1635,1,0,0,0,1635,1637,1,0,0,0,
        1636,1632,1,0,0,0,1636,1637,1,0,0,0,1637,293,1,0,0,0,1638,1639,5,
        152,0,0,1639,1640,3,284,142,0,1640,295,1,0,0,0,212,300,305,308,311,
        368,374,387,400,409,414,416,421,426,432,440,442,455,462,464,485,
        490,495,499,502,507,515,517,522,526,529,535,541,544,547,550,561,
        563,569,581,588,594,597,602,606,610,617,624,630,633,636,639,643,
        650,658,661,665,668,678,680,687,694,702,705,713,717,720,725,727,
        732,740,743,749,752,762,764,771,780,790,793,802,804,816,823,829,
        832,834,837,841,843,866,869,875,879,882,888,892,895,900,903,909,
        915,920,923,925,928,936,942,946,949,954,958,966,972,976,979,984,
        988,997,1000,1006,1009,1019,1022,1027,1030,1043,1046,1051,1054,1060,
        1068,1076,1085,1088,1097,1100,1113,1116,1137,1139,1149,1162,1171,
        1173,1194,1199,1212,1215,1220,1223,1228,1235,1242,1250,1253,1261,
        1264,1276,1279,1288,1291,1293,1297,1301,1314,1321,1325,1328,1334,
        1337,1343,1352,1361,1371,1374,1384,1387,1401,1404,1407,1410,1415,
        1418,1452,1459,1463,1470,1473,1477,1481,1487,1490,1500,1507,1519,
        1522,1528,1537,1545,1552,1557,1577,1580,1587,1591,1595,1599,1603,
        1620,1629,1634,1636
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", 
                     "'->>'", "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", 
                      "SET_SYMBOL", "IDENTIFIED_SYMBOL", "BY_SYMBOL", "ROLE_SYMBOL", 
                      "TO_SYMBOL", "IGNORE_SYMBOL", "CLONE_SYMBOL", "FILE_SYMBOL", 
                      "BINARY_SYMBOL", "DATA_SYMBOL", "LOAD_SYMBOL", "GRANT_SYMBOL", 
                      "READ_SYMBOL", "DELETE_SYMBOL", "GROUP_SYMBOL", "REVOKE_SYMBOL", 
                      "ACCOUNT_SYMBOL", "LOCK_SYMBOL", "UNLOCK_SYMBOL", 
                      "GRANTS_SYMBOL", "FOR_SYMBOL", "LEVEL_SYMBOL", "ANY_SYMBOL", 
                      "CONFIGURE_SYMBOL", "REST_SYMBOL", "METADATA_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "VIEWS_SYMBOL", 
                      "PROCEDURES_SYMBOL", "PARAMETERS_SYMBOL", "FUNCTIONS_SYMBOL", 
                      "RESULT_SYMBOL", "ENABLED_SYMBOL", "PUBLISHED_SYMBOL", 
                      "DISABLED_SYMBOL", "UNPUBLISHED_SYMBOL", "PROTOCOL_SYMBOL", 
                      "HTTP_SYMBOL", "HTTPS_SYMBOL", "COMMENTS_SYMBOL", 
                      "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", "MANAGEMENT_SYMBOL", 
                      "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", "ITEMS_SYMBOL", 
                      "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", "AUTODETECT_SYMBOL", 
                      "FEED_SYMBOL", "ITEM_SYMBOL", "SETS_SYMBOL", "FILES_SYMBOL", 
                      "AUTH_SYMBOL", "APPS_SYMBOL", "APP_SYMBOL", "VENDOR_SYMBOL", 
                      "MRS_SYMBOL", "MYSQL_SYMBOL", "USERS_SYMBOL", "ALLOW_SYMBOL", 
                      "REGISTER_SYMBOL", "CLASS_SYMBOL", "DEVELOPMENT_SYMBOL", 
                      "SCRIPTS_SYMBOL", "MAPPING_SYMBOL", "TYPESCRIPT_SYMBOL", 
                      "ROLES_SYMBOL", "EXTENDS_SYMBOL", "OBJECT_SYMBOL", 
                      "HIERARCHY_SYMBOL", "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", 
                      "AT_OUT_SYMBOL", "AT_CHECK_SYMBOL", "AT_NOCHECK_SYMBOL", 
                      "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", 
                      "AT_ROWOWNERSHIP_SYMBOL", "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", 
                      "AT_SELECT_SYMBOL", "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", 
                      "AT_NOINSERT_SYMBOL", "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", 
                      "AT_NODELETE_SYMBOL", "AT_KEY_SYMBOL", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_metadata = 5
    RULE_comments = 6
    RULE_authenticationRequired = 7
    RULE_itemsPerPage = 8
    RULE_itemsPerPageNumber = 9
    RULE_serviceSchemaSelector = 10
    RULE_configureRestMetadataStatement = 11
    RULE_restMetadataOptions = 12
    RULE_updateIfAvailable = 13
    RULE_createRestServiceStatement = 14
    RULE_restServiceOptions = 15
    RULE_publishedUnpublished = 16
    RULE_restProtocol = 17
    RULE_restAuthentication = 18
    RULE_authPath = 19
    RULE_authRedirection = 20
    RULE_authValidation = 21
    RULE_authPageContent = 22
    RULE_userManagementSchema = 23
    RULE_createRestSchemaStatement = 24
    RULE_restSchemaOptions = 25
    RULE_createRestViewStatement = 26
    RULE_restObjectOptions = 27
    RULE_restViewMediaType = 28
    RULE_restViewFormat = 29
    RULE_restViewAuthenticationProcedure = 30
    RULE_createRestProcedureStatement = 31
    RULE_restProcedureResult = 32
    RULE_createRestFunctionStatement = 33
    RULE_restFunctionResult = 34
    RULE_createRestContentSetStatement = 35
    RULE_directoryFilePath = 36
    RULE_restContentSetOptions = 37
    RULE_fileIgnoreList = 38
    RULE_loadScripts = 39
    RULE_createRestContentFileStatement = 40
    RULE_restContentFileOptions = 41
    RULE_createRestAuthAppStatement = 42
    RULE_authAppName = 43
    RULE_vendorName = 44
    RULE_restAuthAppOptions = 45
    RULE_allowNewUsersToRegister = 46
    RULE_defaultRole = 47
    RULE_createRestUserStatement = 48
    RULE_userName = 49
    RULE_userPassword = 50
    RULE_userOptions = 51
    RULE_appOptions = 52
    RULE_accountLock = 53
    RULE_createRestRoleStatement = 54
    RULE_restRoleOptions = 55
    RULE_parentRoleName = 56
    RULE_roleName = 57
    RULE_cloneRestServiceStatement = 58
    RULE_alterRestServiceStatement = 59
    RULE_alterRestSchemaStatement = 60
    RULE_alterRestViewStatement = 61
    RULE_alterRestProcedureStatement = 62
    RULE_alterRestFunctionStatement = 63
    RULE_alterRestContentSetStatement = 64
    RULE_alterRestUserStatement = 65
    RULE_dropRestServiceStatement = 66
    RULE_dropRestSchemaStatement = 67
    RULE_dropRestViewStatement = 68
    RULE_dropRestProcedureStatement = 69
    RULE_dropRestFunctionStatement = 70
    RULE_dropRestContentSetStatement = 71
    RULE_dropRestContentFileStatement = 72
    RULE_dropRestAuthAppStatement = 73
    RULE_dropRestUserStatement = 74
    RULE_dropRestRoleStatement = 75
    RULE_grantRestPrivilegeStatement = 76
    RULE_privilegeList = 77
    RULE_privilegeName = 78
    RULE_grantRestRoleStatement = 79
    RULE_revokeRestPrivilegeStatement = 80
    RULE_revokeRestRoleStatement = 81
    RULE_useStatement = 82
    RULE_serviceAndSchemaRequestPaths = 83
    RULE_showRestMetadataStatusStatement = 84
    RULE_showRestServicesStatement = 85
    RULE_showRestSchemasStatement = 86
    RULE_showRestViewsStatement = 87
    RULE_showRestProceduresStatement = 88
    RULE_showRestFunctionsStatement = 89
    RULE_showRestContentSetsStatement = 90
    RULE_showRestContentFilesStatement = 91
    RULE_showRestAuthAppsStatement = 92
    RULE_showRestRolesStatement = 93
    RULE_showRestGrantsStatement = 94
    RULE_showCreateRestServiceStatement = 95
    RULE_showCreateRestSchemaStatement = 96
    RULE_showCreateRestViewStatement = 97
    RULE_showCreateRestProcedureStatement = 98
    RULE_showCreateRestFunctionStatement = 99
    RULE_showCreateRestContentSetStatement = 100
    RULE_showCreateRestContentFileStatement = 101
    RULE_showCreateRestAuthAppStatement = 102
    RULE_serviceRequestPath = 103
    RULE_newServiceRequestPath = 104
    RULE_schemaRequestPath = 105
    RULE_newSchemaRequestPath = 106
    RULE_viewRequestPath = 107
    RULE_newViewRequestPath = 108
    RULE_restObjectName = 109
    RULE_restResultName = 110
    RULE_objectRequestPath = 111
    RULE_procedureRequestPath = 112
    RULE_functionRequestPath = 113
    RULE_newProcedureRequestPath = 114
    RULE_newFunctionRequestPath = 115
    RULE_contentSetRequestPath = 116
    RULE_newContentSetRequestPath = 117
    RULE_contentFileRequestPath = 118
    RULE_serviceDeveloperIdentifier = 119
    RULE_serviceDevelopersIdentifier = 120
    RULE_dottedIdentifier = 121
    RULE_hostAndPortIdentifier = 122
    RULE_requestPathIdentifier = 123
    RULE_quotedText = 124
    RULE_jsonObj = 125
    RULE_jsonPair = 126
    RULE_jsonArr = 127
    RULE_jsonValue = 128
    RULE_graphQlObj = 129
    RULE_graphQlCrudOptions = 130
    RULE_graphQlPair = 131
    RULE_graphQlAllowedKeyword = 132
    RULE_graphQlPairKey = 133
    RULE_graphQlPairValue = 134
    RULE_graphQlReduceToValue = 135
    RULE_graphQlDatatypeValue = 136
    RULE_graphQlValue = 137
    RULE_schemaName = 138
    RULE_viewName = 139
    RULE_procedureName = 140
    RULE_pureIdentifier = 141
    RULE_identifier = 142
    RULE_identifierList = 143
    RULE_identifierListWithParentheses = 144
    RULE_qualifiedIdentifier = 145
    RULE_simpleIdentifier = 146
    RULE_dotIdentifier = 147

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "metadata", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "publishedUnpublished", "restProtocol", "restAuthentication", 
                   "authPath", "authRedirection", "authValidation", "authPageContent", 
                   "userManagementSchema", "createRestSchemaStatement", 
                   "restSchemaOptions", "createRestViewStatement", "restObjectOptions", 
                   "restViewMediaType", "restViewFormat", "restViewAuthenticationProcedure", 
                   "createRestProcedureStatement", "restProcedureResult", 
                   "createRestFunctionStatement", "restFunctionResult", 
                   "createRestContentSetStatement", "directoryFilePath", 
                   "restContentSetOptions", "fileIgnoreList", "loadScripts", 
                   "createRestContentFileStatement", "restContentFileOptions", 
                   "createRestAuthAppStatement", "authAppName", "vendorName", 
                   "restAuthAppOptions", "allowNewUsersToRegister", "defaultRole", 
                   "createRestUserStatement", "userName", "userPassword", 
                   "userOptions", "appOptions", "accountLock", "createRestRoleStatement", 
                   "restRoleOptions", "parentRoleName", "roleName", "cloneRestServiceStatement", 
                   "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "alterRestFunctionStatement", "alterRestContentSetStatement", 
                   "alterRestUserStatement", "dropRestServiceStatement", 
                   "dropRestSchemaStatement", "dropRestViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestContentFileStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "dropRestRoleStatement", "grantRestPrivilegeStatement", 
                   "privilegeList", "privilegeName", "grantRestRoleStatement", 
                   "revokeRestPrivilegeStatement", "revokeRestRoleStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestFunctionsStatement", "showRestContentSetsStatement", 
                   "showRestContentFilesStatement", "showRestAuthAppsStatement", 
                   "showRestRolesStatement", "showRestGrantsStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "showCreateRestFunctionStatement", "showCreateRestContentSetStatement", 
                   "showCreateRestContentFileStatement", "showCreateRestAuthAppStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaRequestPath", 
                   "newSchemaRequestPath", "viewRequestPath", "newViewRequestPath", 
                   "restObjectName", "restResultName", "objectRequestPath", 
                   "procedureRequestPath", "functionRequestPath", "newProcedureRequestPath", 
                   "newFunctionRequestPath", "contentSetRequestPath", "newContentSetRequestPath", 
                   "contentFileRequestPath", "serviceDeveloperIdentifier", 
                   "serviceDevelopersIdentifier", "dottedIdentifier", "hostAndPortIdentifier", 
                   "requestPathIdentifier", "quotedText", "jsonObj", "jsonPair", 
                   "jsonArr", "jsonValue", "graphQlObj", "graphQlCrudOptions", 
                   "graphQlPair", "graphQlAllowedKeyword", "graphQlPairKey", 
                   "graphQlPairValue", "graphQlReduceToValue", "graphQlDatatypeValue", 
                   "graphQlValue", "schemaName", "viewName", "procedureName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    UPDATE_SYMBOL=34
    NULL_SYMBOL=35
    TRUE_SYMBOL=36
    FALSE_SYMBOL=37
    SET_SYMBOL=38
    IDENTIFIED_SYMBOL=39
    BY_SYMBOL=40
    ROLE_SYMBOL=41
    TO_SYMBOL=42
    IGNORE_SYMBOL=43
    CLONE_SYMBOL=44
    FILE_SYMBOL=45
    BINARY_SYMBOL=46
    DATA_SYMBOL=47
    LOAD_SYMBOL=48
    GRANT_SYMBOL=49
    READ_SYMBOL=50
    DELETE_SYMBOL=51
    GROUP_SYMBOL=52
    REVOKE_SYMBOL=53
    ACCOUNT_SYMBOL=54
    LOCK_SYMBOL=55
    UNLOCK_SYMBOL=56
    GRANTS_SYMBOL=57
    FOR_SYMBOL=58
    LEVEL_SYMBOL=59
    ANY_SYMBOL=60
    CONFIGURE_SYMBOL=61
    REST_SYMBOL=62
    METADATA_SYMBOL=63
    SERVICES_SYMBOL=64
    SERVICE_SYMBOL=65
    VIEWS_SYMBOL=66
    PROCEDURES_SYMBOL=67
    PARAMETERS_SYMBOL=68
    FUNCTIONS_SYMBOL=69
    RESULT_SYMBOL=70
    ENABLED_SYMBOL=71
    PUBLISHED_SYMBOL=72
    DISABLED_SYMBOL=73
    UNPUBLISHED_SYMBOL=74
    PROTOCOL_SYMBOL=75
    HTTP_SYMBOL=76
    HTTPS_SYMBOL=77
    COMMENTS_SYMBOL=78
    REQUEST_SYMBOL=79
    REDIRECTION_SYMBOL=80
    MANAGEMENT_SYMBOL=81
    AVAILABLE_SYMBOL=82
    REQUIRED_SYMBOL=83
    ITEMS_SYMBOL=84
    PER_SYMBOL=85
    CONTENT_SYMBOL=86
    MEDIA_SYMBOL=87
    AUTODETECT_SYMBOL=88
    FEED_SYMBOL=89
    ITEM_SYMBOL=90
    SETS_SYMBOL=91
    FILES_SYMBOL=92
    AUTH_SYMBOL=93
    APPS_SYMBOL=94
    APP_SYMBOL=95
    VENDOR_SYMBOL=96
    MRS_SYMBOL=97
    MYSQL_SYMBOL=98
    USERS_SYMBOL=99
    ALLOW_SYMBOL=100
    REGISTER_SYMBOL=101
    CLASS_SYMBOL=102
    DEVELOPMENT_SYMBOL=103
    SCRIPTS_SYMBOL=104
    MAPPING_SYMBOL=105
    TYPESCRIPT_SYMBOL=106
    ROLES_SYMBOL=107
    EXTENDS_SYMBOL=108
    OBJECT_SYMBOL=109
    HIERARCHY_SYMBOL=110
    AT_INOUT_SYMBOL=111
    AT_IN_SYMBOL=112
    AT_OUT_SYMBOL=113
    AT_CHECK_SYMBOL=114
    AT_NOCHECK_SYMBOL=115
    AT_NOUPDATE_SYMBOL=116
    AT_SORTABLE_SYMBOL=117
    AT_NOFILTERING_SYMBOL=118
    AT_ROWOWNERSHIP_SYMBOL=119
    AT_UNNEST_SYMBOL=120
    AT_DATATYPE_SYMBOL=121
    AT_SELECT_SYMBOL=122
    AT_NOSELECT_SYMBOL=123
    AT_INSERT_SYMBOL=124
    AT_NOINSERT_SYMBOL=125
    AT_UPDATE_SYMBOL=126
    AT_DELETE_SYMBOL=127
    AT_NODELETE_SYMBOL=128
    AT_KEY_SYMBOL=129
    EQUAL_OPERATOR=130
    ASSIGN_OPERATOR=131
    NULL_SAFE_EQUAL_OPERATOR=132
    GREATER_OR_EQUAL_OPERATOR=133
    GREATER_THAN_OPERATOR=134
    LESS_OR_EQUAL_OPERATOR=135
    LESS_THAN_OPERATOR=136
    NOT_EQUAL_OPERATOR=137
    PLUS_OPERATOR=138
    MINUS_OPERATOR=139
    MULT_OPERATOR=140
    DIV_OPERATOR=141
    MOD_OPERATOR=142
    LOGICAL_NOT_OPERATOR=143
    BITWISE_NOT_OPERATOR=144
    SHIFT_LEFT_OPERATOR=145
    SHIFT_RIGHT_OPERATOR=146
    LOGICAL_AND_OPERATOR=147
    BITWISE_AND_OPERATOR=148
    BITWISE_XOR_OPERATOR=149
    LOGICAL_OR_OPERATOR=150
    BITWISE_OR_OPERATOR=151
    DOT_SYMBOL=152
    COMMA_SYMBOL=153
    SEMICOLON_SYMBOL=154
    COLON_SYMBOL=155
    OPEN_PAR_SYMBOL=156
    CLOSE_PAR_SYMBOL=157
    OPEN_CURLY_SYMBOL=158
    CLOSE_CURLY_SYMBOL=159
    UNDERLINE_SYMBOL=160
    OPEN_SQUARE_SYMBOL=161
    CLOSE_SQUARE_SYMBOL=162
    JSON_SEPARATOR_SYMBOL=163
    JSON_UNQUOTED_SEPARATOR_SYMBOL=164
    AT_SIGN_SYMBOL=165
    AT_TEXT_SUFFIX=166
    AT_AT_SIGN_SYMBOL=167
    NULL2_SYMBOL=168
    PARAM_MARKER=169
    HEX_NUMBER=170
    BIN_NUMBER=171
    INT_NUMBER=172
    DECIMAL_NUMBER=173
    FLOAT_NUMBER=174
    WHITESPACE=175
    INVALID_INPUT=176
    IDENTIFIER=177
    NCHAR_TEXT=178
    BACK_TICK_QUOTED_ID=179
    DOUBLE_QUOTED_TEXT=180
    SINGLE_QUOTED_TEXT=181
    BLOCK_COMMENT=182
    POUND_COMMENT=183
    DASHDASH_COMMENT=184
    WS=185
    NOT_EQUAL2_OPERATOR=186

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2315430750608293938) != 0):
                self.state = 296
                self.mrsStatement()
                self.state = 305
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 298 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 297
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 300 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==154):
                                break

                        self.state = 302
                        self.mrsStatement() 
                    self.state = 307
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==154:
                self.state = 310
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 313
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentFileStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestRoleStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def cloneRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CloneRestServiceStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def alterRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestFunctionStatementContext,0)


        def alterRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestContentSetStatementContext,0)


        def alterRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestUserStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentFileStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def dropRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestRoleStatementContext,0)


        def grantRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestRoleStatementContext,0)


        def grantRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestPrivilegeStatementContext,0)


        def revokeRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestPrivilegeStatementContext,0)


        def revokeRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestRoleStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestContentFilesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentFilesStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showRestRolesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestRolesStatementContext,0)


        def showRestGrantsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestGrantsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentSetStatementContext,0)


        def showCreateRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentFileStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 316
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 317
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 318
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 319
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 320
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 321
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 322
                self.createRestContentFileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 323
                self.createRestAuthAppStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 324
                self.createRestRoleStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 325
                self.createRestUserStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 326
                self.cloneRestServiceStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 327
                self.alterRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 328
                self.alterRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 329
                self.alterRestViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 330
                self.alterRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 331
                self.alterRestFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 332
                self.alterRestContentSetStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 333
                self.alterRestUserStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 334
                self.dropRestServiceStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 335
                self.dropRestSchemaStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 336
                self.dropRestViewStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 337
                self.dropRestProcedureStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 338
                self.dropRestFunctionStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 339
                self.dropRestContentSetStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 340
                self.dropRestContentFileStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 341
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 342
                self.dropRestUserStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 343
                self.dropRestRoleStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 344
                self.grantRestRoleStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 345
                self.grantRestPrivilegeStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 346
                self.revokeRestPrivilegeStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 347
                self.revokeRestRoleStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 348
                self.useStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 349
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 350
                self.showRestServicesStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 351
                self.showRestSchemasStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 352
                self.showRestViewsStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 353
                self.showRestProceduresStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 354
                self.showRestFunctionsStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 355
                self.showRestContentSetsStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 356
                self.showRestContentFilesStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 357
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 358
                self.showRestRolesStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 359
                self.showRestGrantsStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 360
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 361
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 362
                self.showCreateRestViewStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 363
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 364
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 365
                self.showCreateRestContentSetStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 366
                self.showCreateRestContentFileStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 367
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            _la = self._input.LA(1)
            if not(_la==71 or _la==73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180, 181]:
                self.state = 372
                self.quotedText()
                pass
            elif token in [24]:
                self.state = 373
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 377
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = MRSParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 380
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 383
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 386
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 389
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 392
            self.match(MRSParser.PER_SYMBOL)
            self.state = 393
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 394
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 398
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 399
                self.serviceRequestPath()


            self.state = 402
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 403
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 406
            self.match(MRSParser.REST_SYMBOL)
            self.state = 407
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 175921860444417) != 0):
                self.state = 408
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 414
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 411
                    self.enabledDisabled()
                    pass
                elif token in [26]:
                    self.state = 412
                    self.jsonOptions()
                    pass
                elif token in [34]:
                    self.state = 413
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 175921860444417) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 419
                self.match(MRSParser.IF_SYMBOL)
                self.state = 420
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 424
                self.match(MRSParser.OR_SYMBOL)
                self.state = 425
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 428
            self.match(MRSParser.REST_SYMBOL)
            self.state = 429
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 430
            self.serviceRequestPath()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 161008084725006369) != 0):
                self.state = 431
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def publishedUnpublished(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.PublishedUnpublishedContext)
            else:
                return self.getTypedRuleContext(MRSParser.PublishedUnpublishedContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 440
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 434
                    self.enabledDisabled()
                    pass
                elif token in [72, 74]:
                    self.state = 435
                    self.publishedUnpublished()
                    pass
                elif token in [21]:
                    self.state = 436
                    self.restAuthentication()
                    pass
                elif token in [26]:
                    self.state = 437
                    self.jsonOptions()
                    pass
                elif token in [78]:
                    self.state = 438
                    self.comments()
                    pass
                elif token in [63]:
                    self.state = 439
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 442 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 161008084725006369) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublishedUnpublishedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_publishedUnpublished

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishedUnpublished" ):
                listener.enterPublishedUnpublished(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishedUnpublished" ):
                listener.exitPublishedUnpublished(self)




    def publishedUnpublished(self):

        localctx = MRSParser.PublishedUnpublishedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_publishedUnpublished)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            _la = self._input.LA(1)
            if not(_la==72 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 447
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 448
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 449
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 450
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 451
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 452
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 453
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 454
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 288230376151712003) != 0):
                self.state = 462
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 458
                    self.authPath()
                    pass
                elif token in [80]:
                    self.state = 459
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 460
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 461
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 468
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 471
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 474
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 477
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 478
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(MRSParser.USER_SYMBOL)
            self.state = 481
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 482
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177, 179]:
                self.state = 483
                self.schemaName()
                pass
            elif token in [24]:
                self.state = 484
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 488
                self.match(MRSParser.OR_SYMBOL)
                self.state = 489
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 492
            self.match(MRSParser.REST_SYMBOL)
            self.state = 493
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1649267441665) != 0):
                self.state = 494
                self.schemaRequestPath()


            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 497
                self.match(MRSParser.ON_SYMBOL)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 498
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 501
                self.serviceRequestPath()


            self.state = 504
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 505
            self.schemaName()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -9073622951198195679) != 0):
                self.state = 506
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 515
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 509
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 510
                    self.authenticationRequired()
                    pass
                elif token in [84]:
                    self.state = 511
                    self.itemsPerPage()
                    pass
                elif token in [26]:
                    self.state = 512
                    self.jsonOptions()
                    pass
                elif token in [78]:
                    self.state = 513
                    self.comments()
                    pass
                elif token in [63]:
                    self.state = 514
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 517 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -9073622951198195679) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 520
                self.match(MRSParser.OR_SYMBOL)
                self.state = 521
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 524
            self.match(MRSParser.REST_SYMBOL)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 525
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 528
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 531
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 532
            self.viewRequestPath()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 533
                self.match(MRSParser.ON_SYMBOL)
                self.state = 534
                self.serviceSchemaSelector()


            self.state = 537
            self.match(MRSParser.AS_SYMBOL)
            self.state = 538
            self.qualifiedIdentifier()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 539
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 540
                self.restObjectName()


            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 31751) != 0):
                self.state = 543
                self.graphQlCrudOptions()


            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 546
                self.graphQlObj()


            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0):
                self.state = 549
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 552
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 553
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 554
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 555
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 556
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 557
                    self.metadata()
                    pass

                elif la_ == 7:
                    self.state = 558
                    self.restViewMediaType()
                    pass

                elif la_ == 8:
                    self.state = 559
                    self.restViewFormat()
                    pass

                elif la_ == 9:
                    self.state = 560
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 563 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 566
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180, 181]:
                self.state = 567
                self.quotedText()
                pass
            elif token in [88]:
                self.state = 568
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 572
            _la = self._input.LA(1)
            if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 575
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 576
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 579
                self.match(MRSParser.OR_SYMBOL)
                self.state = 580
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 583
            self.match(MRSParser.REST_SYMBOL)
            self.state = 584
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 585
            self.procedureRequestPath()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 586
                self.match(MRSParser.ON_SYMBOL)
                self.state = 587
                self.serviceSchemaSelector()


            self.state = 590
            self.match(MRSParser.AS_SYMBOL)
            self.state = 591
            self.qualifiedIdentifier()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 592
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177 or _la==179:
                    self.state = 593
                    self.restObjectName()


                self.state = 596
                self.graphQlObj()


            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 599
                self.restProcedureResult()
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0):
                self.state = 605
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_restProcedureResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177 or _la==179:
                self.state = 609
                self.restResultName()


            self.state = 612
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 615
                self.match(MRSParser.OR_SYMBOL)
                self.state = 616
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 619
            self.match(MRSParser.REST_SYMBOL)
            self.state = 620
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 621
            self.functionRequestPath()
            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 622
                self.match(MRSParser.ON_SYMBOL)
                self.state = 623
                self.serviceSchemaSelector()


            self.state = 626
            self.match(MRSParser.AS_SYMBOL)
            self.state = 627
            self.qualifiedIdentifier()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 628
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177 or _la==179:
                    self.state = 629
                    self.restObjectName()


                self.state = 632
                self.graphQlObj()


            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 635
                self.restFunctionResult()


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0):
                self.state = 638
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_restFunctionResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177 or _la==179:
                self.state = 642
                self.restResultName()


            self.state = 645
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 648
                self.match(MRSParser.OR_SYMBOL)
                self.state = 649
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 652
            self.match(MRSParser.REST_SYMBOL)
            self.state = 653
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 654
            self.match(MRSParser.SET_SYMBOL)
            self.state = 655
            self.contentSetRequestPath()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 656
                self.match(MRSParser.ON_SYMBOL)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 657
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 660
                self.serviceRequestPath()


            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 663
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 664
                self.directoryFilePath()


            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 149744687748481057) != 0):
                self.state = 667
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def fileIgnoreList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.FileIgnoreListContext)
            else:
                return self.getTypedRuleContext(MRSParser.FileIgnoreListContext,i)


        def loadScripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.LoadScriptsContext)
            else:
                return self.getTypedRuleContext(MRSParser.LoadScriptsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 678
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 672
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 673
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 674
                    self.jsonOptions()
                    pass
                elif token in [78]:
                    self.state = 675
                    self.comments()
                    pass
                elif token in [43]:
                    self.state = 676
                    self.fileIgnoreList()
                    pass
                elif token in [48]:
                    self.state = 677
                    self.loadScripts()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 680 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 149744687748481057) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIgnoreListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_fileIgnoreList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIgnoreList" ):
                listener.enterFileIgnoreList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIgnoreList" ):
                listener.exitFileIgnoreList(self)




    def fileIgnoreList(self):

        localctx = MRSParser.FileIgnoreListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fileIgnoreList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682
            self.match(MRSParser.IGNORE_SYMBOL)
            self.state = 683
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadScriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_loadScripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadScripts" ):
                listener.enterLoadScripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadScripts" ):
                listener.exitLoadScripts(self)




    def loadScripts(self):

        localctx = MRSParser.LoadScriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_loadScripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(MRSParser.LOAD_SYMBOL)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 686
                self.match(MRSParser.TYPESCRIPT_SYMBOL)


            self.state = 689
            self.match(MRSParser.SCRIPTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restContentFileOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentFileOptionsContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentFileStatement" ):
                listener.enterCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentFileStatement" ):
                listener.exitCreateRestContentFileStatement(self)




    def createRestContentFileStatement(self):

        localctx = MRSParser.CreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 692
                self.match(MRSParser.OR_SYMBOL)
                self.state = 693
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 696
            self.match(MRSParser.REST_SYMBOL)
            self.state = 697
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 698
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 699
            self.contentFileRequestPath()
            self.state = 700
            self.match(MRSParser.ON_SYMBOL)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1992898379777) != 0):
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 701
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 704
                self.serviceRequestPath()


            self.state = 707
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 708
            self.match(MRSParser.SET_SYMBOL)
            self.state = 709
            self.contentSetRequestPath()
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 710
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 711
                self.directoryFilePath()
                pass
            elif token in [46, 86]:
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 712
                    self.match(MRSParser.BINARY_SYMBOL)


                self.state = 715
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 716
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 5629499534213153) != 0):
                self.state = 719
                self.restContentFileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentFileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentFileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentFileOptions" ):
                listener.enterRestContentFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentFileOptions" ):
                listener.exitRestContentFileOptions(self)




    def restContentFileOptions(self):

        localctx = MRSParser.RestContentFileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_restContentFileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 725
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 722
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 723
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 724
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 727 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 5629499534213153) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 730
                self.match(MRSParser.OR_SYMBOL)
                self.state = 731
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 734
            self.match(MRSParser.REST_SYMBOL)
            self.state = 735
            _la = self._input.LA(1)
            if not(_la==21 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 736
            self.match(MRSParser.APP_SYMBOL)
            self.state = 737
            self.authAppName()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 738
                self.match(MRSParser.ON_SYMBOL)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 739
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 742
                self.serviceRequestPath()


            self.state = 745
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.state = 746
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [98]:
                self.state = 747
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [180, 181]:
                self.state = 748
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 536871045) != 0):
                self.state = 751
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 758
                    self.enabledDisabled()
                    pass
                elif token in [78]:
                    self.state = 759
                    self.comments()
                    pass
                elif token in [100]:
                    self.state = 760
                    self.allowNewUsersToRegister()
                    pass
                elif token in [24]:
                    self.state = 761
                    self.defaultRole()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 764 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==24 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 536871045) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 767
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 768
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 769
                self.match(MRSParser.TO_SYMBOL)
                self.state = 770
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 774
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 775
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 778
                self.match(MRSParser.OR_SYMBOL)
                self.state = 779
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 782
            self.match(MRSParser.REST_SYMBOL)
            self.state = 783
            self.match(MRSParser.USER_SYMBOL)
            self.state = 784
            self.userName()
            self.state = 785
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 786
            self.authAppName()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 787
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 788
                self.match(MRSParser.BY_SYMBOL)
                self.state = 789
                self.userPassword()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==54 or _la==95:
                self.state = 792
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accountLock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AccountLockContext)
            else:
                return self.getTypedRuleContext(MRSParser.AccountLockContext,i)


        def appOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppOptionsContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_userOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserOptions" ):
                listener.enterUserOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserOptions" ):
                listener.exitUserOptions(self)




    def userOptions(self):

        localctx = MRSParser.UserOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_userOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 802
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 799
                    self.accountLock()
                    pass
                elif token in [95]:
                    self.state = 800
                    self.appOptions()
                    pass
                elif token in [26]:
                    self.state = 801
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 804 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==54 or _la==95):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_appOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppOptions" ):
                listener.enterAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppOptions" ):
                listener.exitAppOptions(self)




    def appOptions(self):

        localctx = MRSParser.AppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_appOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(MRSParser.APP_SYMBOL)
            self.state = 807
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 808
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_accountLock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLock" ):
                listener.enterAccountLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLock" ):
                listener.exitAccountLock(self)




    def accountLock(self):

        localctx = MRSParser.AccountLockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_accountLock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(MRSParser.ACCOUNT_SYMBOL)
            self.state = 811
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def parentRoleName(self):
            return self.getTypedRuleContext(MRSParser.ParentRoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def restRoleOptions(self):
            return self.getTypedRuleContext(MRSParser.RestRoleOptionsContext,0)


        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestRoleStatement" ):
                listener.enterCreateRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestRoleStatement" ):
                listener.exitCreateRestRoleStatement(self)




    def createRestRoleStatement(self):

        localctx = MRSParser.CreateRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_createRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 814
                self.match(MRSParser.OR_SYMBOL)
                self.state = 815
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 818
            self.match(MRSParser.REST_SYMBOL)
            self.state = 819
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 820
            self.roleName()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 821
                self.match(MRSParser.EXTENDS_SYMBOL)
                self.state = 822
                self.parentRoleName()


            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 825
                self.match(MRSParser.ON_SYMBOL)
                self.state = 832
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 826
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 827
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass
                elif token in [65, 141, 166, 177, 179, 180, 181]:
                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 828
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 831
                    self.serviceRequestPath()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==78:
                self.state = 836
                self.restRoleOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestRoleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restRoleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestRoleOptions" ):
                listener.enterRestRoleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestRoleOptions" ):
                listener.exitRestRoleOptions(self)




    def restRoleOptions(self):

        localctx = MRSParser.RestRoleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_restRoleOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 839
                    self.jsonOptions()
                    pass
                elif token in [78]:
                    self.state = 840
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 843 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==78):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParentRoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_parentRoleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentRoleName" ):
                listener.enterParentRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentRoleName" ):
                listener.exitParentRoleName(self)




    def parentRoleName(self):

        localctx = MRSParser.ParentRoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_parentRoleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MRSParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_roleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_cloneRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneRestServiceStatement" ):
                listener.enterCloneRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneRestServiceStatement" ):
                listener.exitCloneRestServiceStatement(self)




    def cloneRestServiceStatement(self):

        localctx = MRSParser.CloneRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_cloneRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(MRSParser.CLONE_SYMBOL)
            self.state = 850
            self.match(MRSParser.REST_SYMBOL)
            self.state = 851
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 852
            self.serviceRequestPath()
            self.state = 853
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 854
            self.match(MRSParser.REQUEST_SYMBOL)
            self.state = 855
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 856
            self.newServiceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 859
            self.match(MRSParser.REST_SYMBOL)
            self.state = 860
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 861
            self.serviceRequestPath()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 862
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 863
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 864
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 865
                self.newServiceRequestPath()


            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 161008084725006369) != 0):
                self.state = 868
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 872
            self.match(MRSParser.REST_SYMBOL)
            self.state = 873
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1649267441665) != 0):
                self.state = 874
                self.schemaRequestPath()


            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 877
                self.match(MRSParser.ON_SYMBOL)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 878
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 881
                self.serviceRequestPath()


            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 884
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 885
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 886
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 887
                self.newSchemaRequestPath()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 890
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 891
                self.schemaName()


            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -9073622951198195679) != 0):
                self.state = 894
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 898
            self.match(MRSParser.REST_SYMBOL)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 899
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 902
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 905
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 906
            self.viewRequestPath()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 907
                self.match(MRSParser.ON_SYMBOL)
                self.state = 908
                self.serviceSchemaSelector()


            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 911
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 912
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 913
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 914
                self.newViewRequestPath()


            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 917
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 918
                self.restObjectName()
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 31751) != 0):
                    self.state = 919
                    self.graphQlCrudOptions()


                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158:
                    self.state = 922
                    self.graphQlObj()




            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0):
                self.state = 927
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 931
            self.match(MRSParser.REST_SYMBOL)
            self.state = 932
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 933
            self.procedureRequestPath()
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 934
                self.match(MRSParser.ON_SYMBOL)
                self.state = 935
                self.serviceSchemaSelector()


            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 938
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 939
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 940
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 941
                self.newProcedureRequestPath()


            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 944
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177 or _la==179:
                    self.state = 945
                    self.restObjectName()


                self.state = 948
                self.graphQlObj()


            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 951
                self.restProcedureResult()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0):
                self.state = 957
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newFunctionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewFunctionRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestFunctionResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestFunctionStatement" ):
                listener.enterAlterRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestFunctionStatement" ):
                listener.exitAlterRestFunctionStatement(self)




    def alterRestFunctionStatement(self):

        localctx = MRSParser.AlterRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 961
            self.match(MRSParser.REST_SYMBOL)
            self.state = 962
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 963
            self.functionRequestPath()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 964
                self.match(MRSParser.ON_SYMBOL)
                self.state = 965
                self.serviceSchemaSelector()


            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 968
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 969
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 970
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 971
                self.newFunctionRequestPath()


            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 974
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==177 or _la==179:
                    self.state = 975
                    self.restObjectName()


                self.state = 978
                self.graphQlObj()


            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 981
                self.restFunctionResult()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 73861) != 0):
                self.state = 987
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newContentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewContentSetRequestPathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestContentSetStatement" ):
                listener.enterAlterRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestContentSetStatement" ):
                listener.exitAlterRestContentSetStatement(self)




    def alterRestContentSetStatement(self):

        localctx = MRSParser.AlterRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 991
            self.match(MRSParser.REST_SYMBOL)
            self.state = 992
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 993
            self.match(MRSParser.SET_SYMBOL)
            self.state = 994
            self.contentSetRequestPath()
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 995
                self.match(MRSParser.ON_SYMBOL)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 996
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 999
                self.serviceRequestPath()


            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1002
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1003
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1004
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1005
                self.newContentSetRequestPath()


            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 149744687748481057) != 0):
                self.state = 1008
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestUserStatement" ):
                listener.enterAlterRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestUserStatement" ):
                listener.exitAlterRestUserStatement(self)




    def alterRestUserStatement(self):

        localctx = MRSParser.AlterRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1012
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1013
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1014
            self.userName()
            self.state = 1015
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1016
            self.authAppName()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1017
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1018
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1021
                self.serviceRequestPath()


            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1024
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 1025
                self.match(MRSParser.BY_SYMBOL)
                self.state = 1026
                self.userPassword()


            self.state = 1030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==54 or _la==95:
                self.state = 1029
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1033
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1034
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1035
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1038
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1039
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1040
            self.schemaRequestPath()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1041
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1042
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1045
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestViewStatement" ):
                listener.enterDropRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestViewStatement" ):
                listener.exitDropRestViewStatement(self)




    def dropRestViewStatement(self):

        localctx = MRSParser.DropRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1049
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1050
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1053
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1056
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1057
            self.viewRequestPath()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1058
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1059
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1063
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1064
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1065
            self.procedureRequestPath()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1066
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1067
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1071
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1072
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1073
            self.functionRequestPath()
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1074
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1075
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1079
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1080
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1081
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1082
            self.contentSetRequestPath()
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1083
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1084
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1087
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentFileStatement" ):
                listener.enterDropRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentFileStatement" ):
                listener.exitDropRestContentFileStatement(self)




    def dropRestContentFileStatement(self):

        localctx = MRSParser.DropRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1091
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1092
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1093
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1094
            self.contentFileRequestPath()
            self.state = 1095
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1992898379777) != 0):
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1096
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1099
                self.serviceRequestPath()


            self.state = 1102
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1103
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1104
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1107
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1108
            _la = self._input.LA(1)
            if not(_la==21 or _la==93):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1109
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1110
            self.authAppName()
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1111
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1112
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1115
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropRestUserStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1119
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1120
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1121
            self.userName()
            self.state = 1122
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1123
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestRoleStatement" ):
                listener.enterDropRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestRoleStatement" ):
                listener.exitDropRestRoleStatement(self)




    def dropRestRoleStatement(self):

        localctx = MRSParser.DropRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1126
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1127
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1128
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestPrivilegeStatement" ):
                listener.enterGrantRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestPrivilegeStatement" ):
                listener.exitGrantRestPrivilegeStatement(self)




    def grantRestPrivilegeStatement(self):

        localctx = MRSParser.GrantRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_grantRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1131
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1132
            self.privilegeList()
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1133
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1134
                self.serviceSchemaSelector()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1135
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1136
                    self.objectRequestPath()




            self.state = 1141
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1142
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeName(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeNameContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = MRSParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_privilegeList)
        try:
            self.state = 1149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1144
                self.privilegeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self.privilegeName()
                self.state = 1146
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1147
                self.privilegeList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_privilegeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeName" ):
                listener.enterPrivilegeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeName" ):
                listener.exitPrivilegeName(self)




    def privilegeName(self):

        localctx = MRSParser.PrivilegeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_privilegeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3377716900397058) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def comments(self):
            return self.getTypedRuleContext(MRSParser.CommentsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestRoleStatement" ):
                listener.enterGrantRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestRoleStatement" ):
                listener.exitGrantRestRoleStatement(self)




    def grantRestRoleStatement(self):

        localctx = MRSParser.GrantRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_grantRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1154
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1155
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1156
            self.roleName()
            self.state = 1157
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1158
            self.userName()
            self.state = 1159
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1160
            self.authAppName()
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 1161
                self.comments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestPrivilegeStatement" ):
                listener.enterRevokeRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestPrivilegeStatement" ):
                listener.exitRevokeRestPrivilegeStatement(self)




    def revokeRestPrivilegeStatement(self):

        localctx = MRSParser.RevokeRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_revokeRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1165
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1166
            self.privilegeList()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1167
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1168
                self.serviceSchemaSelector()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 1169
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1170
                    self.objectRequestPath()




            self.state = 1175
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1176
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestRoleStatement" ):
                listener.enterRevokeRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestRoleStatement" ):
                listener.exitRevokeRestRoleStatement(self)




    def revokeRestRoleStatement(self):

        localctx = MRSParser.RevokeRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_revokeRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1179
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1180
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1181
            self.roleName()
            self.state = 1182
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1183
            self.userName()
            self.state = 1184
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1185
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.match(MRSParser.USE_SYMBOL)
            self.state = 1188
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1189
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1191
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 1192
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1197
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1198
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 1201
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1204
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1205
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1208
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1209
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1210
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1211
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1214
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1218
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1219
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1222
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1225
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1226
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1227
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1231
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1232
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1233
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1234
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1238
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1239
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1240
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1241
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1245
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1246
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1247
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1248
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1249
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1252
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentFilesStatement" ):
                listener.enterShowRestContentFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentFilesStatement" ):
                listener.exitShowRestContentFilesStatement(self)




    def showRestContentFilesStatement(self):

        localctx = MRSParser.ShowRestContentFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_showRestContentFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1256
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1257
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1258
            self.match(MRSParser.FILES_SYMBOL)
            self.state = 1259
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1992898379777) != 0):
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1260
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1263
                self.serviceRequestPath()


            self.state = 1266
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1267
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1268
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1271
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1272
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1273
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1274
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1275
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1278
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestRolesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestRolesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestRolesStatement" ):
                listener.enterShowRestRolesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestRolesStatement" ):
                listener.exitShowRestRolesStatement(self)




    def showRestRolesStatement(self):

        localctx = MRSParser.ShowRestRolesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_showRestRolesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1282
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1283
            self.match(MRSParser.ROLES_SYMBOL)
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1284
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1291
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 1285
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 1286
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass
                elif token in [65, 141, 166, 177, 179, 180, 181]:
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 1287
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 1290
                    self.serviceRequestPath()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1295
                self.match(MRSParser.FOR_SYMBOL)
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==180 or _la==181:
                    self.state = 1296
                    self.userName()


                self.state = 1299
                self.match(MRSParser.AT_SIGN_SYMBOL)
                self.state = 1300
                self.authAppName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestGrantsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestGrantsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestGrantsStatement" ):
                listener.enterShowRestGrantsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestGrantsStatement" ):
                listener.exitShowRestGrantsStatement(self)




    def showRestGrantsStatement(self):

        localctx = MRSParser.ShowRestGrantsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_showRestGrantsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1304
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1305
            self.match(MRSParser.GRANTS_SYMBOL)
            self.state = 1306
            self.match(MRSParser.FOR_SYMBOL)
            self.state = 1307
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1310
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1311
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1312
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1992898379777) != 0):
                self.state = 1313
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1317
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1318
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1319
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1649267441665) != 0):
                self.state = 1320
                self.schemaRequestPath()


            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1323
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1324
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1327
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1331
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1332
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1333
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 1336
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1339
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1340
            self.viewRequestPath()
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1341
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1346
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1347
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1348
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1349
            self.procedureRequestPath()
            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1350
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1351
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1355
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1356
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1357
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1358
            self.functionRequestPath()
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1359
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1360
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentSetStatement" ):
                listener.enterShowCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentSetStatement" ):
                listener.exitShowCreateRestContentSetStatement(self)




    def showCreateRestContentSetStatement(self):

        localctx = MRSParser.ShowCreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_showCreateRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1364
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1365
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1366
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1367
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1368
            self.contentSetRequestPath()
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1369
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1370
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1373
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentFileStatement" ):
                listener.enterShowCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentFileStatement" ):
                listener.exitShowCreateRestContentFileStatement(self)




    def showCreateRestContentFileStatement(self):

        localctx = MRSParser.ShowCreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_showCreateRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1377
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1378
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1379
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1380
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1381
            self.contentFileRequestPath()
            self.state = 1382
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & 1992898379777) != 0):
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1383
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1386
                self.serviceRequestPath()


            self.state = 1389
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1390
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1391
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_showCreateRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1394
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1395
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1396
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1397
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1398
            self.authAppName()
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1399
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1400
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1403
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1406
                self.serviceDevelopersIdentifier()


            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & 10241) != 0):
                self.state = 1409
                self.hostAndPortIdentifier()


            self.state = 1412
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1414
                self.serviceDevelopersIdentifier()


            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 166)) & ~0x3f) == 0 and ((1 << (_la - 166)) & 10241) != 0):
                self.state = 1417
                self.hostAndPortIdentifier()


            self.state = 1420
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPath" ):
                listener.enterObjectRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPath" ):
                listener.exitObjectRequestPath(self)




    def objectRequestPath(self):

        localctx = MRSParser.ObjectRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_objectRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewFunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newFunctionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewFunctionRequestPath" ):
                listener.enterNewFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewFunctionRequestPath" ):
                listener.exitNewFunctionRequestPath(self)




    def newFunctionRequestPath(self):

        localctx = MRSParser.NewFunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_newFunctionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1444
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newContentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewContentSetRequestPath" ):
                listener.enterNewContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewContentSetRequestPath" ):
                listener.exitNewContentSetRequestPath(self)




    def newContentSetRequestPath(self):

        localctx = MRSParser.NewContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_newContentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentFileRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentFileRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentFileRequestPath" ):
                listener.enterContentFileRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentFileRequestPath" ):
                listener.exitContentFileRequestPath(self)




    def contentFileRequestPath(self):

        localctx = MRSParser.ContentFileRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_contentFileRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeveloperIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceDeveloperIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDeveloperIdentifier" ):
                listener.enterServiceDeveloperIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDeveloperIdentifier" ):
                listener.exitServiceDeveloperIdentifier(self)




    def serviceDeveloperIdentifier(self):

        localctx = MRSParser.ServiceDeveloperIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_serviceDeveloperIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177, 179]:
                self.state = 1450
                self.identifier()
                pass
            elif token in [180, 181]:
                self.state = 1451
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDevelopersIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceDeveloperIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ServiceDeveloperIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.ServiceDeveloperIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_serviceDevelopersIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDevelopersIdentifier" ):
                listener.enterServiceDevelopersIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDevelopersIdentifier" ):
                listener.exitServiceDevelopersIdentifier(self)




    def serviceDevelopersIdentifier(self):

        localctx = MRSParser.ServiceDevelopersIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_serviceDevelopersIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.serviceDeveloperIdentifier()
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 1455
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1456
                self.serviceDeveloperIdentifier()
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==165:
                self.state = 1462
                self.match(MRSParser.AT_SIGN_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1465
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1466
                self.identifier()
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==152:
                    self.state = 1467
                    self.dotIdentifier()
                    self.state = 1472
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MRSParser.AT_TEXT_SUFFIX, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177, 179]:
                self.state = 1475
                self.dottedIdentifier()
                pass
            elif token in [166]:
                self.state = 1476
                self.match(MRSParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 1479
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 1480
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.state = 1483
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 1484
                self.dottedIdentifier()
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 1485
                    self.match(MRSParser.DIV_OPERATOR)
                    self.state = 1486
                    self.dottedIdentifier()


                pass
            elif token in [180, 181]:
                self.state = 1489
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            _la = self._input.LA(1)
            if not(_la==180 or _la==181):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1494
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1495
                self.jsonPair()
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 1496
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1497
                    self.jsonPair()
                    self.state = 1502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1503
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1506
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1510
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1511
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0) or ((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 4483955294211) != 0):
                self.state = 1514
                self.jsonValue()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 1515
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1516
                    self.jsonValue()
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1524
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [138, 139, 174]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138 or _la==139:
                    self.state = 1527
                    _la = self._input.LA(1)
                    if not(_la==138 or _la==139):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1530
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1531
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1532
                self.jsonObj()
                pass
            elif token in [161]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1533
                self.jsonArr()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1534
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1535
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1536
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1539
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1540
                self.graphQlPair()
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 1541
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1542
                    self.graphQlPair()
                    self.state = 1547
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1548
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1550
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1551
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def AT_CHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_CHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_CHECK_SYMBOL, i)

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1554
                _la = self._input.LA(1)
                if not(((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 31751) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1557 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 114)) & ~0x3f) == 0 and ((1 << (_la - 114)) & 31751) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_KEY_SYMBOL(self):
            return self.getToken(MRSParser.AT_KEY_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.graphQlPairKey()
            self.state = 1560
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1561
            self.graphQlPairValue()
            self.state = 1577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.state = 1562
                self.match(MRSParser.AT_IN_SYMBOL)

            elif la_ == 2:
                self.state = 1563
                self.match(MRSParser.AT_OUT_SYMBOL)

            elif la_ == 3:
                self.state = 1564
                self.match(MRSParser.AT_INOUT_SYMBOL)

            elif la_ == 4:
                self.state = 1565
                self.match(MRSParser.AT_NOCHECK_SYMBOL)

            elif la_ == 5:
                self.state = 1566
                self.match(MRSParser.AT_SORTABLE_SYMBOL)

            elif la_ == 6:
                self.state = 1567
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)

            elif la_ == 7:
                self.state = 1568
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)

            elif la_ == 8:
                self.state = 1569
                self.match(MRSParser.AT_UNNEST_SYMBOL)

            elif la_ == 9:
                self.state = 1570
                self.match(MRSParser.AT_KEY_SYMBOL)

            elif la_ == 10:
                self.state = 1571
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1572
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1573
                self.graphQlDatatypeValue()
                self.state = 1574
                self.match(MRSParser.CLOSE_PAR_SYMBOL)

            elif la_ == 11:
                self.state = 1576
                self.graphQlCrudOptions()


            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1579
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1582
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -2305700039310051328) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 2671182084863) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_graphQlPairKey)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [177, 179]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self.identifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 47, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 105]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1586
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_graphQlPairValue)
        try:
            self.state = 1591
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177, 179]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.qualifiedIdentifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 47, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 89, 90, 91, 93, 94, 95, 96, 98, 99, 101, 102, 105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1590
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1593
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [177, 179]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1594
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1597
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [177, 179]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_graphQlValue)
        try:
            self.state = 1603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [177, 179]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.qualifiedIdentifier()
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.graphQlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1611
            _la = self._input.LA(1)
            if not(_la==177 or _la==179):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.identifier()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==153:
                self.state = 1616
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1617
                self.identifier()
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1624
            self.identifierList()
            self.state = 1625
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.identifier()
            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1628
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.identifier()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==152:
                self.state = 1632
                self.dotIdentifier()
                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1633
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1639
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





