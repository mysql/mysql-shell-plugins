# Copyright (c) 2023, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,143,947,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,1,0,1,
        0,4,0,185,8,0,11,0,12,0,186,1,0,5,0,190,8,0,10,0,12,0,193,9,0,3,
        0,195,8,0,1,0,3,0,198,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,3,1,227,8,1,1,2,1,2,1,3,1,3,3,3,233,8,3,1,4,1,4,1,4,1,5,1,
        5,1,5,1,6,1,6,3,6,243,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        9,1,9,1,9,3,9,257,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,266,8,
        10,1,11,1,11,1,11,4,11,271,8,11,11,11,12,11,272,1,12,1,12,1,12,3,
        12,278,8,12,1,13,1,13,1,13,3,13,283,8,13,1,13,1,13,1,13,1,13,3,13,
        289,8,13,1,14,1,14,1,14,1,14,4,14,295,8,14,11,14,12,14,296,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,308,8,15,1,16,1,16,
        1,16,1,16,1,16,5,16,315,8,16,10,16,12,16,318,9,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,3,21,338,8,21,1,22,1,22,1,22,3,22,343,8,22,1,22,1,22,1,
        22,3,22,348,8,22,1,22,1,22,3,22,352,8,22,1,22,3,22,355,8,22,1,22,
        1,22,1,22,3,22,360,8,22,1,23,1,23,1,23,1,23,1,23,4,23,367,8,23,11,
        23,12,23,368,1,24,1,24,1,24,3,24,374,8,24,1,24,1,24,3,24,378,8,24,
        1,24,3,24,381,8,24,1,24,3,24,384,8,24,1,24,1,24,1,24,3,24,389,8,
        24,1,24,1,24,1,24,3,24,394,8,24,1,24,1,24,1,24,3,24,399,8,24,1,24,
        3,24,402,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,412,8,
        25,11,25,12,25,413,1,26,1,26,1,26,1,26,3,26,420,8,26,1,27,1,27,1,
        27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,432,8,29,1,29,1,29,1,
        29,1,29,3,29,438,8,29,1,29,1,29,1,29,3,29,443,8,29,1,29,1,29,1,29,
        1,29,1,29,5,29,450,8,29,10,29,12,29,453,9,29,1,30,1,30,1,30,1,30,
        4,30,459,8,30,11,30,12,30,460,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        3,32,470,8,32,1,32,1,32,1,32,1,32,1,32,3,32,477,8,32,1,32,1,32,3,
        32,481,8,32,1,32,3,32,484,8,32,1,33,1,33,1,34,1,34,1,34,1,34,4,34,
        492,8,34,11,34,12,34,493,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
        3,35,504,8,35,1,35,3,35,507,8,35,1,36,1,36,1,36,1,36,3,36,513,8,
        36,1,36,1,36,3,36,517,8,36,1,36,3,36,520,8,36,1,36,1,36,1,36,1,36,
        3,36,526,8,36,1,36,1,36,3,36,530,8,36,1,36,3,36,533,8,36,1,37,1,
        37,1,37,3,37,538,8,37,1,37,3,37,541,8,37,1,37,3,37,544,8,37,1,37,
        1,37,1,37,1,37,1,37,1,37,3,37,552,8,37,1,37,3,37,555,8,37,1,37,3,
        37,558,8,37,1,37,1,37,1,37,3,37,563,8,37,1,37,3,37,566,8,37,3,37,
        568,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,578,8,38,1,
        38,3,38,581,8,38,1,38,3,38,584,8,38,1,38,1,38,1,38,1,38,3,38,590,
        8,38,3,38,592,8,38,1,38,5,38,595,8,38,10,38,12,38,598,9,38,1,39,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,611,8,40,
        1,40,3,40,614,8,40,1,41,1,41,1,41,3,41,619,8,41,1,41,3,41,622,8,
        41,1,41,3,41,625,8,41,1,41,1,41,1,41,3,41,630,8,41,1,42,1,42,1,42,
        1,42,1,42,3,42,637,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,645,8,
        43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,3,45,655,8,45,1,45,1,
        45,3,45,659,8,45,1,46,1,46,1,46,3,46,664,8,46,1,46,1,46,1,47,1,47,
        1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,677,8,48,1,48,3,48,680,8,
        48,1,49,1,49,1,49,3,49,685,8,49,1,49,3,49,688,8,49,1,49,3,49,691,
        8,49,1,49,1,49,1,49,3,49,696,8,49,1,50,1,50,1,50,1,50,1,50,3,50,
        703,8,50,1,51,1,51,1,51,1,51,1,51,3,51,710,8,51,1,52,1,52,1,52,1,
        52,1,52,3,52,717,8,52,1,52,1,52,3,52,721,8,52,1,52,3,52,724,8,52,
        1,53,1,53,1,53,1,53,3,53,730,8,53,1,53,3,53,733,8,53,1,53,3,53,736,
        8,53,1,53,1,53,1,53,3,53,741,8,53,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,749,8,54,1,55,3,55,752,8,55,1,55,1,55,1,56,3,56,757,8,56,1,
        56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,
        62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,
        69,1,69,1,70,1,70,1,71,1,71,1,71,5,71,792,8,71,10,71,12,71,795,9,
        71,1,72,1,72,1,72,1,72,1,73,1,73,3,73,803,8,73,1,74,1,74,1,74,3,
        74,808,8,74,3,74,810,8,74,1,75,1,75,1,75,1,76,1,76,1,76,5,76,818,
        8,76,10,76,12,76,821,9,76,3,76,823,8,76,1,77,1,77,1,77,3,77,828,
        8,77,1,78,1,78,1,78,1,78,3,78,834,8,78,1,79,1,79,1,80,1,80,1,80,
        1,80,5,80,842,8,80,10,80,12,80,845,9,80,1,80,1,80,1,80,1,80,3,80,
        851,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,5,82,861,8,82,10,
        82,12,82,864,9,82,3,82,866,8,82,1,82,1,82,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,3,83,879,8,83,1,84,1,84,1,84,1,84,5,84,885,
        8,84,10,84,12,84,888,9,84,1,84,1,84,1,84,1,84,3,84,894,8,84,1,85,
        4,85,897,8,85,11,85,12,85,898,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
        1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
        1,86,1,86,3,86,923,8,86,1,86,3,86,926,8,86,1,87,1,87,1,87,3,87,931,
        8,87,1,88,1,88,1,88,3,88,936,8,88,1,89,1,89,1,89,3,89,941,8,89,1,
        90,1,90,3,90,945,8,90,1,90,0,0,91,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,0,7,1,0,30,31,2,0,56,56,60,61,1,0,14,15,2,0,
        132,132,134,134,1,0,135,136,2,0,135,135,140,140,2,0,71,71,78,84,
        1042,0,194,1,0,0,0,2,226,1,0,0,0,4,228,1,0,0,0,6,232,1,0,0,0,8,234,
        1,0,0,0,10,237,1,0,0,0,12,240,1,0,0,0,14,246,1,0,0,0,16,251,1,0,
        0,0,18,253,1,0,0,0,20,261,1,0,0,0,22,270,1,0,0,0,24,274,1,0,0,0,
        26,279,1,0,0,0,28,294,1,0,0,0,30,298,1,0,0,0,32,309,1,0,0,0,34,319,
        1,0,0,0,36,322,1,0,0,0,38,325,1,0,0,0,40,328,1,0,0,0,42,332,1,0,
        0,0,44,339,1,0,0,0,46,366,1,0,0,0,48,370,1,0,0,0,50,411,1,0,0,0,
        52,415,1,0,0,0,54,421,1,0,0,0,56,424,1,0,0,0,58,428,1,0,0,0,60,458,
        1,0,0,0,62,462,1,0,0,0,64,466,1,0,0,0,66,485,1,0,0,0,68,491,1,0,
        0,0,70,495,1,0,0,0,72,508,1,0,0,0,74,534,1,0,0,0,76,569,1,0,0,0,
        78,599,1,0,0,0,80,604,1,0,0,0,82,615,1,0,0,0,84,631,1,0,0,0,86,638,
        1,0,0,0,88,646,1,0,0,0,90,658,1,0,0,0,92,660,1,0,0,0,94,667,1,0,
        0,0,96,671,1,0,0,0,98,681,1,0,0,0,100,697,1,0,0,0,102,704,1,0,0,
        0,104,711,1,0,0,0,106,725,1,0,0,0,108,742,1,0,0,0,110,751,1,0,0,
        0,112,756,1,0,0,0,114,760,1,0,0,0,116,762,1,0,0,0,118,764,1,0,0,
        0,120,766,1,0,0,0,122,768,1,0,0,0,124,770,1,0,0,0,126,772,1,0,0,
        0,128,774,1,0,0,0,130,776,1,0,0,0,132,778,1,0,0,0,134,780,1,0,0,
        0,136,782,1,0,0,0,138,784,1,0,0,0,140,786,1,0,0,0,142,788,1,0,0,
        0,144,796,1,0,0,0,146,800,1,0,0,0,148,804,1,0,0,0,150,811,1,0,0,
        0,152,822,1,0,0,0,154,824,1,0,0,0,156,829,1,0,0,0,158,835,1,0,0,
        0,160,850,1,0,0,0,162,852,1,0,0,0,164,856,1,0,0,0,166,878,1,0,0,
        0,168,893,1,0,0,0,170,896,1,0,0,0,172,900,1,0,0,0,174,930,1,0,0,
        0,176,935,1,0,0,0,178,940,1,0,0,0,180,944,1,0,0,0,182,191,3,2,1,
        0,183,185,5,109,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,
        0,0,186,187,1,0,0,0,187,188,1,0,0,0,188,190,3,2,1,0,189,184,1,0,
        0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,195,1,0,
        0,0,193,191,1,0,0,0,194,182,1,0,0,0,194,195,1,0,0,0,195,197,1,0,
        0,0,196,198,5,109,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,199,1,
        0,0,0,199,200,5,0,0,1,200,1,1,0,0,0,201,227,3,20,10,0,202,227,3,
        26,13,0,203,227,3,44,22,0,204,227,3,48,24,0,205,227,3,58,29,0,206,
        227,3,64,32,0,207,227,3,70,35,0,208,227,3,72,36,0,209,227,3,74,37,
        0,210,227,3,76,38,0,211,227,3,78,39,0,212,227,3,80,40,0,213,227,
        3,82,41,0,214,227,3,84,42,0,215,227,3,86,43,0,216,227,3,88,44,0,
        217,227,3,92,46,0,218,227,3,94,47,0,219,227,3,96,48,0,220,227,3,
        98,49,0,221,227,3,100,50,0,222,227,3,102,51,0,223,227,3,104,52,0,
        224,227,3,106,53,0,225,227,3,108,54,0,226,201,1,0,0,0,226,202,1,
        0,0,0,226,203,1,0,0,0,226,204,1,0,0,0,226,205,1,0,0,0,226,206,1,
        0,0,0,226,207,1,0,0,0,226,208,1,0,0,0,226,209,1,0,0,0,226,210,1,
        0,0,0,226,211,1,0,0,0,226,212,1,0,0,0,226,213,1,0,0,0,226,214,1,
        0,0,0,226,215,1,0,0,0,226,216,1,0,0,0,226,217,1,0,0,0,226,218,1,
        0,0,0,226,219,1,0,0,0,226,220,1,0,0,0,226,221,1,0,0,0,226,222,1,
        0,0,0,226,223,1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,3,1,0,
        0,0,228,229,7,0,0,0,229,5,1,0,0,0,230,233,3,158,79,0,231,233,5,42,
        0,0,232,230,1,0,0,0,232,231,1,0,0,0,233,7,1,0,0,0,234,235,5,45,0,
        0,235,236,3,166,83,0,236,9,1,0,0,0,237,238,5,36,0,0,238,239,3,158,
        79,0,239,11,1,0,0,0,240,242,5,37,0,0,241,243,5,48,0,0,242,241,1,
        0,0,0,242,243,1,0,0,0,243,244,1,0,0,0,244,245,5,50,0,0,245,13,1,
        0,0,0,246,247,5,51,0,0,247,248,5,52,0,0,248,249,5,53,0,0,249,250,
        3,16,8,0,250,15,1,0,0,0,251,252,5,127,0,0,252,17,1,0,0,0,253,256,
        5,13,0,0,254,255,5,11,0,0,255,257,3,110,55,0,256,254,1,0,0,0,256,
        257,1,0,0,0,257,258,1,0,0,0,258,259,5,17,0,0,259,260,3,116,58,0,
        260,19,1,0,0,0,261,262,5,1,0,0,262,263,5,7,0,0,263,265,5,8,0,0,264,
        266,3,22,11,0,265,264,1,0,0,0,265,266,1,0,0,0,266,21,1,0,0,0,267,
        271,3,4,2,0,268,271,3,8,4,0,269,271,3,24,12,0,270,267,1,0,0,0,270,
        268,1,0,0,0,270,269,1,0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,272,
        273,1,0,0,0,273,23,1,0,0,0,274,277,5,62,0,0,275,276,5,46,0,0,276,
        278,5,47,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,25,1,0,0,0,279,
        282,5,2,0,0,280,281,5,3,0,0,281,283,5,4,0,0,282,280,1,0,0,0,282,
        283,1,0,0,0,283,284,1,0,0,0,284,285,5,7,0,0,285,286,5,11,0,0,286,
        288,3,110,55,0,287,289,3,28,14,0,288,287,1,0,0,0,288,289,1,0,0,0,
        289,27,1,0,0,0,290,295,3,4,2,0,291,295,3,32,16,0,292,295,3,8,4,0,
        293,295,3,10,5,0,294,290,1,0,0,0,294,291,1,0,0,0,294,292,1,0,0,0,
        294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,
        297,29,1,0,0,0,298,307,5,32,0,0,299,308,5,33,0,0,300,308,5,34,0,
        0,301,302,5,33,0,0,302,303,5,108,0,0,303,308,5,34,0,0,304,305,5,
        34,0,0,305,306,5,108,0,0,306,308,5,33,0,0,307,299,1,0,0,0,307,300,
        1,0,0,0,307,301,1,0,0,0,307,304,1,0,0,0,308,31,1,0,0,0,309,316,5,
        37,0,0,310,315,3,34,17,0,311,315,3,36,18,0,312,315,3,38,19,0,313,
        315,3,40,20,0,314,310,1,0,0,0,314,311,1,0,0,0,314,312,1,0,0,0,314,
        313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,
        33,1,0,0,0,318,316,1,0,0,0,319,320,5,39,0,0,320,321,3,6,3,0,321,
        35,1,0,0,0,322,323,5,40,0,0,323,324,3,6,3,0,324,37,1,0,0,0,325,326,
        5,41,0,0,326,327,3,6,3,0,327,39,1,0,0,0,328,329,5,53,0,0,329,330,
        5,54,0,0,330,331,3,6,3,0,331,41,1,0,0,0,332,333,5,43,0,0,333,334,
        5,44,0,0,334,337,5,17,0,0,335,338,3,114,57,0,336,338,5,42,0,0,337,
        335,1,0,0,0,337,336,1,0,0,0,338,43,1,0,0,0,339,342,5,2,0,0,340,341,
        5,3,0,0,341,343,5,4,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,344,
        1,0,0,0,344,345,5,7,0,0,345,347,5,17,0,0,346,348,3,116,58,0,347,
        346,1,0,0,0,347,348,1,0,0,0,348,354,1,0,0,0,349,351,5,13,0,0,350,
        352,5,11,0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,
        355,3,110,55,0,354,349,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,
        357,5,14,0,0,357,359,3,114,57,0,358,360,3,46,23,0,359,358,1,0,0,
        0,359,360,1,0,0,0,360,45,1,0,0,0,361,367,3,4,2,0,362,367,3,12,6,
        0,363,367,3,14,7,0,364,367,3,8,4,0,365,367,3,10,5,0,366,361,1,0,
        0,0,366,362,1,0,0,0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,
        0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,47,1,0,0,
        0,370,373,5,2,0,0,371,372,5,3,0,0,372,374,5,4,0,0,373,371,1,0,0,
        0,373,374,1,0,0,0,374,375,1,0,0,0,375,377,5,7,0,0,376,378,5,19,0,
        0,377,376,1,0,0,0,377,378,1,0,0,0,378,380,1,0,0,0,379,381,5,18,0,
        0,380,379,1,0,0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,384,5,20,0,
        0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,386,5,22,0,
        0,386,388,3,122,61,0,387,389,3,18,9,0,388,387,1,0,0,0,388,389,1,
        0,0,0,389,390,1,0,0,0,390,391,5,14,0,0,391,393,3,146,73,0,392,394,
        3,50,25,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,396,
        5,29,0,0,396,398,3,126,63,0,397,399,3,170,85,0,398,397,1,0,0,0,398,
        399,1,0,0,0,399,401,1,0,0,0,400,402,3,168,84,0,401,400,1,0,0,0,401,
        402,1,0,0,0,402,49,1,0,0,0,403,412,3,4,2,0,404,412,3,12,6,0,405,
        412,3,14,7,0,406,412,3,8,4,0,407,412,3,10,5,0,408,412,3,52,26,0,
        409,412,3,54,27,0,410,412,3,56,28,0,411,403,1,0,0,0,411,404,1,0,
        0,0,411,405,1,0,0,0,411,406,1,0,0,0,411,407,1,0,0,0,411,408,1,0,
        0,0,411,409,1,0,0,0,411,410,1,0,0,0,412,413,1,0,0,0,413,411,1,0,
        0,0,413,414,1,0,0,0,414,51,1,0,0,0,415,416,5,56,0,0,416,419,5,57,
        0,0,417,420,3,158,79,0,418,420,5,58,0,0,419,417,1,0,0,0,419,418,
        1,0,0,0,420,53,1,0,0,0,421,422,5,59,0,0,422,423,7,1,0,0,423,55,1,
        0,0,0,424,425,5,37,0,0,425,426,5,24,0,0,426,427,3,146,73,0,427,57,
        1,0,0,0,428,431,5,2,0,0,429,430,5,3,0,0,430,432,5,4,0,0,431,429,
        1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,7,0,0,434,435,
        5,24,0,0,435,437,3,132,66,0,436,438,3,18,9,0,437,436,1,0,0,0,437,
        438,1,0,0,0,438,439,1,0,0,0,439,440,5,14,0,0,440,442,3,146,73,0,
        441,443,3,60,30,0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,
        0,444,445,5,29,0,0,445,446,3,126,63,0,446,447,5,25,0,0,447,451,3,
        168,84,0,448,450,3,62,31,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,
        1,0,0,0,451,452,1,0,0,0,452,59,1,0,0,0,453,451,1,0,0,0,454,459,3,
        4,2,0,455,459,3,12,6,0,456,459,3,8,4,0,457,459,3,10,5,0,458,454,
        1,0,0,0,458,455,1,0,0,0,458,456,1,0,0,0,458,457,1,0,0,0,459,460,
        1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,61,1,0,0,0,462,463,5,
        26,0,0,463,464,3,128,64,0,464,465,3,168,84,0,465,63,1,0,0,0,466,
        469,5,2,0,0,467,468,5,3,0,0,468,470,5,4,0,0,469,467,1,0,0,0,469,
        470,1,0,0,0,470,471,1,0,0,0,471,472,5,7,0,0,472,473,5,54,0,0,473,
        474,5,66,0,0,474,476,3,136,68,0,475,477,3,18,9,0,476,475,1,0,0,0,
        476,477,1,0,0,0,477,480,1,0,0,0,478,479,5,14,0,0,479,481,3,66,33,
        0,480,478,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,484,3,68,34,
        0,483,482,1,0,0,0,483,484,1,0,0,0,484,65,1,0,0,0,485,486,3,158,79,
        0,486,67,1,0,0,0,487,492,3,4,2,0,488,492,3,12,6,0,489,492,3,8,4,
        0,490,492,3,10,5,0,491,487,1,0,0,0,491,488,1,0,0,0,491,489,1,0,0,
        0,491,490,1,0,0,0,492,493,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,
        0,494,69,1,0,0,0,495,496,5,5,0,0,496,497,5,7,0,0,497,498,5,11,0,
        0,498,503,3,110,55,0,499,500,5,12,0,0,500,501,5,38,0,0,501,502,5,
        39,0,0,502,504,3,112,56,0,503,499,1,0,0,0,503,504,1,0,0,0,504,506,
        1,0,0,0,505,507,3,28,14,0,506,505,1,0,0,0,506,507,1,0,0,0,507,71,
        1,0,0,0,508,509,5,5,0,0,509,510,5,7,0,0,510,512,5,17,0,0,511,513,
        3,116,58,0,512,511,1,0,0,0,512,513,1,0,0,0,513,519,1,0,0,0,514,516,
        5,13,0,0,515,517,5,11,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,
        1,0,0,0,518,520,3,110,55,0,519,514,1,0,0,0,519,520,1,0,0,0,520,525,
        1,0,0,0,521,522,5,12,0,0,522,523,5,38,0,0,523,524,5,39,0,0,524,526,
        3,118,59,0,525,521,1,0,0,0,525,526,1,0,0,0,526,529,1,0,0,0,527,528,
        5,14,0,0,528,530,3,114,57,0,529,527,1,0,0,0,529,530,1,0,0,0,530,
        532,1,0,0,0,531,533,3,46,23,0,532,531,1,0,0,0,532,533,1,0,0,0,533,
        73,1,0,0,0,534,535,5,5,0,0,535,537,5,7,0,0,536,538,5,19,0,0,537,
        536,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,541,5,18,0,0,540,
        539,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,544,5,20,0,0,543,
        542,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,22,0,0,546,
        551,3,122,61,0,547,548,5,12,0,0,548,549,5,38,0,0,549,550,5,39,0,
        0,550,552,3,124,62,0,551,547,1,0,0,0,551,552,1,0,0,0,552,554,1,0,
        0,0,553,555,3,18,9,0,554,553,1,0,0,0,554,555,1,0,0,0,555,557,1,0,
        0,0,556,558,3,50,25,0,557,556,1,0,0,0,557,558,1,0,0,0,558,567,1,
        0,0,0,559,560,5,29,0,0,560,562,3,126,63,0,561,563,3,170,85,0,562,
        561,1,0,0,0,562,563,1,0,0,0,563,565,1,0,0,0,564,566,3,168,84,0,565,
        564,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,0,567,559,1,0,0,0,567,
        568,1,0,0,0,568,75,1,0,0,0,569,570,5,5,0,0,570,571,5,7,0,0,571,572,
        5,24,0,0,572,577,3,132,66,0,573,574,5,12,0,0,574,575,5,38,0,0,575,
        576,5,39,0,0,576,578,3,134,67,0,577,573,1,0,0,0,577,578,1,0,0,0,
        578,580,1,0,0,0,579,581,3,18,9,0,580,579,1,0,0,0,580,581,1,0,0,0,
        581,583,1,0,0,0,582,584,3,60,30,0,583,582,1,0,0,0,583,584,1,0,0,
        0,584,591,1,0,0,0,585,586,5,29,0,0,586,589,3,126,63,0,587,588,5,
        25,0,0,588,590,3,168,84,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,
        1,0,0,0,591,585,1,0,0,0,591,592,1,0,0,0,592,596,1,0,0,0,593,595,
        3,62,31,0,594,593,1,0,0,0,595,598,1,0,0,0,596,594,1,0,0,0,596,597,
        1,0,0,0,597,77,1,0,0,0,598,596,1,0,0,0,599,600,5,27,0,0,600,601,
        5,7,0,0,601,602,5,11,0,0,602,603,3,110,55,0,603,79,1,0,0,0,604,605,
        5,27,0,0,605,606,5,7,0,0,606,607,5,17,0,0,607,613,3,116,58,0,608,
        610,5,13,0,0,609,611,5,11,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,
        612,1,0,0,0,612,614,3,110,55,0,613,608,1,0,0,0,613,614,1,0,0,0,614,
        81,1,0,0,0,615,616,5,27,0,0,616,618,5,7,0,0,617,619,5,19,0,0,618,
        617,1,0,0,0,618,619,1,0,0,0,619,621,1,0,0,0,620,622,5,18,0,0,621,
        620,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,5,20,0,0,624,
        623,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,627,5,22,0,0,627,
        629,3,122,61,0,628,630,3,18,9,0,629,628,1,0,0,0,629,630,1,0,0,0,
        630,83,1,0,0,0,631,632,5,27,0,0,632,633,5,7,0,0,633,634,5,24,0,0,
        634,636,3,132,66,0,635,637,3,18,9,0,636,635,1,0,0,0,636,637,1,0,
        0,0,637,85,1,0,0,0,638,639,5,27,0,0,639,640,5,7,0,0,640,641,5,54,
        0,0,641,642,5,66,0,0,642,644,3,136,68,0,643,645,3,18,9,0,644,643,
        1,0,0,0,644,645,1,0,0,0,645,87,1,0,0,0,646,647,5,28,0,0,647,648,
        5,7,0,0,648,649,3,90,45,0,649,89,1,0,0,0,650,651,5,11,0,0,651,659,
        3,110,55,0,652,653,5,11,0,0,653,655,3,110,55,0,654,652,1,0,0,0,654,
        655,1,0,0,0,655,656,1,0,0,0,656,657,5,17,0,0,657,659,3,116,58,0,
        658,650,1,0,0,0,658,654,1,0,0,0,659,91,1,0,0,0,660,661,5,6,0,0,661,
        663,5,7,0,0,662,664,5,8,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,
        665,1,0,0,0,665,666,5,9,0,0,666,93,1,0,0,0,667,668,5,6,0,0,668,669,
        5,7,0,0,669,670,5,10,0,0,670,95,1,0,0,0,671,672,5,6,0,0,672,673,
        5,7,0,0,673,679,5,16,0,0,674,676,7,2,0,0,675,677,5,11,0,0,676,675,
        1,0,0,0,676,677,1,0,0,0,677,678,1,0,0,0,678,680,3,110,55,0,679,674,
        1,0,0,0,679,680,1,0,0,0,680,97,1,0,0,0,681,682,5,6,0,0,682,684,5,
        7,0,0,683,685,5,19,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,687,1,
        0,0,0,686,688,5,18,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,1,
        0,0,0,689,691,5,20,0,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,
        0,0,0,692,695,5,21,0,0,693,694,7,2,0,0,694,696,3,90,45,0,695,693,
        1,0,0,0,695,696,1,0,0,0,696,99,1,0,0,0,697,698,5,6,0,0,698,699,5,
        7,0,0,699,702,5,23,0,0,700,701,7,2,0,0,701,703,3,90,45,0,702,700,
        1,0,0,0,702,703,1,0,0,0,703,101,1,0,0,0,704,705,5,6,0,0,705,706,
        5,2,0,0,706,707,5,7,0,0,707,709,5,11,0,0,708,710,3,110,55,0,709,
        708,1,0,0,0,709,710,1,0,0,0,710,103,1,0,0,0,711,712,5,6,0,0,712,
        713,5,2,0,0,713,714,5,7,0,0,714,716,5,17,0,0,715,717,3,116,58,0,
        716,715,1,0,0,0,716,717,1,0,0,0,717,723,1,0,0,0,718,720,7,2,0,0,
        719,721,5,11,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,
        722,724,3,110,55,0,723,718,1,0,0,0,723,724,1,0,0,0,724,105,1,0,0,
        0,725,726,5,6,0,0,726,727,5,2,0,0,727,729,5,7,0,0,728,730,5,19,0,
        0,729,728,1,0,0,0,729,730,1,0,0,0,730,732,1,0,0,0,731,733,5,18,0,
        0,732,731,1,0,0,0,732,733,1,0,0,0,733,735,1,0,0,0,734,736,5,20,0,
        0,735,734,1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,738,5,22,0,
        0,738,740,3,122,61,0,739,741,3,18,9,0,740,739,1,0,0,0,740,741,1,
        0,0,0,741,107,1,0,0,0,742,743,5,6,0,0,743,744,5,2,0,0,744,745,5,
        7,0,0,745,746,5,24,0,0,746,748,3,132,66,0,747,749,3,18,9,0,748,747,
        1,0,0,0,748,749,1,0,0,0,749,109,1,0,0,0,750,752,3,154,77,0,751,750,
        1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,3,156,78,0,754,111,
        1,0,0,0,755,757,3,154,77,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,
        1,0,0,0,758,759,3,156,78,0,759,113,1,0,0,0,760,761,3,140,70,0,761,
        115,1,0,0,0,762,763,3,156,78,0,763,117,1,0,0,0,764,765,3,156,78,
        0,765,119,1,0,0,0,766,767,3,140,70,0,767,121,1,0,0,0,768,769,3,156,
        78,0,769,123,1,0,0,0,770,771,3,156,78,0,771,125,1,0,0,0,772,773,
        3,140,70,0,773,127,1,0,0,0,774,775,3,140,70,0,775,129,1,0,0,0,776,
        777,3,140,70,0,777,131,1,0,0,0,778,779,3,156,78,0,779,133,1,0,0,
        0,780,781,3,156,78,0,781,135,1,0,0,0,782,783,3,156,78,0,783,137,
        1,0,0,0,784,785,7,3,0,0,785,139,1,0,0,0,786,787,3,138,69,0,787,141,
        1,0,0,0,788,793,3,140,70,0,789,790,5,108,0,0,790,792,3,140,70,0,
        791,789,1,0,0,0,792,795,1,0,0,0,793,791,1,0,0,0,793,794,1,0,0,0,
        794,143,1,0,0,0,795,793,1,0,0,0,796,797,5,111,0,0,797,798,3,142,
        71,0,798,799,5,112,0,0,799,145,1,0,0,0,800,802,3,140,70,0,801,803,
        3,150,75,0,802,801,1,0,0,0,802,803,1,0,0,0,803,147,1,0,0,0,804,809,
        3,140,70,0,805,807,3,150,75,0,806,808,3,150,75,0,807,806,1,0,0,0,
        807,808,1,0,0,0,808,810,1,0,0,0,809,805,1,0,0,0,809,810,1,0,0,0,
        810,149,1,0,0,0,811,812,5,107,0,0,812,813,3,140,70,0,813,151,1,0,
        0,0,814,823,3,148,74,0,815,819,3,140,70,0,816,818,3,150,75,0,817,
        816,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,
        823,1,0,0,0,821,819,1,0,0,0,822,814,1,0,0,0,822,815,1,0,0,0,823,
        153,1,0,0,0,824,827,3,152,76,0,825,826,5,110,0,0,826,828,5,127,0,
        0,827,825,1,0,0,0,827,828,1,0,0,0,828,155,1,0,0,0,829,830,5,96,0,
        0,830,833,3,152,76,0,831,832,5,96,0,0,832,834,3,152,76,0,833,831,
        1,0,0,0,833,834,1,0,0,0,834,157,1,0,0,0,835,836,7,4,0,0,836,159,
        1,0,0,0,837,838,5,113,0,0,838,843,3,162,81,0,839,840,5,108,0,0,840,
        842,3,162,81,0,841,839,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,
        844,1,0,0,0,844,846,1,0,0,0,845,843,1,0,0,0,846,847,5,114,0,0,847,
        851,1,0,0,0,848,849,5,113,0,0,849,851,5,114,0,0,850,837,1,0,0,0,
        850,848,1,0,0,0,851,161,1,0,0,0,852,853,7,5,0,0,853,854,5,110,0,
        0,854,855,3,166,83,0,855,163,1,0,0,0,856,865,5,116,0,0,857,862,3,
        166,83,0,858,859,5,108,0,0,859,861,3,166,83,0,860,858,1,0,0,0,861,
        864,1,0,0,0,862,860,1,0,0,0,862,863,1,0,0,0,863,866,1,0,0,0,864,
        862,1,0,0,0,865,857,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,
        868,5,117,0,0,868,165,1,0,0,0,869,879,5,140,0,0,870,879,5,135,0,
        0,871,879,5,141,0,0,872,879,5,127,0,0,873,879,3,160,80,0,874,879,
        3,164,82,0,875,879,5,64,0,0,876,879,5,65,0,0,877,879,5,63,0,0,878,
        869,1,0,0,0,878,870,1,0,0,0,878,871,1,0,0,0,878,872,1,0,0,0,878,
        873,1,0,0,0,878,874,1,0,0,0,878,875,1,0,0,0,878,876,1,0,0,0,878,
        877,1,0,0,0,879,167,1,0,0,0,880,881,5,113,0,0,881,886,3,172,86,0,
        882,883,5,108,0,0,883,885,3,172,86,0,884,882,1,0,0,0,885,888,1,0,
        0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,886,1,0,
        0,0,889,890,5,114,0,0,890,894,1,0,0,0,891,892,5,113,0,0,892,894,
        5,114,0,0,893,880,1,0,0,0,893,891,1,0,0,0,894,169,1,0,0,0,895,897,
        7,6,0,0,896,895,1,0,0,0,897,898,1,0,0,0,898,896,1,0,0,0,898,899,
        1,0,0,0,899,171,1,0,0,0,900,901,3,174,87,0,901,902,5,110,0,0,902,
        922,3,146,73,0,903,923,5,68,0,0,904,923,5,69,0,0,905,923,5,67,0,
        0,906,923,5,70,0,0,907,923,5,72,0,0,908,923,5,73,0,0,909,923,5,74,
        0,0,910,923,5,75,0,0,911,912,5,76,0,0,912,913,5,111,0,0,913,914,
        3,176,88,0,914,915,5,112,0,0,915,923,1,0,0,0,916,917,5,77,0,0,917,
        918,5,111,0,0,918,919,3,178,89,0,919,920,5,112,0,0,920,923,1,0,0,
        0,921,923,3,170,85,0,922,903,1,0,0,0,922,904,1,0,0,0,922,905,1,0,
        0,0,922,906,1,0,0,0,922,907,1,0,0,0,922,908,1,0,0,0,922,909,1,0,
        0,0,922,910,1,0,0,0,922,911,1,0,0,0,922,916,1,0,0,0,922,921,1,0,
        0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,926,3,168,84,0,925,924,1,
        0,0,0,925,926,1,0,0,0,926,173,1,0,0,0,927,931,5,140,0,0,928,931,
        5,135,0,0,929,931,3,140,70,0,930,927,1,0,0,0,930,928,1,0,0,0,930,
        929,1,0,0,0,931,175,1,0,0,0,932,936,5,140,0,0,933,936,5,135,0,0,
        934,936,3,140,70,0,935,932,1,0,0,0,935,933,1,0,0,0,935,934,1,0,0,
        0,936,177,1,0,0,0,937,941,5,140,0,0,938,941,5,135,0,0,939,941,3,
        140,70,0,940,937,1,0,0,0,940,938,1,0,0,0,940,939,1,0,0,0,941,179,
        1,0,0,0,942,945,3,146,73,0,943,945,3,168,84,0,944,942,1,0,0,0,944,
        943,1,0,0,0,945,181,1,0,0,0,124,186,191,194,197,226,232,242,256,
        265,270,272,277,282,288,294,296,307,314,316,337,342,347,351,354,
        359,366,368,373,377,380,383,388,393,398,401,411,413,419,431,437,
        442,451,458,460,469,476,480,483,491,493,503,506,512,516,519,525,
        529,532,537,540,543,551,554,557,562,565,567,577,580,583,589,591,
        596,610,613,618,621,624,629,636,644,654,658,663,676,679,684,687,
        690,695,702,709,716,720,723,729,732,735,740,748,751,756,793,802,
        807,809,819,822,827,833,843,850,862,865,878,886,893,898,922,925,
        930,935,940,944
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "':='", "'<=>'", "'>='", "'>'", 
                     "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", 
                     "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", "'('", 
                     "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", "'->>'", 
                     "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CONFIGURE_SYMBOL", "CREATE_SYMBOL", 
                      "OR_SYMBOL", "REPLACE_SYMBOL", "ALTER_SYMBOL", "SHOW_SYMBOL", 
                      "REST_SYMBOL", "METADATA_SYMBOL", "STATUS_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "SCHEMAS_SYMBOL", 
                      "SCHEMA_SYMBOL", "JSON_SYMBOL", "RELATIONAL_SYMBOL", 
                      "DUALITY_SYMBOL", "VIEWS_SYMBOL", "VIEW_SYMBOL", "PROCEDURES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PARAMETERS_SYMBOL", "RESULT_SYMBOL", 
                      "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", "ENABLED_SYMBOL", 
                      "DISABLED_SYMBOL", "PROTOCOL_SYMBOL", "HTTP_SYMBOL", 
                      "HTTPS_SYMBOL", "FILTER_SYMBOL", "COMMENTS_SYMBOL", 
                      "AUTHENTICATION_SYMBOL", "REQUEST_SYMBOL", "PATH_SYMBOL", 
                      "REDIRECTION_SYMBOL", "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", 
                      "USER_SYMBOL", "MANAGEMENT_SYMBOL", "OPTIONS_SYMBOL", 
                      "IF_SYMBOL", "AVAILABLE_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "REQUIRED_SYMBOL", "ITEMS_SYMBOL", "PER_SYMBOL", "PAGE_SYMBOL", 
                      "CONTENT_SYMBOL", "HOST_SYMBOL", "MEDIA_SYMBOL", "TYPE_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FORMAT_SYMBOL", "FEED_SYMBOL", 
                      "ITEM_SYMBOL", "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", 
                      "FALSE_SYMBOL", "SET_SYMBOL", "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", 
                      "AT_OUT_SYMBOL", "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", 
                      "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_REDUCETO_SYMBOL", "AT_DATATYPE_SYMBOL", 
                      "AT_SELECT_SYMBOL", "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", 
                      "AT_NOINSERT_SYMBOL", "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", 
                      "AT_NODELETE_SYMBOL", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
                      "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "JSON_STRING", 
                      "JSON_NUMBER", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_comments = 5
    RULE_authenticationRequired = 6
    RULE_itemsPerPage = 7
    RULE_itemsPerPageNumber = 8
    RULE_serviceSchemaSelector = 9
    RULE_configureRestMetadataStatement = 10
    RULE_restMetadataOptions = 11
    RULE_updateIfAvailable = 12
    RULE_createRestServiceStatement = 13
    RULE_restServiceOptions = 14
    RULE_restProtocol = 15
    RULE_restAuthentication = 16
    RULE_authPath = 17
    RULE_authRedirection = 18
    RULE_authValidation = 19
    RULE_authPageContent = 20
    RULE_userManagementSchema = 21
    RULE_createRestSchemaStatement = 22
    RULE_restSchemaOptions = 23
    RULE_createRestViewStatement = 24
    RULE_restDualityViewOptions = 25
    RULE_restViewMediaType = 26
    RULE_restViewFormat = 27
    RULE_restViewAuthenticationProcedure = 28
    RULE_createRestProcedureStatement = 29
    RULE_restProcedureOptions = 30
    RULE_restProcedureResult = 31
    RULE_createRestContentSetStatement = 32
    RULE_directoryFilePath = 33
    RULE_restContentSetOptions = 34
    RULE_alterRestServiceStatement = 35
    RULE_alterRestSchemaStatement = 36
    RULE_alterRestViewStatement = 37
    RULE_alterRestProcedureStatement = 38
    RULE_dropRestServiceStatement = 39
    RULE_dropRestSchemaStatement = 40
    RULE_dropRestDualityViewStatement = 41
    RULE_dropRestProcedureStatement = 42
    RULE_dropRestContentSetStatement = 43
    RULE_useStatement = 44
    RULE_serviceAndSchemaRequestPaths = 45
    RULE_showRestMetadataStatusStatement = 46
    RULE_showRestServicesStatement = 47
    RULE_showRestSchemasStatement = 48
    RULE_showRestViewsStatement = 49
    RULE_showRestProceduresStatement = 50
    RULE_showCreateRestServiceStatement = 51
    RULE_showCreateRestSchemaStatement = 52
    RULE_showCreateRestViewStatement = 53
    RULE_showCreateRestProcedureStatement = 54
    RULE_serviceRequestPath = 55
    RULE_newServiceRequestPath = 56
    RULE_schemaName = 57
    RULE_schemaRequestPath = 58
    RULE_newSchemaRequestPath = 59
    RULE_viewName = 60
    RULE_viewRequestPath = 61
    RULE_newViewRequestPath = 62
    RULE_restObjectName = 63
    RULE_restResultName = 64
    RULE_procedureName = 65
    RULE_procedureRequestPath = 66
    RULE_newProcedureRequestPath = 67
    RULE_contentSetRequestPath = 68
    RULE_pureIdentifier = 69
    RULE_identifier = 70
    RULE_identifierList = 71
    RULE_identifierListWithParentheses = 72
    RULE_qualifiedIdentifier = 73
    RULE_simpleIdentifier = 74
    RULE_dotIdentifier = 75
    RULE_dottedIdentifier = 76
    RULE_hostAndPortIdentifier = 77
    RULE_requestPathIdentifier = 78
    RULE_quotedText = 79
    RULE_jsonObj = 80
    RULE_jsonPair = 81
    RULE_jsonArr = 82
    RULE_jsonValue = 83
    RULE_graphGlObj = 84
    RULE_graphGlCrudOptions = 85
    RULE_graphGlPair = 86
    RULE_graphKeyValue = 87
    RULE_graphGlReduceToValue = 88
    RULE_graphGlDatatypeValue = 89
    RULE_graphGlValue = 90

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "restProtocol", "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restDualityViewOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureOptions", "restProcedureResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "alterRestServiceStatement", 
                   "alterRestSchemaStatement", "alterRestViewStatement", 
                   "alterRestProcedureStatement", "dropRestServiceStatement", 
                   "dropRestSchemaStatement", "dropRestDualityViewStatement", 
                   "dropRestProcedureStatement", "dropRestContentSetStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaName", 
                   "schemaRequestPath", "newSchemaRequestPath", "viewName", 
                   "viewRequestPath", "newViewRequestPath", "restObjectName", 
                   "restResultName", "procedureName", "procedureRequestPath", 
                   "newProcedureRequestPath", "contentSetRequestPath", "pureIdentifier", 
                   "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "dottedIdentifier", "hostAndPortIdentifier", "requestPathIdentifier", 
                   "quotedText", "jsonObj", "jsonPair", "jsonArr", "jsonValue", 
                   "graphGlObj", "graphGlCrudOptions", "graphGlPair", "graphKeyValue", 
                   "graphGlReduceToValue", "graphGlDatatypeValue", "graphGlValue" ]

    EOF = Token.EOF
    CONFIGURE_SYMBOL=1
    CREATE_SYMBOL=2
    OR_SYMBOL=3
    REPLACE_SYMBOL=4
    ALTER_SYMBOL=5
    SHOW_SYMBOL=6
    REST_SYMBOL=7
    METADATA_SYMBOL=8
    STATUS_SYMBOL=9
    SERVICES_SYMBOL=10
    SERVICE_SYMBOL=11
    NEW_SYMBOL=12
    ON_SYMBOL=13
    FROM_SYMBOL=14
    IN_SYMBOL=15
    SCHEMAS_SYMBOL=16
    SCHEMA_SYMBOL=17
    JSON_SYMBOL=18
    RELATIONAL_SYMBOL=19
    DUALITY_SYMBOL=20
    VIEWS_SYMBOL=21
    VIEW_SYMBOL=22
    PROCEDURES_SYMBOL=23
    PROCEDURE_SYMBOL=24
    PARAMETERS_SYMBOL=25
    RESULT_SYMBOL=26
    DROP_SYMBOL=27
    USE_SYMBOL=28
    AS_SYMBOL=29
    ENABLED_SYMBOL=30
    DISABLED_SYMBOL=31
    PROTOCOL_SYMBOL=32
    HTTP_SYMBOL=33
    HTTPS_SYMBOL=34
    FILTER_SYMBOL=35
    COMMENTS_SYMBOL=36
    AUTHENTICATION_SYMBOL=37
    REQUEST_SYMBOL=38
    PATH_SYMBOL=39
    REDIRECTION_SYMBOL=40
    VALIDATION_SYMBOL=41
    DEFAULT_SYMBOL=42
    USER_SYMBOL=43
    MANAGEMENT_SYMBOL=44
    OPTIONS_SYMBOL=45
    IF_SYMBOL=46
    AVAILABLE_SYMBOL=47
    NOT_SYMBOL=48
    EXISTS_SYMBOL=49
    REQUIRED_SYMBOL=50
    ITEMS_SYMBOL=51
    PER_SYMBOL=52
    PAGE_SYMBOL=53
    CONTENT_SYMBOL=54
    HOST_SYMBOL=55
    MEDIA_SYMBOL=56
    TYPE_SYMBOL=57
    AUTODETECT_SYMBOL=58
    FORMAT_SYMBOL=59
    FEED_SYMBOL=60
    ITEM_SYMBOL=61
    UPDATE_SYMBOL=62
    NULL_SYMBOL=63
    TRUE_SYMBOL=64
    FALSE_SYMBOL=65
    SET_SYMBOL=66
    AT_INOUT_SYMBOL=67
    AT_IN_SYMBOL=68
    AT_OUT_SYMBOL=69
    AT_NOCHECK_SYMBOL=70
    AT_NOUPDATE_SYMBOL=71
    AT_SORTABLE_SYMBOL=72
    AT_NOFILTERING_SYMBOL=73
    AT_ROWOWNERSHIP_SYMBOL=74
    AT_UNNEST_SYMBOL=75
    AT_REDUCETO_SYMBOL=76
    AT_DATATYPE_SYMBOL=77
    AT_SELECT_SYMBOL=78
    AT_NOSELECT_SYMBOL=79
    AT_INSERT_SYMBOL=80
    AT_NOINSERT_SYMBOL=81
    AT_UPDATE_SYMBOL=82
    AT_DELETE_SYMBOL=83
    AT_NODELETE_SYMBOL=84
    EQUAL_OPERATOR=85
    ASSIGN_OPERATOR=86
    NULL_SAFE_EQUAL_OPERATOR=87
    GREATER_OR_EQUAL_OPERATOR=88
    GREATER_THAN_OPERATOR=89
    LESS_OR_EQUAL_OPERATOR=90
    LESS_THAN_OPERATOR=91
    NOT_EQUAL_OPERATOR=92
    PLUS_OPERATOR=93
    MINUS_OPERATOR=94
    MULT_OPERATOR=95
    DIV_OPERATOR=96
    MOD_OPERATOR=97
    LOGICAL_NOT_OPERATOR=98
    BITWISE_NOT_OPERATOR=99
    SHIFT_LEFT_OPERATOR=100
    SHIFT_RIGHT_OPERATOR=101
    LOGICAL_AND_OPERATOR=102
    BITWISE_AND_OPERATOR=103
    BITWISE_XOR_OPERATOR=104
    LOGICAL_OR_OPERATOR=105
    BITWISE_OR_OPERATOR=106
    DOT_SYMBOL=107
    COMMA_SYMBOL=108
    SEMICOLON_SYMBOL=109
    COLON_SYMBOL=110
    OPEN_PAR_SYMBOL=111
    CLOSE_PAR_SYMBOL=112
    OPEN_CURLY_SYMBOL=113
    CLOSE_CURLY_SYMBOL=114
    UNDERLINE_SYMBOL=115
    OPEN_SQUARE_SYMBOL=116
    CLOSE_SQUARE_SYMBOL=117
    JSON_SEPARATOR_SYMBOL=118
    JSON_UNQUOTED_SEPARATOR_SYMBOL=119
    AT_SIGN_SYMBOL=120
    AT_TEXT_SUFFIX=121
    AT_AT_SIGN_SYMBOL=122
    NULL2_SYMBOL=123
    PARAM_MARKER=124
    HEX_NUMBER=125
    BIN_NUMBER=126
    INT_NUMBER=127
    DECIMAL_NUMBER=128
    FLOAT_NUMBER=129
    WHITESPACE=130
    INVALID_INPUT=131
    IDENTIFIER=132
    NCHAR_TEXT=133
    BACK_TICK_QUOTED_ID=134
    DOUBLE_QUOTED_TEXT=135
    SINGLE_QUOTED_TEXT=136
    BLOCK_COMMENT=137
    POUND_COMMENT=138
    DASHDASH_COMMENT=139
    JSON_STRING=140
    JSON_NUMBER=141
    WS=142
    NOT_EQUAL2_OPERATOR=143

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 402653286) != 0):
                self.state = 182
                self.mrsStatement()
                self.state = 191
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 184 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 183
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 186 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==109):
                                break

                        self.state = 188
                        self.mrsStatement() 
                    self.state = 193
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 196
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 199
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 201
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 202
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 203
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 204
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 205
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 206
                self.createRestContentSetStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 207
                self.alterRestServiceStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 208
                self.alterRestSchemaStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 209
                self.alterRestViewStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 210
                self.alterRestProcedureStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 211
                self.dropRestServiceStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 212
                self.dropRestSchemaStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 213
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 214
                self.dropRestProcedureStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 215
                self.dropRestContentSetStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 216
                self.useStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 217
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 218
                self.showRestServicesStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 219
                self.showRestSchemasStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 220
                self.showRestViewsStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 221
                self.showRestProceduresStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 222
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 223
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 224
                self.showCreateRestViewStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 225
                self.showCreateRestProcedureStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            _la = self._input.LA(1)
            if not(_la==30 or _la==31):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135, 136]:
                self.state = 230
                self.quotedText()
                pass
            elif token in [42]:
                self.state = 231
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 235
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 238
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 241
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 244
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 247
            self.match(MRSParser.PER_SYMBOL)
            self.state = 248
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 249
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(MRSParser.ON_SYMBOL)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 254
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 255
                self.serviceRequestPath()


            self.state = 258
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 259
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 262
            self.match(MRSParser.REST_SYMBOL)
            self.state = 263
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721206020702208) != 0):
                self.state = 264
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 270
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 267
                    self.enabledDisabled()
                    pass
                elif token in [45]:
                    self.state = 268
                    self.jsonOptions()
                    pass
                elif token in [62]:
                    self.state = 269
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 272 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721206020702208) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 275
                self.match(MRSParser.IF_SYMBOL)
                self.state = 276
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 280
                self.match(MRSParser.OR_SYMBOL)
                self.state = 281
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 284
            self.match(MRSParser.REST_SYMBOL)
            self.state = 285
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 286
            self.serviceRequestPath()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 287
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 294
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 290
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 291
                    self.restAuthentication()
                    pass
                elif token in [45]:
                    self.state = 292
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 293
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 299
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 300
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 301
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 302
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 303
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 304
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 305
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 306
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9011047545438208) != 0):
                self.state = 314
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 310
                    self.authPath()
                    pass
                elif token in [40]:
                    self.state = 311
                    self.authRedirection()
                    pass
                elif token in [41]:
                    self.state = 312
                    self.authValidation()
                    pass
                elif token in [53]:
                    self.state = 313
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 320
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 323
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 326
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 329
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 330
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(MRSParser.USER_SYMBOL)
            self.state = 333
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 334
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132, 134]:
                self.state = 335
                self.schemaName()
                pass
            elif token in [42]:
                self.state = 336
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 340
                self.match(MRSParser.OR_SYMBOL)
                self.state = 341
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 344
            self.match(MRSParser.REST_SYMBOL)
            self.state = 345
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 346
                self.schemaRequestPath()


            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 349
                self.match(MRSParser.ON_SYMBOL)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 350
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 353
                self.serviceRequestPath()


            self.state = 356
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 357
            self.schemaName()
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0):
                self.state = 358
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 366
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 361
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 362
                    self.authenticationRequired()
                    pass
                elif token in [51]:
                    self.state = 363
                    self.itemsPerPage()
                    pass
                elif token in [45]:
                    self.state = 364
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 365
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 368 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restDualityViewOptions(self):
            return self.getTypedRuleContext(MRSParser.RestDualityViewOptionsContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 371
                self.match(MRSParser.OR_SYMBOL)
                self.state = 372
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 375
            self.match(MRSParser.REST_SYMBOL)
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 376
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 379
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 382
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 385
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 386
            self.viewRequestPath()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 387
                self.serviceSchemaSelector()


            self.state = 390
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 391
            self.qualifiedIdentifier()
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 392
                self.restDualityViewOptions()


            self.state = 395
            self.match(MRSParser.AS_SYMBOL)
            self.state = 396
            self.restObjectName()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16257) != 0):
                self.state = 397
                self.graphGlCrudOptions()


            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 400
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestDualityViewOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restDualityViewOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestDualityViewOptions" ):
                listener.enterRestDualityViewOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestDualityViewOptions" ):
                listener.exitRestDualityViewOptions(self)




    def restDualityViewOptions(self):

        localctx = MRSParser.RestDualityViewOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restDualityViewOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 403
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 404
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 405
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 406
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 407
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 408
                    self.restViewMediaType()
                    pass

                elif la_ == 7:
                    self.state = 409
                    self.restViewFormat()
                    pass

                elif la_ == 8:
                    self.state = 410
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 413 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 416
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 419
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135, 136]:
                self.state = 417
                self.quotedText()
                pass
            elif token in [58]:
                self.state = 418
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 422
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3530822107858468864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 425
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 426
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restProcedureOptions(self):
            return self.getTypedRuleContext(MRSParser.RestProcedureOptionsContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 429
                self.match(MRSParser.OR_SYMBOL)
                self.state = 430
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 433
            self.match(MRSParser.REST_SYMBOL)
            self.state = 434
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 435
            self.procedureRequestPath()
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 436
                self.serviceSchemaSelector()


            self.state = 439
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 440
            self.qualifiedIdentifier()
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 441
                self.restProcedureOptions()


            self.state = 444
            self.match(MRSParser.AS_SYMBOL)
            self.state = 445
            self.restObjectName()
            self.state = 446
            self.match(MRSParser.PARAMETERS_SYMBOL)
            self.state = 447
            self.graphGlObj()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 448
                self.restProcedureResult()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureOptions" ):
                listener.enterRestProcedureOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureOptions" ):
                listener.exitRestProcedureOptions(self)




    def restProcedureOptions(self):

        localctx = MRSParser.RestProcedureOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restProcedureOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 458
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 454
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 455
                    self.authenticationRequired()
                    pass
                elif token in [45]:
                    self.state = 456
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 457
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 460 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restProcedureResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 463
            self.restResultName()
            self.state = 464
            self.graphGlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 467
                self.match(MRSParser.OR_SYMBOL)
                self.state = 468
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 471
            self.match(MRSParser.REST_SYMBOL)
            self.state = 472
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 473
            self.match(MRSParser.SET_SYMBOL)
            self.state = 474
            self.contentSetRequestPath()
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 475
                self.serviceSchemaSelector()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 478
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 479
                self.directoryFilePath()


            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 482
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 491
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 487
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 488
                    self.authenticationRequired()
                    pass
                elif token in [45]:
                    self.state = 489
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 490
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 493 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 496
            self.match(MRSParser.REST_SYMBOL)
            self.state = 497
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 498
            self.serviceRequestPath()
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 499
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 500
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 501
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 502
                self.newServiceRequestPath()


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 505
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 509
            self.match(MRSParser.REST_SYMBOL)
            self.state = 510
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 511
                self.schemaRequestPath()


            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 514
                self.match(MRSParser.ON_SYMBOL)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 515
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 518
                self.serviceRequestPath()


            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 521
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 522
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 523
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 524
                self.newSchemaRequestPath()


            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 527
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 528
                self.schemaName()


            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0):
                self.state = 531
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restDualityViewOptions(self):
            return self.getTypedRuleContext(MRSParser.RestDualityViewOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 535
            self.match(MRSParser.REST_SYMBOL)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 536
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 539
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 542
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 545
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 546
            self.viewRequestPath()
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 547
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 548
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 549
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 550
                self.newViewRequestPath()


            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 553
                self.serviceSchemaSelector()


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 556
                self.restDualityViewOptions()


            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 559
                self.match(MRSParser.AS_SYMBOL)
                self.state = 560
                self.restObjectName()
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16257) != 0):
                    self.state = 561
                    self.graphGlCrudOptions()


                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 564
                    self.graphGlObj()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restProcedureOptions(self):
            return self.getTypedRuleContext(MRSParser.RestProcedureOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 570
            self.match(MRSParser.REST_SYMBOL)
            self.state = 571
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 572
            self.procedureRequestPath()
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 573
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 574
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 575
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 576
                self.newProcedureRequestPath()


            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 579
                self.serviceSchemaSelector()


            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 582
                self.restProcedureOptions()


            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 585
                self.match(MRSParser.AS_SYMBOL)
                self.state = 586
                self.restObjectName()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 587
                    self.match(MRSParser.PARAMETERS_SYMBOL)
                    self.state = 588
                    self.graphGlObj()




            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 593
                self.restProcedureResult()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 600
            self.match(MRSParser.REST_SYMBOL)
            self.state = 601
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 602
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 605
            self.match(MRSParser.REST_SYMBOL)
            self.state = 606
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 607
            self.schemaRequestPath()
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 608
                self.match(MRSParser.ON_SYMBOL)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 609
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 612
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 616
            self.match(MRSParser.REST_SYMBOL)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 617
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 620
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 623
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 626
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 627
            self.viewRequestPath()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 628
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 632
            self.match(MRSParser.REST_SYMBOL)
            self.state = 633
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 634
            self.procedureRequestPath()
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 635
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 639
            self.match(MRSParser.REST_SYMBOL)
            self.state = 640
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 641
            self.match(MRSParser.SET_SYMBOL)
            self.state = 642
            self.contentSetRequestPath()
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 643
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self.match(MRSParser.USE_SYMBOL)
            self.state = 647
            self.match(MRSParser.REST_SYMBOL)
            self.state = 648
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_serviceAndSchemaRequestPaths)
        self._la = 0 # Token type
        try:
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 651
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 652
                    self.match(MRSParser.SERVICE_SYMBOL)
                    self.state = 653
                    self.serviceRequestPath()


                self.state = 656
                self.match(MRSParser.SCHEMA_SYMBOL)
                self.state = 657
                self.schemaRequestPath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 661
            self.match(MRSParser.REST_SYMBOL)
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 662
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 665
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 668
            self.match(MRSParser.REST_SYMBOL)
            self.state = 669
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMAS_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMAS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 672
            self.match(MRSParser.REST_SYMBOL)
            self.state = 673
            self.match(MRSParser.SCHEMAS_SYMBOL)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 674
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 675
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 678
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 682
            self.match(MRSParser.REST_SYMBOL)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 683
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 686
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 689
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 692
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 693
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 694
                self.serviceAndSchemaRequestPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 698
            self.match(MRSParser.REST_SYMBOL)
            self.state = 699
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 700
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 701
                self.serviceAndSchemaRequestPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 705
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 706
            self.match(MRSParser.REST_SYMBOL)
            self.state = 707
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 343597383681) != 0):
                self.state = 708
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 712
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 713
            self.match(MRSParser.REST_SYMBOL)
            self.state = 714
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 715
                self.schemaRequestPath()


            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 718
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 719
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 722
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 726
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 727
            self.match(MRSParser.REST_SYMBOL)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 728
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 731
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 734
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 737
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 738
            self.viewRequestPath()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 739
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 743
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 744
            self.match(MRSParser.REST_SYMBOL)
            self.state = 745
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 746
            self.procedureRequestPath()
            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 747
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==134:
                self.state = 750
                self.hostAndPortIdentifier()


            self.state = 753
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==134:
                self.state = 755
                self.hostAndPortIdentifier()


            self.state = 758
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            _la = self._input.LA(1)
            if not(_la==132 or _la==134):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.identifier()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==108:
                self.state = 789
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 790
                self.identifier()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 797
            self.identifierList()
            self.state = 798
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.identifier()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 801
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.identifier()
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 805
                self.dotIdentifier()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107:
                    self.state = 806
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 812
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.identifier()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==107:
                    self.state = 816
                    self.dotIdentifier()
                    self.state = 821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.dottedIdentifier()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 825
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 826
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(MRSParser.DIV_OPERATOR)
            self.state = 830
            self.dottedIdentifier()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 831
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 832
                self.dottedIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            _la = self._input.LA(1)
            if not(_la==135 or _la==136):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 838
                self.jsonPair()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 839
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 840
                    self.jsonPair()
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 846
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 849
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_jsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            _la = self._input.LA(1)
            if not(_la==135 or _la==140):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 853
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 854
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 10133099161583623) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 24833) != 0):
                self.state = 857
                self.jsonValue()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 858
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 859
                    self.jsonValue()
                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 867
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def JSON_NUMBER(self):
            return self.getToken(MRSParser.JSON_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_jsonValue)
        try:
            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.match(MRSParser.JSON_NUMBER)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 872
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 5)
                self.state = 873
                self.jsonObj()
                pass
            elif token in [116]:
                self.enterOuterAlt(localctx, 6)
                self.state = 874
                self.jsonArr()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 875
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 876
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 9)
                self.state = 877
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphGlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphGlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphGlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlObj" ):
                listener.enterGraphGlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlObj" ):
                listener.exitGraphGlObj(self)




    def graphGlObj(self):

        localctx = MRSParser.GraphGlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_graphGlObj)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 880
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 881
                self.graphGlPair()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 882
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 883
                    self.graphGlPair()
                    self.state = 888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 889
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 891
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 892
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SELECT_SYMBOL, i)

        def AT_NOSELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOSELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOSELECT_SYMBOL, i)

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlCrudOptions" ):
                listener.enterGraphGlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlCrudOptions" ):
                listener.exitGraphGlCrudOptions(self)




    def graphGlCrudOptions(self):

        localctx = MRSParser.GraphGlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_graphGlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 895
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16257) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 898 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16257) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphKeyValue(self):
            return self.getTypedRuleContext(MRSParser.GraphKeyValueContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_REDUCETO_SYMBOL(self):
            return self.getToken(MRSParser.AT_REDUCETO_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphGlReduceToValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlReduceToValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def graphGlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlDatatypeValueContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlPair" ):
                listener.enterGraphGlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlPair" ):
                listener.exitGraphGlPair(self)




    def graphGlPair(self):

        localctx = MRSParser.GraphGlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_graphGlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.graphKeyValue()
            self.state = 901
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 902
            self.qualifiedIdentifier()
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 903
                self.match(MRSParser.AT_IN_SYMBOL)
                pass
            elif token in [69]:
                self.state = 904
                self.match(MRSParser.AT_OUT_SYMBOL)
                pass
            elif token in [67]:
                self.state = 905
                self.match(MRSParser.AT_INOUT_SYMBOL)
                pass
            elif token in [70]:
                self.state = 906
                self.match(MRSParser.AT_NOCHECK_SYMBOL)
                pass
            elif token in [72]:
                self.state = 907
                self.match(MRSParser.AT_SORTABLE_SYMBOL)
                pass
            elif token in [73]:
                self.state = 908
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)
                pass
            elif token in [74]:
                self.state = 909
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
                pass
            elif token in [75]:
                self.state = 910
                self.match(MRSParser.AT_UNNEST_SYMBOL)
                pass
            elif token in [76]:
                self.state = 911
                self.match(MRSParser.AT_REDUCETO_SYMBOL)
                self.state = 912
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 913
                self.graphGlReduceToValue()
                self.state = 914
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [77]:
                self.state = 916
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 917
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 918
                self.graphGlDatatypeValue()
                self.state = 919
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [71, 78, 79, 80, 81, 82, 83, 84]:
                self.state = 921
                self.graphGlCrudOptions()
                pass
            elif token in [108, 113, 114]:
                pass
            else:
                pass
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 924
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphKeyValue" ):
                listener.enterGraphKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphKeyValue" ):
                listener.exitGraphKeyValue(self)




    def graphKeyValue(self):

        localctx = MRSParser.GraphKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_graphKeyValue)
        try:
            self.state = 930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [132, 134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 929
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlReduceToValue" ):
                listener.enterGraphGlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlReduceToValue" ):
                listener.exitGraphGlReduceToValue(self)




    def graphGlReduceToValue(self):

        localctx = MRSParser.GraphGlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_graphGlReduceToValue)
        try:
            self.state = 935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 932
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 933
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [132, 134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 934
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlDatatypeValue" ):
                listener.enterGraphGlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlDatatypeValue" ):
                listener.exitGraphGlDatatypeValue(self)




    def graphGlDatatypeValue(self):

        localctx = MRSParser.GraphGlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graphGlDatatypeValue)
        try:
            self.state = 940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [140]:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [132, 134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 939
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlValue" ):
                listener.enterGraphGlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlValue" ):
                listener.exitGraphGlValue(self)




    def graphGlValue(self):

        localctx = MRSParser.GraphGlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graphGlValue)
        try:
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [132, 134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.qualifiedIdentifier()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.graphGlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





