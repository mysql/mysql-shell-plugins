# Copyright (c) 2023, 2024, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,187,1653,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,1,0,1,0,4,0,301,8,0,11,0,12,0,302,1,0,5,0,306,8,0,10,
        0,12,0,309,9,0,3,0,311,8,0,1,0,3,0,314,8,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,3,1,371,8,1,1,2,1,2,1,3,1,3,1,4,1,4,3,4,379,8,4,1,5,1,5,1,
        5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,3,8,392,8,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,10,1,10,1,11,1,11,3,11,405,8,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,3,12,414,8,12,1,13,1,13,1,13,4,13,419,8,13,11,13,
        12,13,420,1,14,1,14,1,14,3,14,426,8,14,1,15,1,15,1,15,3,15,431,8,
        15,1,15,1,15,1,15,1,15,3,15,437,8,15,1,16,1,16,1,16,1,16,1,16,1,
        16,4,16,445,8,16,11,16,12,16,446,1,17,1,17,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,3,18,460,8,18,1,19,1,19,1,19,1,19,1,19,5,
        19,467,8,19,10,19,12,19,470,9,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,490,
        8,24,1,25,1,25,1,25,3,25,495,8,25,1,25,1,25,1,25,3,25,500,8,25,1,
        25,1,25,3,25,504,8,25,1,25,3,25,507,8,25,1,25,1,25,1,25,3,25,512,
        8,25,1,26,1,26,1,26,1,26,1,26,1,26,4,26,520,8,26,11,26,12,26,521,
        1,27,1,27,1,27,3,27,527,8,27,1,27,1,27,3,27,531,8,27,1,27,3,27,534,
        8,27,1,27,1,27,1,27,1,27,3,27,540,8,27,1,27,1,27,1,27,1,27,3,27,
        546,8,27,1,27,3,27,549,8,27,1,27,3,27,552,8,27,1,27,3,27,555,8,27,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,4,28,566,8,28,11,28,
        12,28,567,1,29,1,29,1,29,1,29,3,29,574,8,29,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,3,32,586,8,32,1,32,1,32,1,32,1,32,
        1,32,3,32,593,8,32,1,32,1,32,1,32,1,32,3,32,599,8,32,1,32,3,32,602,
        8,32,1,32,5,32,605,8,32,10,32,12,32,608,9,32,1,32,3,32,611,8,32,
        1,33,1,33,3,33,615,8,33,1,33,1,33,1,34,1,34,1,34,3,34,622,8,34,1,
        34,1,34,1,34,1,34,1,34,3,34,629,8,34,1,34,1,34,1,34,1,34,3,34,635,
        8,34,1,34,3,34,638,8,34,1,34,3,34,641,8,34,1,34,3,34,644,8,34,1,
        35,1,35,3,35,648,8,35,1,35,1,35,1,36,1,36,1,36,3,36,655,8,36,1,36,
        1,36,1,36,1,36,1,36,1,36,3,36,663,8,36,1,36,3,36,666,8,36,1,36,1,
        36,3,36,670,8,36,1,36,3,36,673,8,36,1,37,1,37,1,38,1,38,1,38,1,38,
        1,38,1,38,4,38,683,8,38,11,38,12,38,684,1,39,1,39,1,39,1,40,1,40,
        3,40,692,8,40,1,40,1,40,1,41,1,41,1,41,3,41,699,8,41,1,41,1,41,1,
        41,1,41,1,41,1,41,3,41,707,8,41,1,41,3,41,710,8,41,1,41,1,41,1,41,
        1,41,1,41,1,41,3,41,718,8,41,1,41,1,41,3,41,722,8,41,1,41,3,41,725,
        8,41,1,42,1,42,1,42,4,42,730,8,42,11,42,12,42,731,1,43,1,43,1,43,
        3,43,737,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,745,8,43,1,43,3,
        43,748,8,43,1,43,1,43,1,43,1,43,3,43,754,8,43,1,43,3,43,757,8,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,4,46,767,8,46,11,46,12,46,
        768,1,47,1,47,1,47,1,47,1,47,3,47,776,8,47,1,48,1,48,1,48,1,48,1,
        49,1,49,1,49,3,49,785,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,
        49,794,8,49,1,49,3,49,797,8,49,1,49,1,49,1,49,3,49,802,8,49,1,49,
        3,49,805,8,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,4,52,814,8,52,11,
        52,12,52,815,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,3,
        55,828,8,55,1,55,1,55,1,55,1,55,1,55,3,55,835,8,55,1,55,1,55,1,55,
        1,55,3,55,841,8,55,1,55,3,55,844,8,55,3,55,846,8,55,1,55,3,55,849,
        8,55,1,56,1,56,4,56,853,8,56,11,56,12,56,854,1,57,1,57,1,58,1,58,
        1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,3,60,878,8,60,1,60,3,60,881,8,60,1,61,1,61,1,
        61,1,61,3,61,887,8,61,1,61,1,61,3,61,891,8,61,1,61,3,61,894,8,61,
        1,61,1,61,1,61,1,61,3,61,900,8,61,1,61,1,61,3,61,904,8,61,1,61,3,
        61,907,8,61,1,62,1,62,1,62,3,62,912,8,62,1,62,3,62,915,8,62,1,62,
        1,62,1,62,1,62,3,62,921,8,62,1,62,1,62,1,62,1,62,3,62,927,8,62,1,
        62,1,62,1,62,3,62,932,8,62,1,62,3,62,935,8,62,3,62,937,8,62,1,62,
        3,62,940,8,62,1,63,1,63,1,63,1,63,1,63,1,63,3,63,948,8,63,1,63,1,
        63,1,63,1,63,3,63,954,8,63,1,63,1,63,3,63,958,8,63,1,63,3,63,961,
        8,63,1,63,5,63,964,8,63,10,63,12,63,967,9,63,1,63,3,63,970,8,63,
        1,64,1,64,1,64,1,64,1,64,1,64,3,64,978,8,64,1,64,1,64,1,64,1,64,
        3,64,984,8,64,1,64,1,64,3,64,988,8,64,1,64,3,64,991,8,64,1,64,5,
        64,994,8,64,10,64,12,64,997,9,64,1,64,3,64,1000,8,64,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,3,65,1009,8,65,1,65,3,65,1012,8,65,1,65,1,
        65,1,65,1,65,3,65,1018,8,65,1,65,3,65,1021,8,65,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,3,66,1031,8,66,1,66,3,66,1034,8,66,1,66,1,
        66,1,66,3,66,1039,8,66,1,66,3,66,1042,8,66,1,67,1,67,1,67,1,67,1,
        67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1055,8,68,1,68,3,68,1058,8,
        68,1,69,1,69,1,69,3,69,1063,8,69,1,69,3,69,1066,8,69,1,69,1,69,1,
        69,1,69,3,69,1072,8,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1080,8,
        70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1088,8,71,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,3,72,1097,8,72,1,72,3,72,1100,8,72,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,3,73,1109,8,73,1,73,3,73,1112,8,73,1,73,1,
        73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1125,8,74,1,
        74,3,74,1128,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,
        76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1149,8,77,3,
        77,1151,8,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,3,78,1161,8,
        78,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1174,
        8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1183,8,81,3,81,1185,
        8,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,83,1,83,1,83,1,83,1,84,1,84,1,84,3,84,1206,8,84,1,85,1,85,1,85,
        3,85,1211,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,
        1,87,3,87,1224,8,87,1,87,3,87,1227,8,87,1,88,1,88,1,88,3,88,1232,
        8,88,1,88,3,88,1235,8,88,1,88,1,88,1,88,3,88,1240,8,88,1,89,1,89,
        1,89,1,89,1,89,3,89,1247,8,89,1,90,1,90,1,90,1,90,1,90,3,90,1254,
        8,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1262,8,91,1,91,3,91,1265,
        8,91,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1273,8,92,1,92,3,92,1276,
        8,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1288,
        8,93,1,93,3,93,1291,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
        1300,8,94,1,94,3,94,1303,8,94,3,94,1305,8,94,1,94,1,94,3,94,1309,
        8,94,1,94,1,94,3,94,1313,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,96,
        1,96,1,96,1,96,1,96,3,96,1326,8,96,1,97,1,97,1,97,1,97,1,97,3,97,
        1333,8,97,1,97,1,97,3,97,1337,8,97,1,97,3,97,1340,8,97,1,98,1,98,
        1,98,1,98,3,98,1346,8,98,1,98,3,98,1349,8,98,1,98,1,98,1,98,1,98,
        3,98,1355,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1364,8,99,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1373,8,100,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1383,8,101,1,101,
        3,101,1386,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        3,102,1396,8,102,1,102,3,102,1399,8,102,1,102,1,102,1,102,1,102,
        1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1413,8,103,
        1,103,3,103,1416,8,103,1,104,3,104,1419,8,104,1,104,3,104,1422,8,
        104,1,104,1,104,1,105,3,105,1427,8,105,1,105,3,105,1430,8,105,1,
        105,1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,109,1,109,1,110,
        1,110,1,111,1,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,
        1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,3,120,
        1464,8,120,1,121,1,121,1,121,5,121,1469,8,121,10,121,12,121,1472,
        9,121,1,121,3,121,1475,8,121,1,122,1,122,1,122,5,122,1480,8,122,
        10,122,12,122,1483,9,122,3,122,1485,8,122,1,123,1,123,3,123,1489,
        8,123,1,123,1,123,3,123,1493,8,123,1,124,1,124,1,124,1,124,3,124,
        1499,8,124,1,124,3,124,1502,8,124,1,125,1,125,1,126,1,126,1,126,
        1,126,5,126,1510,8,126,10,126,12,126,1513,9,126,1,126,1,126,1,126,
        1,126,3,126,1519,8,126,1,127,1,127,1,127,1,127,1,128,1,128,1,128,
        1,128,5,128,1529,8,128,10,128,12,128,1532,9,128,3,128,1534,8,128,
        1,128,1,128,1,129,1,129,3,129,1540,8,129,1,129,1,129,1,129,1,129,
        1,129,1,129,1,129,3,129,1549,8,129,1,130,1,130,1,130,1,130,5,130,
        1555,8,130,10,130,12,130,1558,9,130,1,130,1,130,1,130,1,130,3,130,
        1564,8,130,1,131,4,131,1567,8,131,11,131,12,131,1568,1,132,1,132,
        1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
        1,132,1,132,1,132,1,132,1,132,3,132,1589,8,132,1,132,3,132,1592,
        8,132,1,133,1,133,1,134,1,134,1,134,3,134,1599,8,134,1,135,1,135,
        3,135,1603,8,135,1,136,1,136,3,136,1607,8,136,1,137,1,137,3,137,
        1611,8,137,1,138,1,138,3,138,1615,8,138,1,139,1,139,1,140,1,140,
        1,141,1,141,1,142,1,142,1,143,1,143,1,144,1,144,1,144,5,144,1630,
        8,144,10,144,12,144,1633,9,144,1,145,1,145,1,145,1,145,1,146,1,146,
        3,146,1641,8,146,1,147,1,147,1,147,3,147,1646,8,147,3,147,1648,8,
        147,1,148,1,148,1,148,1,148,0,0,149,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
        268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,0,13,
        2,0,71,71,73,73,2,0,71,71,73,74,2,0,72,72,75,75,2,0,88,88,90,91,
        2,0,21,21,94,94,1,0,55,56,3,0,1,1,34,34,50,51,1,0,8,9,1,0,181,182,
        1,0,139,140,2,0,115,117,125,129,17,0,11,16,20,20,22,22,25,26,30,
        34,41,41,47,47,61,71,73,73,76,82,84,85,87,88,90,92,94,97,99,100,
        102,103,106,106,2,0,178,178,180,180,1814,0,310,1,0,0,0,2,370,1,0,
        0,0,4,372,1,0,0,0,6,374,1,0,0,0,8,378,1,0,0,0,10,380,1,0,0,0,12,
        383,1,0,0,0,14,386,1,0,0,0,16,389,1,0,0,0,18,395,1,0,0,0,20,400,
        1,0,0,0,22,404,1,0,0,0,24,409,1,0,0,0,26,418,1,0,0,0,28,422,1,0,
        0,0,30,427,1,0,0,0,32,444,1,0,0,0,34,448,1,0,0,0,36,450,1,0,0,0,
        38,461,1,0,0,0,40,471,1,0,0,0,42,474,1,0,0,0,44,477,1,0,0,0,46,480,
        1,0,0,0,48,484,1,0,0,0,50,491,1,0,0,0,52,519,1,0,0,0,54,523,1,0,
        0,0,56,565,1,0,0,0,58,569,1,0,0,0,60,575,1,0,0,0,62,578,1,0,0,0,
        64,582,1,0,0,0,66,612,1,0,0,0,68,618,1,0,0,0,70,645,1,0,0,0,72,651,
        1,0,0,0,74,674,1,0,0,0,76,682,1,0,0,0,78,686,1,0,0,0,80,689,1,0,
        0,0,82,695,1,0,0,0,84,729,1,0,0,0,86,733,1,0,0,0,88,758,1,0,0,0,
        90,760,1,0,0,0,92,766,1,0,0,0,94,770,1,0,0,0,96,777,1,0,0,0,98,781,
        1,0,0,0,100,806,1,0,0,0,102,808,1,0,0,0,104,813,1,0,0,0,106,817,
        1,0,0,0,108,821,1,0,0,0,110,824,1,0,0,0,112,852,1,0,0,0,114,856,
        1,0,0,0,116,858,1,0,0,0,118,860,1,0,0,0,120,869,1,0,0,0,122,882,
        1,0,0,0,124,908,1,0,0,0,126,941,1,0,0,0,128,971,1,0,0,0,130,1001,
        1,0,0,0,132,1022,1,0,0,0,134,1043,1,0,0,0,136,1048,1,0,0,0,138,1059,
        1,0,0,0,140,1073,1,0,0,0,142,1081,1,0,0,0,144,1089,1,0,0,0,146,1101,
        1,0,0,0,148,1117,1,0,0,0,150,1129,1,0,0,0,152,1136,1,0,0,0,154,1141,
        1,0,0,0,156,1160,1,0,0,0,158,1162,1,0,0,0,160,1164,1,0,0,0,162,1175,
        1,0,0,0,164,1189,1,0,0,0,166,1198,1,0,0,0,168,1205,1,0,0,0,170,1207,
        1,0,0,0,172,1214,1,0,0,0,174,1218,1,0,0,0,176,1228,1,0,0,0,178,1241,
        1,0,0,0,180,1248,1,0,0,0,182,1255,1,0,0,0,184,1266,1,0,0,0,186,1281,
        1,0,0,0,188,1292,1,0,0,0,190,1314,1,0,0,0,192,1320,1,0,0,0,194,1327,
        1,0,0,0,196,1341,1,0,0,0,198,1356,1,0,0,0,200,1365,1,0,0,0,202,1374,
        1,0,0,0,204,1387,1,0,0,0,206,1404,1,0,0,0,208,1418,1,0,0,0,210,1426,
        1,0,0,0,212,1433,1,0,0,0,214,1435,1,0,0,0,216,1437,1,0,0,0,218,1439,
        1,0,0,0,220,1441,1,0,0,0,222,1443,1,0,0,0,224,1445,1,0,0,0,226,1447,
        1,0,0,0,228,1449,1,0,0,0,230,1451,1,0,0,0,232,1453,1,0,0,0,234,1455,
        1,0,0,0,236,1457,1,0,0,0,238,1459,1,0,0,0,240,1463,1,0,0,0,242,1465,
        1,0,0,0,244,1484,1,0,0,0,246,1488,1,0,0,0,248,1501,1,0,0,0,250,1503,
        1,0,0,0,252,1518,1,0,0,0,254,1520,1,0,0,0,256,1524,1,0,0,0,258,1548,
        1,0,0,0,260,1563,1,0,0,0,262,1566,1,0,0,0,264,1570,1,0,0,0,266,1593,
        1,0,0,0,268,1598,1,0,0,0,270,1602,1,0,0,0,272,1606,1,0,0,0,274,1610,
        1,0,0,0,276,1614,1,0,0,0,278,1616,1,0,0,0,280,1618,1,0,0,0,282,1620,
        1,0,0,0,284,1622,1,0,0,0,286,1624,1,0,0,0,288,1626,1,0,0,0,290,1634,
        1,0,0,0,292,1638,1,0,0,0,294,1642,1,0,0,0,296,1649,1,0,0,0,298,307,
        3,2,1,0,299,301,5,155,0,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,
        1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,306,3,2,1,0,305,300,
        1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,311,
        1,0,0,0,309,307,1,0,0,0,310,298,1,0,0,0,310,311,1,0,0,0,311,313,
        1,0,0,0,312,314,5,155,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,315,
        1,0,0,0,315,316,5,0,0,1,316,1,1,0,0,0,317,371,3,24,12,0,318,371,
        3,30,15,0,319,371,3,50,25,0,320,371,3,54,27,0,321,371,3,64,32,0,
        322,371,3,68,34,0,323,371,3,72,36,0,324,371,3,82,41,0,325,371,3,
        86,43,0,326,371,3,110,55,0,327,371,3,98,49,0,328,371,3,118,59,0,
        329,371,3,120,60,0,330,371,3,122,61,0,331,371,3,124,62,0,332,371,
        3,126,63,0,333,371,3,128,64,0,334,371,3,130,65,0,335,371,3,132,66,
        0,336,371,3,134,67,0,337,371,3,136,68,0,338,371,3,138,69,0,339,371,
        3,140,70,0,340,371,3,142,71,0,341,371,3,144,72,0,342,371,3,146,73,
        0,343,371,3,148,74,0,344,371,3,150,75,0,345,371,3,152,76,0,346,371,
        3,160,80,0,347,371,3,154,77,0,348,371,3,162,81,0,349,371,3,164,82,
        0,350,371,3,166,83,0,351,371,3,170,85,0,352,371,3,172,86,0,353,371,
        3,174,87,0,354,371,3,176,88,0,355,371,3,178,89,0,356,371,3,180,90,
        0,357,371,3,182,91,0,358,371,3,184,92,0,359,371,3,186,93,0,360,371,
        3,188,94,0,361,371,3,190,95,0,362,371,3,192,96,0,363,371,3,194,97,
        0,364,371,3,196,98,0,365,371,3,198,99,0,366,371,3,200,100,0,367,
        371,3,202,101,0,368,371,3,204,102,0,369,371,3,206,103,0,370,317,
        1,0,0,0,370,318,1,0,0,0,370,319,1,0,0,0,370,320,1,0,0,0,370,321,
        1,0,0,0,370,322,1,0,0,0,370,323,1,0,0,0,370,324,1,0,0,0,370,325,
        1,0,0,0,370,326,1,0,0,0,370,327,1,0,0,0,370,328,1,0,0,0,370,329,
        1,0,0,0,370,330,1,0,0,0,370,331,1,0,0,0,370,332,1,0,0,0,370,333,
        1,0,0,0,370,334,1,0,0,0,370,335,1,0,0,0,370,336,1,0,0,0,370,337,
        1,0,0,0,370,338,1,0,0,0,370,339,1,0,0,0,370,340,1,0,0,0,370,341,
        1,0,0,0,370,342,1,0,0,0,370,343,1,0,0,0,370,344,1,0,0,0,370,345,
        1,0,0,0,370,346,1,0,0,0,370,347,1,0,0,0,370,348,1,0,0,0,370,349,
        1,0,0,0,370,350,1,0,0,0,370,351,1,0,0,0,370,352,1,0,0,0,370,353,
        1,0,0,0,370,354,1,0,0,0,370,355,1,0,0,0,370,356,1,0,0,0,370,357,
        1,0,0,0,370,358,1,0,0,0,370,359,1,0,0,0,370,360,1,0,0,0,370,361,
        1,0,0,0,370,362,1,0,0,0,370,363,1,0,0,0,370,364,1,0,0,0,370,365,
        1,0,0,0,370,366,1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,370,369,
        1,0,0,0,371,3,1,0,0,0,372,373,7,0,0,0,373,5,1,0,0,0,374,375,7,1,
        0,0,375,7,1,0,0,0,376,379,3,250,125,0,377,379,5,24,0,0,378,376,1,
        0,0,0,378,377,1,0,0,0,379,9,1,0,0,0,380,381,5,26,0,0,381,382,3,258,
        129,0,382,11,1,0,0,0,383,384,5,63,0,0,384,385,3,258,129,0,385,13,
        1,0,0,0,386,387,5,79,0,0,387,388,3,250,125,0,388,15,1,0,0,0,389,
        391,5,21,0,0,390,392,5,28,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,
        393,1,0,0,0,393,394,5,84,0,0,394,17,1,0,0,0,395,396,5,85,0,0,396,
        397,5,86,0,0,397,398,5,30,0,0,398,399,3,20,10,0,399,19,1,0,0,0,400,
        401,5,173,0,0,401,21,1,0,0,0,402,403,5,65,0,0,403,405,3,208,104,
        0,404,402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,12,0,
        0,407,408,3,212,106,0,408,23,1,0,0,0,409,410,5,61,0,0,410,411,5,
        62,0,0,411,413,5,63,0,0,412,414,3,26,13,0,413,412,1,0,0,0,413,414,
        1,0,0,0,414,25,1,0,0,0,415,419,3,4,2,0,416,419,3,10,5,0,417,419,
        3,28,14,0,418,415,1,0,0,0,418,416,1,0,0,0,418,417,1,0,0,0,419,420,
        1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,27,1,0,0,0,422,425,5,
        34,0,0,423,424,5,27,0,0,424,426,5,83,0,0,425,423,1,0,0,0,425,426,
        1,0,0,0,426,29,1,0,0,0,427,430,5,1,0,0,428,429,5,2,0,0,429,431,5,
        3,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,432,1,0,0,0,432,433,5,
        62,0,0,433,434,5,65,0,0,434,436,3,208,104,0,435,437,3,32,16,0,436,
        435,1,0,0,0,436,437,1,0,0,0,437,31,1,0,0,0,438,445,3,4,2,0,439,445,
        3,34,17,0,440,445,3,38,19,0,441,445,3,10,5,0,442,445,3,14,7,0,443,
        445,3,12,6,0,444,438,1,0,0,0,444,439,1,0,0,0,444,440,1,0,0,0,444,
        441,1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,446,1,0,0,0,446,
        444,1,0,0,0,446,447,1,0,0,0,447,33,1,0,0,0,448,449,7,2,0,0,449,35,
        1,0,0,0,450,459,5,76,0,0,451,460,5,77,0,0,452,460,5,78,0,0,453,454,
        5,77,0,0,454,455,5,154,0,0,455,460,5,78,0,0,456,457,5,78,0,0,457,
        458,5,154,0,0,458,460,5,77,0,0,459,451,1,0,0,0,459,452,1,0,0,0,459,
        453,1,0,0,0,459,456,1,0,0,0,460,37,1,0,0,0,461,468,5,21,0,0,462,
        467,3,40,20,0,463,467,3,42,21,0,464,467,3,44,22,0,465,467,3,46,23,
        0,466,462,1,0,0,0,466,463,1,0,0,0,466,464,1,0,0,0,466,465,1,0,0,
        0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,39,1,0,0,0,
        470,468,1,0,0,0,471,472,5,22,0,0,472,473,3,8,4,0,473,41,1,0,0,0,
        474,475,5,81,0,0,475,476,3,8,4,0,476,43,1,0,0,0,477,478,5,23,0,0,
        478,479,3,8,4,0,479,45,1,0,0,0,480,481,5,30,0,0,481,482,5,87,0,0,
        482,483,3,8,4,0,483,47,1,0,0,0,484,485,5,25,0,0,485,486,5,82,0,0,
        486,489,5,12,0,0,487,490,3,278,139,0,488,490,5,24,0,0,489,487,1,
        0,0,0,489,488,1,0,0,0,490,49,1,0,0,0,491,494,5,1,0,0,492,493,5,2,
        0,0,493,495,5,3,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,496,1,0,
        0,0,496,497,5,62,0,0,497,499,5,12,0,0,498,500,3,212,106,0,499,498,
        1,0,0,0,499,500,1,0,0,0,500,506,1,0,0,0,501,503,5,8,0,0,502,504,
        5,65,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,1,0,0,0,505,507,
        3,208,104,0,506,501,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,
        509,5,9,0,0,509,511,3,278,139,0,510,512,3,52,26,0,511,510,1,0,0,
        0,511,512,1,0,0,0,512,51,1,0,0,0,513,520,3,6,3,0,514,520,3,16,8,
        0,515,520,3,18,9,0,516,520,3,10,5,0,517,520,3,14,7,0,518,520,3,12,
        6,0,519,513,1,0,0,0,519,514,1,0,0,0,519,515,1,0,0,0,519,516,1,0,
        0,0,519,517,1,0,0,0,519,518,1,0,0,0,520,521,1,0,0,0,521,519,1,0,
        0,0,521,522,1,0,0,0,522,53,1,0,0,0,523,526,5,1,0,0,524,525,5,2,0,
        0,525,527,5,3,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,
        0,528,530,5,62,0,0,529,531,5,47,0,0,530,529,1,0,0,0,530,531,1,0,
        0,0,531,533,1,0,0,0,532,534,5,106,0,0,533,532,1,0,0,0,533,534,1,
        0,0,0,534,535,1,0,0,0,535,536,5,14,0,0,536,539,3,216,108,0,537,538,
        5,8,0,0,538,540,3,22,11,0,539,537,1,0,0,0,539,540,1,0,0,0,540,541,
        1,0,0,0,541,542,5,19,0,0,542,545,3,292,146,0,543,544,5,103,0,0,544,
        546,3,220,110,0,545,543,1,0,0,0,545,546,1,0,0,0,546,548,1,0,0,0,
        547,549,3,262,131,0,548,547,1,0,0,0,548,549,1,0,0,0,549,551,1,0,
        0,0,550,552,3,260,130,0,551,550,1,0,0,0,551,552,1,0,0,0,552,554,
        1,0,0,0,553,555,3,56,28,0,554,553,1,0,0,0,554,555,1,0,0,0,555,55,
        1,0,0,0,556,566,3,6,3,0,557,566,3,16,8,0,558,566,3,18,9,0,559,566,
        3,10,5,0,560,566,3,14,7,0,561,566,3,12,6,0,562,566,3,58,29,0,563,
        566,3,60,30,0,564,566,3,62,31,0,565,556,1,0,0,0,565,557,1,0,0,0,
        565,558,1,0,0,0,565,559,1,0,0,0,565,560,1,0,0,0,565,561,1,0,0,0,
        565,562,1,0,0,0,565,563,1,0,0,0,565,564,1,0,0,0,566,567,1,0,0,0,
        567,565,1,0,0,0,567,568,1,0,0,0,568,57,1,0,0,0,569,570,5,88,0,0,
        570,573,5,32,0,0,571,574,3,250,125,0,572,574,5,89,0,0,573,571,1,
        0,0,0,573,572,1,0,0,0,574,59,1,0,0,0,575,576,5,33,0,0,576,577,7,
        3,0,0,577,61,1,0,0,0,578,579,5,21,0,0,579,580,5,15,0,0,580,581,3,
        292,146,0,581,63,1,0,0,0,582,585,5,1,0,0,583,584,5,2,0,0,584,586,
        5,3,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,
        5,62,0,0,588,589,5,15,0,0,589,592,3,226,113,0,590,591,5,8,0,0,591,
        593,3,22,11,0,592,590,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,
        595,5,19,0,0,595,601,3,292,146,0,596,598,5,68,0,0,597,599,3,220,
        110,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,3,
        260,130,0,601,596,1,0,0,0,601,602,1,0,0,0,602,606,1,0,0,0,603,605,
        3,66,33,0,604,603,1,0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,
        1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,609,611,3,56,28,0,610,609,
        1,0,0,0,610,611,1,0,0,0,611,65,1,0,0,0,612,614,5,70,0,0,613,615,
        3,222,111,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,
        617,3,260,130,0,617,67,1,0,0,0,618,621,5,1,0,0,619,620,5,2,0,0,620,
        622,5,3,0,0,621,619,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,
        624,5,62,0,0,624,625,5,16,0,0,625,628,3,228,114,0,626,627,5,8,0,
        0,627,629,3,22,11,0,628,626,1,0,0,0,628,629,1,0,0,0,629,630,1,0,
        0,0,630,631,5,19,0,0,631,637,3,292,146,0,632,634,5,68,0,0,633,635,
        3,220,110,0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,
        638,3,260,130,0,637,632,1,0,0,0,637,638,1,0,0,0,638,640,1,0,0,0,
        639,641,3,70,35,0,640,639,1,0,0,0,640,641,1,0,0,0,641,643,1,0,0,
        0,642,644,3,56,28,0,643,642,1,0,0,0,643,644,1,0,0,0,644,69,1,0,0,
        0,645,647,5,70,0,0,646,648,3,222,111,0,647,646,1,0,0,0,647,648,1,
        0,0,0,648,649,1,0,0,0,649,650,3,260,130,0,650,71,1,0,0,0,651,654,
        5,1,0,0,652,653,5,2,0,0,653,655,5,3,0,0,654,652,1,0,0,0,654,655,
        1,0,0,0,655,656,1,0,0,0,656,657,5,62,0,0,657,658,5,87,0,0,658,659,
        5,38,0,0,659,665,3,234,117,0,660,662,5,8,0,0,661,663,5,65,0,0,662,
        661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,666,3,208,104,0,
        665,660,1,0,0,0,665,666,1,0,0,0,666,669,1,0,0,0,667,668,5,9,0,0,
        668,670,3,74,37,0,669,667,1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,
        0,671,673,3,76,38,0,672,671,1,0,0,0,672,673,1,0,0,0,673,73,1,0,0,
        0,674,675,3,250,125,0,675,75,1,0,0,0,676,683,3,6,3,0,677,683,3,16,
        8,0,678,683,3,10,5,0,679,683,3,14,7,0,680,683,3,78,39,0,681,683,
        3,80,40,0,682,676,1,0,0,0,682,677,1,0,0,0,682,678,1,0,0,0,682,679,
        1,0,0,0,682,680,1,0,0,0,682,681,1,0,0,0,683,684,1,0,0,0,684,682,
        1,0,0,0,684,685,1,0,0,0,685,77,1,0,0,0,686,687,5,43,0,0,687,688,
        3,250,125,0,688,79,1,0,0,0,689,691,5,48,0,0,690,692,5,107,0,0,691,
        690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,694,5,105,0,0,694,
        81,1,0,0,0,695,698,5,1,0,0,696,697,5,2,0,0,697,699,5,3,0,0,698,696,
        1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,62,0,0,701,702,
        5,87,0,0,702,703,5,45,0,0,703,704,3,238,119,0,704,709,5,8,0,0,705,
        707,5,65,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,
        710,3,208,104,0,709,706,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,
        711,712,5,87,0,0,712,713,5,38,0,0,713,721,3,234,117,0,714,715,5,
        9,0,0,715,722,3,74,37,0,716,718,5,46,0,0,717,716,1,0,0,0,717,718,
        1,0,0,0,718,719,1,0,0,0,719,720,5,87,0,0,720,722,3,250,125,0,721,
        714,1,0,0,0,721,717,1,0,0,0,722,724,1,0,0,0,723,725,3,84,42,0,724,
        723,1,0,0,0,724,725,1,0,0,0,725,83,1,0,0,0,726,730,3,6,3,0,727,730,
        3,16,8,0,728,730,3,10,5,0,729,726,1,0,0,0,729,727,1,0,0,0,729,728,
        1,0,0,0,730,731,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,85,1,
        0,0,0,733,736,5,1,0,0,734,735,5,2,0,0,735,737,5,3,0,0,736,734,1,
        0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,739,5,62,0,0,739,740,7,
        4,0,0,740,741,5,96,0,0,741,747,3,88,44,0,742,744,5,8,0,0,743,745,
        5,65,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,748,
        3,208,104,0,747,742,1,0,0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,
        753,5,97,0,0,750,754,5,98,0,0,751,754,5,99,0,0,752,754,3,90,45,0,
        753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,756,1,0,0,0,
        755,757,3,92,46,0,756,755,1,0,0,0,756,757,1,0,0,0,757,87,1,0,0,0,
        758,759,3,250,125,0,759,89,1,0,0,0,760,761,3,250,125,0,761,91,1,
        0,0,0,762,767,3,4,2,0,763,767,3,14,7,0,764,767,3,94,47,0,765,767,
        3,96,48,0,766,762,1,0,0,0,766,763,1,0,0,0,766,764,1,0,0,0,766,765,
        1,0,0,0,767,768,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,93,1,
        0,0,0,770,771,5,101,0,0,771,772,5,7,0,0,772,775,5,100,0,0,773,774,
        5,42,0,0,774,776,5,102,0,0,775,773,1,0,0,0,775,776,1,0,0,0,776,95,
        1,0,0,0,777,778,5,24,0,0,778,779,5,41,0,0,779,780,3,250,125,0,780,
        97,1,0,0,0,781,784,5,1,0,0,782,783,5,2,0,0,783,785,5,3,0,0,784,782,
        1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,787,5,62,0,0,787,788,
        5,25,0,0,788,789,3,100,50,0,789,790,5,166,0,0,790,796,3,88,44,0,
        791,793,5,8,0,0,792,794,5,65,0,0,793,792,1,0,0,0,793,794,1,0,0,0,
        794,795,1,0,0,0,795,797,3,208,104,0,796,791,1,0,0,0,796,797,1,0,
        0,0,797,801,1,0,0,0,798,799,5,39,0,0,799,800,5,40,0,0,800,802,3,
        102,51,0,801,798,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,805,
        3,104,52,0,804,803,1,0,0,0,804,805,1,0,0,0,805,99,1,0,0,0,806,807,
        3,250,125,0,807,101,1,0,0,0,808,809,3,250,125,0,809,103,1,0,0,0,
        810,814,3,108,54,0,811,814,3,106,53,0,812,814,3,10,5,0,813,810,1,
        0,0,0,813,811,1,0,0,0,813,812,1,0,0,0,814,815,1,0,0,0,815,813,1,
        0,0,0,815,816,1,0,0,0,816,105,1,0,0,0,817,818,5,96,0,0,818,819,5,
        26,0,0,819,820,3,258,129,0,820,107,1,0,0,0,821,822,5,54,0,0,822,
        823,7,5,0,0,823,109,1,0,0,0,824,827,5,1,0,0,825,826,5,2,0,0,826,
        828,5,3,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,
        830,5,62,0,0,830,831,5,41,0,0,831,834,3,116,58,0,832,833,5,109,0,
        0,833,835,3,114,57,0,834,832,1,0,0,0,834,835,1,0,0,0,835,845,1,0,
        0,0,836,843,5,8,0,0,837,838,5,60,0,0,838,844,5,65,0,0,839,841,5,
        65,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,844,3,
        208,104,0,843,837,1,0,0,0,843,840,1,0,0,0,844,846,1,0,0,0,845,836,
        1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,849,3,112,56,0,848,847,
        1,0,0,0,848,849,1,0,0,0,849,111,1,0,0,0,850,853,3,10,5,0,851,853,
        3,14,7,0,852,850,1,0,0,0,852,851,1,0,0,0,853,854,1,0,0,0,854,852,
        1,0,0,0,854,855,1,0,0,0,855,113,1,0,0,0,856,857,3,250,125,0,857,
        115,1,0,0,0,858,859,3,250,125,0,859,117,1,0,0,0,860,861,5,44,0,0,
        861,862,5,62,0,0,862,863,5,65,0,0,863,864,3,208,104,0,864,865,5,
        7,0,0,865,866,5,80,0,0,866,867,5,22,0,0,867,868,3,210,105,0,868,
        119,1,0,0,0,869,870,5,4,0,0,870,871,5,62,0,0,871,872,5,65,0,0,872,
        877,3,208,104,0,873,874,5,7,0,0,874,875,5,80,0,0,875,876,5,22,0,
        0,876,878,3,210,105,0,877,873,1,0,0,0,877,878,1,0,0,0,878,880,1,
        0,0,0,879,881,3,32,16,0,880,879,1,0,0,0,880,881,1,0,0,0,881,121,
        1,0,0,0,882,883,5,4,0,0,883,884,5,62,0,0,884,886,5,12,0,0,885,887,
        3,212,106,0,886,885,1,0,0,0,886,887,1,0,0,0,887,893,1,0,0,0,888,
        890,5,8,0,0,889,891,5,65,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,
        892,1,0,0,0,892,894,3,208,104,0,893,888,1,0,0,0,893,894,1,0,0,0,
        894,899,1,0,0,0,895,896,5,7,0,0,896,897,5,80,0,0,897,898,5,22,0,
        0,898,900,3,214,107,0,899,895,1,0,0,0,899,900,1,0,0,0,900,903,1,
        0,0,0,901,902,5,9,0,0,902,904,3,278,139,0,903,901,1,0,0,0,903,904,
        1,0,0,0,904,906,1,0,0,0,905,907,3,52,26,0,906,905,1,0,0,0,906,907,
        1,0,0,0,907,123,1,0,0,0,908,909,5,4,0,0,909,911,5,62,0,0,910,912,
        5,47,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,915,
        5,106,0,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,
        5,14,0,0,917,920,3,216,108,0,918,919,5,8,0,0,919,921,3,22,11,0,920,
        918,1,0,0,0,920,921,1,0,0,0,921,926,1,0,0,0,922,923,5,7,0,0,923,
        924,5,80,0,0,924,925,5,22,0,0,925,927,3,218,109,0,926,922,1,0,0,
        0,926,927,1,0,0,0,927,936,1,0,0,0,928,929,5,103,0,0,929,931,3,220,
        110,0,930,932,3,262,131,0,931,930,1,0,0,0,931,932,1,0,0,0,932,934,
        1,0,0,0,933,935,3,260,130,0,934,933,1,0,0,0,934,935,1,0,0,0,935,
        937,1,0,0,0,936,928,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,
        940,3,56,28,0,939,938,1,0,0,0,939,940,1,0,0,0,940,125,1,0,0,0,941,
        942,5,4,0,0,942,943,5,62,0,0,943,944,5,15,0,0,944,947,3,226,113,
        0,945,946,5,8,0,0,946,948,3,22,11,0,947,945,1,0,0,0,947,948,1,0,
        0,0,948,953,1,0,0,0,949,950,5,7,0,0,950,951,5,80,0,0,951,952,5,22,
        0,0,952,954,3,230,115,0,953,949,1,0,0,0,953,954,1,0,0,0,954,960,
        1,0,0,0,955,957,5,68,0,0,956,958,3,220,110,0,957,956,1,0,0,0,957,
        958,1,0,0,0,958,959,1,0,0,0,959,961,3,260,130,0,960,955,1,0,0,0,
        960,961,1,0,0,0,961,965,1,0,0,0,962,964,3,66,33,0,963,962,1,0,0,
        0,964,967,1,0,0,0,965,963,1,0,0,0,965,966,1,0,0,0,966,969,1,0,0,
        0,967,965,1,0,0,0,968,970,3,56,28,0,969,968,1,0,0,0,969,970,1,0,
        0,0,970,127,1,0,0,0,971,972,5,4,0,0,972,973,5,62,0,0,973,974,5,16,
        0,0,974,977,3,228,114,0,975,976,5,8,0,0,976,978,3,22,11,0,977,975,
        1,0,0,0,977,978,1,0,0,0,978,983,1,0,0,0,979,980,5,7,0,0,980,981,
        5,80,0,0,981,982,5,22,0,0,982,984,3,232,116,0,983,979,1,0,0,0,983,
        984,1,0,0,0,984,990,1,0,0,0,985,987,5,68,0,0,986,988,3,220,110,0,
        987,986,1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,991,3,260,130,
        0,990,985,1,0,0,0,990,991,1,0,0,0,991,995,1,0,0,0,992,994,3,70,35,
        0,993,992,1,0,0,0,994,997,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,
        0,996,999,1,0,0,0,997,995,1,0,0,0,998,1000,3,56,28,0,999,998,1,0,
        0,0,999,1000,1,0,0,0,1000,129,1,0,0,0,1001,1002,5,4,0,0,1002,1003,
        5,62,0,0,1003,1004,5,87,0,0,1004,1005,5,38,0,0,1005,1011,3,234,117,
        0,1006,1008,5,8,0,0,1007,1009,5,65,0,0,1008,1007,1,0,0,0,1008,1009,
        1,0,0,0,1009,1010,1,0,0,0,1010,1012,3,208,104,0,1011,1006,1,0,0,
        0,1011,1012,1,0,0,0,1012,1017,1,0,0,0,1013,1014,5,7,0,0,1014,1015,
        5,80,0,0,1015,1016,5,22,0,0,1016,1018,3,236,118,0,1017,1013,1,0,
        0,0,1017,1018,1,0,0,0,1018,1020,1,0,0,0,1019,1021,3,76,38,0,1020,
        1019,1,0,0,0,1020,1021,1,0,0,0,1021,131,1,0,0,0,1022,1023,5,4,0,
        0,1023,1024,5,62,0,0,1024,1025,5,25,0,0,1025,1026,3,100,50,0,1026,
        1027,5,166,0,0,1027,1033,3,88,44,0,1028,1030,5,8,0,0,1029,1031,5,
        65,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,
        1034,3,208,104,0,1033,1028,1,0,0,0,1033,1034,1,0,0,0,1034,1038,1,
        0,0,0,1035,1036,5,39,0,0,1036,1037,5,40,0,0,1037,1039,3,102,51,0,
        1038,1035,1,0,0,0,1038,1039,1,0,0,0,1039,1041,1,0,0,0,1040,1042,
        3,104,52,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,133,1,0,0,0,
        1043,1044,5,17,0,0,1044,1045,5,62,0,0,1045,1046,5,65,0,0,1046,1047,
        3,208,104,0,1047,135,1,0,0,0,1048,1049,5,17,0,0,1049,1050,5,62,0,
        0,1050,1051,5,12,0,0,1051,1057,3,212,106,0,1052,1054,5,9,0,0,1053,
        1055,5,65,0,0,1054,1053,1,0,0,0,1054,1055,1,0,0,0,1055,1056,1,0,
        0,0,1056,1058,3,208,104,0,1057,1052,1,0,0,0,1057,1058,1,0,0,0,1058,
        137,1,0,0,0,1059,1060,5,17,0,0,1060,1062,5,62,0,0,1061,1063,5,47,
        0,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1066,
        5,106,0,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,
        1067,1068,5,14,0,0,1068,1071,3,216,108,0,1069,1070,5,9,0,0,1070,
        1072,3,22,11,0,1071,1069,1,0,0,0,1071,1072,1,0,0,0,1072,139,1,0,
        0,0,1073,1074,5,17,0,0,1074,1075,5,62,0,0,1075,1076,5,15,0,0,1076,
        1079,3,226,113,0,1077,1078,5,9,0,0,1078,1080,3,22,11,0,1079,1077,
        1,0,0,0,1079,1080,1,0,0,0,1080,141,1,0,0,0,1081,1082,5,17,0,0,1082,
        1083,5,62,0,0,1083,1084,5,16,0,0,1084,1087,3,228,114,0,1085,1086,
        5,9,0,0,1086,1088,3,22,11,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,
        1088,143,1,0,0,0,1089,1090,5,17,0,0,1090,1091,5,62,0,0,1091,1092,
        5,87,0,0,1092,1093,5,38,0,0,1093,1099,3,234,117,0,1094,1096,5,9,
        0,0,1095,1097,5,65,0,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,
        1098,1,0,0,0,1098,1100,3,208,104,0,1099,1094,1,0,0,0,1099,1100,1,
        0,0,0,1100,145,1,0,0,0,1101,1102,5,17,0,0,1102,1103,5,62,0,0,1103,
        1104,5,87,0,0,1104,1105,5,45,0,0,1105,1106,3,238,119,0,1106,1111,
        5,9,0,0,1107,1109,5,65,0,0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,
        1110,1,0,0,0,1110,1112,3,208,104,0,1111,1108,1,0,0,0,1111,1112,1,
        0,0,0,1112,1113,1,0,0,0,1113,1114,5,87,0,0,1114,1115,5,38,0,0,1115,
        1116,3,234,117,0,1116,147,1,0,0,0,1117,1118,5,17,0,0,1118,1119,5,
        62,0,0,1119,1120,7,4,0,0,1120,1121,5,96,0,0,1121,1127,3,88,44,0,
        1122,1124,5,9,0,0,1123,1125,5,65,0,0,1124,1123,1,0,0,0,1124,1125,
        1,0,0,0,1125,1126,1,0,0,0,1126,1128,3,208,104,0,1127,1122,1,0,0,
        0,1127,1128,1,0,0,0,1128,149,1,0,0,0,1129,1130,5,17,0,0,1130,1131,
        5,62,0,0,1131,1132,5,25,0,0,1132,1133,3,100,50,0,1133,1134,5,166,
        0,0,1134,1135,3,88,44,0,1135,151,1,0,0,0,1136,1137,5,17,0,0,1137,
        1138,5,62,0,0,1138,1139,5,41,0,0,1139,1140,3,116,58,0,1140,153,1,
        0,0,0,1141,1142,5,49,0,0,1142,1143,5,62,0,0,1143,1150,3,156,78,0,
        1144,1145,5,8,0,0,1145,1148,3,22,11,0,1146,1147,5,110,0,0,1147,1149,
        3,224,112,0,1148,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1151,1,0,0,
        0,1150,1144,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1153,
        5,42,0,0,1153,1154,3,116,58,0,1154,155,1,0,0,0,1155,1161,3,158,79,
        0,1156,1157,3,158,79,0,1157,1158,5,154,0,0,1158,1159,3,156,78,0,
        1159,1161,1,0,0,0,1160,1155,1,0,0,0,1160,1156,1,0,0,0,1161,157,1,
        0,0,0,1162,1163,7,6,0,0,1163,159,1,0,0,0,1164,1165,5,49,0,0,1165,
        1166,5,62,0,0,1166,1167,5,41,0,0,1167,1168,3,116,58,0,1168,1169,
        5,42,0,0,1169,1170,3,100,50,0,1170,1171,5,166,0,0,1171,1173,3,88,
        44,0,1172,1174,3,14,7,0,1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,
        161,1,0,0,0,1175,1176,5,53,0,0,1176,1177,5,62,0,0,1177,1184,3,156,
        78,0,1178,1179,5,8,0,0,1179,1182,3,22,11,0,1180,1181,5,110,0,0,1181,
        1183,3,224,112,0,1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,1185,1,
        0,0,0,1184,1178,1,0,0,0,1184,1185,1,0,0,0,1185,1186,1,0,0,0,1186,
        1187,5,9,0,0,1187,1188,3,116,58,0,1188,163,1,0,0,0,1189,1190,5,53,
        0,0,1190,1191,5,62,0,0,1191,1192,5,41,0,0,1192,1193,3,116,58,0,1193,
        1194,5,9,0,0,1194,1195,3,100,50,0,1195,1196,5,166,0,0,1196,1197,
        3,88,44,0,1197,165,1,0,0,0,1198,1199,5,18,0,0,1199,1200,5,62,0,0,
        1200,1201,3,168,84,0,1201,167,1,0,0,0,1202,1203,5,65,0,0,1203,1206,
        3,208,104,0,1204,1206,3,22,11,0,1205,1202,1,0,0,0,1205,1204,1,0,
        0,0,1206,169,1,0,0,0,1207,1208,5,5,0,0,1208,1210,5,62,0,0,1209,1211,
        5,63,0,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,
        1213,5,6,0,0,1213,171,1,0,0,0,1214,1215,5,5,0,0,1215,1216,5,62,0,
        0,1216,1217,5,64,0,0,1217,173,1,0,0,0,1218,1219,5,5,0,0,1219,1220,
        5,62,0,0,1220,1226,5,11,0,0,1221,1223,7,7,0,0,1222,1224,5,65,0,0,
        1223,1222,1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,
        3,208,104,0,1226,1221,1,0,0,0,1226,1227,1,0,0,0,1227,175,1,0,0,0,
        1228,1229,5,5,0,0,1229,1231,5,62,0,0,1230,1232,5,47,0,0,1231,1230,
        1,0,0,0,1231,1232,1,0,0,0,1232,1234,1,0,0,0,1233,1235,5,106,0,0,
        1234,1233,1,0,0,0,1234,1235,1,0,0,0,1235,1236,1,0,0,0,1236,1239,
        5,66,0,0,1237,1238,7,7,0,0,1238,1240,3,22,11,0,1239,1237,1,0,0,0,
        1239,1240,1,0,0,0,1240,177,1,0,0,0,1241,1242,5,5,0,0,1242,1243,5,
        62,0,0,1243,1246,5,67,0,0,1244,1245,7,7,0,0,1245,1247,3,22,11,0,
        1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,179,1,0,0,0,1248,1249,5,
        5,0,0,1249,1250,5,62,0,0,1250,1253,5,69,0,0,1251,1252,7,7,0,0,1252,
        1254,3,22,11,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,181,1,0,
        0,0,1255,1256,5,5,0,0,1256,1257,5,62,0,0,1257,1258,5,87,0,0,1258,
        1264,5,92,0,0,1259,1261,7,7,0,0,1260,1262,5,65,0,0,1261,1260,1,0,
        0,0,1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1265,3,208,104,0,1264,
        1259,1,0,0,0,1264,1265,1,0,0,0,1265,183,1,0,0,0,1266,1267,5,5,0,
        0,1267,1268,5,62,0,0,1268,1269,5,87,0,0,1269,1270,5,93,0,0,1270,
        1275,7,7,0,0,1271,1273,5,65,0,0,1272,1271,1,0,0,0,1272,1273,1,0,
        0,0,1273,1274,1,0,0,0,1274,1276,3,208,104,0,1275,1272,1,0,0,0,1275,
        1276,1,0,0,0,1276,1277,1,0,0,0,1277,1278,5,87,0,0,1278,1279,5,38,
        0,0,1279,1280,3,234,117,0,1280,185,1,0,0,0,1281,1282,5,5,0,0,1282,
        1283,5,62,0,0,1283,1284,5,94,0,0,1284,1290,5,95,0,0,1285,1287,7,
        7,0,0,1286,1288,5,65,0,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,1288,
        1289,1,0,0,0,1289,1291,3,208,104,0,1290,1285,1,0,0,0,1290,1291,1,
        0,0,0,1291,187,1,0,0,0,1292,1293,5,5,0,0,1293,1294,5,62,0,0,1294,
        1304,5,108,0,0,1295,1302,7,7,0,0,1296,1297,5,60,0,0,1297,1303,5,
        65,0,0,1298,1300,5,65,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,
        1301,1,0,0,0,1301,1303,3,208,104,0,1302,1296,1,0,0,0,1302,1299,1,
        0,0,0,1303,1305,1,0,0,0,1304,1295,1,0,0,0,1304,1305,1,0,0,0,1305,
        1312,1,0,0,0,1306,1308,5,58,0,0,1307,1309,3,100,50,0,1308,1307,1,
        0,0,0,1308,1309,1,0,0,0,1309,1310,1,0,0,0,1310,1311,5,166,0,0,1311,
        1313,3,88,44,0,1312,1306,1,0,0,0,1312,1313,1,0,0,0,1313,189,1,0,
        0,0,1314,1315,5,5,0,0,1315,1316,5,62,0,0,1316,1317,5,57,0,0,1317,
        1318,5,58,0,0,1318,1319,3,116,58,0,1319,191,1,0,0,0,1320,1321,5,
        5,0,0,1321,1322,5,1,0,0,1322,1323,5,62,0,0,1323,1325,5,65,0,0,1324,
        1326,3,208,104,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,193,1,
        0,0,0,1327,1328,5,5,0,0,1328,1329,5,1,0,0,1329,1330,5,62,0,0,1330,
        1332,5,12,0,0,1331,1333,3,212,106,0,1332,1331,1,0,0,0,1332,1333,
        1,0,0,0,1333,1339,1,0,0,0,1334,1336,7,7,0,0,1335,1337,5,65,0,0,1336,
        1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1340,3,208,
        104,0,1339,1334,1,0,0,0,1339,1340,1,0,0,0,1340,195,1,0,0,0,1341,
        1342,5,5,0,0,1342,1343,5,1,0,0,1343,1345,5,62,0,0,1344,1346,5,47,
        0,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,1346,1348,1,0,0,0,1347,1349,
        5,106,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,0,1349,1350,1,0,0,0,
        1350,1351,5,14,0,0,1351,1354,3,216,108,0,1352,1353,7,7,0,0,1353,
        1355,3,22,11,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,197,1,0,
        0,0,1356,1357,5,5,0,0,1357,1358,5,1,0,0,1358,1359,5,62,0,0,1359,
        1360,5,15,0,0,1360,1363,3,226,113,0,1361,1362,7,7,0,0,1362,1364,
        3,22,11,0,1363,1361,1,0,0,0,1363,1364,1,0,0,0,1364,199,1,0,0,0,1365,
        1366,5,5,0,0,1366,1367,5,1,0,0,1367,1368,5,62,0,0,1368,1369,5,16,
        0,0,1369,1372,3,228,114,0,1370,1371,7,7,0,0,1371,1373,3,22,11,0,
        1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,201,1,0,0,0,1374,1375,5,
        5,0,0,1375,1376,5,1,0,0,1376,1377,5,62,0,0,1377,1378,5,87,0,0,1378,
        1379,5,38,0,0,1379,1385,3,234,117,0,1380,1382,7,7,0,0,1381,1383,
        5,65,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,
        1386,3,208,104,0,1385,1380,1,0,0,0,1385,1386,1,0,0,0,1386,203,1,
        0,0,0,1387,1388,5,5,0,0,1388,1389,5,1,0,0,1389,1390,5,62,0,0,1390,
        1391,5,87,0,0,1391,1392,5,45,0,0,1392,1393,3,238,119,0,1393,1398,
        7,7,0,0,1394,1396,5,65,0,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,
        1397,1,0,0,0,1397,1399,3,208,104,0,1398,1395,1,0,0,0,1398,1399,1,
        0,0,0,1399,1400,1,0,0,0,1400,1401,5,87,0,0,1401,1402,5,38,0,0,1402,
        1403,3,234,117,0,1403,205,1,0,0,0,1404,1405,5,5,0,0,1405,1406,5,
        1,0,0,1406,1407,5,62,0,0,1407,1408,5,94,0,0,1408,1409,5,96,0,0,1409,
        1415,3,88,44,0,1410,1412,7,7,0,0,1411,1413,5,65,0,0,1412,1411,1,
        0,0,0,1412,1413,1,0,0,0,1413,1414,1,0,0,0,1414,1416,3,208,104,0,
        1415,1410,1,0,0,0,1415,1416,1,0,0,0,1416,207,1,0,0,0,1417,1419,3,
        242,121,0,1418,1417,1,0,0,0,1418,1419,1,0,0,0,1419,1421,1,0,0,0,
        1420,1422,3,246,123,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,1423,
        1,0,0,0,1423,1424,3,248,124,0,1424,209,1,0,0,0,1425,1427,3,242,121,
        0,1426,1425,1,0,0,0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,1430,
        3,246,123,0,1429,1428,1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,
        0,1431,1432,3,248,124,0,1432,211,1,0,0,0,1433,1434,3,248,124,0,1434,
        213,1,0,0,0,1435,1436,3,248,124,0,1436,215,1,0,0,0,1437,1438,3,248,
        124,0,1438,217,1,0,0,0,1439,1440,3,248,124,0,1440,219,1,0,0,0,1441,
        1442,3,286,143,0,1442,221,1,0,0,0,1443,1444,3,286,143,0,1444,223,
        1,0,0,0,1445,1446,3,248,124,0,1446,225,1,0,0,0,1447,1448,3,248,124,
        0,1448,227,1,0,0,0,1449,1450,3,248,124,0,1450,229,1,0,0,0,1451,1452,
        3,248,124,0,1452,231,1,0,0,0,1453,1454,3,248,124,0,1454,233,1,0,
        0,0,1455,1456,3,248,124,0,1456,235,1,0,0,0,1457,1458,3,248,124,0,
        1458,237,1,0,0,0,1459,1460,3,248,124,0,1460,239,1,0,0,0,1461,1464,
        3,286,143,0,1462,1464,3,250,125,0,1463,1461,1,0,0,0,1463,1462,1,
        0,0,0,1464,241,1,0,0,0,1465,1470,3,240,120,0,1466,1467,5,154,0,0,
        1467,1469,3,240,120,0,1468,1466,1,0,0,0,1469,1472,1,0,0,0,1470,1468,
        1,0,0,0,1470,1471,1,0,0,0,1471,1474,1,0,0,0,1472,1470,1,0,0,0,1473,
        1475,5,166,0,0,1474,1473,1,0,0,0,1474,1475,1,0,0,0,1475,243,1,0,
        0,0,1476,1485,3,294,147,0,1477,1481,3,286,143,0,1478,1480,3,296,
        148,0,1479,1478,1,0,0,0,1480,1483,1,0,0,0,1481,1479,1,0,0,0,1481,
        1482,1,0,0,0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1484,1476,1,0,0,
        0,1484,1477,1,0,0,0,1485,245,1,0,0,0,1486,1489,3,244,122,0,1487,
        1489,5,167,0,0,1488,1486,1,0,0,0,1488,1487,1,0,0,0,1489,1492,1,0,
        0,0,1490,1491,5,156,0,0,1491,1493,5,173,0,0,1492,1490,1,0,0,0,1492,
        1493,1,0,0,0,1493,247,1,0,0,0,1494,1495,5,142,0,0,1495,1498,3,244,
        122,0,1496,1497,5,142,0,0,1497,1499,3,244,122,0,1498,1496,1,0,0,
        0,1498,1499,1,0,0,0,1499,1502,1,0,0,0,1500,1502,3,250,125,0,1501,
        1494,1,0,0,0,1501,1500,1,0,0,0,1502,249,1,0,0,0,1503,1504,7,8,0,
        0,1504,251,1,0,0,0,1505,1506,5,159,0,0,1506,1511,3,254,127,0,1507,
        1508,5,154,0,0,1508,1510,3,254,127,0,1509,1507,1,0,0,0,1510,1513,
        1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,1514,1,0,0,0,1513,
        1511,1,0,0,0,1514,1515,5,160,0,0,1515,1519,1,0,0,0,1516,1517,5,159,
        0,0,1517,1519,5,160,0,0,1518,1505,1,0,0,0,1518,1516,1,0,0,0,1519,
        253,1,0,0,0,1520,1521,5,181,0,0,1521,1522,5,156,0,0,1522,1523,3,
        258,129,0,1523,255,1,0,0,0,1524,1533,5,162,0,0,1525,1530,3,258,129,
        0,1526,1527,5,154,0,0,1527,1529,3,258,129,0,1528,1526,1,0,0,0,1529,
        1532,1,0,0,0,1530,1528,1,0,0,0,1530,1531,1,0,0,0,1531,1534,1,0,0,
        0,1532,1530,1,0,0,0,1533,1525,1,0,0,0,1533,1534,1,0,0,0,1534,1535,
        1,0,0,0,1535,1536,5,163,0,0,1536,257,1,0,0,0,1537,1549,5,181,0,0,
        1538,1540,7,9,0,0,1539,1538,1,0,0,0,1539,1540,1,0,0,0,1540,1541,
        1,0,0,0,1541,1549,5,175,0,0,1542,1549,5,173,0,0,1543,1549,3,252,
        126,0,1544,1549,3,256,128,0,1545,1549,5,36,0,0,1546,1549,5,37,0,
        0,1547,1549,5,35,0,0,1548,1537,1,0,0,0,1548,1539,1,0,0,0,1548,1542,
        1,0,0,0,1548,1543,1,0,0,0,1548,1544,1,0,0,0,1548,1545,1,0,0,0,1548,
        1546,1,0,0,0,1548,1547,1,0,0,0,1549,259,1,0,0,0,1550,1551,5,159,
        0,0,1551,1556,3,264,132,0,1552,1553,5,154,0,0,1553,1555,3,264,132,
        0,1554,1552,1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,1556,1557,
        1,0,0,0,1557,1559,1,0,0,0,1558,1556,1,0,0,0,1559,1560,5,160,0,0,
        1560,1564,1,0,0,0,1561,1562,5,159,0,0,1562,1564,5,160,0,0,1563,1550,
        1,0,0,0,1563,1561,1,0,0,0,1564,261,1,0,0,0,1565,1567,7,10,0,0,1566,
        1565,1,0,0,0,1567,1568,1,0,0,0,1568,1566,1,0,0,0,1568,1569,1,0,0,
        0,1569,263,1,0,0,0,1570,1571,3,268,134,0,1571,1572,5,156,0,0,1572,
        1588,3,270,135,0,1573,1589,5,113,0,0,1574,1589,5,114,0,0,1575,1589,
        5,112,0,0,1576,1589,5,116,0,0,1577,1589,5,118,0,0,1578,1589,5,119,
        0,0,1579,1589,5,120,0,0,1580,1589,5,121,0,0,1581,1589,5,130,0,0,
        1582,1583,5,122,0,0,1583,1584,5,157,0,0,1584,1585,3,274,137,0,1585,
        1586,5,158,0,0,1586,1589,1,0,0,0,1587,1589,3,262,131,0,1588,1573,
        1,0,0,0,1588,1574,1,0,0,0,1588,1575,1,0,0,0,1588,1576,1,0,0,0,1588,
        1577,1,0,0,0,1588,1578,1,0,0,0,1588,1579,1,0,0,0,1588,1580,1,0,0,
        0,1588,1581,1,0,0,0,1588,1582,1,0,0,0,1588,1587,1,0,0,0,1588,1589,
        1,0,0,0,1589,1591,1,0,0,0,1590,1592,3,260,130,0,1591,1590,1,0,0,
        0,1591,1592,1,0,0,0,1592,265,1,0,0,0,1593,1594,7,11,0,0,1594,267,
        1,0,0,0,1595,1599,5,181,0,0,1596,1599,3,286,143,0,1597,1599,3,266,
        133,0,1598,1595,1,0,0,0,1598,1596,1,0,0,0,1598,1597,1,0,0,0,1599,
        269,1,0,0,0,1600,1603,3,292,146,0,1601,1603,3,266,133,0,1602,1600,
        1,0,0,0,1602,1601,1,0,0,0,1603,271,1,0,0,0,1604,1607,5,181,0,0,1605,
        1607,3,286,143,0,1606,1604,1,0,0,0,1606,1605,1,0,0,0,1607,273,1,
        0,0,0,1608,1611,5,181,0,0,1609,1611,3,286,143,0,1610,1608,1,0,0,
        0,1610,1609,1,0,0,0,1611,275,1,0,0,0,1612,1615,3,292,146,0,1613,
        1615,3,260,130,0,1614,1612,1,0,0,0,1614,1613,1,0,0,0,1615,277,1,
        0,0,0,1616,1617,3,286,143,0,1617,279,1,0,0,0,1618,1619,3,286,143,
        0,1619,281,1,0,0,0,1620,1621,3,286,143,0,1621,283,1,0,0,0,1622,1623,
        7,12,0,0,1623,285,1,0,0,0,1624,1625,3,284,142,0,1625,287,1,0,0,0,
        1626,1631,3,286,143,0,1627,1628,5,154,0,0,1628,1630,3,286,143,0,
        1629,1627,1,0,0,0,1630,1633,1,0,0,0,1631,1629,1,0,0,0,1631,1632,
        1,0,0,0,1632,289,1,0,0,0,1633,1631,1,0,0,0,1634,1635,5,157,0,0,1635,
        1636,3,288,144,0,1636,1637,5,158,0,0,1637,291,1,0,0,0,1638,1640,
        3,286,143,0,1639,1641,3,296,148,0,1640,1639,1,0,0,0,1640,1641,1,
        0,0,0,1641,293,1,0,0,0,1642,1647,3,286,143,0,1643,1645,3,296,148,
        0,1644,1646,3,296,148,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,
        1648,1,0,0,0,1647,1643,1,0,0,0,1647,1648,1,0,0,0,1648,295,1,0,0,
        0,1649,1650,5,153,0,0,1650,1651,3,286,143,0,1651,297,1,0,0,0,214,
        302,307,310,313,370,378,391,404,413,418,420,425,430,436,444,446,
        459,466,468,489,494,499,503,506,511,519,521,526,530,533,539,545,
        548,551,554,565,567,573,585,592,598,601,606,610,614,621,628,634,
        637,640,643,647,654,662,665,669,672,682,684,691,698,706,709,717,
        721,724,729,731,736,744,747,753,756,766,768,775,784,793,796,801,
        804,813,815,827,834,840,843,845,848,852,854,877,880,886,890,893,
        899,903,906,911,914,920,926,931,934,936,939,947,953,957,960,965,
        969,977,983,987,990,995,999,1008,1011,1017,1020,1030,1033,1038,1041,
        1054,1057,1062,1065,1071,1079,1087,1096,1099,1108,1111,1124,1127,
        1148,1150,1160,1173,1182,1184,1205,1210,1223,1226,1231,1234,1239,
        1246,1253,1261,1264,1272,1275,1287,1290,1299,1302,1304,1308,1312,
        1325,1332,1336,1339,1345,1348,1354,1363,1372,1382,1385,1395,1398,
        1412,1415,1418,1421,1426,1429,1463,1470,1474,1481,1484,1488,1492,
        1498,1501,1511,1518,1530,1533,1539,1548,1556,1563,1568,1588,1591,
        1598,1602,1606,1610,1614,1631,1640,1645,1647
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "':='", 
                     "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", 
                     "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'['", 
                     "']'", "'->'", "'->>'", "'@'", "<INVALID>", "'@@'", 
                     "'\\N'", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", 
                      "SET_SYMBOL", "IDENTIFIED_SYMBOL", "BY_SYMBOL", "ROLE_SYMBOL", 
                      "TO_SYMBOL", "IGNORE_SYMBOL", "CLONE_SYMBOL", "FILE_SYMBOL", 
                      "BINARY_SYMBOL", "DATA_SYMBOL", "LOAD_SYMBOL", "GRANT_SYMBOL", 
                      "READ_SYMBOL", "DELETE_SYMBOL", "GROUP_SYMBOL", "REVOKE_SYMBOL", 
                      "ACCOUNT_SYMBOL", "LOCK_SYMBOL", "UNLOCK_SYMBOL", 
                      "GRANTS_SYMBOL", "FOR_SYMBOL", "LEVEL_SYMBOL", "ANY_SYMBOL", 
                      "CONFIGURE_SYMBOL", "REST_SYMBOL", "METADATA_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "VIEWS_SYMBOL", 
                      "PROCEDURES_SYMBOL", "PARAMETERS_SYMBOL", "FUNCTIONS_SYMBOL", 
                      "RESULT_SYMBOL", "ENABLED_SYMBOL", "PUBLISHED_SYMBOL", 
                      "DISABLED_SYMBOL", "PRIVATE_SYMBOL", "UNPUBLISHED_SYMBOL", 
                      "PROTOCOL_SYMBOL", "HTTP_SYMBOL", "HTTPS_SYMBOL", 
                      "COMMENTS_SYMBOL", "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", 
                      "MANAGEMENT_SYMBOL", "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", 
                      "ITEMS_SYMBOL", "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FEED_SYMBOL", "ITEM_SYMBOL", 
                      "SETS_SYMBOL", "FILES_SYMBOL", "AUTH_SYMBOL", "APPS_SYMBOL", 
                      "APP_SYMBOL", "VENDOR_SYMBOL", "MRS_SYMBOL", "MYSQL_SYMBOL", 
                      "USERS_SYMBOL", "ALLOW_SYMBOL", "REGISTER_SYMBOL", 
                      "CLASS_SYMBOL", "DEVELOPMENT_SYMBOL", "SCRIPTS_SYMBOL", 
                      "MAPPING_SYMBOL", "TYPESCRIPT_SYMBOL", "ROLES_SYMBOL", 
                      "EXTENDS_SYMBOL", "OBJECT_SYMBOL", "HIERARCHY_SYMBOL", 
                      "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", "AT_OUT_SYMBOL", 
                      "AT_CHECK_SYMBOL", "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", 
                      "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", 
                      "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", 
                      "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", 
                      "AT_KEY_SYMBOL", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
                      "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_enabledDisabledPrivate = 3
    RULE_quotedTextOrDefault = 4
    RULE_jsonOptions = 5
    RULE_metadata = 6
    RULE_comments = 7
    RULE_authenticationRequired = 8
    RULE_itemsPerPage = 9
    RULE_itemsPerPageNumber = 10
    RULE_serviceSchemaSelector = 11
    RULE_configureRestMetadataStatement = 12
    RULE_restMetadataOptions = 13
    RULE_updateIfAvailable = 14
    RULE_createRestServiceStatement = 15
    RULE_restServiceOptions = 16
    RULE_publishedUnpublished = 17
    RULE_restProtocol = 18
    RULE_restAuthentication = 19
    RULE_authPath = 20
    RULE_authRedirection = 21
    RULE_authValidation = 22
    RULE_authPageContent = 23
    RULE_userManagementSchema = 24
    RULE_createRestSchemaStatement = 25
    RULE_restSchemaOptions = 26
    RULE_createRestViewStatement = 27
    RULE_restObjectOptions = 28
    RULE_restViewMediaType = 29
    RULE_restViewFormat = 30
    RULE_restViewAuthenticationProcedure = 31
    RULE_createRestProcedureStatement = 32
    RULE_restProcedureResult = 33
    RULE_createRestFunctionStatement = 34
    RULE_restFunctionResult = 35
    RULE_createRestContentSetStatement = 36
    RULE_directoryFilePath = 37
    RULE_restContentSetOptions = 38
    RULE_fileIgnoreList = 39
    RULE_loadScripts = 40
    RULE_createRestContentFileStatement = 41
    RULE_restContentFileOptions = 42
    RULE_createRestAuthAppStatement = 43
    RULE_authAppName = 44
    RULE_vendorName = 45
    RULE_restAuthAppOptions = 46
    RULE_allowNewUsersToRegister = 47
    RULE_defaultRole = 48
    RULE_createRestUserStatement = 49
    RULE_userName = 50
    RULE_userPassword = 51
    RULE_userOptions = 52
    RULE_appOptions = 53
    RULE_accountLock = 54
    RULE_createRestRoleStatement = 55
    RULE_restRoleOptions = 56
    RULE_parentRoleName = 57
    RULE_roleName = 58
    RULE_cloneRestServiceStatement = 59
    RULE_alterRestServiceStatement = 60
    RULE_alterRestSchemaStatement = 61
    RULE_alterRestViewStatement = 62
    RULE_alterRestProcedureStatement = 63
    RULE_alterRestFunctionStatement = 64
    RULE_alterRestContentSetStatement = 65
    RULE_alterRestUserStatement = 66
    RULE_dropRestServiceStatement = 67
    RULE_dropRestSchemaStatement = 68
    RULE_dropRestViewStatement = 69
    RULE_dropRestProcedureStatement = 70
    RULE_dropRestFunctionStatement = 71
    RULE_dropRestContentSetStatement = 72
    RULE_dropRestContentFileStatement = 73
    RULE_dropRestAuthAppStatement = 74
    RULE_dropRestUserStatement = 75
    RULE_dropRestRoleStatement = 76
    RULE_grantRestPrivilegeStatement = 77
    RULE_privilegeList = 78
    RULE_privilegeName = 79
    RULE_grantRestRoleStatement = 80
    RULE_revokeRestPrivilegeStatement = 81
    RULE_revokeRestRoleStatement = 82
    RULE_useStatement = 83
    RULE_serviceAndSchemaRequestPaths = 84
    RULE_showRestMetadataStatusStatement = 85
    RULE_showRestServicesStatement = 86
    RULE_showRestSchemasStatement = 87
    RULE_showRestViewsStatement = 88
    RULE_showRestProceduresStatement = 89
    RULE_showRestFunctionsStatement = 90
    RULE_showRestContentSetsStatement = 91
    RULE_showRestContentFilesStatement = 92
    RULE_showRestAuthAppsStatement = 93
    RULE_showRestRolesStatement = 94
    RULE_showRestGrantsStatement = 95
    RULE_showCreateRestServiceStatement = 96
    RULE_showCreateRestSchemaStatement = 97
    RULE_showCreateRestViewStatement = 98
    RULE_showCreateRestProcedureStatement = 99
    RULE_showCreateRestFunctionStatement = 100
    RULE_showCreateRestContentSetStatement = 101
    RULE_showCreateRestContentFileStatement = 102
    RULE_showCreateRestAuthAppStatement = 103
    RULE_serviceRequestPath = 104
    RULE_newServiceRequestPath = 105
    RULE_schemaRequestPath = 106
    RULE_newSchemaRequestPath = 107
    RULE_viewRequestPath = 108
    RULE_newViewRequestPath = 109
    RULE_restObjectName = 110
    RULE_restResultName = 111
    RULE_objectRequestPath = 112
    RULE_procedureRequestPath = 113
    RULE_functionRequestPath = 114
    RULE_newProcedureRequestPath = 115
    RULE_newFunctionRequestPath = 116
    RULE_contentSetRequestPath = 117
    RULE_newContentSetRequestPath = 118
    RULE_contentFileRequestPath = 119
    RULE_serviceDeveloperIdentifier = 120
    RULE_serviceDevelopersIdentifier = 121
    RULE_dottedIdentifier = 122
    RULE_hostAndPortIdentifier = 123
    RULE_requestPathIdentifier = 124
    RULE_quotedText = 125
    RULE_jsonObj = 126
    RULE_jsonPair = 127
    RULE_jsonArr = 128
    RULE_jsonValue = 129
    RULE_graphQlObj = 130
    RULE_graphQlCrudOptions = 131
    RULE_graphQlPair = 132
    RULE_graphQlAllowedKeyword = 133
    RULE_graphQlPairKey = 134
    RULE_graphQlPairValue = 135
    RULE_graphQlReduceToValue = 136
    RULE_graphQlDatatypeValue = 137
    RULE_graphQlValue = 138
    RULE_schemaName = 139
    RULE_viewName = 140
    RULE_procedureName = 141
    RULE_pureIdentifier = 142
    RULE_identifier = 143
    RULE_identifierList = 144
    RULE_identifierListWithParentheses = 145
    RULE_qualifiedIdentifier = 146
    RULE_simpleIdentifier = 147
    RULE_dotIdentifier = 148

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "enabledDisabledPrivate", 
                   "quotedTextOrDefault", "jsonOptions", "metadata", "comments", 
                   "authenticationRequired", "itemsPerPage", "itemsPerPageNumber", 
                   "serviceSchemaSelector", "configureRestMetadataStatement", 
                   "restMetadataOptions", "updateIfAvailable", "createRestServiceStatement", 
                   "restServiceOptions", "publishedUnpublished", "restProtocol", 
                   "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restObjectOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "createRestFunctionStatement", 
                   "restFunctionResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "fileIgnoreList", 
                   "loadScripts", "createRestContentFileStatement", "restContentFileOptions", 
                   "createRestAuthAppStatement", "authAppName", "vendorName", 
                   "restAuthAppOptions", "allowNewUsersToRegister", "defaultRole", 
                   "createRestUserStatement", "userName", "userPassword", 
                   "userOptions", "appOptions", "accountLock", "createRestRoleStatement", 
                   "restRoleOptions", "parentRoleName", "roleName", "cloneRestServiceStatement", 
                   "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "alterRestFunctionStatement", "alterRestContentSetStatement", 
                   "alterRestUserStatement", "dropRestServiceStatement", 
                   "dropRestSchemaStatement", "dropRestViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestContentFileStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "dropRestRoleStatement", "grantRestPrivilegeStatement", 
                   "privilegeList", "privilegeName", "grantRestRoleStatement", 
                   "revokeRestPrivilegeStatement", "revokeRestRoleStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestFunctionsStatement", "showRestContentSetsStatement", 
                   "showRestContentFilesStatement", "showRestAuthAppsStatement", 
                   "showRestRolesStatement", "showRestGrantsStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "showCreateRestFunctionStatement", "showCreateRestContentSetStatement", 
                   "showCreateRestContentFileStatement", "showCreateRestAuthAppStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaRequestPath", 
                   "newSchemaRequestPath", "viewRequestPath", "newViewRequestPath", 
                   "restObjectName", "restResultName", "objectRequestPath", 
                   "procedureRequestPath", "functionRequestPath", "newProcedureRequestPath", 
                   "newFunctionRequestPath", "contentSetRequestPath", "newContentSetRequestPath", 
                   "contentFileRequestPath", "serviceDeveloperIdentifier", 
                   "serviceDevelopersIdentifier", "dottedIdentifier", "hostAndPortIdentifier", 
                   "requestPathIdentifier", "quotedText", "jsonObj", "jsonPair", 
                   "jsonArr", "jsonValue", "graphQlObj", "graphQlCrudOptions", 
                   "graphQlPair", "graphQlAllowedKeyword", "graphQlPairKey", 
                   "graphQlPairValue", "graphQlReduceToValue", "graphQlDatatypeValue", 
                   "graphQlValue", "schemaName", "viewName", "procedureName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    UPDATE_SYMBOL=34
    NULL_SYMBOL=35
    TRUE_SYMBOL=36
    FALSE_SYMBOL=37
    SET_SYMBOL=38
    IDENTIFIED_SYMBOL=39
    BY_SYMBOL=40
    ROLE_SYMBOL=41
    TO_SYMBOL=42
    IGNORE_SYMBOL=43
    CLONE_SYMBOL=44
    FILE_SYMBOL=45
    BINARY_SYMBOL=46
    DATA_SYMBOL=47
    LOAD_SYMBOL=48
    GRANT_SYMBOL=49
    READ_SYMBOL=50
    DELETE_SYMBOL=51
    GROUP_SYMBOL=52
    REVOKE_SYMBOL=53
    ACCOUNT_SYMBOL=54
    LOCK_SYMBOL=55
    UNLOCK_SYMBOL=56
    GRANTS_SYMBOL=57
    FOR_SYMBOL=58
    LEVEL_SYMBOL=59
    ANY_SYMBOL=60
    CONFIGURE_SYMBOL=61
    REST_SYMBOL=62
    METADATA_SYMBOL=63
    SERVICES_SYMBOL=64
    SERVICE_SYMBOL=65
    VIEWS_SYMBOL=66
    PROCEDURES_SYMBOL=67
    PARAMETERS_SYMBOL=68
    FUNCTIONS_SYMBOL=69
    RESULT_SYMBOL=70
    ENABLED_SYMBOL=71
    PUBLISHED_SYMBOL=72
    DISABLED_SYMBOL=73
    PRIVATE_SYMBOL=74
    UNPUBLISHED_SYMBOL=75
    PROTOCOL_SYMBOL=76
    HTTP_SYMBOL=77
    HTTPS_SYMBOL=78
    COMMENTS_SYMBOL=79
    REQUEST_SYMBOL=80
    REDIRECTION_SYMBOL=81
    MANAGEMENT_SYMBOL=82
    AVAILABLE_SYMBOL=83
    REQUIRED_SYMBOL=84
    ITEMS_SYMBOL=85
    PER_SYMBOL=86
    CONTENT_SYMBOL=87
    MEDIA_SYMBOL=88
    AUTODETECT_SYMBOL=89
    FEED_SYMBOL=90
    ITEM_SYMBOL=91
    SETS_SYMBOL=92
    FILES_SYMBOL=93
    AUTH_SYMBOL=94
    APPS_SYMBOL=95
    APP_SYMBOL=96
    VENDOR_SYMBOL=97
    MRS_SYMBOL=98
    MYSQL_SYMBOL=99
    USERS_SYMBOL=100
    ALLOW_SYMBOL=101
    REGISTER_SYMBOL=102
    CLASS_SYMBOL=103
    DEVELOPMENT_SYMBOL=104
    SCRIPTS_SYMBOL=105
    MAPPING_SYMBOL=106
    TYPESCRIPT_SYMBOL=107
    ROLES_SYMBOL=108
    EXTENDS_SYMBOL=109
    OBJECT_SYMBOL=110
    HIERARCHY_SYMBOL=111
    AT_INOUT_SYMBOL=112
    AT_IN_SYMBOL=113
    AT_OUT_SYMBOL=114
    AT_CHECK_SYMBOL=115
    AT_NOCHECK_SYMBOL=116
    AT_NOUPDATE_SYMBOL=117
    AT_SORTABLE_SYMBOL=118
    AT_NOFILTERING_SYMBOL=119
    AT_ROWOWNERSHIP_SYMBOL=120
    AT_UNNEST_SYMBOL=121
    AT_DATATYPE_SYMBOL=122
    AT_SELECT_SYMBOL=123
    AT_NOSELECT_SYMBOL=124
    AT_INSERT_SYMBOL=125
    AT_NOINSERT_SYMBOL=126
    AT_UPDATE_SYMBOL=127
    AT_DELETE_SYMBOL=128
    AT_NODELETE_SYMBOL=129
    AT_KEY_SYMBOL=130
    EQUAL_OPERATOR=131
    ASSIGN_OPERATOR=132
    NULL_SAFE_EQUAL_OPERATOR=133
    GREATER_OR_EQUAL_OPERATOR=134
    GREATER_THAN_OPERATOR=135
    LESS_OR_EQUAL_OPERATOR=136
    LESS_THAN_OPERATOR=137
    NOT_EQUAL_OPERATOR=138
    PLUS_OPERATOR=139
    MINUS_OPERATOR=140
    MULT_OPERATOR=141
    DIV_OPERATOR=142
    MOD_OPERATOR=143
    LOGICAL_NOT_OPERATOR=144
    BITWISE_NOT_OPERATOR=145
    SHIFT_LEFT_OPERATOR=146
    SHIFT_RIGHT_OPERATOR=147
    LOGICAL_AND_OPERATOR=148
    BITWISE_AND_OPERATOR=149
    BITWISE_XOR_OPERATOR=150
    LOGICAL_OR_OPERATOR=151
    BITWISE_OR_OPERATOR=152
    DOT_SYMBOL=153
    COMMA_SYMBOL=154
    SEMICOLON_SYMBOL=155
    COLON_SYMBOL=156
    OPEN_PAR_SYMBOL=157
    CLOSE_PAR_SYMBOL=158
    OPEN_CURLY_SYMBOL=159
    CLOSE_CURLY_SYMBOL=160
    UNDERLINE_SYMBOL=161
    OPEN_SQUARE_SYMBOL=162
    CLOSE_SQUARE_SYMBOL=163
    JSON_SEPARATOR_SYMBOL=164
    JSON_UNQUOTED_SEPARATOR_SYMBOL=165
    AT_SIGN_SYMBOL=166
    AT_TEXT_SUFFIX=167
    AT_AT_SIGN_SYMBOL=168
    NULL2_SYMBOL=169
    PARAM_MARKER=170
    HEX_NUMBER=171
    BIN_NUMBER=172
    INT_NUMBER=173
    DECIMAL_NUMBER=174
    FLOAT_NUMBER=175
    WHITESPACE=176
    INVALID_INPUT=177
    IDENTIFIER=178
    NCHAR_TEXT=179
    BACK_TICK_QUOTED_ID=180
    DOUBLE_QUOTED_TEXT=181
    SINGLE_QUOTED_TEXT=182
    BLOCK_COMMENT=183
    POUND_COMMENT=184
    DASHDASH_COMMENT=185
    WS=186
    NOT_EQUAL2_OPERATOR=187

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2315430750608293938) != 0):
                self.state = 298
                self.mrsStatement()
                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 300 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 299
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 302 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==155):
                                break

                        self.state = 304
                        self.mrsStatement() 
                    self.state = 309
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 312
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 315
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentFileStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestRoleStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def cloneRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CloneRestServiceStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def alterRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestFunctionStatementContext,0)


        def alterRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestContentSetStatementContext,0)


        def alterRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestUserStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentFileStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def dropRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestRoleStatementContext,0)


        def grantRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestRoleStatementContext,0)


        def grantRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestPrivilegeStatementContext,0)


        def revokeRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestPrivilegeStatementContext,0)


        def revokeRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestRoleStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestContentFilesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentFilesStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showRestRolesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestRolesStatementContext,0)


        def showRestGrantsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestGrantsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentSetStatementContext,0)


        def showCreateRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentFileStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 320
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 321
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 322
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 323
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 324
                self.createRestContentFileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 325
                self.createRestAuthAppStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 326
                self.createRestRoleStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 327
                self.createRestUserStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 328
                self.cloneRestServiceStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 329
                self.alterRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 330
                self.alterRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 331
                self.alterRestViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 332
                self.alterRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 333
                self.alterRestFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 334
                self.alterRestContentSetStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 335
                self.alterRestUserStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 336
                self.dropRestServiceStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 337
                self.dropRestSchemaStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 338
                self.dropRestViewStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 339
                self.dropRestProcedureStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 340
                self.dropRestFunctionStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 341
                self.dropRestContentSetStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 342
                self.dropRestContentFileStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 343
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 344
                self.dropRestUserStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 345
                self.dropRestRoleStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 346
                self.grantRestRoleStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 347
                self.grantRestPrivilegeStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 348
                self.revokeRestPrivilegeStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 349
                self.revokeRestRoleStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 350
                self.useStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 351
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 352
                self.showRestServicesStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 353
                self.showRestSchemasStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 354
                self.showRestViewsStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 355
                self.showRestProceduresStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 356
                self.showRestFunctionsStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 357
                self.showRestContentSetsStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 358
                self.showRestContentFilesStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 359
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 360
                self.showRestRolesStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 361
                self.showRestGrantsStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 362
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 363
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 364
                self.showCreateRestViewStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 365
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 366
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 367
                self.showCreateRestContentSetStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 368
                self.showCreateRestContentFileStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 369
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            _la = self._input.LA(1)
            if not(_la==71 or _la==73):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledPrivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabledPrivate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabledPrivate" ):
                listener.enterEnabledDisabledPrivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabledPrivate" ):
                listener.exitEnabledDisabledPrivate(self)




    def enabledDisabledPrivate(self):

        localctx = MRSParser.EnabledDisabledPrivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_enabledDisabledPrivate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [181, 182]:
                self.state = 376
                self.quotedText()
                pass
            elif token in [24]:
                self.state = 377
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 381
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = MRSParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 384
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 387
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 390
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 393
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 396
            self.match(MRSParser.PER_SYMBOL)
            self.state = 397
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 398
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 402
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 403
                self.serviceRequestPath()


            self.state = 406
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 407
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 410
            self.match(MRSParser.REST_SYMBOL)
            self.state = 411
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 175921860444417) != 0):
                self.state = 412
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 418
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 415
                    self.enabledDisabled()
                    pass
                elif token in [26]:
                    self.state = 416
                    self.jsonOptions()
                    pass
                elif token in [34]:
                    self.state = 417
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 420 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 175921860444417) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 423
                self.match(MRSParser.IF_SYMBOL)
                self.state = 424
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 428
                self.match(MRSParser.OR_SYMBOL)
                self.state = 429
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 432
            self.match(MRSParser.REST_SYMBOL)
            self.state = 433
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 434
            self.serviceRequestPath()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 314130472055603233) != 0):
                self.state = 435
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def publishedUnpublished(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.PublishedUnpublishedContext)
            else:
                return self.getTypedRuleContext(MRSParser.PublishedUnpublishedContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 444
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 438
                    self.enabledDisabled()
                    pass
                elif token in [72, 75]:
                    self.state = 439
                    self.publishedUnpublished()
                    pass
                elif token in [21]:
                    self.state = 440
                    self.restAuthentication()
                    pass
                elif token in [26]:
                    self.state = 441
                    self.jsonOptions()
                    pass
                elif token in [79]:
                    self.state = 442
                    self.comments()
                    pass
                elif token in [63]:
                    self.state = 443
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 446 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 314130472055603233) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublishedUnpublishedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_publishedUnpublished

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishedUnpublished" ):
                listener.enterPublishedUnpublished(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishedUnpublished" ):
                listener.exitPublishedUnpublished(self)




    def publishedUnpublished(self):

        localctx = MRSParser.PublishedUnpublishedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_publishedUnpublished)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            _la = self._input.LA(1)
            if not(_la==72 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 451
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 452
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 453
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 454
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 455
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 456
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 457
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 458
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 576460752303423747) != 0):
                self.state = 466
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 462
                    self.authPath()
                    pass
                elif token in [81]:
                    self.state = 463
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 464
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 465
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 472
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 475
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 478
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 481
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 482
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(MRSParser.USER_SYMBOL)
            self.state = 485
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 486
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 180]:
                self.state = 487
                self.schemaName()
                pass
            elif token in [24]:
                self.state = 488
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 492
                self.match(MRSParser.OR_SYMBOL)
                self.state = 493
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 496
            self.match(MRSParser.REST_SYMBOL)
            self.state = 497
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1649267441665) != 0):
                self.state = 498
                self.schemaRequestPath()


            self.state = 506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 501
                self.match(MRSParser.ON_SYMBOL)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 502
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 505
                self.serviceRequestPath()


            self.state = 508
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 509
            self.schemaName()
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036785569792) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16653) != 0):
                self.state = 510
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 519
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 74]:
                    self.state = 513
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 514
                    self.authenticationRequired()
                    pass
                elif token in [85]:
                    self.state = 515
                    self.itemsPerPage()
                    pass
                elif token in [26]:
                    self.state = 516
                    self.jsonOptions()
                    pass
                elif token in [79]:
                    self.state = 517
                    self.comments()
                    pass
                elif token in [63]:
                    self.state = 518
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 521 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036785569792) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16653) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 524
                self.match(MRSParser.OR_SYMBOL)
                self.state = 525
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 528
            self.match(MRSParser.REST_SYMBOL)
            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 529
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 532
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 535
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 536
            self.viewRequestPath()
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 537
                self.match(MRSParser.ON_SYMBOL)
                self.state = 538
                self.serviceSchemaSelector()


            self.state = 541
            self.match(MRSParser.AS_SYMBOL)
            self.state = 542
            self.qualifiedIdentifier()
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 543
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 544
                self.restObjectName()


            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 31751) != 0):
                self.state = 547
                self.graphQlCrudOptions()


            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 550
                self.graphQlObj()


            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0):
                self.state = 553
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 556
                    self.enabledDisabledPrivate()
                    pass

                elif la_ == 2:
                    self.state = 557
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 558
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 559
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 560
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 561
                    self.metadata()
                    pass

                elif la_ == 7:
                    self.state = 562
                    self.restViewMediaType()
                    pass

                elif la_ == 8:
                    self.state = 563
                    self.restViewFormat()
                    pass

                elif la_ == 9:
                    self.state = 564
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 567 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 570
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [181, 182]:
                self.state = 571
                self.quotedText()
                pass
            elif token in [89]:
                self.state = 572
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 576
            _la = self._input.LA(1)
            if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 579
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 580
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 583
                self.match(MRSParser.OR_SYMBOL)
                self.state = 584
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 587
            self.match(MRSParser.REST_SYMBOL)
            self.state = 588
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 589
            self.procedureRequestPath()
            self.state = 592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 590
                self.match(MRSParser.ON_SYMBOL)
                self.state = 591
                self.serviceSchemaSelector()


            self.state = 594
            self.match(MRSParser.AS_SYMBOL)
            self.state = 595
            self.qualifiedIdentifier()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 596
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178 or _la==180:
                    self.state = 597
                    self.restObjectName()


                self.state = 600
                self.graphQlObj()


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 603
                self.restProcedureResult()
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0):
                self.state = 609
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_restProcedureResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178 or _la==180:
                self.state = 613
                self.restResultName()


            self.state = 616
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 619
                self.match(MRSParser.OR_SYMBOL)
                self.state = 620
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 623
            self.match(MRSParser.REST_SYMBOL)
            self.state = 624
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 625
            self.functionRequestPath()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 626
                self.match(MRSParser.ON_SYMBOL)
                self.state = 627
                self.serviceSchemaSelector()


            self.state = 630
            self.match(MRSParser.AS_SYMBOL)
            self.state = 631
            self.qualifiedIdentifier()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 632
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178 or _la==180:
                    self.state = 633
                    self.restObjectName()


                self.state = 636
                self.graphQlObj()


            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 639
                self.restFunctionResult()


            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0):
                self.state = 642
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_restFunctionResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178 or _la==180:
                self.state = 646
                self.restResultName()


            self.state = 649
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 652
                self.match(MRSParser.OR_SYMBOL)
                self.state = 653
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 656
            self.match(MRSParser.REST_SYMBOL)
            self.state = 657
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 658
            self.match(MRSParser.SET_SYMBOL)
            self.state = 659
            self.contentSetRequestPath()
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 660
                self.match(MRSParser.ON_SYMBOL)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 661
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 664
                self.serviceRequestPath()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 667
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 668
                self.directoryFilePath()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 302867075079077921) != 0):
                self.state = 671
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def fileIgnoreList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.FileIgnoreListContext)
            else:
                return self.getTypedRuleContext(MRSParser.FileIgnoreListContext,i)


        def loadScripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.LoadScriptsContext)
            else:
                return self.getTypedRuleContext(MRSParser.LoadScriptsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 682 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 682
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 74]:
                    self.state = 676
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 677
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 678
                    self.jsonOptions()
                    pass
                elif token in [79]:
                    self.state = 679
                    self.comments()
                    pass
                elif token in [43]:
                    self.state = 680
                    self.fileIgnoreList()
                    pass
                elif token in [48]:
                    self.state = 681
                    self.loadScripts()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 684 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 302867075079077921) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIgnoreListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_fileIgnoreList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIgnoreList" ):
                listener.enterFileIgnoreList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIgnoreList" ):
                listener.exitFileIgnoreList(self)




    def fileIgnoreList(self):

        localctx = MRSParser.FileIgnoreListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fileIgnoreList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(MRSParser.IGNORE_SYMBOL)
            self.state = 687
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadScriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_loadScripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadScripts" ):
                listener.enterLoadScripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadScripts" ):
                listener.exitLoadScripts(self)




    def loadScripts(self):

        localctx = MRSParser.LoadScriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_loadScripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(MRSParser.LOAD_SYMBOL)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 690
                self.match(MRSParser.TYPESCRIPT_SYMBOL)


            self.state = 693
            self.match(MRSParser.SCRIPTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restContentFileOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentFileOptionsContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentFileStatement" ):
                listener.enterCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentFileStatement" ):
                listener.exitCreateRestContentFileStatement(self)




    def createRestContentFileStatement(self):

        localctx = MRSParser.CreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_createRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 696
                self.match(MRSParser.OR_SYMBOL)
                self.state = 697
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 700
            self.match(MRSParser.REST_SYMBOL)
            self.state = 701
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 702
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 703
            self.contentFileRequestPath()
            self.state = 704
            self.match(MRSParser.ON_SYMBOL)
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1992898379777) != 0):
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 705
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 708
                self.serviceRequestPath()


            self.state = 711
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 712
            self.match(MRSParser.SET_SYMBOL)
            self.state = 713
            self.contentSetRequestPath()
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 714
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 715
                self.directoryFilePath()
                pass
            elif token in [46, 87]:
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 716
                    self.match(MRSParser.BINARY_SYMBOL)


                self.state = 719
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 720
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 14636698788954145) != 0):
                self.state = 723
                self.restContentFileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentFileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentFileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentFileOptions" ):
                listener.enterRestContentFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentFileOptions" ):
                listener.exitRestContentFileOptions(self)




    def restContentFileOptions(self):

        localctx = MRSParser.RestContentFileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_restContentFileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73, 74]:
                    self.state = 726
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 727
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 728
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 731 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 14636698788954145) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 734
                self.match(MRSParser.OR_SYMBOL)
                self.state = 735
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 738
            self.match(MRSParser.REST_SYMBOL)
            self.state = 739
            _la = self._input.LA(1)
            if not(_la==21 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 740
            self.match(MRSParser.APP_SYMBOL)
            self.state = 741
            self.authAppName()
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 742
                self.match(MRSParser.ON_SYMBOL)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 743
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 746
                self.serviceRequestPath()


            self.state = 749
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                self.state = 750
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [99]:
                self.state = 751
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [181, 182]:
                self.state = 752
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 1073742085) != 0):
                self.state = 755
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [71, 73]:
                    self.state = 762
                    self.enabledDisabled()
                    pass
                elif token in [79]:
                    self.state = 763
                    self.comments()
                    pass
                elif token in [101]:
                    self.state = 764
                    self.allowNewUsersToRegister()
                    pass
                elif token in [24]:
                    self.state = 765
                    self.defaultRole()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 768 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==24 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 1073742085) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 771
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 772
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 773
                self.match(MRSParser.TO_SYMBOL)
                self.state = 774
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 778
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 779
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 782
                self.match(MRSParser.OR_SYMBOL)
                self.state = 783
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 786
            self.match(MRSParser.REST_SYMBOL)
            self.state = 787
            self.match(MRSParser.USER_SYMBOL)
            self.state = 788
            self.userName()
            self.state = 789
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 790
            self.authAppName()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 791
                self.match(MRSParser.ON_SYMBOL)
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 792
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 795
                self.serviceRequestPath()


            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 798
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 799
                self.match(MRSParser.BY_SYMBOL)
                self.state = 800
                self.userPassword()


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==54 or _la==96:
                self.state = 803
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accountLock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AccountLockContext)
            else:
                return self.getTypedRuleContext(MRSParser.AccountLockContext,i)


        def appOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppOptionsContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_userOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserOptions" ):
                listener.enterUserOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserOptions" ):
                listener.exitUserOptions(self)




    def userOptions(self):

        localctx = MRSParser.UserOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_userOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 813
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 810
                    self.accountLock()
                    pass
                elif token in [96]:
                    self.state = 811
                    self.appOptions()
                    pass
                elif token in [26]:
                    self.state = 812
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 815 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==54 or _la==96):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_appOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppOptions" ):
                listener.enterAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppOptions" ):
                listener.exitAppOptions(self)




    def appOptions(self):

        localctx = MRSParser.AppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_appOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(MRSParser.APP_SYMBOL)
            self.state = 818
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 819
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_accountLock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLock" ):
                listener.enterAccountLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLock" ):
                listener.exitAccountLock(self)




    def accountLock(self):

        localctx = MRSParser.AccountLockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_accountLock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(MRSParser.ACCOUNT_SYMBOL)
            self.state = 822
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def parentRoleName(self):
            return self.getTypedRuleContext(MRSParser.ParentRoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def restRoleOptions(self):
            return self.getTypedRuleContext(MRSParser.RestRoleOptionsContext,0)


        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestRoleStatement" ):
                listener.enterCreateRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestRoleStatement" ):
                listener.exitCreateRestRoleStatement(self)




    def createRestRoleStatement(self):

        localctx = MRSParser.CreateRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_createRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 825
                self.match(MRSParser.OR_SYMBOL)
                self.state = 826
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 829
            self.match(MRSParser.REST_SYMBOL)
            self.state = 830
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 831
            self.roleName()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 832
                self.match(MRSParser.EXTENDS_SYMBOL)
                self.state = 833
                self.parentRoleName()


            self.state = 845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 836
                self.match(MRSParser.ON_SYMBOL)
                self.state = 843
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 837
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 838
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass
                elif token in [65, 142, 167, 178, 180, 181, 182]:
                    self.state = 840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 839
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 842
                    self.serviceRequestPath()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==79:
                self.state = 847
                self.restRoleOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestRoleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restRoleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestRoleOptions" ):
                listener.enterRestRoleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestRoleOptions" ):
                listener.exitRestRoleOptions(self)




    def restRoleOptions(self):

        localctx = MRSParser.RestRoleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_restRoleOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 850
                    self.jsonOptions()
                    pass
                elif token in [79]:
                    self.state = 851
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 854 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==79):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParentRoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_parentRoleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentRoleName" ):
                listener.enterParentRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentRoleName" ):
                listener.exitParentRoleName(self)




    def parentRoleName(self):

        localctx = MRSParser.ParentRoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_parentRoleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MRSParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_roleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_cloneRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneRestServiceStatement" ):
                listener.enterCloneRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneRestServiceStatement" ):
                listener.exitCloneRestServiceStatement(self)




    def cloneRestServiceStatement(self):

        localctx = MRSParser.CloneRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_cloneRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(MRSParser.CLONE_SYMBOL)
            self.state = 861
            self.match(MRSParser.REST_SYMBOL)
            self.state = 862
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 863
            self.serviceRequestPath()
            self.state = 864
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 865
            self.match(MRSParser.REQUEST_SYMBOL)
            self.state = 866
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 867
            self.newServiceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 870
            self.match(MRSParser.REST_SYMBOL)
            self.state = 871
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 872
            self.serviceRequestPath()
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 873
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 874
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 875
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 876
                self.newServiceRequestPath()


            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 314130472055603233) != 0):
                self.state = 879
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 883
            self.match(MRSParser.REST_SYMBOL)
            self.state = 884
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1649267441665) != 0):
                self.state = 885
                self.schemaRequestPath()


            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 888
                self.match(MRSParser.ON_SYMBOL)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 889
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 892
                self.serviceRequestPath()


            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 895
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 896
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 897
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 898
                self.newSchemaRequestPath()


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 901
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 902
                self.schemaName()


            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372036785569792) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 16653) != 0):
                self.state = 905
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 909
            self.match(MRSParser.REST_SYMBOL)
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 910
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 913
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 916
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 917
            self.viewRequestPath()
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 918
                self.match(MRSParser.ON_SYMBOL)
                self.state = 919
                self.serviceSchemaSelector()


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 922
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 923
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 924
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 925
                self.newViewRequestPath()


            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 928
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 929
                self.restObjectName()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 31751) != 0):
                    self.state = 930
                    self.graphQlCrudOptions()


                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 933
                    self.graphQlObj()




            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0):
                self.state = 938
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 942
            self.match(MRSParser.REST_SYMBOL)
            self.state = 943
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 944
            self.procedureRequestPath()
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 945
                self.match(MRSParser.ON_SYMBOL)
                self.state = 946
                self.serviceSchemaSelector()


            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 949
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 950
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 951
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 952
                self.newProcedureRequestPath()


            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 955
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178 or _la==180:
                    self.state = 956
                    self.restObjectName()


                self.state = 959
                self.graphQlObj()


            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 962
                self.restProcedureResult()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0):
                self.state = 968
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newFunctionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewFunctionRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestFunctionResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestFunctionStatement" ):
                listener.enterAlterRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestFunctionStatement" ):
                listener.exitAlterRestFunctionStatement(self)




    def alterRestFunctionStatement(self):

        localctx = MRSParser.AlterRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 972
            self.match(MRSParser.REST_SYMBOL)
            self.state = 973
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 974
            self.functionRequestPath()
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 975
                self.match(MRSParser.ON_SYMBOL)
                self.state = 976
                self.serviceSchemaSelector()


            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 979
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 980
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 981
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 982
                self.newFunctionRequestPath()


            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 985
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178 or _la==180:
                    self.state = 986
                    self.restObjectName()


                self.state = 989
                self.graphQlObj()


            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==70:
                self.state = 992
                self.restFunctionResult()
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223372028195635200) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 147725) != 0):
                self.state = 998
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newContentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewContentSetRequestPathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestContentSetStatement" ):
                listener.enterAlterRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestContentSetStatement" ):
                listener.exitAlterRestContentSetStatement(self)




    def alterRestContentSetStatement(self):

        localctx = MRSParser.AlterRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1002
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1003
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1004
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1005
            self.contentSetRequestPath()
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1006
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1007
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1010
                self.serviceRequestPath()


            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1013
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1014
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1015
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1016
                self.newContentSetRequestPath()


            self.state = 1020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 302867075079077921) != 0):
                self.state = 1019
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestUserStatement" ):
                listener.enterAlterRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestUserStatement" ):
                listener.exitAlterRestUserStatement(self)




    def alterRestUserStatement(self):

        localctx = MRSParser.AlterRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1023
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1024
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1025
            self.userName()
            self.state = 1026
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1027
            self.authAppName()
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1028
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1029
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1032
                self.serviceRequestPath()


            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1035
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 1036
                self.match(MRSParser.BY_SYMBOL)
                self.state = 1037
                self.userPassword()


            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==54 or _la==96:
                self.state = 1040
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1044
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1045
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1046
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1049
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1050
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1051
            self.schemaRequestPath()
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1052
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1053
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1056
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestViewStatement" ):
                listener.enterDropRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestViewStatement" ):
                listener.exitDropRestViewStatement(self)




    def dropRestViewStatement(self):

        localctx = MRSParser.DropRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1060
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1061
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 1064
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1067
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1068
            self.viewRequestPath()
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1069
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1070
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1074
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1075
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1076
            self.procedureRequestPath()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1077
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1078
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1082
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1083
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1084
            self.functionRequestPath()
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1085
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1086
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1090
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1091
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1092
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1093
            self.contentSetRequestPath()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1094
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1095
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1098
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentFileStatement" ):
                listener.enterDropRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentFileStatement" ):
                listener.exitDropRestContentFileStatement(self)




    def dropRestContentFileStatement(self):

        localctx = MRSParser.DropRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1102
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1103
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1104
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1105
            self.contentFileRequestPath()
            self.state = 1106
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1992898379777) != 0):
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1107
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1110
                self.serviceRequestPath()


            self.state = 1113
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1114
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1115
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1118
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1119
            _la = self._input.LA(1)
            if not(_la==21 or _la==94):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1120
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1121
            self.authAppName()
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1122
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1123
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1126
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropRestUserStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1130
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1131
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1132
            self.userName()
            self.state = 1133
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1134
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestRoleStatement" ):
                listener.enterDropRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestRoleStatement" ):
                listener.exitDropRestRoleStatement(self)




    def dropRestRoleStatement(self):

        localctx = MRSParser.DropRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1137
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1138
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1139
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestPrivilegeStatement" ):
                listener.enterGrantRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestPrivilegeStatement" ):
                listener.exitGrantRestPrivilegeStatement(self)




    def grantRestPrivilegeStatement(self):

        localctx = MRSParser.GrantRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_grantRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1142
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1143
            self.privilegeList()
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1144
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1145
                self.serviceSchemaSelector()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1146
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1147
                    self.objectRequestPath()




            self.state = 1152
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1153
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeName(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeNameContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = MRSParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_privilegeList)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1155
                self.privilegeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                self.privilegeName()
                self.state = 1157
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1158
                self.privilegeList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_privilegeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeName" ):
                listener.enterPrivilegeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeName" ):
                listener.exitPrivilegeName(self)




    def privilegeName(self):

        localctx = MRSParser.PrivilegeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_privilegeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3377716900397058) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def comments(self):
            return self.getTypedRuleContext(MRSParser.CommentsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestRoleStatement" ):
                listener.enterGrantRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestRoleStatement" ):
                listener.exitGrantRestRoleStatement(self)




    def grantRestRoleStatement(self):

        localctx = MRSParser.GrantRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_grantRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1165
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1166
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1167
            self.roleName()
            self.state = 1168
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1169
            self.userName()
            self.state = 1170
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1171
            self.authAppName()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 1172
                self.comments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestPrivilegeStatement" ):
                listener.enterRevokeRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestPrivilegeStatement" ):
                listener.exitRevokeRestPrivilegeStatement(self)




    def revokeRestPrivilegeStatement(self):

        localctx = MRSParser.RevokeRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_revokeRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1176
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1177
            self.privilegeList()
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1178
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1179
                self.serviceSchemaSelector()
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==110:
                    self.state = 1180
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1181
                    self.objectRequestPath()




            self.state = 1186
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1187
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestRoleStatement" ):
                listener.enterRevokeRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestRoleStatement" ):
                listener.exitRevokeRestRoleStatement(self)




    def revokeRestRoleStatement(self):

        localctx = MRSParser.RevokeRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_revokeRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1190
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1191
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1192
            self.roleName()
            self.state = 1193
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1194
            self.userName()
            self.state = 1195
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1196
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            self.match(MRSParser.USE_SYMBOL)
            self.state = 1199
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1200
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 1203
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1208
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1209
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 1212
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1215
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1216
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1219
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1220
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 1226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1221
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1222
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1225
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1229
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1230
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 1233
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1236
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1237
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1238
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1242
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1243
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1244
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1245
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1249
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1250
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1251
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1252
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1256
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1257
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1258
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1259
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1260
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1263
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentFilesStatement" ):
                listener.enterShowRestContentFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentFilesStatement" ):
                listener.exitShowRestContentFilesStatement(self)




    def showRestContentFilesStatement(self):

        localctx = MRSParser.ShowRestContentFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_showRestContentFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1267
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1268
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1269
            self.match(MRSParser.FILES_SYMBOL)
            self.state = 1270
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1992898379777) != 0):
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1271
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1274
                self.serviceRequestPath()


            self.state = 1277
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1278
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1279
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1282
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1283
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1284
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1285
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1286
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1289
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestRolesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestRolesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestRolesStatement" ):
                listener.enterShowRestRolesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestRolesStatement" ):
                listener.exitShowRestRolesStatement(self)




    def showRestRolesStatement(self):

        localctx = MRSParser.ShowRestRolesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_showRestRolesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1293
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1294
            self.match(MRSParser.ROLES_SYMBOL)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1295
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1302
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 1296
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 1297
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass
                elif token in [65, 142, 167, 178, 180, 181, 182]:
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==65:
                        self.state = 1298
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 1301
                    self.serviceRequestPath()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1306
                self.match(MRSParser.FOR_SYMBOL)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==181 or _la==182:
                    self.state = 1307
                    self.userName()


                self.state = 1310
                self.match(MRSParser.AT_SIGN_SYMBOL)
                self.state = 1311
                self.authAppName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestGrantsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestGrantsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestGrantsStatement" ):
                listener.enterShowRestGrantsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestGrantsStatement" ):
                listener.exitShowRestGrantsStatement(self)




    def showRestGrantsStatement(self):

        localctx = MRSParser.ShowRestGrantsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_showRestGrantsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1314
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1315
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1316
            self.match(MRSParser.GRANTS_SYMBOL)
            self.state = 1317
            self.match(MRSParser.FOR_SYMBOL)
            self.state = 1318
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1321
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1322
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1323
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1992898379777) != 0):
                self.state = 1324
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1328
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1329
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1330
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1649267441665) != 0):
                self.state = 1331
                self.schemaRequestPath()


            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1334
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1335
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1338
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1342
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1343
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1344
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 1347
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1350
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1351
            self.viewRequestPath()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1352
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1353
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1357
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1358
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1359
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1360
            self.procedureRequestPath()
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1361
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1362
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1366
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1367
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1368
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1369
            self.functionRequestPath()
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1370
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1371
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentSetStatement" ):
                listener.enterShowCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentSetStatement" ):
                listener.exitShowCreateRestContentSetStatement(self)




    def showCreateRestContentSetStatement(self):

        localctx = MRSParser.ShowCreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_showCreateRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1375
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1376
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1377
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1378
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1379
            self.contentSetRequestPath()
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1381
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1384
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentFileStatement" ):
                listener.enterShowCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentFileStatement" ):
                listener.exitShowCreateRestContentFileStatement(self)




    def showCreateRestContentFileStatement(self):

        localctx = MRSParser.ShowCreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_showCreateRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1388
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1389
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1390
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1391
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1392
            self.contentFileRequestPath()
            self.state = 1393
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 1992898379777) != 0):
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1394
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1397
                self.serviceRequestPath()


            self.state = 1400
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1401
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1402
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_showCreateRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1405
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1406
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1407
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1408
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1409
            self.authAppName()
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1410
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==65:
                    self.state = 1411
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1414
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1417
                self.serviceDevelopersIdentifier()


            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 10241) != 0):
                self.state = 1420
                self.hostAndPortIdentifier()


            self.state = 1423
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1425
                self.serviceDevelopersIdentifier()


            self.state = 1429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & 10241) != 0):
                self.state = 1428
                self.hostAndPortIdentifier()


            self.state = 1431
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1435
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPath" ):
                listener.enterObjectRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPath" ):
                listener.exitObjectRequestPath(self)




    def objectRequestPath(self):

        localctx = MRSParser.ObjectRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_objectRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewFunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newFunctionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewFunctionRequestPath" ):
                listener.enterNewFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewFunctionRequestPath" ):
                listener.exitNewFunctionRequestPath(self)




    def newFunctionRequestPath(self):

        localctx = MRSParser.NewFunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_newFunctionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newContentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewContentSetRequestPath" ):
                listener.enterNewContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewContentSetRequestPath" ):
                listener.exitNewContentSetRequestPath(self)




    def newContentSetRequestPath(self):

        localctx = MRSParser.NewContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_newContentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentFileRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentFileRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentFileRequestPath" ):
                listener.enterContentFileRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentFileRequestPath" ):
                listener.exitContentFileRequestPath(self)




    def contentFileRequestPath(self):

        localctx = MRSParser.ContentFileRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_contentFileRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeveloperIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceDeveloperIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDeveloperIdentifier" ):
                listener.enterServiceDeveloperIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDeveloperIdentifier" ):
                listener.exitServiceDeveloperIdentifier(self)




    def serviceDeveloperIdentifier(self):

        localctx = MRSParser.ServiceDeveloperIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_serviceDeveloperIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 180]:
                self.state = 1461
                self.identifier()
                pass
            elif token in [181, 182]:
                self.state = 1462
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDevelopersIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceDeveloperIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ServiceDeveloperIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.ServiceDeveloperIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_serviceDevelopersIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDevelopersIdentifier" ):
                listener.enterServiceDevelopersIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDevelopersIdentifier" ):
                listener.exitServiceDevelopersIdentifier(self)




    def serviceDevelopersIdentifier(self):

        localctx = MRSParser.ServiceDevelopersIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_serviceDevelopersIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.serviceDeveloperIdentifier()
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154:
                self.state = 1466
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1467
                self.serviceDeveloperIdentifier()
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 1473
                self.match(MRSParser.AT_SIGN_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.identifier()
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==153:
                    self.state = 1478
                    self.dotIdentifier()
                    self.state = 1483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MRSParser.AT_TEXT_SUFFIX, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 180]:
                self.state = 1486
                self.dottedIdentifier()
                pass
            elif token in [167]:
                self.state = 1487
                self.match(MRSParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 1490
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 1491
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 1494
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 1495
                self.dottedIdentifier()
                self.state = 1498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142:
                    self.state = 1496
                    self.match(MRSParser.DIV_OPERATOR)
                    self.state = 1497
                    self.dottedIdentifier()


                pass
            elif token in [181, 182]:
                self.state = 1500
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            _la = self._input.LA(1)
            if not(_la==181 or _la==182):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1505
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1506
                self.jsonPair()
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==154:
                    self.state = 1507
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1508
                    self.jsonPair()
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1514
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1516
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1517
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1521
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1522
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0) or ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & 4483955294211) != 0):
                self.state = 1525
                self.jsonValue()
                self.state = 1530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==154:
                    self.state = 1526
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1527
                    self.jsonValue()
                    self.state = 1532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1535
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1537
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [139, 140, 175]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139 or _la==140:
                    self.state = 1538
                    _la = self._input.LA(1)
                    if not(_la==139 or _la==140):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1541
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1542
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1543
                self.jsonObj()
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1544
                self.jsonArr()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1545
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1546
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1547
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1550
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1551
                self.graphQlPair()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==154:
                    self.state = 1552
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1553
                    self.graphQlPair()
                    self.state = 1558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1559
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1561
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1562
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def AT_CHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_CHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_CHECK_SYMBOL, i)

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1565
                _la = self._input.LA(1)
                if not(((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 31751) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1568 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & 31751) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_KEY_SYMBOL(self):
            return self.getToken(MRSParser.AT_KEY_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.graphQlPairKey()
            self.state = 1571
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1572
            self.graphQlPairValue()
            self.state = 1588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1573
                self.match(MRSParser.AT_IN_SYMBOL)

            elif la_ == 2:
                self.state = 1574
                self.match(MRSParser.AT_OUT_SYMBOL)

            elif la_ == 3:
                self.state = 1575
                self.match(MRSParser.AT_INOUT_SYMBOL)

            elif la_ == 4:
                self.state = 1576
                self.match(MRSParser.AT_NOCHECK_SYMBOL)

            elif la_ == 5:
                self.state = 1577
                self.match(MRSParser.AT_SORTABLE_SYMBOL)

            elif la_ == 6:
                self.state = 1578
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)

            elif la_ == 7:
                self.state = 1579
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)

            elif la_ == 8:
                self.state = 1580
                self.match(MRSParser.AT_UNNEST_SYMBOL)

            elif la_ == 9:
                self.state = 1581
                self.match(MRSParser.AT_KEY_SYMBOL)

            elif la_ == 10:
                self.state = 1582
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1583
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1584
                self.graphQlDatatypeValue()
                self.state = 1585
                self.match(MRSParser.CLOSE_PAR_SYMBOL)

            elif la_ == 11:
                self.state = 1587
                self.graphQlCrudOptions()


            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 1590
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1593
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -2305700039310051328) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5342364168959) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_graphQlPairKey)
        try:
            self.state = 1598
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1595
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [178, 180]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.identifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 47, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97, 99, 100, 102, 103, 106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1597
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_graphQlPairValue)
        try:
            self.state = 1602
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1600
                self.qualifiedIdentifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 47, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92, 94, 95, 96, 97, 99, 100, 102, 103, 106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1601
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1604
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [178, 180]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1605
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [181]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1608
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [178, 180]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1609
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_graphQlValue)
        try:
            self.state = 1614
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 180]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1612
                self.qualifiedIdentifier()
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1613
                self.graphQlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            _la = self._input.LA(1)
            if not(_la==178 or _la==180):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1626
            self.identifier()
            self.state = 1631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==154:
                self.state = 1627
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1628
                self.identifier()
                self.state = 1633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1635
            self.identifierList()
            self.state = 1636
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1638
            self.identifier()
            self.state = 1640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1639
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.identifier()
            self.state = 1647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 1643
                self.dotIdentifier()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1644
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1650
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





