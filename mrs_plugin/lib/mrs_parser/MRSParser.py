# Copyright (c) 2023, 2024, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,167,1424,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,1,0,1,0,4,0,257,8,0,11,0,12,0,258,1,0,5,0,262,8,0,10,
        0,12,0,265,9,0,3,0,267,8,0,1,0,3,0,270,8,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,317,8,1,1,2,1,2,1,3,1,3,3,3,323,
        8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,3,7,336,8,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,3,10,349,8,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,3,11,358,8,11,1,12,1,12,1,12,4,12,363,8,
        12,11,12,12,12,364,1,13,1,13,1,13,3,13,370,8,13,1,14,1,14,1,14,3,
        14,375,8,14,1,14,1,14,1,14,1,14,3,14,381,8,14,1,15,1,15,1,15,1,15,
        1,15,1,15,4,15,389,8,15,11,15,12,15,390,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,3,17,404,8,17,1,18,1,18,1,18,1,18,
        1,18,5,18,411,8,18,10,18,12,18,414,9,18,1,19,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        3,23,434,8,23,1,24,1,24,1,24,3,24,439,8,24,1,24,1,24,1,24,3,24,444,
        8,24,1,24,1,24,3,24,448,8,24,1,24,3,24,451,8,24,1,24,1,24,1,24,3,
        24,456,8,24,1,25,1,25,1,25,1,25,1,25,1,25,4,25,464,8,25,11,25,12,
        25,465,1,26,1,26,1,26,3,26,471,8,26,1,26,1,26,3,26,475,8,26,1,26,
        3,26,478,8,26,1,26,3,26,481,8,26,1,26,1,26,1,26,1,26,3,26,487,8,
        26,1,26,1,26,1,26,1,26,3,26,493,8,26,1,26,3,26,496,8,26,1,26,3,26,
        499,8,26,1,26,3,26,502,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,4,27,513,8,27,11,27,12,27,514,1,28,1,28,1,28,1,28,3,28,521,
        8,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,533,
        8,31,1,31,1,31,1,31,1,31,1,31,3,31,540,8,31,1,31,1,31,1,31,1,31,
        3,31,546,8,31,1,31,3,31,549,8,31,1,31,5,31,552,8,31,10,31,12,31,
        555,9,31,1,31,3,31,558,8,31,1,32,1,32,3,32,562,8,32,1,32,1,32,1,
        33,1,33,1,33,3,33,569,8,33,1,33,1,33,1,33,1,33,1,33,3,33,576,8,33,
        1,33,1,33,1,33,1,33,3,33,582,8,33,1,33,3,33,585,8,33,1,33,3,33,588,
        8,33,1,33,3,33,591,8,33,1,34,1,34,3,34,595,8,34,1,34,1,34,1,35,1,
        35,1,35,3,35,602,8,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,610,8,35,
        1,35,3,35,613,8,35,1,35,1,35,3,35,617,8,35,1,35,3,35,620,8,35,1,
        35,1,35,3,35,624,8,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,4,37,633,
        8,37,11,37,12,37,634,1,38,1,38,1,38,1,39,1,39,1,39,3,39,643,8,39,
        1,39,1,39,1,39,1,39,1,39,1,39,3,39,651,8,39,1,39,3,39,654,8,39,1,
        39,1,39,1,39,1,39,1,39,1,39,3,39,662,8,39,1,39,1,39,3,39,666,8,39,
        1,39,3,39,669,8,39,1,40,1,40,1,40,4,40,674,8,40,11,40,12,40,675,
        1,41,1,41,1,41,3,41,681,8,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
        689,8,41,1,41,3,41,692,8,41,1,41,1,41,1,41,1,41,3,41,698,8,41,1,
        41,3,41,701,8,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,44,4,44,711,
        8,44,11,44,12,44,712,1,45,1,45,1,45,1,45,1,45,3,45,720,8,45,1,46,
        1,46,1,46,1,46,1,47,1,47,1,47,3,47,729,8,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,3,47,738,8,47,1,47,3,47,741,8,47,1,47,1,47,1,47,1,
        47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,768,8,51,1,51,3,
        51,771,8,51,1,52,1,52,1,52,1,52,3,52,777,8,52,1,52,1,52,3,52,781,
        8,52,1,52,3,52,784,8,52,1,52,1,52,1,52,1,52,3,52,790,8,52,1,52,1,
        52,3,52,794,8,52,1,52,3,52,797,8,52,1,53,1,53,1,53,3,53,802,8,53,
        1,53,3,53,805,8,53,1,53,3,53,808,8,53,1,53,1,53,1,53,1,53,3,53,814,
        8,53,1,53,1,53,1,53,1,53,3,53,820,8,53,1,53,1,53,1,53,3,53,825,8,
        53,1,53,3,53,828,8,53,3,53,830,8,53,1,53,3,53,833,8,53,1,54,1,54,
        1,54,1,54,1,54,1,54,3,54,841,8,54,1,54,1,54,1,54,1,54,3,54,847,8,
        54,1,54,1,54,3,54,851,8,54,1,54,3,54,854,8,54,1,54,5,54,857,8,54,
        10,54,12,54,860,9,54,1,54,3,54,863,8,54,1,55,1,55,1,55,1,55,1,55,
        1,55,3,55,871,8,55,1,55,1,55,1,55,1,55,3,55,877,8,55,1,55,1,55,3,
        55,881,8,55,1,55,3,55,884,8,55,1,55,5,55,887,8,55,10,55,12,55,890,
        9,55,1,55,3,55,893,8,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,
        1,57,1,57,1,57,3,57,906,8,57,1,57,3,57,909,8,57,1,58,1,58,1,58,3,
        58,914,8,58,1,58,3,58,917,8,58,1,58,3,58,920,8,58,1,58,1,58,1,58,
        1,58,3,58,926,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,934,8,59,1,
        60,1,60,1,60,1,60,1,60,1,60,3,60,942,8,60,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,3,61,951,8,61,1,61,3,61,954,8,61,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,3,62,963,8,62,1,62,3,62,966,8,62,1,62,1,62,1,62,1,
        62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,979,8,63,1,63,3,63,982,
        8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,992,8,64,1,64,
        3,64,995,8,64,1,65,1,65,1,65,1,65,1,66,1,66,1,66,3,66,1004,8,66,
        1,67,1,67,1,67,3,67,1009,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,
        1,69,1,69,1,69,1,69,3,69,1022,8,69,1,69,3,69,1025,8,69,1,70,1,70,
        1,70,3,70,1030,8,70,1,70,3,70,1033,8,70,1,70,3,70,1036,8,70,1,70,
        1,70,1,70,3,70,1041,8,70,1,71,1,71,1,71,1,71,1,71,3,71,1048,8,71,
        1,72,1,72,1,72,1,72,1,72,3,72,1055,8,72,1,73,1,73,1,73,1,73,1,73,
        1,73,3,73,1063,8,73,1,73,3,73,1066,8,73,1,74,1,74,1,74,1,74,1,74,
        1,74,3,74,1074,8,74,1,74,3,74,1077,8,74,1,74,1,74,1,74,1,74,1,75,
        1,75,1,75,1,75,1,75,1,75,3,75,1089,8,75,1,75,3,75,1092,8,75,1,76,
        1,76,1,76,1,76,1,76,3,76,1099,8,76,1,77,1,77,1,77,1,77,1,77,3,77,
        1106,8,77,1,77,1,77,3,77,1110,8,77,1,77,3,77,1113,8,77,1,78,1,78,
        1,78,1,78,3,78,1119,8,78,1,78,3,78,1122,8,78,1,78,3,78,1125,8,78,
        1,78,1,78,1,78,1,78,3,78,1131,8,78,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,3,79,1140,8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1149,
        8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1159,8,81,1,81,
        3,81,1162,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1172,
        8,82,1,82,3,82,1175,8,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,3,83,1189,8,83,1,83,3,83,1192,8,83,1,84,3,84,
        1195,8,84,1,84,3,84,1198,8,84,1,84,1,84,1,85,3,85,1203,8,85,1,85,
        3,85,1206,8,85,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,89,
        1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,94,1,94,1,95,1,95,1,96,
        1,96,1,97,1,97,1,98,1,98,3,98,1236,8,98,1,99,1,99,1,99,5,99,1241,
        8,99,10,99,12,99,1244,9,99,1,99,3,99,1247,8,99,1,100,1,100,1,100,
        5,100,1252,8,100,10,100,12,100,1255,9,100,3,100,1257,8,100,1,101,
        1,101,3,101,1261,8,101,1,101,1,101,3,101,1265,8,101,1,102,1,102,
        1,102,1,102,3,102,1271,8,102,1,102,3,102,1274,8,102,1,103,1,103,
        1,104,1,104,1,104,1,104,5,104,1282,8,104,10,104,12,104,1285,9,104,
        1,104,1,104,1,104,1,104,3,104,1291,8,104,1,105,1,105,1,105,1,105,
        1,106,1,106,1,106,1,106,5,106,1301,8,106,10,106,12,106,1304,9,106,
        3,106,1306,8,106,1,106,1,106,1,107,1,107,3,107,1312,8,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,3,107,1321,8,107,1,108,1,108,
        1,108,1,108,5,108,1327,8,108,10,108,12,108,1330,9,108,1,108,1,108,
        1,108,1,108,3,108,1336,8,108,1,109,4,109,1339,8,109,11,109,12,109,
        1340,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1360,8,110,1,110,
        3,110,1363,8,110,1,111,1,111,1,112,1,112,1,112,3,112,1370,8,112,
        1,113,1,113,3,113,1374,8,113,1,114,1,114,3,114,1378,8,114,1,115,
        1,115,3,115,1382,8,115,1,116,1,116,3,116,1386,8,116,1,117,1,117,
        1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,122,1,122,1,122,
        5,122,1401,8,122,10,122,12,122,1404,9,122,1,123,1,123,1,123,1,123,
        1,124,1,124,3,124,1412,8,124,1,125,1,125,1,125,3,125,1417,8,125,
        3,125,1419,8,125,1,126,1,126,1,126,1,126,0,0,127,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,0,10,2,0,59,59,61,
        61,2,0,60,60,62,62,2,0,75,75,77,78,2,0,21,21,81,81,1,0,8,9,1,0,161,
        162,1,0,119,120,2,0,96,98,106,110,15,0,11,16,20,20,22,22,25,26,30,
        34,41,41,47,59,61,61,63,69,71,72,74,75,77,79,81,84,86,87,89,90,2,
        0,158,158,160,160,1570,0,266,1,0,0,0,2,316,1,0,0,0,4,318,1,0,0,0,
        6,322,1,0,0,0,8,324,1,0,0,0,10,327,1,0,0,0,12,330,1,0,0,0,14,333,
        1,0,0,0,16,339,1,0,0,0,18,344,1,0,0,0,20,348,1,0,0,0,22,353,1,0,
        0,0,24,362,1,0,0,0,26,366,1,0,0,0,28,371,1,0,0,0,30,388,1,0,0,0,
        32,392,1,0,0,0,34,394,1,0,0,0,36,405,1,0,0,0,38,415,1,0,0,0,40,418,
        1,0,0,0,42,421,1,0,0,0,44,424,1,0,0,0,46,428,1,0,0,0,48,435,1,0,
        0,0,50,463,1,0,0,0,52,467,1,0,0,0,54,512,1,0,0,0,56,516,1,0,0,0,
        58,522,1,0,0,0,60,525,1,0,0,0,62,529,1,0,0,0,64,559,1,0,0,0,66,565,
        1,0,0,0,68,592,1,0,0,0,70,598,1,0,0,0,72,625,1,0,0,0,74,632,1,0,
        0,0,76,636,1,0,0,0,78,639,1,0,0,0,80,673,1,0,0,0,82,677,1,0,0,0,
        84,702,1,0,0,0,86,704,1,0,0,0,88,710,1,0,0,0,90,714,1,0,0,0,92,721,
        1,0,0,0,94,725,1,0,0,0,96,746,1,0,0,0,98,748,1,0,0,0,100,750,1,0,
        0,0,102,759,1,0,0,0,104,772,1,0,0,0,106,798,1,0,0,0,108,834,1,0,
        0,0,110,864,1,0,0,0,112,894,1,0,0,0,114,899,1,0,0,0,116,910,1,0,
        0,0,118,927,1,0,0,0,120,935,1,0,0,0,122,943,1,0,0,0,124,955,1,0,
        0,0,126,971,1,0,0,0,128,983,1,0,0,0,130,996,1,0,0,0,132,1003,1,0,
        0,0,134,1005,1,0,0,0,136,1012,1,0,0,0,138,1016,1,0,0,0,140,1026,
        1,0,0,0,142,1042,1,0,0,0,144,1049,1,0,0,0,146,1056,1,0,0,0,148,1067,
        1,0,0,0,150,1082,1,0,0,0,152,1093,1,0,0,0,154,1100,1,0,0,0,156,1114,
        1,0,0,0,158,1132,1,0,0,0,160,1141,1,0,0,0,162,1150,1,0,0,0,164,1163,
        1,0,0,0,166,1180,1,0,0,0,168,1194,1,0,0,0,170,1202,1,0,0,0,172,1209,
        1,0,0,0,174,1211,1,0,0,0,176,1213,1,0,0,0,178,1215,1,0,0,0,180,1217,
        1,0,0,0,182,1219,1,0,0,0,184,1221,1,0,0,0,186,1223,1,0,0,0,188,1225,
        1,0,0,0,190,1227,1,0,0,0,192,1229,1,0,0,0,194,1231,1,0,0,0,196,1235,
        1,0,0,0,198,1237,1,0,0,0,200,1256,1,0,0,0,202,1260,1,0,0,0,204,1273,
        1,0,0,0,206,1275,1,0,0,0,208,1290,1,0,0,0,210,1292,1,0,0,0,212,1296,
        1,0,0,0,214,1320,1,0,0,0,216,1335,1,0,0,0,218,1338,1,0,0,0,220,1342,
        1,0,0,0,222,1364,1,0,0,0,224,1369,1,0,0,0,226,1373,1,0,0,0,228,1377,
        1,0,0,0,230,1381,1,0,0,0,232,1385,1,0,0,0,234,1387,1,0,0,0,236,1389,
        1,0,0,0,238,1391,1,0,0,0,240,1393,1,0,0,0,242,1395,1,0,0,0,244,1397,
        1,0,0,0,246,1405,1,0,0,0,248,1409,1,0,0,0,250,1413,1,0,0,0,252,1420,
        1,0,0,0,254,263,3,2,1,0,255,257,5,135,0,0,256,255,1,0,0,0,257,258,
        1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,262,
        3,2,1,0,261,256,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,
        1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,266,254,1,0,0,0,266,267,
        1,0,0,0,267,269,1,0,0,0,268,270,5,135,0,0,269,268,1,0,0,0,269,270,
        1,0,0,0,270,271,1,0,0,0,271,272,5,0,0,1,272,1,1,0,0,0,273,317,3,
        22,11,0,274,317,3,28,14,0,275,317,3,48,24,0,276,317,3,52,26,0,277,
        317,3,62,31,0,278,317,3,66,33,0,279,317,3,70,35,0,280,317,3,78,39,
        0,281,317,3,82,41,0,282,317,3,94,47,0,283,317,3,100,50,0,284,317,
        3,102,51,0,285,317,3,104,52,0,286,317,3,106,53,0,287,317,3,108,54,
        0,288,317,3,110,55,0,289,317,3,112,56,0,290,317,3,114,57,0,291,317,
        3,116,58,0,292,317,3,118,59,0,293,317,3,120,60,0,294,317,3,122,61,
        0,295,317,3,124,62,0,296,317,3,126,63,0,297,317,3,128,64,0,298,317,
        3,130,65,0,299,317,3,134,67,0,300,317,3,136,68,0,301,317,3,138,69,
        0,302,317,3,140,70,0,303,317,3,142,71,0,304,317,3,144,72,0,305,317,
        3,146,73,0,306,317,3,148,74,0,307,317,3,150,75,0,308,317,3,152,76,
        0,309,317,3,154,77,0,310,317,3,156,78,0,311,317,3,158,79,0,312,317,
        3,160,80,0,313,317,3,162,81,0,314,317,3,164,82,0,315,317,3,166,83,
        0,316,273,1,0,0,0,316,274,1,0,0,0,316,275,1,0,0,0,316,276,1,0,0,
        0,316,277,1,0,0,0,316,278,1,0,0,0,316,279,1,0,0,0,316,280,1,0,0,
        0,316,281,1,0,0,0,316,282,1,0,0,0,316,283,1,0,0,0,316,284,1,0,0,
        0,316,285,1,0,0,0,316,286,1,0,0,0,316,287,1,0,0,0,316,288,1,0,0,
        0,316,289,1,0,0,0,316,290,1,0,0,0,316,291,1,0,0,0,316,292,1,0,0,
        0,316,293,1,0,0,0,316,294,1,0,0,0,316,295,1,0,0,0,316,296,1,0,0,
        0,316,297,1,0,0,0,316,298,1,0,0,0,316,299,1,0,0,0,316,300,1,0,0,
        0,316,301,1,0,0,0,316,302,1,0,0,0,316,303,1,0,0,0,316,304,1,0,0,
        0,316,305,1,0,0,0,316,306,1,0,0,0,316,307,1,0,0,0,316,308,1,0,0,
        0,316,309,1,0,0,0,316,310,1,0,0,0,316,311,1,0,0,0,316,312,1,0,0,
        0,316,313,1,0,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,3,1,0,0,0,
        318,319,7,0,0,0,319,5,1,0,0,0,320,323,3,206,103,0,321,323,5,24,0,
        0,322,320,1,0,0,0,322,321,1,0,0,0,323,7,1,0,0,0,324,325,5,26,0,0,
        325,326,3,214,107,0,326,9,1,0,0,0,327,328,5,49,0,0,328,329,3,214,
        107,0,329,11,1,0,0,0,330,331,5,66,0,0,331,332,3,206,103,0,332,13,
        1,0,0,0,333,335,5,21,0,0,334,336,5,28,0,0,335,334,1,0,0,0,335,336,
        1,0,0,0,336,337,1,0,0,0,337,338,5,71,0,0,338,15,1,0,0,0,339,340,
        5,72,0,0,340,341,5,73,0,0,341,342,5,30,0,0,342,343,3,18,9,0,343,
        17,1,0,0,0,344,345,5,153,0,0,345,19,1,0,0,0,346,347,5,51,0,0,347,
        349,3,168,84,0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,
        351,5,12,0,0,351,352,3,172,86,0,352,21,1,0,0,0,353,354,5,47,0,0,
        354,355,5,48,0,0,355,357,5,49,0,0,356,358,3,24,12,0,357,356,1,0,
        0,0,357,358,1,0,0,0,358,23,1,0,0,0,359,363,3,4,2,0,360,363,3,8,4,
        0,361,363,3,26,13,0,362,359,1,0,0,0,362,360,1,0,0,0,362,361,1,0,
        0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,25,1,0,0,
        0,366,369,5,34,0,0,367,368,5,27,0,0,368,370,5,70,0,0,369,367,1,0,
        0,0,369,370,1,0,0,0,370,27,1,0,0,0,371,374,5,1,0,0,372,373,5,2,0,
        0,373,375,5,3,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,
        0,376,377,5,48,0,0,377,378,5,51,0,0,378,380,3,168,84,0,379,381,3,
        30,15,0,380,379,1,0,0,0,380,381,1,0,0,0,381,29,1,0,0,0,382,389,3,
        4,2,0,383,389,3,32,16,0,384,389,3,36,18,0,385,389,3,8,4,0,386,389,
        3,12,6,0,387,389,3,10,5,0,388,382,1,0,0,0,388,383,1,0,0,0,388,384,
        1,0,0,0,388,385,1,0,0,0,388,386,1,0,0,0,388,387,1,0,0,0,389,390,
        1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,31,1,0,0,0,392,393,7,
        1,0,0,393,33,1,0,0,0,394,403,5,63,0,0,395,404,5,64,0,0,396,404,5,
        65,0,0,397,398,5,64,0,0,398,399,5,134,0,0,399,404,5,65,0,0,400,401,
        5,65,0,0,401,402,5,134,0,0,402,404,5,64,0,0,403,395,1,0,0,0,403,
        396,1,0,0,0,403,397,1,0,0,0,403,400,1,0,0,0,404,35,1,0,0,0,405,412,
        5,21,0,0,406,411,3,38,19,0,407,411,3,40,20,0,408,411,3,42,21,0,409,
        411,3,44,22,0,410,406,1,0,0,0,410,407,1,0,0,0,410,408,1,0,0,0,410,
        409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,0,413,
        37,1,0,0,0,414,412,1,0,0,0,415,416,5,22,0,0,416,417,3,6,3,0,417,
        39,1,0,0,0,418,419,5,68,0,0,419,420,3,6,3,0,420,41,1,0,0,0,421,422,
        5,23,0,0,422,423,3,6,3,0,423,43,1,0,0,0,424,425,5,30,0,0,425,426,
        5,74,0,0,426,427,3,6,3,0,427,45,1,0,0,0,428,429,5,25,0,0,429,430,
        5,69,0,0,430,433,5,12,0,0,431,434,3,234,117,0,432,434,5,24,0,0,433,
        431,1,0,0,0,433,432,1,0,0,0,434,47,1,0,0,0,435,438,5,1,0,0,436,437,
        5,2,0,0,437,439,5,3,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,440,
        1,0,0,0,440,441,5,48,0,0,441,443,5,12,0,0,442,444,3,172,86,0,443,
        442,1,0,0,0,443,444,1,0,0,0,444,450,1,0,0,0,445,447,5,8,0,0,446,
        448,5,51,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,
        451,3,168,84,0,450,445,1,0,0,0,450,451,1,0,0,0,451,452,1,0,0,0,452,
        453,5,9,0,0,453,455,3,234,117,0,454,456,3,50,25,0,455,454,1,0,0,
        0,455,456,1,0,0,0,456,49,1,0,0,0,457,464,3,4,2,0,458,464,3,14,7,
        0,459,464,3,16,8,0,460,464,3,8,4,0,461,464,3,12,6,0,462,464,3,10,
        5,0,463,457,1,0,0,0,463,458,1,0,0,0,463,459,1,0,0,0,463,460,1,0,
        0,0,463,461,1,0,0,0,463,462,1,0,0,0,464,465,1,0,0,0,465,463,1,0,
        0,0,465,466,1,0,0,0,466,51,1,0,0,0,467,470,5,1,0,0,468,469,5,2,0,
        0,469,471,5,3,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,
        0,472,474,5,48,0,0,473,475,5,13,0,0,474,473,1,0,0,0,474,475,1,0,
        0,0,475,477,1,0,0,0,476,478,5,52,0,0,477,476,1,0,0,0,477,478,1,0,
        0,0,478,480,1,0,0,0,479,481,5,53,0,0,480,479,1,0,0,0,480,481,1,0,
        0,0,481,482,1,0,0,0,482,483,5,14,0,0,483,486,3,176,88,0,484,485,
        5,8,0,0,485,487,3,20,10,0,486,484,1,0,0,0,486,487,1,0,0,0,487,488,
        1,0,0,0,488,489,5,19,0,0,489,492,3,248,124,0,490,491,5,90,0,0,491,
        493,3,180,90,0,492,490,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,
        496,3,218,109,0,495,494,1,0,0,0,495,496,1,0,0,0,496,498,1,0,0,0,
        497,499,3,216,108,0,498,497,1,0,0,0,498,499,1,0,0,0,499,501,1,0,
        0,0,500,502,3,54,27,0,501,500,1,0,0,0,501,502,1,0,0,0,502,53,1,0,
        0,0,503,513,3,4,2,0,504,513,3,14,7,0,505,513,3,16,8,0,506,513,3,
        8,4,0,507,513,3,12,6,0,508,513,3,10,5,0,509,513,3,56,28,0,510,513,
        3,58,29,0,511,513,3,60,30,0,512,503,1,0,0,0,512,504,1,0,0,0,512,
        505,1,0,0,0,512,506,1,0,0,0,512,507,1,0,0,0,512,508,1,0,0,0,512,
        509,1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,514,1,0,0,0,514,
        512,1,0,0,0,514,515,1,0,0,0,515,55,1,0,0,0,516,517,5,75,0,0,517,
        520,5,32,0,0,518,521,3,206,103,0,519,521,5,76,0,0,520,518,1,0,0,
        0,520,519,1,0,0,0,521,57,1,0,0,0,522,523,5,33,0,0,523,524,7,2,0,
        0,524,59,1,0,0,0,525,526,5,21,0,0,526,527,5,15,0,0,527,528,3,248,
        124,0,528,61,1,0,0,0,529,532,5,1,0,0,530,531,5,2,0,0,531,533,5,3,
        0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,48,
        0,0,535,536,5,15,0,0,536,539,3,184,92,0,537,538,5,8,0,0,538,540,
        3,20,10,0,539,537,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,
        5,19,0,0,542,548,3,248,124,0,543,545,5,56,0,0,544,546,3,180,90,0,
        545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,549,3,216,108,
        0,548,543,1,0,0,0,548,549,1,0,0,0,549,553,1,0,0,0,550,552,3,64,32,
        0,551,550,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,
        0,554,557,1,0,0,0,555,553,1,0,0,0,556,558,3,54,27,0,557,556,1,0,
        0,0,557,558,1,0,0,0,558,63,1,0,0,0,559,561,5,58,0,0,560,562,3,182,
        91,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,564,3,216,
        108,0,564,65,1,0,0,0,565,568,5,1,0,0,566,567,5,2,0,0,567,569,5,3,
        0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,5,48,
        0,0,571,572,5,16,0,0,572,575,3,186,93,0,573,574,5,8,0,0,574,576,
        3,20,10,0,575,573,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,578,
        5,19,0,0,578,584,3,248,124,0,579,581,5,56,0,0,580,582,3,180,90,0,
        581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,585,3,216,108,
        0,584,579,1,0,0,0,584,585,1,0,0,0,585,587,1,0,0,0,586,588,3,68,34,
        0,587,586,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,591,3,54,27,
        0,590,589,1,0,0,0,590,591,1,0,0,0,591,67,1,0,0,0,592,594,5,58,0,
        0,593,595,3,182,91,0,594,593,1,0,0,0,594,595,1,0,0,0,595,596,1,0,
        0,0,596,597,3,216,108,0,597,69,1,0,0,0,598,601,5,1,0,0,599,600,5,
        2,0,0,600,602,5,3,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,603,1,
        0,0,0,603,604,5,48,0,0,604,605,5,74,0,0,605,606,5,38,0,0,606,612,
        3,192,96,0,607,609,5,8,0,0,608,610,5,51,0,0,609,608,1,0,0,0,609,
        610,1,0,0,0,610,611,1,0,0,0,611,613,3,168,84,0,612,607,1,0,0,0,612,
        613,1,0,0,0,613,616,1,0,0,0,614,615,5,9,0,0,615,617,3,72,36,0,616,
        614,1,0,0,0,616,617,1,0,0,0,617,619,1,0,0,0,618,620,3,74,37,0,619,
        618,1,0,0,0,619,620,1,0,0,0,620,623,1,0,0,0,621,622,5,19,0,0,622,
        624,5,92,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,71,1,0,0,0,625,
        626,3,206,103,0,626,73,1,0,0,0,627,633,3,4,2,0,628,633,3,14,7,0,
        629,633,3,8,4,0,630,633,3,12,6,0,631,633,3,76,38,0,632,627,1,0,0,
        0,632,628,1,0,0,0,632,629,1,0,0,0,632,630,1,0,0,0,632,631,1,0,0,
        0,633,634,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,75,1,0,0,0,
        636,637,5,43,0,0,637,638,3,206,103,0,638,77,1,0,0,0,639,642,5,1,
        0,0,640,641,5,2,0,0,641,643,5,3,0,0,642,640,1,0,0,0,642,643,1,0,
        0,0,643,644,1,0,0,0,644,645,5,48,0,0,645,646,5,74,0,0,646,647,5,
        45,0,0,647,648,3,194,97,0,648,653,5,8,0,0,649,651,5,51,0,0,650,649,
        1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,3,168,84,0,653,650,
        1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,656,5,74,0,0,656,657,
        5,38,0,0,657,665,3,192,96,0,658,659,5,9,0,0,659,666,3,72,36,0,660,
        662,5,46,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,
        664,5,74,0,0,664,666,3,206,103,0,665,658,1,0,0,0,665,661,1,0,0,0,
        666,668,1,0,0,0,667,669,3,80,40,0,668,667,1,0,0,0,668,669,1,0,0,
        0,669,79,1,0,0,0,670,674,3,4,2,0,671,674,3,14,7,0,672,674,3,8,4,
        0,673,670,1,0,0,0,673,671,1,0,0,0,673,672,1,0,0,0,674,675,1,0,0,
        0,675,673,1,0,0,0,675,676,1,0,0,0,676,81,1,0,0,0,677,680,5,1,0,0,
        678,679,5,2,0,0,679,681,5,3,0,0,680,678,1,0,0,0,680,681,1,0,0,0,
        681,682,1,0,0,0,682,683,5,48,0,0,683,684,7,3,0,0,684,685,5,83,0,
        0,685,691,3,84,42,0,686,688,5,8,0,0,687,689,5,51,0,0,688,687,1,0,
        0,0,688,689,1,0,0,0,689,690,1,0,0,0,690,692,3,168,84,0,691,686,1,
        0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,697,5,84,0,0,694,698,5,
        85,0,0,695,698,5,86,0,0,696,698,3,86,43,0,697,694,1,0,0,0,697,695,
        1,0,0,0,697,696,1,0,0,0,698,700,1,0,0,0,699,701,3,88,44,0,700,699,
        1,0,0,0,700,701,1,0,0,0,701,83,1,0,0,0,702,703,3,206,103,0,703,85,
        1,0,0,0,704,705,3,206,103,0,705,87,1,0,0,0,706,711,3,4,2,0,707,711,
        3,12,6,0,708,711,3,90,45,0,709,711,3,92,46,0,710,706,1,0,0,0,710,
        707,1,0,0,0,710,708,1,0,0,0,710,709,1,0,0,0,711,712,1,0,0,0,712,
        710,1,0,0,0,712,713,1,0,0,0,713,89,1,0,0,0,714,715,5,88,0,0,715,
        716,5,7,0,0,716,719,5,87,0,0,717,718,5,42,0,0,718,720,5,89,0,0,719,
        717,1,0,0,0,719,720,1,0,0,0,720,91,1,0,0,0,721,722,5,24,0,0,722,
        723,5,41,0,0,723,724,3,206,103,0,724,93,1,0,0,0,725,728,5,1,0,0,
        726,727,5,2,0,0,727,729,5,3,0,0,728,726,1,0,0,0,728,729,1,0,0,0,
        729,730,1,0,0,0,730,731,5,48,0,0,731,732,5,25,0,0,732,733,3,96,48,
        0,733,734,5,146,0,0,734,740,3,84,42,0,735,737,5,8,0,0,736,738,5,
        51,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,739,1,0,0,0,739,741,3,
        168,84,0,740,735,1,0,0,0,740,741,1,0,0,0,741,742,1,0,0,0,742,743,
        5,39,0,0,743,744,5,40,0,0,744,745,3,98,49,0,745,95,1,0,0,0,746,747,
        3,206,103,0,747,97,1,0,0,0,748,749,3,206,103,0,749,99,1,0,0,0,750,
        751,5,44,0,0,751,752,5,48,0,0,752,753,5,51,0,0,753,754,3,168,84,
        0,754,755,5,7,0,0,755,756,5,67,0,0,756,757,5,22,0,0,757,758,3,170,
        85,0,758,101,1,0,0,0,759,760,5,4,0,0,760,761,5,48,0,0,761,762,5,
        51,0,0,762,767,3,168,84,0,763,764,5,7,0,0,764,765,5,67,0,0,765,766,
        5,22,0,0,766,768,3,170,85,0,767,763,1,0,0,0,767,768,1,0,0,0,768,
        770,1,0,0,0,769,771,3,30,15,0,770,769,1,0,0,0,770,771,1,0,0,0,771,
        103,1,0,0,0,772,773,5,4,0,0,773,774,5,48,0,0,774,776,5,12,0,0,775,
        777,3,172,86,0,776,775,1,0,0,0,776,777,1,0,0,0,777,783,1,0,0,0,778,
        780,5,8,0,0,779,781,5,51,0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,
        782,1,0,0,0,782,784,3,168,84,0,783,778,1,0,0,0,783,784,1,0,0,0,784,
        789,1,0,0,0,785,786,5,7,0,0,786,787,5,67,0,0,787,788,5,22,0,0,788,
        790,3,174,87,0,789,785,1,0,0,0,789,790,1,0,0,0,790,793,1,0,0,0,791,
        792,5,9,0,0,792,794,3,234,117,0,793,791,1,0,0,0,793,794,1,0,0,0,
        794,796,1,0,0,0,795,797,3,50,25,0,796,795,1,0,0,0,796,797,1,0,0,
        0,797,105,1,0,0,0,798,799,5,4,0,0,799,801,5,48,0,0,800,802,5,13,
        0,0,801,800,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,805,5,52,
        0,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,808,5,53,
        0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,5,14,
        0,0,810,813,3,176,88,0,811,812,5,8,0,0,812,814,3,20,10,0,813,811,
        1,0,0,0,813,814,1,0,0,0,814,819,1,0,0,0,815,816,5,7,0,0,816,817,
        5,67,0,0,817,818,5,22,0,0,818,820,3,178,89,0,819,815,1,0,0,0,819,
        820,1,0,0,0,820,829,1,0,0,0,821,822,5,90,0,0,822,824,3,180,90,0,
        823,825,3,218,109,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,
        0,0,826,828,3,216,108,0,827,826,1,0,0,0,827,828,1,0,0,0,828,830,
        1,0,0,0,829,821,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,833,
        3,54,27,0,832,831,1,0,0,0,832,833,1,0,0,0,833,107,1,0,0,0,834,835,
        5,4,0,0,835,836,5,48,0,0,836,837,5,15,0,0,837,840,3,184,92,0,838,
        839,5,8,0,0,839,841,3,20,10,0,840,838,1,0,0,0,840,841,1,0,0,0,841,
        846,1,0,0,0,842,843,5,7,0,0,843,844,5,67,0,0,844,845,5,22,0,0,845,
        847,3,188,94,0,846,842,1,0,0,0,846,847,1,0,0,0,847,853,1,0,0,0,848,
        850,5,56,0,0,849,851,3,180,90,0,850,849,1,0,0,0,850,851,1,0,0,0,
        851,852,1,0,0,0,852,854,3,216,108,0,853,848,1,0,0,0,853,854,1,0,
        0,0,854,858,1,0,0,0,855,857,3,64,32,0,856,855,1,0,0,0,857,860,1,
        0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,862,1,0,0,0,860,858,1,
        0,0,0,861,863,3,54,27,0,862,861,1,0,0,0,862,863,1,0,0,0,863,109,
        1,0,0,0,864,865,5,4,0,0,865,866,5,48,0,0,866,867,5,16,0,0,867,870,
        3,186,93,0,868,869,5,8,0,0,869,871,3,20,10,0,870,868,1,0,0,0,870,
        871,1,0,0,0,871,876,1,0,0,0,872,873,5,7,0,0,873,874,5,67,0,0,874,
        875,5,22,0,0,875,877,3,190,95,0,876,872,1,0,0,0,876,877,1,0,0,0,
        877,883,1,0,0,0,878,880,5,56,0,0,879,881,3,180,90,0,880,879,1,0,
        0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,884,3,216,108,0,883,878,
        1,0,0,0,883,884,1,0,0,0,884,888,1,0,0,0,885,887,3,68,34,0,886,885,
        1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,892,
        1,0,0,0,890,888,1,0,0,0,891,893,3,54,27,0,892,891,1,0,0,0,892,893,
        1,0,0,0,893,111,1,0,0,0,894,895,5,17,0,0,895,896,5,48,0,0,896,897,
        5,51,0,0,897,898,3,168,84,0,898,113,1,0,0,0,899,900,5,17,0,0,900,
        901,5,48,0,0,901,902,5,12,0,0,902,908,3,172,86,0,903,905,5,9,0,0,
        904,906,5,51,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,1,0,0,0,
        907,909,3,168,84,0,908,903,1,0,0,0,908,909,1,0,0,0,909,115,1,0,0,
        0,910,911,5,17,0,0,911,913,5,48,0,0,912,914,5,13,0,0,913,912,1,0,
        0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,917,5,52,0,0,916,915,1,0,
        0,0,916,917,1,0,0,0,917,919,1,0,0,0,918,920,5,53,0,0,919,918,1,0,
        0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,922,5,14,0,0,922,925,3,176,
        88,0,923,924,5,9,0,0,924,926,3,20,10,0,925,923,1,0,0,0,925,926,1,
        0,0,0,926,117,1,0,0,0,927,928,5,17,0,0,928,929,5,48,0,0,929,930,
        5,15,0,0,930,933,3,184,92,0,931,932,5,9,0,0,932,934,3,20,10,0,933,
        931,1,0,0,0,933,934,1,0,0,0,934,119,1,0,0,0,935,936,5,17,0,0,936,
        937,5,48,0,0,937,938,5,16,0,0,938,941,3,186,93,0,939,940,5,9,0,0,
        940,942,3,20,10,0,941,939,1,0,0,0,941,942,1,0,0,0,942,121,1,0,0,
        0,943,944,5,17,0,0,944,945,5,48,0,0,945,946,5,74,0,0,946,947,5,38,
        0,0,947,953,3,192,96,0,948,950,5,9,0,0,949,951,5,51,0,0,950,949,
        1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,954,3,168,84,0,953,948,
        1,0,0,0,953,954,1,0,0,0,954,123,1,0,0,0,955,956,5,17,0,0,956,957,
        5,48,0,0,957,958,5,74,0,0,958,959,5,45,0,0,959,960,3,194,97,0,960,
        965,5,9,0,0,961,963,5,51,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,
        964,1,0,0,0,964,966,3,168,84,0,965,962,1,0,0,0,965,966,1,0,0,0,966,
        967,1,0,0,0,967,968,5,74,0,0,968,969,5,38,0,0,969,970,3,192,96,0,
        970,125,1,0,0,0,971,972,5,17,0,0,972,973,5,48,0,0,973,974,7,3,0,
        0,974,975,5,83,0,0,975,981,3,84,42,0,976,978,5,9,0,0,977,979,5,51,
        0,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,980,982,3,168,
        84,0,981,976,1,0,0,0,981,982,1,0,0,0,982,127,1,0,0,0,983,984,5,17,
        0,0,984,985,5,48,0,0,985,986,5,25,0,0,986,987,3,96,48,0,987,988,
        5,146,0,0,988,994,3,84,42,0,989,991,5,8,0,0,990,992,5,51,0,0,991,
        990,1,0,0,0,991,992,1,0,0,0,992,993,1,0,0,0,993,995,3,168,84,0,994,
        989,1,0,0,0,994,995,1,0,0,0,995,129,1,0,0,0,996,997,5,18,0,0,997,
        998,5,48,0,0,998,999,3,132,66,0,999,131,1,0,0,0,1000,1001,5,51,0,
        0,1001,1004,3,168,84,0,1002,1004,3,20,10,0,1003,1000,1,0,0,0,1003,
        1002,1,0,0,0,1004,133,1,0,0,0,1005,1006,5,5,0,0,1006,1008,5,48,0,
        0,1007,1009,5,49,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,1009,1010,
        1,0,0,0,1010,1011,5,6,0,0,1011,135,1,0,0,0,1012,1013,5,5,0,0,1013,
        1014,5,48,0,0,1014,1015,5,50,0,0,1015,137,1,0,0,0,1016,1017,5,5,
        0,0,1017,1018,5,48,0,0,1018,1024,5,11,0,0,1019,1021,7,4,0,0,1020,
        1022,5,51,0,0,1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,
        0,0,1023,1025,3,168,84,0,1024,1019,1,0,0,0,1024,1025,1,0,0,0,1025,
        139,1,0,0,0,1026,1027,5,5,0,0,1027,1029,5,48,0,0,1028,1030,5,13,
        0,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1032,1,0,0,0,1031,1033,
        5,52,0,0,1032,1031,1,0,0,0,1032,1033,1,0,0,0,1033,1035,1,0,0,0,1034,
        1036,5,53,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,
        0,0,1037,1040,5,54,0,0,1038,1039,7,4,0,0,1039,1041,3,20,10,0,1040,
        1038,1,0,0,0,1040,1041,1,0,0,0,1041,141,1,0,0,0,1042,1043,5,5,0,
        0,1043,1044,5,48,0,0,1044,1047,5,55,0,0,1045,1046,7,4,0,0,1046,1048,
        3,20,10,0,1047,1045,1,0,0,0,1047,1048,1,0,0,0,1048,143,1,0,0,0,1049,
        1050,5,5,0,0,1050,1051,5,48,0,0,1051,1054,5,57,0,0,1052,1053,7,4,
        0,0,1053,1055,3,20,10,0,1054,1052,1,0,0,0,1054,1055,1,0,0,0,1055,
        145,1,0,0,0,1056,1057,5,5,0,0,1057,1058,5,48,0,0,1058,1059,5,74,
        0,0,1059,1065,5,79,0,0,1060,1062,7,4,0,0,1061,1063,5,51,0,0,1062,
        1061,1,0,0,0,1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1066,3,168,
        84,0,1065,1060,1,0,0,0,1065,1066,1,0,0,0,1066,147,1,0,0,0,1067,1068,
        5,5,0,0,1068,1069,5,48,0,0,1069,1070,5,74,0,0,1070,1071,5,80,0,0,
        1071,1076,7,4,0,0,1072,1074,5,51,0,0,1073,1072,1,0,0,0,1073,1074,
        1,0,0,0,1074,1075,1,0,0,0,1075,1077,3,168,84,0,1076,1073,1,0,0,0,
        1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1079,5,74,0,0,1079,1080,
        5,38,0,0,1080,1081,3,192,96,0,1081,149,1,0,0,0,1082,1083,5,5,0,0,
        1083,1084,5,48,0,0,1084,1085,5,81,0,0,1085,1091,5,82,0,0,1086,1088,
        7,4,0,0,1087,1089,5,51,0,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,
        1090,1,0,0,0,1090,1092,3,168,84,0,1091,1086,1,0,0,0,1091,1092,1,
        0,0,0,1092,151,1,0,0,0,1093,1094,5,5,0,0,1094,1095,5,1,0,0,1095,
        1096,5,48,0,0,1096,1098,5,51,0,0,1097,1099,3,168,84,0,1098,1097,
        1,0,0,0,1098,1099,1,0,0,0,1099,153,1,0,0,0,1100,1101,5,5,0,0,1101,
        1102,5,1,0,0,1102,1103,5,48,0,0,1103,1105,5,12,0,0,1104,1106,3,172,
        86,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1112,1,0,0,0,1107,
        1109,7,4,0,0,1108,1110,5,51,0,0,1109,1108,1,0,0,0,1109,1110,1,0,
        0,0,1110,1111,1,0,0,0,1111,1113,3,168,84,0,1112,1107,1,0,0,0,1112,
        1113,1,0,0,0,1113,155,1,0,0,0,1114,1115,5,5,0,0,1115,1116,5,1,0,
        0,1116,1118,5,48,0,0,1117,1119,5,13,0,0,1118,1117,1,0,0,0,1118,1119,
        1,0,0,0,1119,1121,1,0,0,0,1120,1122,5,52,0,0,1121,1120,1,0,0,0,1121,
        1122,1,0,0,0,1122,1124,1,0,0,0,1123,1125,5,53,0,0,1124,1123,1,0,
        0,0,1124,1125,1,0,0,0,1125,1126,1,0,0,0,1126,1127,5,14,0,0,1127,
        1130,3,176,88,0,1128,1129,7,4,0,0,1129,1131,3,20,10,0,1130,1128,
        1,0,0,0,1130,1131,1,0,0,0,1131,157,1,0,0,0,1132,1133,5,5,0,0,1133,
        1134,5,1,0,0,1134,1135,5,48,0,0,1135,1136,5,15,0,0,1136,1139,3,184,
        92,0,1137,1138,7,4,0,0,1138,1140,3,20,10,0,1139,1137,1,0,0,0,1139,
        1140,1,0,0,0,1140,159,1,0,0,0,1141,1142,5,5,0,0,1142,1143,5,1,0,
        0,1143,1144,5,48,0,0,1144,1145,5,16,0,0,1145,1148,3,186,93,0,1146,
        1147,7,4,0,0,1147,1149,3,20,10,0,1148,1146,1,0,0,0,1148,1149,1,0,
        0,0,1149,161,1,0,0,0,1150,1151,5,5,0,0,1151,1152,5,1,0,0,1152,1153,
        5,48,0,0,1153,1154,5,74,0,0,1154,1155,5,38,0,0,1155,1161,3,192,96,
        0,1156,1158,7,4,0,0,1157,1159,5,51,0,0,1158,1157,1,0,0,0,1158,1159,
        1,0,0,0,1159,1160,1,0,0,0,1160,1162,3,168,84,0,1161,1156,1,0,0,0,
        1161,1162,1,0,0,0,1162,163,1,0,0,0,1163,1164,5,5,0,0,1164,1165,5,
        1,0,0,1165,1166,5,48,0,0,1166,1167,5,74,0,0,1167,1168,5,45,0,0,1168,
        1169,3,194,97,0,1169,1174,7,4,0,0,1170,1172,5,51,0,0,1171,1170,1,
        0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,1175,3,168,84,0,1174,
        1171,1,0,0,0,1174,1175,1,0,0,0,1175,1176,1,0,0,0,1176,1177,5,74,
        0,0,1177,1178,5,38,0,0,1178,1179,3,192,96,0,1179,165,1,0,0,0,1180,
        1181,5,5,0,0,1181,1182,5,1,0,0,1182,1183,5,48,0,0,1183,1184,5,81,
        0,0,1184,1185,5,83,0,0,1185,1191,3,84,42,0,1186,1188,7,4,0,0,1187,
        1189,5,51,0,0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,
        0,0,1190,1192,3,168,84,0,1191,1186,1,0,0,0,1191,1192,1,0,0,0,1192,
        167,1,0,0,0,1193,1195,3,198,99,0,1194,1193,1,0,0,0,1194,1195,1,0,
        0,0,1195,1197,1,0,0,0,1196,1198,3,202,101,0,1197,1196,1,0,0,0,1197,
        1198,1,0,0,0,1198,1199,1,0,0,0,1199,1200,3,204,102,0,1200,169,1,
        0,0,0,1201,1203,3,198,99,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,
        1205,1,0,0,0,1204,1206,3,202,101,0,1205,1204,1,0,0,0,1205,1206,1,
        0,0,0,1206,1207,1,0,0,0,1207,1208,3,204,102,0,1208,171,1,0,0,0,1209,
        1210,3,204,102,0,1210,173,1,0,0,0,1211,1212,3,204,102,0,1212,175,
        1,0,0,0,1213,1214,3,204,102,0,1214,177,1,0,0,0,1215,1216,3,204,102,
        0,1216,179,1,0,0,0,1217,1218,3,242,121,0,1218,181,1,0,0,0,1219,1220,
        3,242,121,0,1220,183,1,0,0,0,1221,1222,3,204,102,0,1222,185,1,0,
        0,0,1223,1224,3,204,102,0,1224,187,1,0,0,0,1225,1226,3,204,102,0,
        1226,189,1,0,0,0,1227,1228,3,204,102,0,1228,191,1,0,0,0,1229,1230,
        3,204,102,0,1230,193,1,0,0,0,1231,1232,3,204,102,0,1232,195,1,0,
        0,0,1233,1236,3,242,121,0,1234,1236,3,206,103,0,1235,1233,1,0,0,
        0,1235,1234,1,0,0,0,1236,197,1,0,0,0,1237,1242,3,196,98,0,1238,1239,
        5,134,0,0,1239,1241,3,196,98,0,1240,1238,1,0,0,0,1241,1244,1,0,0,
        0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,1246,1,0,0,0,1244,1242,
        1,0,0,0,1245,1247,5,146,0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,
        1247,199,1,0,0,0,1248,1257,3,250,125,0,1249,1253,3,242,121,0,1250,
        1252,3,252,126,0,1251,1250,1,0,0,0,1252,1255,1,0,0,0,1253,1251,1,
        0,0,0,1253,1254,1,0,0,0,1254,1257,1,0,0,0,1255,1253,1,0,0,0,1256,
        1248,1,0,0,0,1256,1249,1,0,0,0,1257,201,1,0,0,0,1258,1261,3,200,
        100,0,1259,1261,5,147,0,0,1260,1258,1,0,0,0,1260,1259,1,0,0,0,1261,
        1264,1,0,0,0,1262,1263,5,136,0,0,1263,1265,5,153,0,0,1264,1262,1,
        0,0,0,1264,1265,1,0,0,0,1265,203,1,0,0,0,1266,1267,5,122,0,0,1267,
        1270,3,200,100,0,1268,1269,5,122,0,0,1269,1271,3,200,100,0,1270,
        1268,1,0,0,0,1270,1271,1,0,0,0,1271,1274,1,0,0,0,1272,1274,3,206,
        103,0,1273,1266,1,0,0,0,1273,1272,1,0,0,0,1274,205,1,0,0,0,1275,
        1276,7,5,0,0,1276,207,1,0,0,0,1277,1278,5,139,0,0,1278,1283,3,210,
        105,0,1279,1280,5,134,0,0,1280,1282,3,210,105,0,1281,1279,1,0,0,
        0,1282,1285,1,0,0,0,1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,1286,
        1,0,0,0,1285,1283,1,0,0,0,1286,1287,5,140,0,0,1287,1291,1,0,0,0,
        1288,1289,5,139,0,0,1289,1291,5,140,0,0,1290,1277,1,0,0,0,1290,1288,
        1,0,0,0,1291,209,1,0,0,0,1292,1293,5,161,0,0,1293,1294,5,136,0,0,
        1294,1295,3,214,107,0,1295,211,1,0,0,0,1296,1305,5,142,0,0,1297,
        1302,3,214,107,0,1298,1299,5,134,0,0,1299,1301,3,214,107,0,1300,
        1298,1,0,0,0,1301,1304,1,0,0,0,1302,1300,1,0,0,0,1302,1303,1,0,0,
        0,1303,1306,1,0,0,0,1304,1302,1,0,0,0,1305,1297,1,0,0,0,1305,1306,
        1,0,0,0,1306,1307,1,0,0,0,1307,1308,5,143,0,0,1308,213,1,0,0,0,1309,
        1321,5,161,0,0,1310,1312,7,6,0,0,1311,1310,1,0,0,0,1311,1312,1,0,
        0,0,1312,1313,1,0,0,0,1313,1321,5,155,0,0,1314,1321,5,153,0,0,1315,
        1321,3,208,104,0,1316,1321,3,212,106,0,1317,1321,5,36,0,0,1318,1321,
        5,37,0,0,1319,1321,5,35,0,0,1320,1309,1,0,0,0,1320,1311,1,0,0,0,
        1320,1314,1,0,0,0,1320,1315,1,0,0,0,1320,1316,1,0,0,0,1320,1317,
        1,0,0,0,1320,1318,1,0,0,0,1320,1319,1,0,0,0,1321,215,1,0,0,0,1322,
        1323,5,139,0,0,1323,1328,3,220,110,0,1324,1325,5,134,0,0,1325,1327,
        3,220,110,0,1326,1324,1,0,0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,
        0,1328,1329,1,0,0,0,1329,1331,1,0,0,0,1330,1328,1,0,0,0,1331,1332,
        5,140,0,0,1332,1336,1,0,0,0,1333,1334,5,139,0,0,1334,1336,5,140,
        0,0,1335,1322,1,0,0,0,1335,1333,1,0,0,0,1336,217,1,0,0,0,1337,1339,
        7,7,0,0,1338,1337,1,0,0,0,1339,1340,1,0,0,0,1340,1338,1,0,0,0,1340,
        1341,1,0,0,0,1341,219,1,0,0,0,1342,1343,3,224,112,0,1343,1344,5,
        136,0,0,1344,1359,3,226,113,0,1345,1360,5,94,0,0,1346,1360,5,95,
        0,0,1347,1360,5,93,0,0,1348,1360,5,97,0,0,1349,1360,5,99,0,0,1350,
        1360,5,100,0,0,1351,1360,5,101,0,0,1352,1360,5,102,0,0,1353,1354,
        5,103,0,0,1354,1355,5,137,0,0,1355,1356,3,230,115,0,1356,1357,5,
        138,0,0,1357,1360,1,0,0,0,1358,1360,3,218,109,0,1359,1345,1,0,0,
        0,1359,1346,1,0,0,0,1359,1347,1,0,0,0,1359,1348,1,0,0,0,1359,1349,
        1,0,0,0,1359,1350,1,0,0,0,1359,1351,1,0,0,0,1359,1352,1,0,0,0,1359,
        1353,1,0,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,
        0,1361,1363,3,216,108,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,
        221,1,0,0,0,1364,1365,7,8,0,0,1365,223,1,0,0,0,1366,1370,5,161,0,
        0,1367,1370,3,242,121,0,1368,1370,3,222,111,0,1369,1366,1,0,0,0,
        1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,225,1,0,0,0,1371,1374,3,
        248,124,0,1372,1374,3,222,111,0,1373,1371,1,0,0,0,1373,1372,1,0,
        0,0,1374,227,1,0,0,0,1375,1378,5,161,0,0,1376,1378,3,242,121,0,1377,
        1375,1,0,0,0,1377,1376,1,0,0,0,1378,229,1,0,0,0,1379,1382,5,161,
        0,0,1380,1382,3,242,121,0,1381,1379,1,0,0,0,1381,1380,1,0,0,0,1382,
        231,1,0,0,0,1383,1386,3,248,124,0,1384,1386,3,216,108,0,1385,1383,
        1,0,0,0,1385,1384,1,0,0,0,1386,233,1,0,0,0,1387,1388,3,242,121,0,
        1388,235,1,0,0,0,1389,1390,3,242,121,0,1390,237,1,0,0,0,1391,1392,
        3,242,121,0,1392,239,1,0,0,0,1393,1394,7,9,0,0,1394,241,1,0,0,0,
        1395,1396,3,240,120,0,1396,243,1,0,0,0,1397,1402,3,242,121,0,1398,
        1399,5,134,0,0,1399,1401,3,242,121,0,1400,1398,1,0,0,0,1401,1404,
        1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,0,1403,245,1,0,0,0,1404,
        1402,1,0,0,0,1405,1406,5,137,0,0,1406,1407,3,244,122,0,1407,1408,
        5,138,0,0,1408,247,1,0,0,0,1409,1411,3,242,121,0,1410,1412,3,252,
        126,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,249,1,0,0,0,1413,
        1418,3,242,121,0,1414,1416,3,252,126,0,1415,1417,3,252,126,0,1416,
        1415,1,0,0,0,1416,1417,1,0,0,0,1417,1419,1,0,0,0,1418,1414,1,0,0,
        0,1418,1419,1,0,0,0,1419,251,1,0,0,0,1420,1421,5,133,0,0,1421,1422,
        3,242,121,0,1422,253,1,0,0,0,190,258,263,266,269,316,322,335,348,
        357,362,364,369,374,380,388,390,403,410,412,433,438,443,447,450,
        455,463,465,470,474,477,480,486,492,495,498,501,512,514,520,532,
        539,545,548,553,557,561,568,575,581,584,587,590,594,601,609,612,
        616,619,623,632,634,642,650,653,661,665,668,673,675,680,688,691,
        697,700,710,712,719,728,737,740,767,770,776,780,783,789,793,796,
        801,804,807,813,819,824,827,829,832,840,846,850,853,858,862,870,
        876,880,883,888,892,905,908,913,916,919,925,933,941,950,953,962,
        965,978,981,991,994,1003,1008,1021,1024,1029,1032,1035,1040,1047,
        1054,1062,1065,1073,1076,1088,1091,1098,1105,1109,1112,1118,1121,
        1124,1130,1139,1148,1158,1161,1171,1174,1188,1191,1194,1197,1202,
        1205,1235,1242,1246,1253,1256,1260,1264,1270,1273,1283,1290,1302,
        1305,1311,1320,1328,1335,1340,1359,1362,1369,1373,1377,1381,1385,
        1402,1411,1416,1418
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "':='", 
                     "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", 
                     "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'['", 
                     "']'", "'->'", "'->>'", "'@'", "<INVALID>", "'@@'", 
                     "'\\N'", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", 
                      "SET_SYMBOL", "IDENTIFIED_SYMBOL", "BY_SYMBOL", "ROLE_SYMBOL", 
                      "TO_SYMBOL", "IGNORE_SYMBOL", "CLONE_SYMBOL", "FILE_SYMBOL", 
                      "BINARY_SYMBOL", "CONFIGURE_SYMBOL", "REST_SYMBOL", 
                      "METADATA_SYMBOL", "SERVICES_SYMBOL", "SERVICE_SYMBOL", 
                      "RELATIONAL_SYMBOL", "DUALITY_SYMBOL", "VIEWS_SYMBOL", 
                      "PROCEDURES_SYMBOL", "PARAMETERS_SYMBOL", "FUNCTIONS_SYMBOL", 
                      "RESULT_SYMBOL", "ENABLED_SYMBOL", "PUBLISHED_SYMBOL", 
                      "DISABLED_SYMBOL", "UNPUBLISHED_SYMBOL", "PROTOCOL_SYMBOL", 
                      "HTTP_SYMBOL", "HTTPS_SYMBOL", "COMMENTS_SYMBOL", 
                      "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", "MANAGEMENT_SYMBOL", 
                      "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", "ITEMS_SYMBOL", 
                      "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", "AUTODETECT_SYMBOL", 
                      "FEED_SYMBOL", "ITEM_SYMBOL", "SETS_SYMBOL", "FILES_SYMBOL", 
                      "AUTH_SYMBOL", "APPS_SYMBOL", "APP_SYMBOL", "VENDOR_SYMBOL", 
                      "MRS_SYMBOL", "MYSQL_SYMBOL", "USERS_SYMBOL", "ALLOW_SYMBOL", 
                      "REGISTER_SYMBOL", "CLASS_SYMBOL", "DEVELOPMENT_SYMBOL", 
                      "SCRIPTS_SYMBOL", "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", 
                      "AT_OUT_SYMBOL", "AT_CHECK_SYMBOL", "AT_NOCHECK_SYMBOL", 
                      "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", 
                      "AT_ROWOWNERSHIP_SYMBOL", "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", 
                      "AT_SELECT_SYMBOL", "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", 
                      "AT_NOINSERT_SYMBOL", "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", 
                      "AT_NODELETE_SYMBOL", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
                      "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_metadata = 5
    RULE_comments = 6
    RULE_authenticationRequired = 7
    RULE_itemsPerPage = 8
    RULE_itemsPerPageNumber = 9
    RULE_serviceSchemaSelector = 10
    RULE_configureRestMetadataStatement = 11
    RULE_restMetadataOptions = 12
    RULE_updateIfAvailable = 13
    RULE_createRestServiceStatement = 14
    RULE_restServiceOptions = 15
    RULE_publishedUnpublished = 16
    RULE_restProtocol = 17
    RULE_restAuthentication = 18
    RULE_authPath = 19
    RULE_authRedirection = 20
    RULE_authValidation = 21
    RULE_authPageContent = 22
    RULE_userManagementSchema = 23
    RULE_createRestSchemaStatement = 24
    RULE_restSchemaOptions = 25
    RULE_createRestViewStatement = 26
    RULE_restObjectOptions = 27
    RULE_restViewMediaType = 28
    RULE_restViewFormat = 29
    RULE_restViewAuthenticationProcedure = 30
    RULE_createRestProcedureStatement = 31
    RULE_restProcedureResult = 32
    RULE_createRestFunctionStatement = 33
    RULE_restFunctionResult = 34
    RULE_createRestContentSetStatement = 35
    RULE_directoryFilePath = 36
    RULE_restContentSetOptions = 37
    RULE_fileIgnoreList = 38
    RULE_createRestContentFileStatement = 39
    RULE_restContentFileOptions = 40
    RULE_createRestAuthAppStatement = 41
    RULE_authAppName = 42
    RULE_vendorName = 43
    RULE_restAuthAppOptions = 44
    RULE_allowNewUsersToRegister = 45
    RULE_defaultRole = 46
    RULE_createRestUserStatement = 47
    RULE_userName = 48
    RULE_userPassword = 49
    RULE_cloneRestServiceStatement = 50
    RULE_alterRestServiceStatement = 51
    RULE_alterRestSchemaStatement = 52
    RULE_alterRestViewStatement = 53
    RULE_alterRestProcedureStatement = 54
    RULE_alterRestFunctionStatement = 55
    RULE_dropRestServiceStatement = 56
    RULE_dropRestSchemaStatement = 57
    RULE_dropRestDualityViewStatement = 58
    RULE_dropRestProcedureStatement = 59
    RULE_dropRestFunctionStatement = 60
    RULE_dropRestContentSetStatement = 61
    RULE_dropRestContentFileStatement = 62
    RULE_dropRestAuthAppStatement = 63
    RULE_dropRestUserStatement = 64
    RULE_useStatement = 65
    RULE_serviceAndSchemaRequestPaths = 66
    RULE_showRestMetadataStatusStatement = 67
    RULE_showRestServicesStatement = 68
    RULE_showRestSchemasStatement = 69
    RULE_showRestViewsStatement = 70
    RULE_showRestProceduresStatement = 71
    RULE_showRestFunctionsStatement = 72
    RULE_showRestContentSetsStatement = 73
    RULE_showRestContentFilesStatement = 74
    RULE_showRestAuthAppsStatement = 75
    RULE_showCreateRestServiceStatement = 76
    RULE_showCreateRestSchemaStatement = 77
    RULE_showCreateRestViewStatement = 78
    RULE_showCreateRestProcedureStatement = 79
    RULE_showCreateRestFunctionStatement = 80
    RULE_showCreateRestContentSetStatement = 81
    RULE_showCreateRestContentFileStatement = 82
    RULE_showCreateRestAuthAppStatement = 83
    RULE_serviceRequestPath = 84
    RULE_newServiceRequestPath = 85
    RULE_schemaRequestPath = 86
    RULE_newSchemaRequestPath = 87
    RULE_viewRequestPath = 88
    RULE_newViewRequestPath = 89
    RULE_restObjectName = 90
    RULE_restResultName = 91
    RULE_procedureRequestPath = 92
    RULE_functionRequestPath = 93
    RULE_newProcedureRequestPath = 94
    RULE_newFunctionRequestPath = 95
    RULE_contentSetRequestPath = 96
    RULE_contentFileRequestPath = 97
    RULE_serviceDeveloperIdentifier = 98
    RULE_serviceDevelopersIdentifier = 99
    RULE_dottedIdentifier = 100
    RULE_hostAndPortIdentifier = 101
    RULE_requestPathIdentifier = 102
    RULE_quotedText = 103
    RULE_jsonObj = 104
    RULE_jsonPair = 105
    RULE_jsonArr = 106
    RULE_jsonValue = 107
    RULE_graphQlObj = 108
    RULE_graphQlCrudOptions = 109
    RULE_graphQlPair = 110
    RULE_graphQlAllowedKeyword = 111
    RULE_graphQlPairKey = 112
    RULE_graphQlPairValue = 113
    RULE_graphQlReduceToValue = 114
    RULE_graphQlDatatypeValue = 115
    RULE_graphQlValue = 116
    RULE_schemaName = 117
    RULE_viewName = 118
    RULE_procedureName = 119
    RULE_pureIdentifier = 120
    RULE_identifier = 121
    RULE_identifierList = 122
    RULE_identifierListWithParentheses = 123
    RULE_qualifiedIdentifier = 124
    RULE_simpleIdentifier = 125
    RULE_dotIdentifier = 126

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "metadata", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "publishedUnpublished", "restProtocol", "restAuthentication", 
                   "authPath", "authRedirection", "authValidation", "authPageContent", 
                   "userManagementSchema", "createRestSchemaStatement", 
                   "restSchemaOptions", "createRestViewStatement", "restObjectOptions", 
                   "restViewMediaType", "restViewFormat", "restViewAuthenticationProcedure", 
                   "createRestProcedureStatement", "restProcedureResult", 
                   "createRestFunctionStatement", "restFunctionResult", 
                   "createRestContentSetStatement", "directoryFilePath", 
                   "restContentSetOptions", "fileIgnoreList", "createRestContentFileStatement", 
                   "restContentFileOptions", "createRestAuthAppStatement", 
                   "authAppName", "vendorName", "restAuthAppOptions", "allowNewUsersToRegister", 
                   "defaultRole", "createRestUserStatement", "userName", 
                   "userPassword", "cloneRestServiceStatement", "alterRestServiceStatement", 
                   "alterRestSchemaStatement", "alterRestViewStatement", 
                   "alterRestProcedureStatement", "alterRestFunctionStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestDualityViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestContentFileStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "useStatement", "serviceAndSchemaRequestPaths", 
                   "showRestMetadataStatusStatement", "showRestServicesStatement", 
                   "showRestSchemasStatement", "showRestViewsStatement", 
                   "showRestProceduresStatement", "showRestFunctionsStatement", 
                   "showRestContentSetsStatement", "showRestContentFilesStatement", 
                   "showRestAuthAppsStatement", "showCreateRestServiceStatement", 
                   "showCreateRestSchemaStatement", "showCreateRestViewStatement", 
                   "showCreateRestProcedureStatement", "showCreateRestFunctionStatement", 
                   "showCreateRestContentSetStatement", "showCreateRestContentFileStatement", 
                   "showCreateRestAuthAppStatement", "serviceRequestPath", 
                   "newServiceRequestPath", "schemaRequestPath", "newSchemaRequestPath", 
                   "viewRequestPath", "newViewRequestPath", "restObjectName", 
                   "restResultName", "procedureRequestPath", "functionRequestPath", 
                   "newProcedureRequestPath", "newFunctionRequestPath", 
                   "contentSetRequestPath", "contentFileRequestPath", "serviceDeveloperIdentifier", 
                   "serviceDevelopersIdentifier", "dottedIdentifier", "hostAndPortIdentifier", 
                   "requestPathIdentifier", "quotedText", "jsonObj", "jsonPair", 
                   "jsonArr", "jsonValue", "graphQlObj", "graphQlCrudOptions", 
                   "graphQlPair", "graphQlAllowedKeyword", "graphQlPairKey", 
                   "graphQlPairValue", "graphQlReduceToValue", "graphQlDatatypeValue", 
                   "graphQlValue", "schemaName", "viewName", "procedureName", 
                   "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    UPDATE_SYMBOL=34
    NULL_SYMBOL=35
    TRUE_SYMBOL=36
    FALSE_SYMBOL=37
    SET_SYMBOL=38
    IDENTIFIED_SYMBOL=39
    BY_SYMBOL=40
    ROLE_SYMBOL=41
    TO_SYMBOL=42
    IGNORE_SYMBOL=43
    CLONE_SYMBOL=44
    FILE_SYMBOL=45
    BINARY_SYMBOL=46
    CONFIGURE_SYMBOL=47
    REST_SYMBOL=48
    METADATA_SYMBOL=49
    SERVICES_SYMBOL=50
    SERVICE_SYMBOL=51
    RELATIONAL_SYMBOL=52
    DUALITY_SYMBOL=53
    VIEWS_SYMBOL=54
    PROCEDURES_SYMBOL=55
    PARAMETERS_SYMBOL=56
    FUNCTIONS_SYMBOL=57
    RESULT_SYMBOL=58
    ENABLED_SYMBOL=59
    PUBLISHED_SYMBOL=60
    DISABLED_SYMBOL=61
    UNPUBLISHED_SYMBOL=62
    PROTOCOL_SYMBOL=63
    HTTP_SYMBOL=64
    HTTPS_SYMBOL=65
    COMMENTS_SYMBOL=66
    REQUEST_SYMBOL=67
    REDIRECTION_SYMBOL=68
    MANAGEMENT_SYMBOL=69
    AVAILABLE_SYMBOL=70
    REQUIRED_SYMBOL=71
    ITEMS_SYMBOL=72
    PER_SYMBOL=73
    CONTENT_SYMBOL=74
    MEDIA_SYMBOL=75
    AUTODETECT_SYMBOL=76
    FEED_SYMBOL=77
    ITEM_SYMBOL=78
    SETS_SYMBOL=79
    FILES_SYMBOL=80
    AUTH_SYMBOL=81
    APPS_SYMBOL=82
    APP_SYMBOL=83
    VENDOR_SYMBOL=84
    MRS_SYMBOL=85
    MYSQL_SYMBOL=86
    USERS_SYMBOL=87
    ALLOW_SYMBOL=88
    REGISTER_SYMBOL=89
    CLASS_SYMBOL=90
    DEVELOPMENT_SYMBOL=91
    SCRIPTS_SYMBOL=92
    AT_INOUT_SYMBOL=93
    AT_IN_SYMBOL=94
    AT_OUT_SYMBOL=95
    AT_CHECK_SYMBOL=96
    AT_NOCHECK_SYMBOL=97
    AT_NOUPDATE_SYMBOL=98
    AT_SORTABLE_SYMBOL=99
    AT_NOFILTERING_SYMBOL=100
    AT_ROWOWNERSHIP_SYMBOL=101
    AT_UNNEST_SYMBOL=102
    AT_DATATYPE_SYMBOL=103
    AT_SELECT_SYMBOL=104
    AT_NOSELECT_SYMBOL=105
    AT_INSERT_SYMBOL=106
    AT_NOINSERT_SYMBOL=107
    AT_UPDATE_SYMBOL=108
    AT_DELETE_SYMBOL=109
    AT_NODELETE_SYMBOL=110
    EQUAL_OPERATOR=111
    ASSIGN_OPERATOR=112
    NULL_SAFE_EQUAL_OPERATOR=113
    GREATER_OR_EQUAL_OPERATOR=114
    GREATER_THAN_OPERATOR=115
    LESS_OR_EQUAL_OPERATOR=116
    LESS_THAN_OPERATOR=117
    NOT_EQUAL_OPERATOR=118
    PLUS_OPERATOR=119
    MINUS_OPERATOR=120
    MULT_OPERATOR=121
    DIV_OPERATOR=122
    MOD_OPERATOR=123
    LOGICAL_NOT_OPERATOR=124
    BITWISE_NOT_OPERATOR=125
    SHIFT_LEFT_OPERATOR=126
    SHIFT_RIGHT_OPERATOR=127
    LOGICAL_AND_OPERATOR=128
    BITWISE_AND_OPERATOR=129
    BITWISE_XOR_OPERATOR=130
    LOGICAL_OR_OPERATOR=131
    BITWISE_OR_OPERATOR=132
    DOT_SYMBOL=133
    COMMA_SYMBOL=134
    SEMICOLON_SYMBOL=135
    COLON_SYMBOL=136
    OPEN_PAR_SYMBOL=137
    CLOSE_PAR_SYMBOL=138
    OPEN_CURLY_SYMBOL=139
    CLOSE_CURLY_SYMBOL=140
    UNDERLINE_SYMBOL=141
    OPEN_SQUARE_SYMBOL=142
    CLOSE_SQUARE_SYMBOL=143
    JSON_SEPARATOR_SYMBOL=144
    JSON_UNQUOTED_SEPARATOR_SYMBOL=145
    AT_SIGN_SYMBOL=146
    AT_TEXT_SUFFIX=147
    AT_AT_SIGN_SYMBOL=148
    NULL2_SYMBOL=149
    PARAM_MARKER=150
    HEX_NUMBER=151
    BIN_NUMBER=152
    INT_NUMBER=153
    DECIMAL_NUMBER=154
    FLOAT_NUMBER=155
    WHITESPACE=156
    INVALID_INPUT=157
    IDENTIFIER=158
    NCHAR_TEXT=159
    BACK_TICK_QUOTED_ID=160
    DOUBLE_QUOTED_TEXT=161
    SINGLE_QUOTED_TEXT=162
    BLOCK_COMMENT=163
    POUND_COMMENT=164
    DASHDASH_COMMENT=165
    WS=166
    NOT_EQUAL2_OPERATOR=167

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 158329674793010) != 0):
                self.state = 254
                self.mrsStatement()
                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 256 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 255
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 258 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==135):
                                break

                        self.state = 260
                        self.mrsStatement() 
                    self.state = 265
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 268
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 271
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentFileStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def cloneRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CloneRestServiceStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def alterRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestFunctionStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentFileStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestContentFilesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentFilesStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentSetStatementContext,0)


        def showCreateRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentFileStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 275
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 276
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 277
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 278
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 279
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 280
                self.createRestContentFileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 281
                self.createRestAuthAppStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 282
                self.createRestUserStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 283
                self.cloneRestServiceStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 284
                self.alterRestServiceStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 285
                self.alterRestSchemaStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 286
                self.alterRestViewStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 287
                self.alterRestProcedureStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 288
                self.alterRestFunctionStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 289
                self.dropRestServiceStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 290
                self.dropRestSchemaStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 291
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 292
                self.dropRestProcedureStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 293
                self.dropRestFunctionStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 294
                self.dropRestContentSetStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 295
                self.dropRestContentFileStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 296
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 297
                self.dropRestUserStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 298
                self.useStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 299
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 300
                self.showRestServicesStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 301
                self.showRestSchemasStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 302
                self.showRestViewsStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 303
                self.showRestProceduresStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 304
                self.showRestFunctionsStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 305
                self.showRestContentSetsStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 306
                self.showRestContentFilesStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 307
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 308
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 309
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 310
                self.showCreateRestViewStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 311
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 312
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 313
                self.showCreateRestContentSetStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 314
                self.showCreateRestContentFileStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 315
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            _la = self._input.LA(1)
            if not(_la==59 or _la==61):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 162]:
                self.state = 320
                self.quotedText()
                pass
            elif token in [24]:
                self.state = 321
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 325
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = MRSParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 328
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 331
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 334
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 337
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 340
            self.match(MRSParser.PER_SYMBOL)
            self.state = 341
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 342
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 346
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 347
                self.serviceRequestPath()


            self.state = 350
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 351
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 354
            self.match(MRSParser.REST_SYMBOL)
            self.state = 355
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2882303778764095488) != 0):
                self.state = 356
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 362
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59, 61]:
                    self.state = 359
                    self.enabledDisabled()
                    pass
                elif token in [26]:
                    self.state = 360
                    self.jsonOptions()
                    pass
                elif token in [34]:
                    self.state = 361
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2882303778764095488) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 367
                self.match(MRSParser.IF_SYMBOL)
                self.state = 368
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 372
                self.match(MRSParser.OR_SYMBOL)
                self.state = 373
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 376
            self.match(MRSParser.REST_SYMBOL)
            self.state = 377
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 378
            self.serviceRequestPath()
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 39307809128481) != 0):
                self.state = 379
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def publishedUnpublished(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.PublishedUnpublishedContext)
            else:
                return self.getTypedRuleContext(MRSParser.PublishedUnpublishedContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 388
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59, 61]:
                    self.state = 382
                    self.enabledDisabled()
                    pass
                elif token in [60, 62]:
                    self.state = 383
                    self.publishedUnpublished()
                    pass
                elif token in [21]:
                    self.state = 384
                    self.restAuthentication()
                    pass
                elif token in [26]:
                    self.state = 385
                    self.jsonOptions()
                    pass
                elif token in [66]:
                    self.state = 386
                    self.comments()
                    pass
                elif token in [49]:
                    self.state = 387
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 390 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 39307809128481) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublishedUnpublishedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_publishedUnpublished

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishedUnpublished" ):
                listener.enterPublishedUnpublished(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishedUnpublished" ):
                listener.exitPublishedUnpublished(self)




    def publishedUnpublished(self):

        localctx = MRSParser.PublishedUnpublishedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_publishedUnpublished)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            _la = self._input.LA(1)
            if not(_la==60 or _la==62):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 403
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 395
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 396
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 397
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 398
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 399
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 400
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 401
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 402
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & 70368744177923) != 0):
                self.state = 410
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 406
                    self.authPath()
                    pass
                elif token in [68]:
                    self.state = 407
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 408
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 409
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 416
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 419
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 422
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 425
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 426
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(MRSParser.USER_SYMBOL)
            self.state = 429
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 430
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158, 160]:
                self.state = 431
                self.schemaName()
                pass
            elif token in [24]:
                self.state = 432
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 436
                self.match(MRSParser.OR_SYMBOL)
                self.state = 437
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 440
            self.match(MRSParser.REST_SYMBOL)
            self.state = 441
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1649267441665) != 0):
                self.state = 442
                self.schemaRequestPath()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 445
                self.match(MRSParser.ON_SYMBOL)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 446
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 449
                self.serviceRequestPath()


            self.state = 452
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 453
            self.schemaName()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 2288358843744289) != 0):
                self.state = 454
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 463
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59, 61]:
                    self.state = 457
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 458
                    self.authenticationRequired()
                    pass
                elif token in [72]:
                    self.state = 459
                    self.itemsPerPage()
                    pass
                elif token in [26]:
                    self.state = 460
                    self.jsonOptions()
                    pass
                elif token in [66]:
                    self.state = 461
                    self.comments()
                    pass
                elif token in [49]:
                    self.state = 462
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 465 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 2288358843744289) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 468
                self.match(MRSParser.OR_SYMBOL)
                self.state = 469
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 472
            self.match(MRSParser.REST_SYMBOL)
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 473
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 476
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 479
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 482
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 483
            self.viewRequestPath()
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 484
                self.match(MRSParser.ON_SYMBOL)
                self.state = 485
                self.serviceSchemaSelector()


            self.state = 488
            self.match(MRSParser.AS_SYMBOL)
            self.state = 489
            self.qualifiedIdentifier()
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 490
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 491
                self.restObjectName()


            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 31751) != 0):
                self.state = 494
                self.graphQlCrudOptions()


            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 497
                self.graphQlObj()


            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0):
                self.state = 500
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 503
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 504
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 505
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 506
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 507
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 508
                    self.metadata()
                    pass

                elif la_ == 7:
                    self.state = 509
                    self.restViewMediaType()
                    pass

                elif la_ == 8:
                    self.state = 510
                    self.restViewFormat()
                    pass

                elif la_ == 9:
                    self.state = 511
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 514 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 517
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 162]:
                self.state = 518
                self.quotedText()
                pass
            elif token in [76]:
                self.state = 519
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 523
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 526
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 527
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 530
                self.match(MRSParser.OR_SYMBOL)
                self.state = 531
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 534
            self.match(MRSParser.REST_SYMBOL)
            self.state = 535
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 536
            self.procedureRequestPath()
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 537
                self.match(MRSParser.ON_SYMBOL)
                self.state = 538
                self.serviceSchemaSelector()


            self.state = 541
            self.match(MRSParser.AS_SYMBOL)
            self.state = 542
            self.qualifiedIdentifier()
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 543
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158 or _la==160:
                    self.state = 544
                    self.restObjectName()


                self.state = 547
                self.graphQlObj()


            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 550
                self.restProcedureResult()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0):
                self.state = 556
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_restProcedureResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158 or _la==160:
                self.state = 560
                self.restResultName()


            self.state = 563
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 566
                self.match(MRSParser.OR_SYMBOL)
                self.state = 567
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 570
            self.match(MRSParser.REST_SYMBOL)
            self.state = 571
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 572
            self.functionRequestPath()
            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 573
                self.match(MRSParser.ON_SYMBOL)
                self.state = 574
                self.serviceSchemaSelector()


            self.state = 577
            self.match(MRSParser.AS_SYMBOL)
            self.state = 578
            self.qualifiedIdentifier()
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 579
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158 or _la==160:
                    self.state = 580
                    self.restObjectName()


                self.state = 583
                self.graphQlObj()


            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 586
                self.restFunctionResult()


            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0):
                self.state = 589
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_restFunctionResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158 or _la==160:
                self.state = 593
                self.restResultName()


            self.state = 596
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 599
                self.match(MRSParser.OR_SYMBOL)
                self.state = 600
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 603
            self.match(MRSParser.REST_SYMBOL)
            self.state = 604
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 605
            self.match(MRSParser.SET_SYMBOL)
            self.state = 606
            self.contentSetRequestPath()
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 607
                self.match(MRSParser.ON_SYMBOL)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 608
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 611
                self.serviceRequestPath()


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 614
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 615
                self.directoryFilePath()


            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 36558765817889) != 0):
                self.state = 618
                self.restContentSetOptions()


            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 621
                self.match(MRSParser.AS_SYMBOL)
                self.state = 622
                self.match(MRSParser.SCRIPTS_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def fileIgnoreList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.FileIgnoreListContext)
            else:
                return self.getTypedRuleContext(MRSParser.FileIgnoreListContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 632
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59, 61]:
                    self.state = 627
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 628
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 629
                    self.jsonOptions()
                    pass
                elif token in [66]:
                    self.state = 630
                    self.comments()
                    pass
                elif token in [43]:
                    self.state = 631
                    self.fileIgnoreList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 634 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 36558765817889) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIgnoreListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_fileIgnoreList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIgnoreList" ):
                listener.enterFileIgnoreList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIgnoreList" ):
                listener.exitFileIgnoreList(self)




    def fileIgnoreList(self):

        localctx = MRSParser.FileIgnoreListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fileIgnoreList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(MRSParser.IGNORE_SYMBOL)
            self.state = 637
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restContentFileOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentFileOptionsContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentFileStatement" ):
                listener.enterCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentFileStatement" ):
                listener.exitCreateRestContentFileStatement(self)




    def createRestContentFileStatement(self):

        localctx = MRSParser.CreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_createRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 640
                self.match(MRSParser.OR_SYMBOL)
                self.state = 641
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 644
            self.match(MRSParser.REST_SYMBOL)
            self.state = 645
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 646
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 647
            self.contentFileRequestPath()
            self.state = 648
            self.match(MRSParser.ON_SYMBOL)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51 or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1992898379777) != 0):
                self.state = 650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 649
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 652
                self.serviceRequestPath()


            self.state = 655
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 656
            self.match(MRSParser.SET_SYMBOL)
            self.state = 657
            self.contentSetRequestPath()
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 658
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 659
                self.directoryFilePath()
                pass
            elif token in [46, 74]:
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 660
                    self.match(MRSParser.BINARY_SYMBOL)


                self.state = 663
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 664
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2882303761586323456) != 0):
                self.state = 667
                self.restContentFileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentFileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentFileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentFileOptions" ):
                listener.enterRestContentFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentFileOptions" ):
                listener.exitRestContentFileOptions(self)




    def restContentFileOptions(self):

        localctx = MRSParser.RestContentFileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_restContentFileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 673
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59, 61]:
                    self.state = 670
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 671
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 672
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 675 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2882303761586323456) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 678
                self.match(MRSParser.OR_SYMBOL)
                self.state = 679
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 682
            self.match(MRSParser.REST_SYMBOL)
            self.state = 683
            _la = self._input.LA(1)
            if not(_la==21 or _la==81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 684
            self.match(MRSParser.APP_SYMBOL)
            self.state = 685
            self.authAppName()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 686
                self.match(MRSParser.ON_SYMBOL)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 687
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 690
                self.serviceRequestPath()


            self.state = 693
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.state = 694
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [86]:
                self.state = 695
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [161, 162]:
                self.state = 696
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2882303761533894656) != 0) or _la==66 or _la==88:
                self.state = 699
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59, 61]:
                    self.state = 706
                    self.enabledDisabled()
                    pass
                elif token in [66]:
                    self.state = 707
                    self.comments()
                    pass
                elif token in [88]:
                    self.state = 708
                    self.allowNewUsersToRegister()
                    pass
                elif token in [24]:
                    self.state = 709
                    self.defaultRole()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 712 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2882303761533894656) != 0) or _la==66 or _la==88):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 715
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 716
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 717
                self.match(MRSParser.TO_SYMBOL)
                self.state = 718
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 722
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 723
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 726
                self.match(MRSParser.OR_SYMBOL)
                self.state = 727
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 730
            self.match(MRSParser.REST_SYMBOL)
            self.state = 731
            self.match(MRSParser.USER_SYMBOL)
            self.state = 732
            self.userName()
            self.state = 733
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 734
            self.authAppName()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 735
                self.match(MRSParser.ON_SYMBOL)
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 736
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 739
                self.serviceRequestPath()


            self.state = 742
            self.match(MRSParser.IDENTIFIED_SYMBOL)
            self.state = 743
            self.match(MRSParser.BY_SYMBOL)
            self.state = 744
            self.userPassword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_cloneRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneRestServiceStatement" ):
                listener.enterCloneRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneRestServiceStatement" ):
                listener.exitCloneRestServiceStatement(self)




    def cloneRestServiceStatement(self):

        localctx = MRSParser.CloneRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cloneRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(MRSParser.CLONE_SYMBOL)
            self.state = 751
            self.match(MRSParser.REST_SYMBOL)
            self.state = 752
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 753
            self.serviceRequestPath()
            self.state = 754
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 755
            self.match(MRSParser.REQUEST_SYMBOL)
            self.state = 756
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 757
            self.newServiceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 760
            self.match(MRSParser.REST_SYMBOL)
            self.state = 761
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 762
            self.serviceRequestPath()
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 763
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 764
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 765
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 766
                self.newServiceRequestPath()


            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 39307809128481) != 0):
                self.state = 769
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 773
            self.match(MRSParser.REST_SYMBOL)
            self.state = 774
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1649267441665) != 0):
                self.state = 775
                self.schemaRequestPath()


            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 778
                self.match(MRSParser.ON_SYMBOL)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 779
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 782
                self.serviceRequestPath()


            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 785
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 786
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 787
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 788
                self.newSchemaRequestPath()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 791
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 792
                self.schemaName()


            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 2288358843744289) != 0):
                self.state = 795
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 799
            self.match(MRSParser.REST_SYMBOL)
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 800
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 803
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 806
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 809
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 810
            self.viewRequestPath()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 811
                self.match(MRSParser.ON_SYMBOL)
                self.state = 812
                self.serviceSchemaSelector()


            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 815
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 816
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 817
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 818
                self.newViewRequestPath()


            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 821
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 822
                self.restObjectName()
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 31751) != 0):
                    self.state = 823
                    self.graphQlCrudOptions()


                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==139:
                    self.state = 826
                    self.graphQlObj()




            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0):
                self.state = 831
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 835
            self.match(MRSParser.REST_SYMBOL)
            self.state = 836
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 837
            self.procedureRequestPath()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 838
                self.match(MRSParser.ON_SYMBOL)
                self.state = 839
                self.serviceSchemaSelector()


            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 842
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 843
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 844
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 845
                self.newProcedureRequestPath()


            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 848
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158 or _la==160:
                    self.state = 849
                    self.restObjectName()


                self.state = 852
                self.graphQlObj()


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 855
                self.restProcedureResult()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0):
                self.state = 861
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newFunctionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewFunctionRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestFunctionResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestFunctionStatement" ):
                listener.enterAlterRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestFunctionStatement" ):
                listener.exitAlterRestFunctionStatement(self)




    def alterRestFunctionStatement(self):

        localctx = MRSParser.AlterRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_alterRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 865
            self.match(MRSParser.REST_SYMBOL)
            self.state = 866
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 867
            self.functionRequestPath()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 868
                self.match(MRSParser.ON_SYMBOL)
                self.state = 869
                self.serviceSchemaSelector()


            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 872
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 873
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 874
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 875
                self.newFunctionRequestPath()


            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 878
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158 or _la==160:
                    self.state = 879
                    self.restObjectName()


                self.state = 882
                self.graphQlObj()


            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 885
                self.restFunctionResult()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 20302757353230369) != 0):
                self.state = 891
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 895
            self.match(MRSParser.REST_SYMBOL)
            self.state = 896
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 897
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 900
            self.match(MRSParser.REST_SYMBOL)
            self.state = 901
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 902
            self.schemaRequestPath()
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 903
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 904
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 907
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 911
            self.match(MRSParser.REST_SYMBOL)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 912
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 915
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 918
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 921
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 922
            self.viewRequestPath()
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 923
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 924
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 928
            self.match(MRSParser.REST_SYMBOL)
            self.state = 929
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 930
            self.procedureRequestPath()
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 931
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 932
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 936
            self.match(MRSParser.REST_SYMBOL)
            self.state = 937
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 938
            self.functionRequestPath()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 939
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 940
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 944
            self.match(MRSParser.REST_SYMBOL)
            self.state = 945
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 946
            self.match(MRSParser.SET_SYMBOL)
            self.state = 947
            self.contentSetRequestPath()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 948
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 949
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 952
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentFileStatement" ):
                listener.enterDropRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentFileStatement" ):
                listener.exitDropRestContentFileStatement(self)




    def dropRestContentFileStatement(self):

        localctx = MRSParser.DropRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_dropRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 956
            self.match(MRSParser.REST_SYMBOL)
            self.state = 957
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 958
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 959
            self.contentFileRequestPath()
            self.state = 960
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51 or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1992898379777) != 0):
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 961
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 964
                self.serviceRequestPath()


            self.state = 967
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 968
            self.match(MRSParser.SET_SYMBOL)
            self.state = 969
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 972
            self.match(MRSParser.REST_SYMBOL)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==21 or _la==81):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 974
            self.match(MRSParser.APP_SYMBOL)
            self.state = 975
            self.authAppName()
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 976
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 977
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 980
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_dropRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 984
            self.match(MRSParser.REST_SYMBOL)
            self.state = 985
            self.match(MRSParser.USER_SYMBOL)
            self.state = 986
            self.userName()
            self.state = 987
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 988
            self.authAppName()
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 989
                self.match(MRSParser.ON_SYMBOL)
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 990
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 993
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(MRSParser.USE_SYMBOL)
            self.state = 997
            self.match(MRSParser.REST_SYMBOL)
            self.state = 998
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1000
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 1001
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1006
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1007
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 1010
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1013
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1014
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1017
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1018
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1019
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1020
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1023
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1027
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1028
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1031
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1034
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 1037
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1038
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1039
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1043
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1044
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1045
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1046
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1050
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1051
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1052
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1053
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1057
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1058
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1059
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1060
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1061
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1064
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentFilesStatement" ):
                listener.enterShowRestContentFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentFilesStatement" ):
                listener.exitShowRestContentFilesStatement(self)




    def showRestContentFilesStatement(self):

        localctx = MRSParser.ShowRestContentFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_showRestContentFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1068
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1069
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1070
            self.match(MRSParser.FILES_SYMBOL)
            self.state = 1071
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51 or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1992898379777) != 0):
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1072
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1075
                self.serviceRequestPath()


            self.state = 1078
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1079
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1080
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1083
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1084
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1085
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1086
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1087
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1090
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1094
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1095
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1096
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1992898379777) != 0):
                self.state = 1097
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1101
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1102
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1103
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1649267441665) != 0):
                self.state = 1104
                self.schemaRequestPath()


            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1107
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1108
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1111
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1115
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1116
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1117
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1120
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1123
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 1126
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1127
            self.viewRequestPath()
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1128
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1129
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1133
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1134
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1135
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1136
            self.procedureRequestPath()
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1138
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1142
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1143
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1144
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1145
            self.functionRequestPath()
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1146
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1147
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentSetStatement" ):
                listener.enterShowCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentSetStatement" ):
                listener.exitShowCreateRestContentSetStatement(self)




    def showCreateRestContentSetStatement(self):

        localctx = MRSParser.ShowCreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_showCreateRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1151
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1152
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1153
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1154
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1155
            self.contentSetRequestPath()
            self.state = 1161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1156
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1157
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1160
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentFileStatement" ):
                listener.enterShowCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentFileStatement" ):
                listener.exitShowCreateRestContentFileStatement(self)




    def showCreateRestContentFileStatement(self):

        localctx = MRSParser.ShowCreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_showCreateRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1164
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1165
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1166
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1167
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1168
            self.contentFileRequestPath()
            self.state = 1169
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51 or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & 1992898379777) != 0):
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1170
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1173
                self.serviceRequestPath()


            self.state = 1176
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1177
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1178
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_showCreateRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1181
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1182
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1183
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1184
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1185
            self.authAppName()
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1186
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 1187
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1190
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.state = 1193
                self.serviceDevelopersIdentifier()


            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 10241) != 0):
                self.state = 1196
                self.hostAndPortIdentifier()


            self.state = 1199
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1201
                self.serviceDevelopersIdentifier()


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & 10241) != 0):
                self.state = 1204
                self.hostAndPortIdentifier()


            self.state = 1207
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1209
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewFunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newFunctionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewFunctionRequestPath" ):
                listener.enterNewFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewFunctionRequestPath" ):
                listener.exitNewFunctionRequestPath(self)




    def newFunctionRequestPath(self):

        localctx = MRSParser.NewFunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_newFunctionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentFileRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentFileRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentFileRequestPath" ):
                listener.enterContentFileRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentFileRequestPath" ):
                listener.exitContentFileRequestPath(self)




    def contentFileRequestPath(self):

        localctx = MRSParser.ContentFileRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_contentFileRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1231
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeveloperIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceDeveloperIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDeveloperIdentifier" ):
                listener.enterServiceDeveloperIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDeveloperIdentifier" ):
                listener.exitServiceDeveloperIdentifier(self)




    def serviceDeveloperIdentifier(self):

        localctx = MRSParser.ServiceDeveloperIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_serviceDeveloperIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158, 160]:
                self.state = 1233
                self.identifier()
                pass
            elif token in [161, 162]:
                self.state = 1234
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDevelopersIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceDeveloperIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ServiceDeveloperIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.ServiceDeveloperIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_serviceDevelopersIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDevelopersIdentifier" ):
                listener.enterServiceDevelopersIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDevelopersIdentifier" ):
                listener.exitServiceDevelopersIdentifier(self)




    def serviceDevelopersIdentifier(self):

        localctx = MRSParser.ServiceDevelopersIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_serviceDevelopersIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.serviceDeveloperIdentifier()
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==134:
                self.state = 1238
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1239
                self.serviceDeveloperIdentifier()
                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146:
                self.state = 1245
                self.match(MRSParser.AT_SIGN_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1248
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1249
                self.identifier()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==133:
                    self.state = 1250
                    self.dotIdentifier()
                    self.state = 1255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MRSParser.AT_TEXT_SUFFIX, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158, 160]:
                self.state = 1258
                self.dottedIdentifier()
                pass
            elif token in [147]:
                self.state = 1259
                self.match(MRSParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==136:
                self.state = 1262
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 1263
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [122]:
                self.state = 1266
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 1267
                self.dottedIdentifier()
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==122:
                    self.state = 1268
                    self.match(MRSParser.DIV_OPERATOR)
                    self.state = 1269
                    self.dottedIdentifier()


                pass
            elif token in [161, 162]:
                self.state = 1272
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            _la = self._input.LA(1)
            if not(_la==161 or _la==162):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1278
                self.jsonPair()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==134:
                    self.state = 1279
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1280
                    self.jsonPair()
                    self.state = 1285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1286
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1288
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1289
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1293
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1294
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0) or ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & 4483955294211) != 0):
                self.state = 1297
                self.jsonValue()
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==134:
                    self.state = 1298
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1299
                    self.jsonValue()
                    self.state = 1304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1307
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [119, 120, 155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119 or _la==120:
                    self.state = 1310
                    _la = self._input.LA(1)
                    if not(_la==119 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1313
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [153]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1314
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1315
                self.jsonObj()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1316
                self.jsonArr()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1317
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1318
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1319
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1322
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1323
                self.graphQlPair()
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==134:
                    self.state = 1324
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1325
                    self.graphQlPair()
                    self.state = 1330
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1331
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1333
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1334
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def AT_CHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_CHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_CHECK_SYMBOL, i)

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1337
                _la = self._input.LA(1)
                if not(((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 31751) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1340 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 31751) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.graphQlPairKey()
            self.state = 1343
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1344
            self.graphQlPairValue()
            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1345
                self.match(MRSParser.AT_IN_SYMBOL)

            elif la_ == 2:
                self.state = 1346
                self.match(MRSParser.AT_OUT_SYMBOL)

            elif la_ == 3:
                self.state = 1347
                self.match(MRSParser.AT_INOUT_SYMBOL)

            elif la_ == 4:
                self.state = 1348
                self.match(MRSParser.AT_NOCHECK_SYMBOL)

            elif la_ == 5:
                self.state = 1349
                self.match(MRSParser.AT_SORTABLE_SYMBOL)

            elif la_ == 6:
                self.state = 1350
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)

            elif la_ == 7:
                self.state = 1351
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)

            elif la_ == 8:
                self.state = 1352
                self.match(MRSParser.AT_UNNEST_SYMBOL)

            elif la_ == 9:
                self.state = 1353
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1354
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1355
                self.graphQlDatatypeValue()
                self.state = 1356
                self.match(MRSParser.CLOSE_PAR_SYMBOL)

            elif la_ == 10:
                self.state = 1358
                self.graphQlCrudOptions()


            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==139:
                self.state = 1361
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -5764746028107302912) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 115273151) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_graphQlPairKey)
        try:
            self.state = 1369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [158, 160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.identifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 89, 90]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1368
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_graphQlPairValue)
        try:
            self.state = 1373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158, 160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.qualifiedIdentifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 86, 87, 89, 90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1375
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [158, 160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1376
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1379
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [158, 160]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1380
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_graphQlValue)
        try:
            self.state = 1385
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [158, 160]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1383
                self.qualifiedIdentifier()
                pass
            elif token in [139]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1384
                self.graphQlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            _la = self._input.LA(1)
            if not(_la==158 or _la==160):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1397
            self.identifier()
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==134:
                self.state = 1398
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1399
                self.identifier()
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1406
            self.identifierList()
            self.state = 1407
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.identifier()
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1410
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.identifier()
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1414
                self.dotIdentifier()
                self.state = 1416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 1415
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1421
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





