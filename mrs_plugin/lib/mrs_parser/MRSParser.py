# Copyright (c) 2023, 2025, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,210,1933,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,1,0,1,0,4,0,335,8,0,11,0,12,0,336,1,0,5,0,340,
        8,0,10,0,12,0,343,9,0,3,0,345,8,0,1,0,3,0,348,8,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,409,8,1,1,2,1,2,1,3,1,3,1,4,1,
        4,3,4,417,8,4,1,5,3,5,420,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,3,8,433,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,
        1,11,3,11,446,8,11,1,11,1,11,1,11,1,12,1,12,3,12,453,8,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,13,3,13,462,8,13,1,13,3,13,465,8,13,1,14,
        1,14,1,14,1,14,3,14,471,8,14,1,15,1,15,1,15,4,15,476,8,15,11,15,
        12,15,477,1,16,1,16,1,16,3,16,483,8,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,3,17,496,8,17,3,17,498,8,17,1,17,1,
        17,3,17,502,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,4,
        18,513,8,18,11,18,12,18,514,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,5,21,527,8,21,10,21,12,21,530,9,21,1,22,1,22,1,22,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,26,3,26,550,8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,558,8,27,
        1,28,1,28,1,28,1,28,1,28,1,28,3,28,566,8,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,579,8,29,3,29,581,8,29,1,
        29,3,29,584,8,29,1,29,1,29,3,29,588,8,29,1,29,3,29,591,8,29,1,29,
        1,29,1,29,3,29,596,8,29,1,30,1,30,1,30,1,30,1,30,1,30,4,30,604,8,
        30,11,30,12,30,605,1,31,1,31,1,31,1,31,1,31,3,31,613,8,31,1,31,3,
        31,616,8,31,1,31,1,31,1,31,1,31,3,31,622,8,31,1,31,3,31,625,8,31,
        1,31,1,31,1,31,1,31,3,31,631,8,31,3,31,633,8,31,1,31,1,31,1,31,3,
        31,638,8,31,1,31,1,31,1,31,1,31,3,31,644,8,31,1,31,3,31,647,8,31,
        1,31,3,31,650,8,31,1,31,3,31,653,8,31,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,4,32,664,8,32,11,32,12,32,665,1,33,1,33,1,33,1,
        33,3,33,672,8,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,692,8,36,3,36,694,
        8,36,1,36,1,36,1,36,3,36,699,8,36,1,36,1,36,1,36,3,36,704,8,36,1,
        36,1,36,3,36,708,8,36,1,36,3,36,711,8,36,1,36,5,36,714,8,36,10,36,
        12,36,717,9,36,1,36,3,36,720,8,36,1,37,1,37,3,37,724,8,37,1,37,1,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,739,
        8,38,3,38,741,8,38,1,38,1,38,1,38,3,38,746,8,38,1,38,1,38,1,38,3,
        38,751,8,38,1,38,1,38,3,38,755,8,38,1,38,3,38,758,8,38,1,38,3,38,
        761,8,38,1,38,3,38,764,8,38,1,39,1,39,3,39,768,8,39,1,39,1,39,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
        40,785,8,40,3,40,787,8,40,1,40,1,40,1,40,3,40,792,8,40,1,40,3,40,
        795,8,40,1,40,1,40,3,40,799,8,40,1,40,3,40,802,8,40,1,41,1,41,1,
        42,1,42,1,42,1,42,1,42,1,42,4,42,812,8,42,11,42,12,42,813,1,43,1,
        43,1,43,1,44,1,44,3,44,821,8,44,1,44,1,44,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,838,8,45,3,45,840,
        8,45,1,45,1,45,1,45,3,45,845,8,45,1,45,3,45,848,8,45,1,45,1,45,1,
        45,1,45,1,45,1,45,3,45,856,8,45,1,45,1,45,3,45,860,8,45,1,45,3,45,
        863,8,45,1,46,1,46,1,46,4,46,868,8,46,11,46,12,46,869,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,885,
        8,47,3,47,887,8,47,1,47,1,47,1,47,1,47,1,47,3,47,894,8,47,1,47,3,
        47,897,8,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,4,50,910,8,50,11,50,12,50,911,1,51,1,51,3,51,916,8,51,1,51,1,
        51,1,51,1,51,1,51,3,51,923,8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,
        53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,951,8,56,3,56,953,8,56,1,56,
        1,56,1,56,1,56,1,56,1,56,3,56,961,8,56,1,56,3,56,964,8,56,1,57,1,
        57,1,58,1,58,1,59,1,59,1,59,4,59,973,8,59,11,59,12,59,974,1,60,1,
        60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,3,62,995,8,62,3,62,997,8,62,1,62,1,62,1,62,3,62,
        1002,8,62,1,62,3,62,1005,8,62,1,62,3,62,1008,8,62,1,63,1,63,4,63,
        1012,8,63,11,63,12,63,1013,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,
        67,3,67,1037,8,67,1,67,3,67,1040,8,67,1,68,1,68,1,68,1,68,3,68,1046,
        8,68,1,68,1,68,3,68,1050,8,68,1,68,3,68,1053,8,68,1,68,1,68,1,68,
        1,68,3,68,1059,8,68,1,68,1,68,3,68,1063,8,68,1,68,3,68,1066,8,68,
        1,69,1,69,1,69,3,69,1071,8,69,1,69,3,69,1074,8,69,1,69,1,69,1,69,
        1,69,3,69,1080,8,69,1,69,1,69,1,69,1,69,3,69,1086,8,69,1,69,1,69,
        1,69,3,69,1091,8,69,1,69,3,69,1094,8,69,3,69,1096,8,69,1,69,3,69,
        1099,8,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1107,8,70,1,70,1,70,
        1,70,1,70,3,70,1113,8,70,1,70,1,70,3,70,1117,8,70,1,70,3,70,1120,
        8,70,1,70,5,70,1123,8,70,10,70,12,70,1126,9,70,1,70,3,70,1129,8,
        70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1137,8,71,1,71,1,71,1,71,1,
        71,3,71,1143,8,71,1,71,1,71,3,71,1147,8,71,1,71,3,71,1150,8,71,1,
        71,5,71,1153,8,71,10,71,12,71,1156,9,71,1,71,3,71,1159,8,71,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,3,72,1168,8,72,1,72,3,72,1171,8,72,
        1,72,1,72,1,72,1,72,3,72,1177,8,72,1,72,3,72,1180,8,72,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,3,73,1190,8,73,1,73,3,73,1193,8,73,
        1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1206,
        8,75,1,75,3,75,1209,8,75,1,76,1,76,1,76,1,76,1,76,3,76,1216,8,76,
        1,76,1,76,1,77,1,77,1,77,1,77,1,77,3,77,1225,8,77,1,77,1,77,1,77,
        3,77,1230,8,77,1,77,3,77,1233,8,77,1,78,1,78,1,78,3,78,1238,8,78,
        1,78,3,78,1241,8,78,1,78,1,78,1,78,3,78,1246,8,78,1,78,1,78,1,78,
        3,78,1251,8,78,1,79,1,79,1,79,1,79,1,79,3,79,1258,8,79,1,79,1,79,
        1,79,3,79,1263,8,79,1,80,1,80,1,80,1,80,1,80,3,80,1270,8,80,1,80,
        1,80,1,80,3,80,1275,8,80,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1283,
        8,81,1,81,1,81,1,81,3,81,1288,8,81,1,81,3,81,1291,8,81,1,82,1,82,
        1,82,1,82,1,82,1,82,3,82,1299,8,82,1,82,1,82,1,82,3,82,1304,8,82,
        1,82,3,82,1307,8,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,
        1,83,3,83,1319,8,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,3,84,1328,
        8,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1339,8,85,
        1,85,1,85,3,85,1343,8,85,1,86,1,86,1,86,1,86,1,86,3,86,1350,8,86,
        1,86,1,86,1,86,1,86,1,86,3,86,1357,8,86,3,86,1359,8,86,1,86,1,86,
        1,86,3,86,1364,8,86,1,87,1,87,1,87,1,87,1,87,3,87,1371,8,87,1,88,
        1,88,1,89,1,89,1,89,1,89,1,89,3,89,1380,8,89,1,89,1,89,1,89,1,89,
        1,89,3,89,1387,8,89,1,90,1,90,1,90,1,90,1,90,3,90,1394,8,90,1,90,
        1,90,1,90,1,90,1,90,3,90,1401,8,90,3,90,1403,8,90,1,90,1,90,1,90,
        3,90,1408,8,90,1,91,1,91,1,91,1,91,1,91,3,91,1415,8,91,1,91,1,91,
        1,91,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,3,93,1429,8,93,
        1,94,1,94,1,94,3,94,1434,8,94,1,94,1,94,1,95,1,95,1,95,1,95,1,96,
        1,96,1,96,1,96,1,96,3,96,1447,8,96,1,96,3,96,1450,8,96,1,97,1,97,
        1,97,3,97,1455,8,97,1,97,3,97,1458,8,97,1,97,1,97,1,97,3,97,1463,
        8,97,1,98,1,98,1,98,1,98,1,98,3,98,1470,8,98,1,99,1,99,1,99,1,99,
        1,99,3,99,1477,8,99,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1485,
        8,100,1,100,3,100,1488,8,100,1,101,1,101,1,101,1,101,1,101,1,101,
        3,101,1496,8,101,1,101,3,101,1499,8,101,1,101,1,101,1,101,1,101,
        1,102,1,102,1,102,1,102,1,102,1,102,3,102,1511,8,102,1,102,3,102,
        1514,8,102,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1523,
        8,103,1,103,3,103,1526,8,103,3,103,1528,8,103,1,103,1,103,3,103,
        1532,8,103,1,103,1,103,3,103,1536,8,103,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,1547,8,104,1,104,3,104,1550,
        8,104,3,104,1552,8,104,1,105,1,105,1,105,1,105,1,105,3,105,1559,
        8,105,1,105,1,105,1,105,3,105,1564,8,105,1,106,1,106,1,106,1,106,
        1,106,3,106,1571,8,106,1,106,1,106,3,106,1575,8,106,1,106,3,106,
        1578,8,106,1,107,1,107,1,107,1,107,3,107,1584,8,107,1,107,3,107,
        1587,8,107,1,107,1,107,1,107,1,107,3,107,1593,8,107,1,108,1,108,
        1,108,1,108,1,108,1,108,1,108,3,108,1602,8,108,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,3,109,1611,8,109,1,110,1,110,1,110,1,110,
        1,110,1,110,1,110,1,110,3,110,1621,8,110,1,110,3,110,1624,8,110,
        1,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,111,1634,8,111,
        1,111,3,111,1637,8,111,1,111,1,111,1,111,1,111,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,
        1656,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,115,
        1,115,1,115,1,115,1,115,1,115,3,115,1672,8,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,3,115,1681,8,115,3,115,1683,8,115,1,115,
        3,115,1686,8,115,1,115,1,115,1,115,3,115,1691,8,115,1,115,1,115,
        1,116,3,116,1696,8,116,1,116,1,116,1,117,3,117,1701,8,117,1,117,
        1,117,1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,1,122,1,122,
        1,123,1,123,1,124,1,124,1,125,1,125,1,126,1,126,1,127,1,127,1,128,
        1,128,1,129,1,129,1,130,1,130,1,131,1,131,1,132,1,132,1,133,1,133,
        1,134,1,134,1,135,1,135,1,136,1,136,1,136,5,136,1744,8,136,10,136,
        12,136,1747,9,136,1,136,1,136,1,137,1,137,1,137,1,137,3,137,1755,
        8,137,1,138,1,138,1,138,1,138,3,138,1761,8,138,1,139,1,139,1,139,
        1,139,5,139,1767,8,139,10,139,12,139,1770,9,139,1,139,1,139,1,139,
        1,139,3,139,1776,8,139,1,140,1,140,1,140,1,140,1,141,1,141,1,141,
        1,141,5,141,1786,8,141,10,141,12,141,1789,9,141,3,141,1791,8,141,
        1,141,1,141,1,142,1,142,3,142,1797,8,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,3,142,1806,8,142,1,143,1,143,1,143,1,143,5,143,
        1812,8,143,10,143,12,143,1815,9,143,1,143,1,143,1,143,1,143,3,143,
        1821,8,143,1,144,4,144,1824,8,144,11,144,12,144,1825,1,145,1,145,
        1,145,1,145,3,145,1832,8,145,1,145,3,145,1835,8,145,1,145,1,145,
        1,145,1,145,1,145,3,145,1842,8,145,1,145,3,145,1845,8,145,1,145,
        3,145,1848,8,145,1,145,3,145,1851,8,145,1,146,4,146,1854,8,146,11,
        146,12,146,1855,1,147,1,147,1,147,1,147,1,148,1,148,1,149,1,149,
        1,149,3,149,1867,8,149,1,150,1,150,3,150,1871,8,150,1,151,1,151,
        3,151,1875,8,151,1,152,1,152,3,152,1879,8,152,1,153,1,153,3,153,
        1883,8,153,1,154,1,154,1,155,1,155,1,156,1,156,1,157,1,157,1,157,
        3,157,1894,8,157,1,158,1,158,1,159,1,159,1,159,5,159,1901,8,159,
        10,159,12,159,1904,9,159,1,160,1,160,1,160,1,160,1,161,1,161,3,161,
        1912,8,161,1,162,1,162,1,162,3,162,1917,8,162,3,162,1919,8,162,1,
        163,1,163,1,163,1,164,1,164,1,164,3,164,1927,8,164,1,165,1,165,3,
        165,1931,8,165,1,165,0,0,166,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,0,16,2,0,
        84,84,86,86,2,0,84,84,86,87,2,0,85,85,88,88,1,0,90,91,2,0,100,100,
        102,103,2,0,21,21,106,106,2,0,62,62,108,108,1,0,56,57,3,0,1,1,35,
        35,51,52,1,0,8,9,1,0,162,163,2,0,137,139,147,151,1,0,134,136,3,0,
        138,138,140,143,152,152,5,0,1,33,35,65,67,67,71,71,75,125,2,0,201,
        201,203,203,2116,0,344,1,0,0,0,2,408,1,0,0,0,4,410,1,0,0,0,6,412,
        1,0,0,0,8,416,1,0,0,0,10,419,1,0,0,0,12,424,1,0,0,0,14,427,1,0,0,
        0,16,430,1,0,0,0,18,436,1,0,0,0,20,441,1,0,0,0,22,445,1,0,0,0,24,
        452,1,0,0,0,26,457,1,0,0,0,28,466,1,0,0,0,30,475,1,0,0,0,32,479,
        1,0,0,0,34,497,1,0,0,0,36,512,1,0,0,0,38,516,1,0,0,0,40,518,1,0,
        0,0,42,521,1,0,0,0,44,531,1,0,0,0,46,534,1,0,0,0,48,537,1,0,0,0,
        50,540,1,0,0,0,52,544,1,0,0,0,54,551,1,0,0,0,56,559,1,0,0,0,58,580,
        1,0,0,0,60,603,1,0,0,0,62,632,1,0,0,0,64,663,1,0,0,0,66,667,1,0,
        0,0,68,673,1,0,0,0,70,676,1,0,0,0,72,693,1,0,0,0,74,721,1,0,0,0,
        76,740,1,0,0,0,78,765,1,0,0,0,80,786,1,0,0,0,82,803,1,0,0,0,84,811,
        1,0,0,0,86,815,1,0,0,0,88,818,1,0,0,0,90,839,1,0,0,0,92,867,1,0,
        0,0,94,886,1,0,0,0,96,898,1,0,0,0,98,900,1,0,0,0,100,909,1,0,0,0,
        102,915,1,0,0,0,104,924,1,0,0,0,106,928,1,0,0,0,108,932,1,0,0,0,
        110,936,1,0,0,0,112,952,1,0,0,0,114,965,1,0,0,0,116,967,1,0,0,0,
        118,972,1,0,0,0,120,976,1,0,0,0,122,980,1,0,0,0,124,996,1,0,0,0,
        126,1011,1,0,0,0,128,1015,1,0,0,0,130,1017,1,0,0,0,132,1019,1,0,
        0,0,134,1028,1,0,0,0,136,1041,1,0,0,0,138,1067,1,0,0,0,140,1100,
        1,0,0,0,142,1130,1,0,0,0,144,1160,1,0,0,0,146,1181,1,0,0,0,148,1194,
        1,0,0,0,150,1196,1,0,0,0,152,1210,1,0,0,0,154,1219,1,0,0,0,156,1234,
        1,0,0,0,158,1252,1,0,0,0,160,1264,1,0,0,0,162,1276,1,0,0,0,164,1292,
        1,0,0,0,166,1312,1,0,0,0,168,1322,1,0,0,0,170,1333,1,0,0,0,172,1344,
        1,0,0,0,174,1370,1,0,0,0,176,1372,1,0,0,0,178,1374,1,0,0,0,180,1388,
        1,0,0,0,182,1409,1,0,0,0,184,1421,1,0,0,0,186,1428,1,0,0,0,188,1430,
        1,0,0,0,190,1437,1,0,0,0,192,1441,1,0,0,0,194,1451,1,0,0,0,196,1464,
        1,0,0,0,198,1471,1,0,0,0,200,1478,1,0,0,0,202,1489,1,0,0,0,204,1504,
        1,0,0,0,206,1515,1,0,0,0,208,1537,1,0,0,0,210,1553,1,0,0,0,212,1565,
        1,0,0,0,214,1579,1,0,0,0,216,1594,1,0,0,0,218,1603,1,0,0,0,220,1612,
        1,0,0,0,222,1625,1,0,0,0,224,1642,1,0,0,0,226,1649,1,0,0,0,228,1657,
        1,0,0,0,230,1665,1,0,0,0,232,1695,1,0,0,0,234,1700,1,0,0,0,236,1704,
        1,0,0,0,238,1706,1,0,0,0,240,1708,1,0,0,0,242,1710,1,0,0,0,244,1712,
        1,0,0,0,246,1714,1,0,0,0,248,1716,1,0,0,0,250,1718,1,0,0,0,252,1720,
        1,0,0,0,254,1722,1,0,0,0,256,1724,1,0,0,0,258,1726,1,0,0,0,260,1728,
        1,0,0,0,262,1730,1,0,0,0,264,1732,1,0,0,0,266,1734,1,0,0,0,268,1736,
        1,0,0,0,270,1738,1,0,0,0,272,1740,1,0,0,0,274,1754,1,0,0,0,276,1760,
        1,0,0,0,278,1775,1,0,0,0,280,1777,1,0,0,0,282,1781,1,0,0,0,284,1805,
        1,0,0,0,286,1820,1,0,0,0,288,1823,1,0,0,0,290,1827,1,0,0,0,292,1853,
        1,0,0,0,294,1857,1,0,0,0,296,1861,1,0,0,0,298,1866,1,0,0,0,300,1870,
        1,0,0,0,302,1874,1,0,0,0,304,1878,1,0,0,0,306,1882,1,0,0,0,308,1884,
        1,0,0,0,310,1886,1,0,0,0,312,1888,1,0,0,0,314,1893,1,0,0,0,316,1895,
        1,0,0,0,318,1897,1,0,0,0,320,1905,1,0,0,0,322,1909,1,0,0,0,324,1913,
        1,0,0,0,326,1920,1,0,0,0,328,1926,1,0,0,0,330,1930,1,0,0,0,332,341,
        3,2,1,0,333,335,5,178,0,0,334,333,1,0,0,0,335,336,1,0,0,0,336,334,
        1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,340,3,2,1,0,339,334,
        1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,345,
        1,0,0,0,343,341,1,0,0,0,344,332,1,0,0,0,344,345,1,0,0,0,345,347,
        1,0,0,0,346,348,5,178,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,
        1,0,0,0,349,350,5,0,0,1,350,1,1,0,0,0,351,409,3,28,14,0,352,409,
        3,34,17,0,353,409,3,58,29,0,354,409,3,62,31,0,355,409,3,72,36,0,
        356,409,3,76,38,0,357,409,3,80,40,0,358,409,3,90,45,0,359,409,3,
        94,47,0,360,409,3,124,62,0,361,409,3,112,56,0,362,409,3,132,66,0,
        363,409,3,134,67,0,364,409,3,136,68,0,365,409,3,138,69,0,366,409,
        3,140,70,0,367,409,3,142,71,0,368,409,3,144,72,0,369,409,3,146,73,
        0,370,409,3,150,75,0,371,409,3,152,76,0,372,409,3,154,77,0,373,409,
        3,156,78,0,374,409,3,158,79,0,375,409,3,160,80,0,376,409,3,162,81,
        0,377,409,3,164,82,0,378,409,3,166,83,0,379,409,3,168,84,0,380,409,
        3,170,85,0,381,409,3,230,115,0,382,409,3,178,89,0,383,409,3,172,
        86,0,384,409,3,180,90,0,385,409,3,182,91,0,386,409,3,184,92,0,387,
        409,3,188,94,0,388,409,3,190,95,0,389,409,3,192,96,0,390,409,3,194,
        97,0,391,409,3,196,98,0,392,409,3,198,99,0,393,409,3,200,100,0,394,
        409,3,202,101,0,395,409,3,204,102,0,396,409,3,206,103,0,397,409,
        3,208,104,0,398,409,3,210,105,0,399,409,3,212,106,0,400,409,3,214,
        107,0,401,409,3,216,108,0,402,409,3,218,109,0,403,409,3,220,110,
        0,404,409,3,222,111,0,405,409,3,224,112,0,406,409,3,226,113,0,407,
        409,3,228,114,0,408,351,1,0,0,0,408,352,1,0,0,0,408,353,1,0,0,0,
        408,354,1,0,0,0,408,355,1,0,0,0,408,356,1,0,0,0,408,357,1,0,0,0,
        408,358,1,0,0,0,408,359,1,0,0,0,408,360,1,0,0,0,408,361,1,0,0,0,
        408,362,1,0,0,0,408,363,1,0,0,0,408,364,1,0,0,0,408,365,1,0,0,0,
        408,366,1,0,0,0,408,367,1,0,0,0,408,368,1,0,0,0,408,369,1,0,0,0,
        408,370,1,0,0,0,408,371,1,0,0,0,408,372,1,0,0,0,408,373,1,0,0,0,
        408,374,1,0,0,0,408,375,1,0,0,0,408,376,1,0,0,0,408,377,1,0,0,0,
        408,378,1,0,0,0,408,379,1,0,0,0,408,380,1,0,0,0,408,381,1,0,0,0,
        408,382,1,0,0,0,408,383,1,0,0,0,408,384,1,0,0,0,408,385,1,0,0,0,
        408,386,1,0,0,0,408,387,1,0,0,0,408,388,1,0,0,0,408,389,1,0,0,0,
        408,390,1,0,0,0,408,391,1,0,0,0,408,392,1,0,0,0,408,393,1,0,0,0,
        408,394,1,0,0,0,408,395,1,0,0,0,408,396,1,0,0,0,408,397,1,0,0,0,
        408,398,1,0,0,0,408,399,1,0,0,0,408,400,1,0,0,0,408,401,1,0,0,0,
        408,402,1,0,0,0,408,403,1,0,0,0,408,404,1,0,0,0,408,405,1,0,0,0,
        408,406,1,0,0,0,408,407,1,0,0,0,409,3,1,0,0,0,410,411,7,0,0,0,411,
        5,1,0,0,0,412,413,7,1,0,0,413,7,1,0,0,0,414,417,3,328,164,0,415,
        417,5,24,0,0,416,414,1,0,0,0,416,415,1,0,0,0,417,9,1,0,0,0,418,420,
        5,70,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,421,422,
        5,26,0,0,422,423,3,284,142,0,423,11,1,0,0,0,424,425,5,77,0,0,425,
        426,3,284,142,0,426,13,1,0,0,0,427,428,5,71,0,0,428,429,3,328,164,
        0,429,15,1,0,0,0,430,432,5,21,0,0,431,433,5,28,0,0,432,431,1,0,0,
        0,432,433,1,0,0,0,433,434,1,0,0,0,434,435,5,96,0,0,435,17,1,0,0,
        0,436,437,5,97,0,0,437,438,5,98,0,0,438,439,5,30,0,0,439,440,3,20,
        10,0,440,19,1,0,0,0,441,442,5,196,0,0,442,21,1,0,0,0,443,444,5,79,
        0,0,444,446,3,232,116,0,445,443,1,0,0,0,445,446,1,0,0,0,446,447,
        1,0,0,0,447,448,5,12,0,0,448,449,3,238,119,0,449,23,1,0,0,0,450,
        451,5,79,0,0,451,453,3,236,118,0,452,450,1,0,0,0,452,453,1,0,0,0,
        453,454,1,0,0,0,454,455,5,12,0,0,455,456,3,242,121,0,456,25,1,0,
        0,0,457,464,5,8,0,0,458,459,5,61,0,0,459,465,5,79,0,0,460,462,5,
        79,0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,465,3,
        232,116,0,464,458,1,0,0,0,464,461,1,0,0,0,465,27,1,0,0,0,466,467,
        5,75,0,0,467,468,5,76,0,0,468,470,5,77,0,0,469,471,3,30,15,0,470,
        469,1,0,0,0,470,471,1,0,0,0,471,29,1,0,0,0,472,476,3,4,2,0,473,476,
        3,10,5,0,474,476,3,32,16,0,475,472,1,0,0,0,475,473,1,0,0,0,475,474,
        1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,478,31,1,
        0,0,0,479,482,5,35,0,0,480,481,5,27,0,0,481,483,5,95,0,0,482,480,
        1,0,0,0,482,483,1,0,0,0,483,33,1,0,0,0,484,485,5,1,0,0,485,486,5,
        2,0,0,486,487,5,3,0,0,487,488,5,76,0,0,488,498,5,79,0,0,489,490,
        5,1,0,0,490,491,5,76,0,0,491,495,5,79,0,0,492,493,5,27,0,0,493,494,
        5,28,0,0,494,496,5,29,0,0,495,492,1,0,0,0,495,496,1,0,0,0,496,498,
        1,0,0,0,497,484,1,0,0,0,497,489,1,0,0,0,498,499,1,0,0,0,499,501,
        3,232,116,0,500,502,3,36,18,0,501,500,1,0,0,0,501,502,1,0,0,0,502,
        35,1,0,0,0,503,513,3,4,2,0,504,513,3,38,19,0,505,513,3,40,20,0,506,
        513,3,42,21,0,507,513,3,10,5,0,508,513,3,14,7,0,509,513,3,12,6,0,
        510,513,3,54,27,0,511,513,3,56,28,0,512,503,1,0,0,0,512,504,1,0,
        0,0,512,505,1,0,0,0,512,506,1,0,0,0,512,507,1,0,0,0,512,508,1,0,
        0,0,512,509,1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,514,1,0,
        0,0,514,512,1,0,0,0,514,515,1,0,0,0,515,37,1,0,0,0,516,517,7,2,0,
        0,517,39,1,0,0,0,518,519,5,89,0,0,519,520,7,3,0,0,520,41,1,0,0,0,
        521,528,5,21,0,0,522,527,3,44,22,0,523,527,3,46,23,0,524,527,3,48,
        24,0,525,527,3,50,25,0,526,522,1,0,0,0,526,523,1,0,0,0,526,524,1,
        0,0,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,529,1,
        0,0,0,529,43,1,0,0,0,530,528,1,0,0,0,531,532,5,22,0,0,532,533,3,
        8,4,0,533,45,1,0,0,0,534,535,5,93,0,0,535,536,3,8,4,0,536,47,1,0,
        0,0,537,538,5,23,0,0,538,539,3,8,4,0,539,49,1,0,0,0,540,541,5,30,
        0,0,541,542,5,99,0,0,542,543,3,8,4,0,543,51,1,0,0,0,544,545,5,25,
        0,0,545,546,5,94,0,0,546,549,5,12,0,0,547,550,3,308,154,0,548,550,
        5,24,0,0,549,547,1,0,0,0,549,548,1,0,0,0,550,53,1,0,0,0,551,552,
        5,68,0,0,552,553,5,106,0,0,553,554,5,108,0,0,554,557,3,96,48,0,555,
        556,5,27,0,0,556,558,5,29,0,0,557,555,1,0,0,0,557,558,1,0,0,0,558,
        55,1,0,0,0,559,560,5,69,0,0,560,561,5,106,0,0,561,562,5,108,0,0,
        562,565,3,96,48,0,563,564,5,27,0,0,564,566,5,29,0,0,565,563,1,0,
        0,0,565,566,1,0,0,0,566,57,1,0,0,0,567,568,5,1,0,0,568,569,5,2,0,
        0,569,570,5,3,0,0,570,571,5,76,0,0,571,581,5,12,0,0,572,573,5,1,
        0,0,573,574,5,76,0,0,574,578,5,12,0,0,575,576,5,27,0,0,576,577,5,
        28,0,0,577,579,5,29,0,0,578,575,1,0,0,0,578,579,1,0,0,0,579,581,
        1,0,0,0,580,567,1,0,0,0,580,572,1,0,0,0,581,583,1,0,0,0,582,584,
        3,238,119,0,583,582,1,0,0,0,583,584,1,0,0,0,584,590,1,0,0,0,585,
        587,5,8,0,0,586,588,5,79,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,
        589,1,0,0,0,589,591,3,232,116,0,590,585,1,0,0,0,590,591,1,0,0,0,
        591,592,1,0,0,0,592,593,5,9,0,0,593,595,3,308,154,0,594,596,3,60,
        30,0,595,594,1,0,0,0,595,596,1,0,0,0,596,59,1,0,0,0,597,604,3,6,
        3,0,598,604,3,16,8,0,599,604,3,18,9,0,600,604,3,10,5,0,601,604,3,
        14,7,0,602,604,3,12,6,0,603,597,1,0,0,0,603,598,1,0,0,0,603,599,
        1,0,0,0,603,600,1,0,0,0,603,601,1,0,0,0,603,602,1,0,0,0,604,605,
        1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,61,1,0,0,0,607,608,5,
        1,0,0,608,609,5,2,0,0,609,610,5,3,0,0,610,612,5,76,0,0,611,613,5,
        48,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,615,1,0,0,0,614,616,5,
        120,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,633,
        5,14,0,0,618,619,5,1,0,0,619,621,5,76,0,0,620,622,5,48,0,0,621,620,
        1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,5,120,0,0,624,623,
        1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,630,5,14,0,0,627,628,
        5,27,0,0,628,629,5,28,0,0,629,631,5,29,0,0,630,627,1,0,0,0,630,631,
        1,0,0,0,631,633,1,0,0,0,632,607,1,0,0,0,632,618,1,0,0,0,633,634,
        1,0,0,0,634,637,3,244,122,0,635,636,5,8,0,0,636,638,3,22,11,0,637,
        635,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,640,5,19,0,0,640,
        643,3,322,161,0,641,642,5,117,0,0,642,644,3,248,124,0,643,641,1,
        0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,647,3,288,144,0,646,645,
        1,0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,650,3,286,143,0,649,
        648,1,0,0,0,649,650,1,0,0,0,650,652,1,0,0,0,651,653,3,64,32,0,652,
        651,1,0,0,0,652,653,1,0,0,0,653,63,1,0,0,0,654,664,3,6,3,0,655,664,
        3,16,8,0,656,664,3,18,9,0,657,664,3,10,5,0,658,664,3,14,7,0,659,
        664,3,12,6,0,660,664,3,66,33,0,661,664,3,68,34,0,662,664,3,70,35,
        0,663,654,1,0,0,0,663,655,1,0,0,0,663,656,1,0,0,0,663,657,1,0,0,
        0,663,658,1,0,0,0,663,659,1,0,0,0,663,660,1,0,0,0,663,661,1,0,0,
        0,663,662,1,0,0,0,664,665,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,
        0,666,65,1,0,0,0,667,668,5,100,0,0,668,671,5,32,0,0,669,672,3,328,
        164,0,670,672,5,101,0,0,671,669,1,0,0,0,671,670,1,0,0,0,672,67,1,
        0,0,0,673,674,5,33,0,0,674,675,7,4,0,0,675,69,1,0,0,0,676,677,5,
        21,0,0,677,678,5,15,0,0,678,679,3,322,161,0,679,71,1,0,0,0,680,681,
        5,1,0,0,681,682,5,2,0,0,682,683,5,3,0,0,683,684,5,76,0,0,684,694,
        5,15,0,0,685,686,5,1,0,0,686,687,5,76,0,0,687,691,5,15,0,0,688,689,
        5,27,0,0,689,690,5,28,0,0,690,692,5,29,0,0,691,688,1,0,0,0,691,692,
        1,0,0,0,692,694,1,0,0,0,693,680,1,0,0,0,693,685,1,0,0,0,694,695,
        1,0,0,0,695,698,3,256,128,0,696,697,5,8,0,0,697,699,3,22,11,0,698,
        696,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,19,0,0,701,
        703,3,322,161,0,702,704,5,34,0,0,703,702,1,0,0,0,703,704,1,0,0,0,
        704,710,1,0,0,0,705,707,5,67,0,0,706,708,3,248,124,0,707,706,1,0,
        0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,711,3,286,143,0,710,705,
        1,0,0,0,710,711,1,0,0,0,711,715,1,0,0,0,712,714,3,74,37,0,713,712,
        1,0,0,0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,719,
        1,0,0,0,717,715,1,0,0,0,718,720,3,64,32,0,719,718,1,0,0,0,719,720,
        1,0,0,0,720,73,1,0,0,0,721,723,5,83,0,0,722,724,3,250,125,0,723,
        722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,3,286,143,0,
        726,75,1,0,0,0,727,728,5,1,0,0,728,729,5,2,0,0,729,730,5,3,0,0,730,
        731,5,76,0,0,731,741,5,16,0,0,732,733,5,1,0,0,733,734,5,76,0,0,734,
        738,5,16,0,0,735,736,5,27,0,0,736,737,5,28,0,0,737,739,5,29,0,0,
        738,735,1,0,0,0,738,739,1,0,0,0,739,741,1,0,0,0,740,727,1,0,0,0,
        740,732,1,0,0,0,741,742,1,0,0,0,742,745,3,258,129,0,743,744,5,8,
        0,0,744,746,3,22,11,0,745,743,1,0,0,0,745,746,1,0,0,0,746,747,1,
        0,0,0,747,748,5,19,0,0,748,750,3,322,161,0,749,751,5,34,0,0,750,
        749,1,0,0,0,750,751,1,0,0,0,751,757,1,0,0,0,752,754,5,67,0,0,753,
        755,3,248,124,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,
        756,758,3,286,143,0,757,752,1,0,0,0,757,758,1,0,0,0,758,760,1,0,
        0,0,759,761,3,78,39,0,760,759,1,0,0,0,760,761,1,0,0,0,761,763,1,
        0,0,0,762,764,3,64,32,0,763,762,1,0,0,0,763,764,1,0,0,0,764,77,1,
        0,0,0,765,767,5,83,0,0,766,768,3,250,125,0,767,766,1,0,0,0,767,768,
        1,0,0,0,768,769,1,0,0,0,769,770,3,286,143,0,770,79,1,0,0,0,771,772,
        5,1,0,0,772,773,5,2,0,0,773,774,5,3,0,0,774,775,5,76,0,0,775,776,
        5,99,0,0,776,787,5,39,0,0,777,778,5,1,0,0,778,779,5,76,0,0,779,780,
        5,99,0,0,780,784,5,39,0,0,781,782,5,27,0,0,782,783,5,28,0,0,783,
        785,5,29,0,0,784,781,1,0,0,0,784,785,1,0,0,0,785,787,1,0,0,0,786,
        771,1,0,0,0,786,777,1,0,0,0,787,788,1,0,0,0,788,794,3,264,132,0,
        789,791,5,8,0,0,790,792,5,79,0,0,791,790,1,0,0,0,791,792,1,0,0,0,
        792,793,1,0,0,0,793,795,3,232,116,0,794,789,1,0,0,0,794,795,1,0,
        0,0,795,798,1,0,0,0,796,797,5,9,0,0,797,799,3,82,41,0,798,796,1,
        0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,800,802,3,84,42,0,801,800,
        1,0,0,0,801,802,1,0,0,0,802,81,1,0,0,0,803,804,3,328,164,0,804,83,
        1,0,0,0,805,812,3,6,3,0,806,812,3,16,8,0,807,812,3,10,5,0,808,812,
        3,14,7,0,809,812,3,86,43,0,810,812,3,88,44,0,811,805,1,0,0,0,811,
        806,1,0,0,0,811,807,1,0,0,0,811,808,1,0,0,0,811,809,1,0,0,0,811,
        810,1,0,0,0,812,813,1,0,0,0,813,811,1,0,0,0,813,814,1,0,0,0,814,
        85,1,0,0,0,815,816,5,44,0,0,816,817,3,328,164,0,817,87,1,0,0,0,818,
        820,5,49,0,0,819,821,5,121,0,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        822,1,0,0,0,822,823,5,119,0,0,823,89,1,0,0,0,824,825,5,1,0,0,825,
        826,5,2,0,0,826,827,5,3,0,0,827,828,5,76,0,0,828,829,5,99,0,0,829,
        840,5,46,0,0,830,831,5,1,0,0,831,832,5,76,0,0,832,833,5,99,0,0,833,
        837,5,46,0,0,834,835,5,27,0,0,835,836,5,28,0,0,836,838,5,29,0,0,
        837,834,1,0,0,0,837,838,1,0,0,0,838,840,1,0,0,0,839,824,1,0,0,0,
        839,830,1,0,0,0,840,841,1,0,0,0,841,842,3,268,134,0,842,847,5,8,
        0,0,843,845,5,79,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,
        0,0,846,848,3,232,116,0,847,844,1,0,0,0,847,848,1,0,0,0,848,849,
        1,0,0,0,849,850,5,99,0,0,850,851,5,39,0,0,851,859,3,264,132,0,852,
        853,5,9,0,0,853,860,3,82,41,0,854,856,5,47,0,0,855,854,1,0,0,0,855,
        856,1,0,0,0,856,857,1,0,0,0,857,858,5,99,0,0,858,860,3,328,164,0,
        859,852,1,0,0,0,859,855,1,0,0,0,860,862,1,0,0,0,861,863,3,92,46,
        0,862,861,1,0,0,0,862,863,1,0,0,0,863,91,1,0,0,0,864,868,3,6,3,0,
        865,868,3,16,8,0,866,868,3,10,5,0,867,864,1,0,0,0,867,865,1,0,0,
        0,867,866,1,0,0,0,868,869,1,0,0,0,869,867,1,0,0,0,869,870,1,0,0,
        0,870,93,1,0,0,0,871,872,5,1,0,0,872,873,5,2,0,0,873,874,5,3,0,0,
        874,875,5,76,0,0,875,876,7,5,0,0,876,887,5,108,0,0,877,878,5,1,0,
        0,878,879,5,76,0,0,879,880,7,5,0,0,880,884,5,108,0,0,881,882,5,27,
        0,0,882,883,5,28,0,0,883,885,5,29,0,0,884,881,1,0,0,0,884,885,1,
        0,0,0,885,887,1,0,0,0,886,871,1,0,0,0,886,877,1,0,0,0,887,888,1,
        0,0,0,888,889,3,96,48,0,889,893,5,111,0,0,890,894,5,112,0,0,891,
        894,5,113,0,0,892,894,3,98,49,0,893,890,1,0,0,0,893,891,1,0,0,0,
        893,892,1,0,0,0,894,896,1,0,0,0,895,897,3,100,50,0,896,895,1,0,0,
        0,896,897,1,0,0,0,897,95,1,0,0,0,898,899,3,330,165,0,899,97,1,0,
        0,0,900,901,3,330,165,0,901,99,1,0,0,0,902,910,3,4,2,0,903,910,3,
        14,7,0,904,910,3,102,51,0,905,910,3,104,52,0,906,910,3,106,53,0,
        907,910,3,108,54,0,908,910,3,110,55,0,909,902,1,0,0,0,909,903,1,
        0,0,0,909,904,1,0,0,0,909,905,1,0,0,0,909,906,1,0,0,0,909,907,1,
        0,0,0,909,908,1,0,0,0,910,911,1,0,0,0,911,909,1,0,0,0,911,912,1,
        0,0,0,912,101,1,0,0,0,913,914,5,65,0,0,914,916,5,28,0,0,915,913,
        1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,5,115,0,0,918,919,
        5,7,0,0,919,922,5,114,0,0,920,921,5,43,0,0,921,923,5,116,0,0,922,
        920,1,0,0,0,922,923,1,0,0,0,923,103,1,0,0,0,924,925,5,24,0,0,925,
        926,5,42,0,0,926,927,3,330,165,0,927,105,1,0,0,0,928,929,7,6,0,0,
        929,930,5,109,0,0,930,931,3,328,164,0,931,107,1,0,0,0,932,933,7,
        6,0,0,933,934,5,110,0,0,934,935,3,328,164,0,935,109,1,0,0,0,936,
        937,5,63,0,0,937,938,3,328,164,0,938,111,1,0,0,0,939,940,5,1,0,0,
        940,941,5,2,0,0,941,942,5,3,0,0,942,943,5,76,0,0,943,953,5,25,0,
        0,944,945,5,1,0,0,945,946,5,76,0,0,946,950,5,25,0,0,947,948,5,27,
        0,0,948,949,5,28,0,0,949,951,5,29,0,0,950,947,1,0,0,0,950,951,1,
        0,0,0,951,953,1,0,0,0,952,939,1,0,0,0,952,944,1,0,0,0,953,954,1,
        0,0,0,954,955,3,114,57,0,955,956,5,189,0,0,956,960,3,96,48,0,957,
        958,5,40,0,0,958,959,5,41,0,0,959,961,3,116,58,0,960,957,1,0,0,0,
        960,961,1,0,0,0,961,963,1,0,0,0,962,964,3,118,59,0,963,962,1,0,0,
        0,963,964,1,0,0,0,964,113,1,0,0,0,965,966,3,330,165,0,966,115,1,
        0,0,0,967,968,3,328,164,0,968,117,1,0,0,0,969,973,3,122,61,0,970,
        973,3,120,60,0,971,973,3,10,5,0,972,969,1,0,0,0,972,970,1,0,0,0,
        972,971,1,0,0,0,973,974,1,0,0,0,974,972,1,0,0,0,974,975,1,0,0,0,
        975,119,1,0,0,0,976,977,5,108,0,0,977,978,5,26,0,0,978,979,3,284,
        142,0,979,121,1,0,0,0,980,981,5,55,0,0,981,982,7,7,0,0,982,123,1,
        0,0,0,983,984,5,1,0,0,984,985,5,2,0,0,985,986,5,3,0,0,986,987,5,
        76,0,0,987,997,5,42,0,0,988,989,5,1,0,0,989,990,5,76,0,0,990,994,
        5,42,0,0,991,992,5,27,0,0,992,993,5,28,0,0,993,995,5,29,0,0,994,
        991,1,0,0,0,994,995,1,0,0,0,995,997,1,0,0,0,996,983,1,0,0,0,996,
        988,1,0,0,0,997,998,1,0,0,0,998,1001,3,130,65,0,999,1000,5,123,0,
        0,1000,1002,3,128,64,0,1001,999,1,0,0,0,1001,1002,1,0,0,0,1002,1004,
        1,0,0,0,1003,1005,3,26,13,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,
        1005,1007,1,0,0,0,1006,1008,3,126,63,0,1007,1006,1,0,0,0,1007,1008,
        1,0,0,0,1008,125,1,0,0,0,1009,1012,3,10,5,0,1010,1012,3,14,7,0,1011,
        1009,1,0,0,0,1011,1010,1,0,0,0,1012,1013,1,0,0,0,1013,1011,1,0,0,
        0,1013,1014,1,0,0,0,1014,127,1,0,0,0,1015,1016,3,330,165,0,1016,
        129,1,0,0,0,1017,1018,3,330,165,0,1018,131,1,0,0,0,1019,1020,5,45,
        0,0,1020,1021,5,76,0,0,1021,1022,5,79,0,0,1022,1023,3,232,116,0,
        1023,1024,5,7,0,0,1024,1025,5,92,0,0,1025,1026,5,22,0,0,1026,1027,
        3,234,117,0,1027,133,1,0,0,0,1028,1029,5,4,0,0,1029,1030,5,76,0,
        0,1030,1031,5,79,0,0,1031,1036,3,232,116,0,1032,1033,5,7,0,0,1033,
        1034,5,92,0,0,1034,1035,5,22,0,0,1035,1037,3,234,117,0,1036,1032,
        1,0,0,0,1036,1037,1,0,0,0,1037,1039,1,0,0,0,1038,1040,3,36,18,0,
        1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,135,1,0,0,0,1041,1042,5,
        4,0,0,1042,1043,5,76,0,0,1043,1045,5,12,0,0,1044,1046,3,238,119,
        0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1052,1,0,0,0,1047,1049,
        5,8,0,0,1048,1050,5,79,0,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,
        1051,1,0,0,0,1051,1053,3,232,116,0,1052,1047,1,0,0,0,1052,1053,1,
        0,0,0,1053,1058,1,0,0,0,1054,1055,5,7,0,0,1055,1056,5,92,0,0,1056,
        1057,5,22,0,0,1057,1059,3,240,120,0,1058,1054,1,0,0,0,1058,1059,
        1,0,0,0,1059,1062,1,0,0,0,1060,1061,5,9,0,0,1061,1063,3,308,154,
        0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1065,1,0,0,0,1064,1066,
        3,60,30,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,137,1,0,0,0,1067,
        1068,5,4,0,0,1068,1070,5,76,0,0,1069,1071,5,48,0,0,1070,1069,1,0,
        0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1074,5,120,0,0,1073,
        1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,5,14,
        0,0,1076,1079,3,244,122,0,1077,1078,5,8,0,0,1078,1080,3,22,11,0,
        1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1085,1,0,0,0,1081,1082,
        5,7,0,0,1082,1083,5,92,0,0,1083,1084,5,22,0,0,1084,1086,3,246,123,
        0,1085,1081,1,0,0,0,1085,1086,1,0,0,0,1086,1095,1,0,0,0,1087,1088,
        5,117,0,0,1088,1090,3,248,124,0,1089,1091,3,288,144,0,1090,1089,
        1,0,0,0,1090,1091,1,0,0,0,1091,1093,1,0,0,0,1092,1094,3,286,143,
        0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1096,1,0,0,0,1095,1087,
        1,0,0,0,1095,1096,1,0,0,0,1096,1098,1,0,0,0,1097,1099,3,64,32,0,
        1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,139,1,0,0,0,1100,1101,5,
        4,0,0,1101,1102,5,76,0,0,1102,1103,5,15,0,0,1103,1106,3,256,128,
        0,1104,1105,5,8,0,0,1105,1107,3,22,11,0,1106,1104,1,0,0,0,1106,1107,
        1,0,0,0,1107,1112,1,0,0,0,1108,1109,5,7,0,0,1109,1110,5,92,0,0,1110,
        1111,5,22,0,0,1111,1113,3,260,130,0,1112,1108,1,0,0,0,1112,1113,
        1,0,0,0,1113,1119,1,0,0,0,1114,1116,5,67,0,0,1115,1117,3,248,124,
        0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,1118,1120,
        3,286,143,0,1119,1114,1,0,0,0,1119,1120,1,0,0,0,1120,1124,1,0,0,
        0,1121,1123,3,74,37,0,1122,1121,1,0,0,0,1123,1126,1,0,0,0,1124,1122,
        1,0,0,0,1124,1125,1,0,0,0,1125,1128,1,0,0,0,1126,1124,1,0,0,0,1127,
        1129,3,64,32,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,141,1,0,
        0,0,1130,1131,5,4,0,0,1131,1132,5,76,0,0,1132,1133,5,16,0,0,1133,
        1136,3,258,129,0,1134,1135,5,8,0,0,1135,1137,3,22,11,0,1136,1134,
        1,0,0,0,1136,1137,1,0,0,0,1137,1142,1,0,0,0,1138,1139,5,7,0,0,1139,
        1140,5,92,0,0,1140,1141,5,22,0,0,1141,1143,3,262,131,0,1142,1138,
        1,0,0,0,1142,1143,1,0,0,0,1143,1149,1,0,0,0,1144,1146,5,67,0,0,1145,
        1147,3,248,124,0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,
        0,0,0,1148,1150,3,286,143,0,1149,1144,1,0,0,0,1149,1150,1,0,0,0,
        1150,1154,1,0,0,0,1151,1153,3,78,39,0,1152,1151,1,0,0,0,1153,1156,
        1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,1158,1,0,0,0,1156,
        1154,1,0,0,0,1157,1159,3,64,32,0,1158,1157,1,0,0,0,1158,1159,1,0,
        0,0,1159,143,1,0,0,0,1160,1161,5,4,0,0,1161,1162,5,76,0,0,1162,1163,
        5,99,0,0,1163,1164,5,39,0,0,1164,1170,3,264,132,0,1165,1167,5,8,
        0,0,1166,1168,5,79,0,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,
        1169,1,0,0,0,1169,1171,3,232,116,0,1170,1165,1,0,0,0,1170,1171,1,
        0,0,0,1171,1176,1,0,0,0,1172,1173,5,7,0,0,1173,1174,5,92,0,0,1174,
        1175,5,22,0,0,1175,1177,3,266,133,0,1176,1172,1,0,0,0,1176,1177,
        1,0,0,0,1177,1179,1,0,0,0,1178,1180,3,84,42,0,1179,1178,1,0,0,0,
        1179,1180,1,0,0,0,1180,145,1,0,0,0,1181,1182,5,4,0,0,1182,1183,5,
        76,0,0,1183,1184,7,5,0,0,1184,1185,5,108,0,0,1185,1189,3,96,48,0,
        1186,1187,5,7,0,0,1187,1188,5,64,0,0,1188,1190,3,148,74,0,1189,1186,
        1,0,0,0,1189,1190,1,0,0,0,1190,1192,1,0,0,0,1191,1193,3,100,50,0,
        1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,147,1,0,0,0,1194,1195,3,
        330,165,0,1195,149,1,0,0,0,1196,1197,5,4,0,0,1197,1198,5,76,0,0,
        1198,1199,5,25,0,0,1199,1200,3,114,57,0,1200,1201,5,189,0,0,1201,
        1205,3,96,48,0,1202,1203,5,40,0,0,1203,1204,5,41,0,0,1204,1206,3,
        116,58,0,1205,1202,1,0,0,0,1205,1206,1,0,0,0,1206,1208,1,0,0,0,1207,
        1209,3,118,59,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,151,1,0,
        0,0,1210,1211,5,17,0,0,1211,1212,5,76,0,0,1212,1215,5,79,0,0,1213,
        1214,5,27,0,0,1214,1216,5,29,0,0,1215,1213,1,0,0,0,1215,1216,1,0,
        0,0,1216,1217,1,0,0,0,1217,1218,3,232,116,0,1218,153,1,0,0,0,1219,
        1220,5,17,0,0,1220,1221,5,76,0,0,1221,1224,5,12,0,0,1222,1223,5,
        27,0,0,1223,1225,5,29,0,0,1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,
        1226,1,0,0,0,1226,1232,3,238,119,0,1227,1229,5,9,0,0,1228,1230,5,
        79,0,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,
        1233,3,232,116,0,1232,1227,1,0,0,0,1232,1233,1,0,0,0,1233,155,1,
        0,0,0,1234,1235,5,17,0,0,1235,1237,5,76,0,0,1236,1238,5,48,0,0,1237,
        1236,1,0,0,0,1237,1238,1,0,0,0,1238,1240,1,0,0,0,1239,1241,5,120,
        0,0,1240,1239,1,0,0,0,1240,1241,1,0,0,0,1241,1242,1,0,0,0,1242,1245,
        5,14,0,0,1243,1244,5,27,0,0,1244,1246,5,29,0,0,1245,1243,1,0,0,0,
        1245,1246,1,0,0,0,1246,1247,1,0,0,0,1247,1250,3,244,122,0,1248,1249,
        5,9,0,0,1249,1251,3,22,11,0,1250,1248,1,0,0,0,1250,1251,1,0,0,0,
        1251,157,1,0,0,0,1252,1253,5,17,0,0,1253,1254,5,76,0,0,1254,1257,
        5,15,0,0,1255,1256,5,27,0,0,1256,1258,5,29,0,0,1257,1255,1,0,0,0,
        1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1262,3,256,128,0,1260,1261,
        5,9,0,0,1261,1263,3,22,11,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,
        1263,159,1,0,0,0,1264,1265,5,17,0,0,1265,1266,5,76,0,0,1266,1269,
        5,16,0,0,1267,1268,5,27,0,0,1268,1270,5,29,0,0,1269,1267,1,0,0,0,
        1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1274,3,258,129,0,1272,1273,
        5,9,0,0,1273,1275,3,22,11,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,
        1275,161,1,0,0,0,1276,1277,5,17,0,0,1277,1278,5,76,0,0,1278,1279,
        5,99,0,0,1279,1282,5,39,0,0,1280,1281,5,27,0,0,1281,1283,5,29,0,
        0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1290,
        3,264,132,0,1285,1287,5,9,0,0,1286,1288,5,79,0,0,1287,1286,1,0,0,
        0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1291,3,232,116,0,1290,
        1285,1,0,0,0,1290,1291,1,0,0,0,1291,163,1,0,0,0,1292,1293,5,17,0,
        0,1293,1294,5,76,0,0,1294,1295,5,99,0,0,1295,1298,5,46,0,0,1296,
        1297,5,27,0,0,1297,1299,5,29,0,0,1298,1296,1,0,0,0,1298,1299,1,0,
        0,0,1299,1300,1,0,0,0,1300,1301,3,268,134,0,1301,1306,5,9,0,0,1302,
        1304,5,79,0,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,
        0,0,1305,1307,3,232,116,0,1306,1303,1,0,0,0,1306,1307,1,0,0,0,1307,
        1308,1,0,0,0,1308,1309,5,99,0,0,1309,1310,5,39,0,0,1310,1311,3,264,
        132,0,1311,165,1,0,0,0,1312,1313,5,17,0,0,1313,1314,5,76,0,0,1314,
        1315,7,5,0,0,1315,1318,5,108,0,0,1316,1317,5,27,0,0,1317,1319,5,
        29,0,0,1318,1316,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,
        1321,3,96,48,0,1321,167,1,0,0,0,1322,1323,5,17,0,0,1323,1324,5,76,
        0,0,1324,1327,5,25,0,0,1325,1326,5,27,0,0,1326,1328,5,29,0,0,1327,
        1325,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,1330,3,114,
        57,0,1330,1331,5,189,0,0,1331,1332,3,96,48,0,1332,169,1,0,0,0,1333,
        1334,5,17,0,0,1334,1335,5,76,0,0,1335,1338,5,42,0,0,1336,1337,5,
        27,0,0,1337,1339,5,29,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,
        1340,1,0,0,0,1340,1342,3,130,65,0,1341,1343,3,26,13,0,1342,1341,
        1,0,0,0,1342,1343,1,0,0,0,1343,171,1,0,0,0,1344,1345,5,50,0,0,1345,
        1346,5,76,0,0,1346,1358,3,174,87,0,1347,1349,5,8,0,0,1348,1350,5,
        79,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,
        1359,3,236,118,0,1352,1353,5,8,0,0,1353,1356,3,24,12,0,1354,1355,
        5,124,0,0,1355,1357,3,254,127,0,1356,1354,1,0,0,0,1356,1357,1,0,
        0,0,1357,1359,1,0,0,0,1358,1347,1,0,0,0,1358,1352,1,0,0,0,1358,1359,
        1,0,0,0,1359,1360,1,0,0,0,1360,1361,5,43,0,0,1361,1363,3,130,65,
        0,1362,1364,3,26,13,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,173,
        1,0,0,0,1365,1371,3,176,88,0,1366,1367,3,176,88,0,1367,1368,5,177,
        0,0,1368,1369,3,174,87,0,1369,1371,1,0,0,0,1370,1365,1,0,0,0,1370,
        1366,1,0,0,0,1371,175,1,0,0,0,1372,1373,7,8,0,0,1373,177,1,0,0,0,
        1374,1375,5,50,0,0,1375,1376,5,76,0,0,1376,1377,5,42,0,0,1377,1379,
        3,130,65,0,1378,1380,3,26,13,0,1379,1378,1,0,0,0,1379,1380,1,0,0,
        0,1380,1381,1,0,0,0,1381,1382,5,43,0,0,1382,1383,3,114,57,0,1383,
        1384,5,189,0,0,1384,1386,3,96,48,0,1385,1387,3,14,7,0,1386,1385,
        1,0,0,0,1386,1387,1,0,0,0,1387,179,1,0,0,0,1388,1389,5,54,0,0,1389,
        1390,5,76,0,0,1390,1402,3,174,87,0,1391,1393,5,8,0,0,1392,1394,5,
        79,0,0,1393,1392,1,0,0,0,1393,1394,1,0,0,0,1394,1395,1,0,0,0,1395,
        1403,3,236,118,0,1396,1397,5,8,0,0,1397,1400,3,24,12,0,1398,1399,
        5,124,0,0,1399,1401,3,254,127,0,1400,1398,1,0,0,0,1400,1401,1,0,
        0,0,1401,1403,1,0,0,0,1402,1391,1,0,0,0,1402,1396,1,0,0,0,1402,1403,
        1,0,0,0,1403,1404,1,0,0,0,1404,1405,5,9,0,0,1405,1407,3,130,65,0,
        1406,1408,3,26,13,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,181,
        1,0,0,0,1409,1410,5,54,0,0,1410,1411,5,76,0,0,1411,1412,5,42,0,0,
        1412,1414,3,130,65,0,1413,1415,3,26,13,0,1414,1413,1,0,0,0,1414,
        1415,1,0,0,0,1415,1416,1,0,0,0,1416,1417,5,9,0,0,1417,1418,3,114,
        57,0,1418,1419,5,189,0,0,1419,1420,3,96,48,0,1420,183,1,0,0,0,1421,
        1422,5,18,0,0,1422,1423,5,76,0,0,1423,1424,3,186,93,0,1424,185,1,
        0,0,0,1425,1426,5,79,0,0,1426,1429,3,232,116,0,1427,1429,3,22,11,
        0,1428,1425,1,0,0,0,1428,1427,1,0,0,0,1429,187,1,0,0,0,1430,1431,
        5,5,0,0,1431,1433,5,76,0,0,1432,1434,5,77,0,0,1433,1432,1,0,0,0,
        1433,1434,1,0,0,0,1434,1435,1,0,0,0,1435,1436,5,6,0,0,1436,189,1,
        0,0,0,1437,1438,5,5,0,0,1438,1439,5,76,0,0,1439,1440,5,78,0,0,1440,
        191,1,0,0,0,1441,1442,5,5,0,0,1442,1443,5,76,0,0,1443,1449,5,11,
        0,0,1444,1446,7,9,0,0,1445,1447,5,79,0,0,1446,1445,1,0,0,0,1446,
        1447,1,0,0,0,1447,1448,1,0,0,0,1448,1450,3,232,116,0,1449,1444,1,
        0,0,0,1449,1450,1,0,0,0,1450,193,1,0,0,0,1451,1452,5,5,0,0,1452,
        1454,5,76,0,0,1453,1455,5,48,0,0,1454,1453,1,0,0,0,1454,1455,1,0,
        0,0,1455,1457,1,0,0,0,1456,1458,5,120,0,0,1457,1456,1,0,0,0,1457,
        1458,1,0,0,0,1458,1459,1,0,0,0,1459,1462,5,80,0,0,1460,1461,7,9,
        0,0,1461,1463,3,22,11,0,1462,1460,1,0,0,0,1462,1463,1,0,0,0,1463,
        195,1,0,0,0,1464,1465,5,5,0,0,1465,1466,5,76,0,0,1466,1469,5,81,
        0,0,1467,1468,7,9,0,0,1468,1470,3,22,11,0,1469,1467,1,0,0,0,1469,
        1470,1,0,0,0,1470,197,1,0,0,0,1471,1472,5,5,0,0,1472,1473,5,76,0,
        0,1473,1476,5,82,0,0,1474,1475,7,9,0,0,1475,1477,3,22,11,0,1476,
        1474,1,0,0,0,1476,1477,1,0,0,0,1477,199,1,0,0,0,1478,1479,5,5,0,
        0,1479,1480,5,76,0,0,1480,1481,5,99,0,0,1481,1487,5,104,0,0,1482,
        1484,7,9,0,0,1483,1485,5,79,0,0,1484,1483,1,0,0,0,1484,1485,1,0,
        0,0,1485,1486,1,0,0,0,1486,1488,3,232,116,0,1487,1482,1,0,0,0,1487,
        1488,1,0,0,0,1488,201,1,0,0,0,1489,1490,5,5,0,0,1490,1491,5,76,0,
        0,1491,1492,5,99,0,0,1492,1493,5,105,0,0,1493,1498,7,9,0,0,1494,
        1496,5,79,0,0,1495,1494,1,0,0,0,1495,1496,1,0,0,0,1496,1497,1,0,
        0,0,1497,1499,3,232,116,0,1498,1495,1,0,0,0,1498,1499,1,0,0,0,1499,
        1500,1,0,0,0,1500,1501,5,99,0,0,1501,1502,5,39,0,0,1502,1503,3,264,
        132,0,1503,203,1,0,0,0,1504,1505,5,5,0,0,1505,1506,5,76,0,0,1506,
        1507,5,106,0,0,1507,1513,5,107,0,0,1508,1510,7,9,0,0,1509,1511,5,
        79,0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,1512,
        1514,3,232,116,0,1513,1508,1,0,0,0,1513,1514,1,0,0,0,1514,205,1,
        0,0,0,1515,1516,5,5,0,0,1516,1517,5,76,0,0,1517,1527,5,122,0,0,1518,
        1525,7,9,0,0,1519,1520,5,61,0,0,1520,1526,5,79,0,0,1521,1523,5,79,
        0,0,1522,1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1526,
        3,232,116,0,1525,1519,1,0,0,0,1525,1522,1,0,0,0,1526,1528,1,0,0,
        0,1527,1518,1,0,0,0,1527,1528,1,0,0,0,1528,1535,1,0,0,0,1529,1531,
        5,59,0,0,1530,1532,3,114,57,0,1531,1530,1,0,0,0,1531,1532,1,0,0,
        0,1532,1533,1,0,0,0,1533,1534,5,189,0,0,1534,1536,3,96,48,0,1535,
        1529,1,0,0,0,1535,1536,1,0,0,0,1536,207,1,0,0,0,1537,1538,5,5,0,
        0,1538,1539,5,76,0,0,1539,1540,5,58,0,0,1540,1541,5,59,0,0,1541,
        1551,3,130,65,0,1542,1549,7,9,0,0,1543,1544,5,61,0,0,1544,1550,5,
        79,0,0,1545,1547,5,79,0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,
        1548,1,0,0,0,1548,1550,3,232,116,0,1549,1543,1,0,0,0,1549,1546,1,
        0,0,0,1550,1552,1,0,0,0,1551,1542,1,0,0,0,1551,1552,1,0,0,0,1552,
        209,1,0,0,0,1553,1554,5,5,0,0,1554,1555,5,1,0,0,1555,1556,5,76,0,
        0,1556,1558,5,79,0,0,1557,1559,3,232,116,0,1558,1557,1,0,0,0,1558,
        1559,1,0,0,0,1559,1563,1,0,0,0,1560,1561,5,127,0,0,1561,1562,5,12,
        0,0,1562,1564,5,128,0,0,1563,1560,1,0,0,0,1563,1564,1,0,0,0,1564,
        211,1,0,0,0,1565,1566,5,5,0,0,1566,1567,5,1,0,0,1567,1568,5,76,0,
        0,1568,1570,5,12,0,0,1569,1571,3,238,119,0,1570,1569,1,0,0,0,1570,
        1571,1,0,0,0,1571,1577,1,0,0,0,1572,1574,7,9,0,0,1573,1575,5,79,
        0,0,1574,1573,1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1578,
        3,232,116,0,1577,1572,1,0,0,0,1577,1578,1,0,0,0,1578,213,1,0,0,0,
        1579,1580,5,5,0,0,1580,1581,5,1,0,0,1581,1583,5,76,0,0,1582,1584,
        5,48,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1586,1,0,0,0,1585,
        1587,5,120,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,
        0,0,1588,1589,5,14,0,0,1589,1592,3,244,122,0,1590,1591,7,9,0,0,1591,
        1593,3,22,11,0,1592,1590,1,0,0,0,1592,1593,1,0,0,0,1593,215,1,0,
        0,0,1594,1595,5,5,0,0,1595,1596,5,1,0,0,1596,1597,5,76,0,0,1597,
        1598,5,15,0,0,1598,1601,3,256,128,0,1599,1600,7,9,0,0,1600,1602,
        3,22,11,0,1601,1599,1,0,0,0,1601,1602,1,0,0,0,1602,217,1,0,0,0,1603,
        1604,5,5,0,0,1604,1605,5,1,0,0,1605,1606,5,76,0,0,1606,1607,5,16,
        0,0,1607,1610,3,258,129,0,1608,1609,7,9,0,0,1609,1611,3,22,11,0,
        1610,1608,1,0,0,0,1610,1611,1,0,0,0,1611,219,1,0,0,0,1612,1613,5,
        5,0,0,1613,1614,5,1,0,0,1614,1615,5,76,0,0,1615,1616,5,99,0,0,1616,
        1617,5,39,0,0,1617,1623,3,264,132,0,1618,1620,7,9,0,0,1619,1621,
        5,79,0,0,1620,1619,1,0,0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,
        1624,3,232,116,0,1623,1618,1,0,0,0,1623,1624,1,0,0,0,1624,221,1,
        0,0,0,1625,1626,5,5,0,0,1626,1627,5,1,0,0,1627,1628,5,76,0,0,1628,
        1629,5,99,0,0,1629,1630,5,46,0,0,1630,1631,3,268,134,0,1631,1636,
        7,9,0,0,1632,1634,5,79,0,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,
        1635,1,0,0,0,1635,1637,3,232,116,0,1636,1633,1,0,0,0,1636,1637,1,
        0,0,0,1637,1638,1,0,0,0,1638,1639,5,99,0,0,1639,1640,5,39,0,0,1640,
        1641,3,264,132,0,1641,223,1,0,0,0,1642,1643,5,5,0,0,1643,1644,5,
        1,0,0,1644,1645,5,76,0,0,1645,1646,5,106,0,0,1646,1647,5,108,0,0,
        1647,1648,3,96,48,0,1648,225,1,0,0,0,1649,1650,5,5,0,0,1650,1651,
        5,1,0,0,1651,1652,5,76,0,0,1652,1653,5,42,0,0,1653,1655,3,130,65,
        0,1654,1656,3,26,13,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,227,
        1,0,0,0,1657,1658,5,5,0,0,1658,1659,5,1,0,0,1659,1660,5,76,0,0,1660,
        1661,5,25,0,0,1661,1662,3,114,57,0,1662,1663,5,189,0,0,1663,1664,
        3,96,48,0,1664,229,1,0,0,0,1665,1666,5,130,0,0,1666,1667,5,76,0,
        0,1667,1668,5,79,0,0,1668,1669,3,232,116,0,1669,1671,5,19,0,0,1670,
        1672,5,73,0,0,1671,1670,1,0,0,0,1671,1672,1,0,0,0,1672,1673,1,0,
        0,0,1673,1674,5,132,0,0,1674,1685,5,127,0,0,1675,1682,5,12,0,0,1676,
        1677,5,74,0,0,1677,1680,5,133,0,0,1678,1679,5,74,0,0,1679,1681,5,
        72,0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,0,0,0,1682,
        1676,1,0,0,0,1682,1683,1,0,0,0,1683,1686,1,0,0,0,1684,1686,5,66,
        0,0,1685,1675,1,0,0,0,1685,1684,1,0,0,0,1686,1687,1,0,0,0,1687,1688,
        5,128,0,0,1688,1690,5,43,0,0,1689,1691,5,131,0,0,1690,1689,1,0,0,
        0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,1692,1693,3,82,41,0,1693,231,
        1,0,0,0,1694,1696,3,272,136,0,1695,1694,1,0,0,0,1695,1696,1,0,0,
        0,1696,1697,1,0,0,0,1697,1698,3,274,137,0,1698,233,1,0,0,0,1699,
        1701,3,272,136,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,1702,1,
        0,0,0,1702,1703,3,274,137,0,1703,235,1,0,0,0,1704,1705,3,276,138,
        0,1705,237,1,0,0,0,1706,1707,3,274,137,0,1707,239,1,0,0,0,1708,1709,
        3,274,137,0,1709,241,1,0,0,0,1710,1711,3,276,138,0,1711,243,1,0,
        0,0,1712,1713,3,274,137,0,1713,245,1,0,0,0,1714,1715,3,274,137,0,
        1715,247,1,0,0,0,1716,1717,3,316,158,0,1717,249,1,0,0,0,1718,1719,
        3,316,158,0,1719,251,1,0,0,0,1720,1721,3,274,137,0,1721,253,1,0,
        0,0,1722,1723,3,276,138,0,1723,255,1,0,0,0,1724,1725,3,274,137,0,
        1725,257,1,0,0,0,1726,1727,3,274,137,0,1727,259,1,0,0,0,1728,1729,
        3,274,137,0,1729,261,1,0,0,0,1730,1731,3,274,137,0,1731,263,1,0,
        0,0,1732,1733,3,274,137,0,1733,265,1,0,0,0,1734,1735,3,274,137,0,
        1735,267,1,0,0,0,1736,1737,3,274,137,0,1737,269,1,0,0,0,1738,1739,
        3,330,165,0,1739,271,1,0,0,0,1740,1745,3,270,135,0,1741,1742,5,177,
        0,0,1742,1744,3,270,135,0,1743,1741,1,0,0,0,1744,1747,1,0,0,0,1745,
        1743,1,0,0,0,1745,1746,1,0,0,0,1746,1748,1,0,0,0,1747,1745,1,0,0,
        0,1748,1749,5,189,0,0,1749,273,1,0,0,0,1750,1755,5,153,0,0,1751,
        1755,5,203,0,0,1752,1753,4,137,0,0,1753,1755,5,204,0,0,1754,1750,
        1,0,0,0,1754,1751,1,0,0,0,1754,1752,1,0,0,0,1755,275,1,0,0,0,1756,
        1761,5,153,0,0,1757,1761,5,203,0,0,1758,1759,4,138,1,0,1759,1761,
        5,204,0,0,1760,1756,1,0,0,0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,
        1761,277,1,0,0,0,1762,1763,5,182,0,0,1763,1768,3,280,140,0,1764,
        1765,5,177,0,0,1765,1767,3,280,140,0,1766,1764,1,0,0,0,1767,1770,
        1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,0,1769,1771,1,0,0,0,1770,
        1768,1,0,0,0,1771,1772,5,183,0,0,1772,1776,1,0,0,0,1773,1774,5,182,
        0,0,1774,1776,5,183,0,0,1775,1762,1,0,0,0,1775,1773,1,0,0,0,1776,
        279,1,0,0,0,1777,1778,5,204,0,0,1778,1779,5,179,0,0,1779,1780,3,
        284,142,0,1780,281,1,0,0,0,1781,1790,5,185,0,0,1782,1787,3,284,142,
        0,1783,1784,5,177,0,0,1784,1786,3,284,142,0,1785,1783,1,0,0,0,1786,
        1789,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,1791,1,0,0,
        0,1789,1787,1,0,0,0,1790,1782,1,0,0,0,1790,1791,1,0,0,0,1791,1792,
        1,0,0,0,1792,1793,5,186,0,0,1793,283,1,0,0,0,1794,1806,5,204,0,0,
        1795,1797,7,10,0,0,1796,1795,1,0,0,0,1796,1797,1,0,0,0,1797,1798,
        1,0,0,0,1798,1806,5,198,0,0,1799,1806,5,196,0,0,1800,1806,3,278,
        139,0,1801,1806,3,282,141,0,1802,1806,5,37,0,0,1803,1806,5,38,0,
        0,1804,1806,5,36,0,0,1805,1794,1,0,0,0,1805,1796,1,0,0,0,1805,1799,
        1,0,0,0,1805,1800,1,0,0,0,1805,1801,1,0,0,0,1805,1802,1,0,0,0,1805,
        1803,1,0,0,0,1805,1804,1,0,0,0,1806,285,1,0,0,0,1807,1808,5,182,
        0,0,1808,1813,3,290,145,0,1809,1810,5,177,0,0,1810,1812,3,290,145,
        0,1811,1809,1,0,0,0,1812,1815,1,0,0,0,1813,1811,1,0,0,0,1813,1814,
        1,0,0,0,1814,1816,1,0,0,0,1815,1813,1,0,0,0,1816,1817,5,183,0,0,
        1817,1821,1,0,0,0,1818,1819,5,182,0,0,1819,1821,5,183,0,0,1820,1807,
        1,0,0,0,1820,1818,1,0,0,0,1821,287,1,0,0,0,1822,1824,7,11,0,0,1823,
        1822,1,0,0,0,1824,1825,1,0,0,0,1825,1823,1,0,0,0,1825,1826,1,0,0,
        0,1826,289,1,0,0,0,1827,1828,3,298,149,0,1828,1829,5,179,0,0,1829,
        1831,3,300,150,0,1830,1832,7,12,0,0,1831,1830,1,0,0,0,1831,1832,
        1,0,0,0,1832,1834,1,0,0,0,1833,1835,3,292,146,0,1834,1833,1,0,0,
        0,1834,1835,1,0,0,0,1835,1841,1,0,0,0,1836,1837,5,144,0,0,1837,1838,
        5,180,0,0,1838,1839,3,304,152,0,1839,1840,5,181,0,0,1840,1842,1,
        0,0,0,1841,1836,1,0,0,0,1841,1842,1,0,0,0,1842,1844,1,0,0,0,1843,
        1845,3,288,144,0,1844,1843,1,0,0,0,1844,1845,1,0,0,0,1845,1847,1,
        0,0,0,1846,1848,3,294,147,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,
        1848,1850,1,0,0,0,1849,1851,3,286,143,0,1850,1849,1,0,0,0,1850,1851,
        1,0,0,0,1851,291,1,0,0,0,1852,1854,7,13,0,0,1853,1852,1,0,0,0,1854,
        1855,1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,293,1,0,0,
        0,1857,1858,5,13,0,0,1858,1859,5,12,0,0,1859,1860,3,284,142,0,1860,
        295,1,0,0,0,1861,1862,7,14,0,0,1862,297,1,0,0,0,1863,1867,5,204,
        0,0,1864,1867,3,316,158,0,1865,1867,3,296,148,0,1866,1863,1,0,0,
        0,1866,1864,1,0,0,0,1866,1865,1,0,0,0,1867,299,1,0,0,0,1868,1871,
        3,322,161,0,1869,1871,3,296,148,0,1870,1868,1,0,0,0,1870,1869,1,
        0,0,0,1871,301,1,0,0,0,1872,1875,5,204,0,0,1873,1875,3,316,158,0,
        1874,1872,1,0,0,0,1874,1873,1,0,0,0,1875,303,1,0,0,0,1876,1879,5,
        204,0,0,1877,1879,3,316,158,0,1878,1876,1,0,0,0,1878,1877,1,0,0,
        0,1879,305,1,0,0,0,1880,1883,3,322,161,0,1881,1883,3,286,143,0,1882,
        1880,1,0,0,0,1882,1881,1,0,0,0,1883,307,1,0,0,0,1884,1885,3,316,
        158,0,1885,309,1,0,0,0,1886,1887,3,316,158,0,1887,311,1,0,0,0,1888,
        1889,3,316,158,0,1889,313,1,0,0,0,1890,1894,7,15,0,0,1891,1892,4,
        157,2,0,1892,1894,5,204,0,0,1893,1890,1,0,0,0,1893,1891,1,0,0,0,
        1894,315,1,0,0,0,1895,1896,3,314,157,0,1896,317,1,0,0,0,1897,1902,
        3,316,158,0,1898,1899,5,177,0,0,1899,1901,3,316,158,0,1900,1898,
        1,0,0,0,1901,1904,1,0,0,0,1902,1900,1,0,0,0,1902,1903,1,0,0,0,1903,
        319,1,0,0,0,1904,1902,1,0,0,0,1905,1906,5,180,0,0,1906,1907,3,318,
        159,0,1907,1908,5,181,0,0,1908,321,1,0,0,0,1909,1911,3,316,158,0,
        1910,1912,3,326,163,0,1911,1910,1,0,0,0,1911,1912,1,0,0,0,1912,323,
        1,0,0,0,1913,1918,3,316,158,0,1914,1916,3,326,163,0,1915,1917,3,
        326,163,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1919,1,0,0,0,
        1918,1914,1,0,0,0,1918,1919,1,0,0,0,1919,325,1,0,0,0,1920,1921,5,
        176,0,0,1921,1922,3,316,158,0,1922,327,1,0,0,0,1923,1927,5,205,0,
        0,1924,1925,4,164,3,0,1925,1927,5,204,0,0,1926,1923,1,0,0,0,1926,
        1924,1,0,0,0,1927,329,1,0,0,0,1928,1931,3,316,158,0,1929,1931,3,
        328,164,0,1930,1928,1,0,0,0,1930,1929,1,0,0,0,1931,331,1,0,0,0,251,
        336,341,344,347,408,416,419,432,445,452,461,464,470,475,477,482,
        495,497,501,512,514,526,528,549,557,565,578,580,583,587,590,595,
        603,605,612,615,621,624,630,632,637,643,646,649,652,663,665,671,
        691,693,698,703,707,710,715,719,723,738,740,745,750,754,757,760,
        763,767,784,786,791,794,798,801,811,813,820,837,839,844,847,855,
        859,862,867,869,884,886,893,896,909,911,915,922,950,952,960,963,
        972,974,994,996,1001,1004,1007,1011,1013,1036,1039,1045,1049,1052,
        1058,1062,1065,1070,1073,1079,1085,1090,1093,1095,1098,1106,1112,
        1116,1119,1124,1128,1136,1142,1146,1149,1154,1158,1167,1170,1176,
        1179,1189,1192,1205,1208,1215,1224,1229,1232,1237,1240,1245,1250,
        1257,1262,1269,1274,1282,1287,1290,1298,1303,1306,1318,1327,1338,
        1342,1349,1356,1358,1363,1370,1379,1386,1393,1400,1402,1407,1414,
        1428,1433,1446,1449,1454,1457,1462,1469,1476,1484,1487,1495,1498,
        1510,1513,1522,1525,1527,1531,1535,1546,1549,1551,1558,1563,1570,
        1574,1577,1583,1586,1592,1601,1610,1620,1623,1633,1636,1655,1671,
        1680,1682,1685,1690,1695,1700,1745,1754,1760,1768,1775,1787,1790,
        1796,1805,1813,1820,1825,1831,1834,1841,1844,1847,1850,1855,1866,
        1870,1874,1878,1882,1893,1902,1911,1916,1918,1926,1930
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", 
                     "'->>'", "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "FORCE_SYMBOL", "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", 
                      "FALSE_SYMBOL", "SET_SYMBOL", "IDENTIFIED_SYMBOL", 
                      "BY_SYMBOL", "ROLE_SYMBOL", "TO_SYMBOL", "IGNORE_SYMBOL", 
                      "CLONE_SYMBOL", "FILE_SYMBOL", "BINARY_SYMBOL", "DATA_SYMBOL", 
                      "LOAD_SYMBOL", "GRANT_SYMBOL", "READ_SYMBOL", "DELETE_SYMBOL", 
                      "GROUP_SYMBOL", "REVOKE_SYMBOL", "ACCOUNT_SYMBOL", 
                      "LOCK_SYMBOL", "UNLOCK_SYMBOL", "GRANTS_SYMBOL", "FOR_SYMBOL", 
                      "LEVEL_SYMBOL", "ANY_SYMBOL", "CLIENT_SYMBOL", "URL_SYMBOL", 
                      "NAME_SYMBOL", "DO_SYMBOL", "ALL_SYMBOL", "PARAMETERS_SYMBOL", 
                      "ADD_SYMBOL", "REMOVE_SYMBOL", "MERGE_SYMBOL", "COMMENT_SYMBOL", 
                      "DYNAMIC_SYMBOL", "SQL_SYMBOL", "AND_SYMBOL", "CONFIGURE_SYMBOL", 
                      "REST_SYMBOL", "METADATA_SYMBOL", "SERVICES_SYMBOL", 
                      "SERVICE_SYMBOL", "VIEWS_SYMBOL", "PROCEDURES_SYMBOL", 
                      "FUNCTIONS_SYMBOL", "RESULT_SYMBOL", "ENABLED_SYMBOL", 
                      "PUBLISHED_SYMBOL", "DISABLED_SYMBOL", "PRIVATE_SYMBOL", 
                      "UNPUBLISHED_SYMBOL", "PROTOCOL_SYMBOL", "HTTP_SYMBOL", 
                      "HTTPS_SYMBOL", "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", 
                      "MANAGEMENT_SYMBOL", "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", 
                      "ITEMS_SYMBOL", "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FEED_SYMBOL", "ITEM_SYMBOL", 
                      "SETS_SYMBOL", "FILES_SYMBOL", "AUTH_SYMBOL", "APPS_SYMBOL", 
                      "APP_SYMBOL", "ID_SYMBOL", "SECRET_SYMBOL", "VENDOR_SYMBOL", 
                      "MRS_SYMBOL", "MYSQL_SYMBOL", "USERS_SYMBOL", "ALLOW_SYMBOL", 
                      "REGISTER_SYMBOL", "CLASS_SYMBOL", "DEVELOPMENT_SYMBOL", 
                      "SCRIPTS_SYMBOL", "MAPPING_SYMBOL", "TYPESCRIPT_SYMBOL", 
                      "ROLES_SYMBOL", "EXTENDS_SYMBOL", "OBJECT_SYMBOL", 
                      "HIERARCHY_SYMBOL", "INCLUDE_SYMBOL", "INCLUDING_SYMBOL", 
                      "ENDPOINTS_SYMBOL", "OBJECTS_SYMBOL", "DUMP_SYMBOL", 
                      "ZIP_SYMBOL", "SCRIPT_SYMBOL", "STATIC_SYMBOL", "AT_INOUT_SYMBOL", 
                      "AT_IN_SYMBOL", "AT_OUT_SYMBOL", "AT_CHECK_SYMBOL", 
                      "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", 
                      "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", 
                      "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", 
                      "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", 
                      "AT_KEY_SYMBOL", "REST_REQUEST_PATH", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_enabledDisabledPrivate = 3
    RULE_quotedTextOrDefault = 4
    RULE_jsonOptions = 5
    RULE_metadata = 6
    RULE_comments = 7
    RULE_authenticationRequired = 8
    RULE_itemsPerPage = 9
    RULE_itemsPerPageNumber = 10
    RULE_serviceSchemaSelector = 11
    RULE_serviceSchemaSelectorWildcard = 12
    RULE_roleService = 13
    RULE_configureRestMetadataStatement = 14
    RULE_restMetadataOptions = 15
    RULE_updateIfAvailable = 16
    RULE_createRestServiceStatement = 17
    RULE_restServiceOptions = 18
    RULE_publishedUnpublished = 19
    RULE_restProtocol = 20
    RULE_restAuthentication = 21
    RULE_authPath = 22
    RULE_authRedirection = 23
    RULE_authValidation = 24
    RULE_authPageContent = 25
    RULE_userManagementSchema = 26
    RULE_addAuthApp = 27
    RULE_removeAuthApp = 28
    RULE_createRestSchemaStatement = 29
    RULE_restSchemaOptions = 30
    RULE_createRestViewStatement = 31
    RULE_restObjectOptions = 32
    RULE_restViewMediaType = 33
    RULE_restViewFormat = 34
    RULE_restViewAuthenticationProcedure = 35
    RULE_createRestProcedureStatement = 36
    RULE_restProcedureResult = 37
    RULE_createRestFunctionStatement = 38
    RULE_restFunctionResult = 39
    RULE_createRestContentSetStatement = 40
    RULE_directoryFilePath = 41
    RULE_restContentSetOptions = 42
    RULE_fileIgnoreList = 43
    RULE_loadScripts = 44
    RULE_createRestContentFileStatement = 45
    RULE_restContentFileOptions = 46
    RULE_createRestAuthAppStatement = 47
    RULE_authAppName = 48
    RULE_vendorName = 49
    RULE_restAuthAppOptions = 50
    RULE_allowNewUsersToRegister = 51
    RULE_defaultRole = 52
    RULE_appId = 53
    RULE_appSecret = 54
    RULE_url = 55
    RULE_createRestUserStatement = 56
    RULE_userName = 57
    RULE_userPassword = 58
    RULE_userOptions = 59
    RULE_appOptions = 60
    RULE_accountLock = 61
    RULE_createRestRoleStatement = 62
    RULE_restRoleOptions = 63
    RULE_parentRoleName = 64
    RULE_roleName = 65
    RULE_cloneRestServiceStatement = 66
    RULE_alterRestServiceStatement = 67
    RULE_alterRestSchemaStatement = 68
    RULE_alterRestViewStatement = 69
    RULE_alterRestProcedureStatement = 70
    RULE_alterRestFunctionStatement = 71
    RULE_alterRestContentSetStatement = 72
    RULE_alterRestAuthAppStatement = 73
    RULE_newAuthAppName = 74
    RULE_alterRestUserStatement = 75
    RULE_dropRestServiceStatement = 76
    RULE_dropRestSchemaStatement = 77
    RULE_dropRestViewStatement = 78
    RULE_dropRestProcedureStatement = 79
    RULE_dropRestFunctionStatement = 80
    RULE_dropRestContentSetStatement = 81
    RULE_dropRestContentFileStatement = 82
    RULE_dropRestAuthAppStatement = 83
    RULE_dropRestUserStatement = 84
    RULE_dropRestRoleStatement = 85
    RULE_grantRestPrivilegeStatement = 86
    RULE_privilegeList = 87
    RULE_privilegeName = 88
    RULE_grantRestRoleStatement = 89
    RULE_revokeRestPrivilegeStatement = 90
    RULE_revokeRestRoleStatement = 91
    RULE_useStatement = 92
    RULE_serviceAndSchemaRequestPaths = 93
    RULE_showRestMetadataStatusStatement = 94
    RULE_showRestServicesStatement = 95
    RULE_showRestSchemasStatement = 96
    RULE_showRestViewsStatement = 97
    RULE_showRestProceduresStatement = 98
    RULE_showRestFunctionsStatement = 99
    RULE_showRestContentSetsStatement = 100
    RULE_showRestContentFilesStatement = 101
    RULE_showRestAuthAppsStatement = 102
    RULE_showRestRolesStatement = 103
    RULE_showRestGrantsStatement = 104
    RULE_showCreateRestServiceStatement = 105
    RULE_showCreateRestSchemaStatement = 106
    RULE_showCreateRestViewStatement = 107
    RULE_showCreateRestProcedureStatement = 108
    RULE_showCreateRestFunctionStatement = 109
    RULE_showCreateRestContentSetStatement = 110
    RULE_showCreateRestContentFileStatement = 111
    RULE_showCreateRestAuthAppStatement = 112
    RULE_showCreateRestRoleStatement = 113
    RULE_showCreateRestUserStatement = 114
    RULE_dumpRestServiceStatement = 115
    RULE_serviceRequestPath = 116
    RULE_newServiceRequestPath = 117
    RULE_serviceRequestPathWildcard = 118
    RULE_schemaRequestPath = 119
    RULE_newSchemaRequestPath = 120
    RULE_schemaRequestPathWildcard = 121
    RULE_viewRequestPath = 122
    RULE_newViewRequestPath = 123
    RULE_restObjectName = 124
    RULE_restResultName = 125
    RULE_objectRequestPath = 126
    RULE_objectRequestPathWildcard = 127
    RULE_procedureRequestPath = 128
    RULE_functionRequestPath = 129
    RULE_newProcedureRequestPath = 130
    RULE_newFunctionRequestPath = 131
    RULE_contentSetRequestPath = 132
    RULE_newContentSetRequestPath = 133
    RULE_contentFileRequestPath = 134
    RULE_serviceDeveloperIdentifier = 135
    RULE_serviceDevelopersIdentifier = 136
    RULE_requestPathIdentifier = 137
    RULE_requestPathIdentifierWithWildcard = 138
    RULE_jsonObj = 139
    RULE_jsonPair = 140
    RULE_jsonArr = 141
    RULE_jsonValue = 142
    RULE_graphQlObj = 143
    RULE_graphQlCrudOptions = 144
    RULE_graphQlPair = 145
    RULE_graphQlValueOptions = 146
    RULE_graphQlValueJsonSchema = 147
    RULE_graphQlAllowedKeyword = 148
    RULE_graphQlPairKey = 149
    RULE_graphQlPairValue = 150
    RULE_graphQlReduceToValue = 151
    RULE_graphQlDatatypeValue = 152
    RULE_graphQlValue = 153
    RULE_schemaName = 154
    RULE_viewName = 155
    RULE_procedureName = 156
    RULE_pureIdentifier = 157
    RULE_identifier = 158
    RULE_identifierList = 159
    RULE_identifierListWithParentheses = 160
    RULE_qualifiedIdentifier = 161
    RULE_simpleIdentifier = 162
    RULE_dotIdentifier = 163
    RULE_textStringLiteral = 164
    RULE_textOrIdentifier = 165

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "enabledDisabledPrivate", 
                   "quotedTextOrDefault", "jsonOptions", "metadata", "comments", 
                   "authenticationRequired", "itemsPerPage", "itemsPerPageNumber", 
                   "serviceSchemaSelector", "serviceSchemaSelectorWildcard", 
                   "roleService", "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "publishedUnpublished", "restProtocol", "restAuthentication", 
                   "authPath", "authRedirection", "authValidation", "authPageContent", 
                   "userManagementSchema", "addAuthApp", "removeAuthApp", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restObjectOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "createRestFunctionStatement", 
                   "restFunctionResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "fileIgnoreList", 
                   "loadScripts", "createRestContentFileStatement", "restContentFileOptions", 
                   "createRestAuthAppStatement", "authAppName", "vendorName", 
                   "restAuthAppOptions", "allowNewUsersToRegister", "defaultRole", 
                   "appId", "appSecret", "url", "createRestUserStatement", 
                   "userName", "userPassword", "userOptions", "appOptions", 
                   "accountLock", "createRestRoleStatement", "restRoleOptions", 
                   "parentRoleName", "roleName", "cloneRestServiceStatement", 
                   "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "alterRestFunctionStatement", "alterRestContentSetStatement", 
                   "alterRestAuthAppStatement", "newAuthAppName", "alterRestUserStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestContentFileStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "dropRestRoleStatement", "grantRestPrivilegeStatement", 
                   "privilegeList", "privilegeName", "grantRestRoleStatement", 
                   "revokeRestPrivilegeStatement", "revokeRestRoleStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestFunctionsStatement", "showRestContentSetsStatement", 
                   "showRestContentFilesStatement", "showRestAuthAppsStatement", 
                   "showRestRolesStatement", "showRestGrantsStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "showCreateRestFunctionStatement", "showCreateRestContentSetStatement", 
                   "showCreateRestContentFileStatement", "showCreateRestAuthAppStatement", 
                   "showCreateRestRoleStatement", "showCreateRestUserStatement", 
                   "dumpRestServiceStatement", "serviceRequestPath", "newServiceRequestPath", 
                   "serviceRequestPathWildcard", "schemaRequestPath", "newSchemaRequestPath", 
                   "schemaRequestPathWildcard", "viewRequestPath", "newViewRequestPath", 
                   "restObjectName", "restResultName", "objectRequestPath", 
                   "objectRequestPathWildcard", "procedureRequestPath", 
                   "functionRequestPath", "newProcedureRequestPath", "newFunctionRequestPath", 
                   "contentSetRequestPath", "newContentSetRequestPath", 
                   "contentFileRequestPath", "serviceDeveloperIdentifier", 
                   "serviceDevelopersIdentifier", "requestPathIdentifier", 
                   "requestPathIdentifierWithWildcard", "jsonObj", "jsonPair", 
                   "jsonArr", "jsonValue", "graphQlObj", "graphQlCrudOptions", 
                   "graphQlPair", "graphQlValueOptions", "graphQlValueJsonSchema", 
                   "graphQlAllowedKeyword", "graphQlPairKey", "graphQlPairValue", 
                   "graphQlReduceToValue", "graphQlDatatypeValue", "graphQlValue", 
                   "schemaName", "viewName", "procedureName", "pureIdentifier", 
                   "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "textStringLiteral", "textOrIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    FORCE_SYMBOL=34
    UPDATE_SYMBOL=35
    NULL_SYMBOL=36
    TRUE_SYMBOL=37
    FALSE_SYMBOL=38
    SET_SYMBOL=39
    IDENTIFIED_SYMBOL=40
    BY_SYMBOL=41
    ROLE_SYMBOL=42
    TO_SYMBOL=43
    IGNORE_SYMBOL=44
    CLONE_SYMBOL=45
    FILE_SYMBOL=46
    BINARY_SYMBOL=47
    DATA_SYMBOL=48
    LOAD_SYMBOL=49
    GRANT_SYMBOL=50
    READ_SYMBOL=51
    DELETE_SYMBOL=52
    GROUP_SYMBOL=53
    REVOKE_SYMBOL=54
    ACCOUNT_SYMBOL=55
    LOCK_SYMBOL=56
    UNLOCK_SYMBOL=57
    GRANTS_SYMBOL=58
    FOR_SYMBOL=59
    LEVEL_SYMBOL=60
    ANY_SYMBOL=61
    CLIENT_SYMBOL=62
    URL_SYMBOL=63
    NAME_SYMBOL=64
    DO_SYMBOL=65
    ALL_SYMBOL=66
    PARAMETERS_SYMBOL=67
    ADD_SYMBOL=68
    REMOVE_SYMBOL=69
    MERGE_SYMBOL=70
    COMMENT_SYMBOL=71
    DYNAMIC_SYMBOL=72
    SQL_SYMBOL=73
    AND_SYMBOL=74
    CONFIGURE_SYMBOL=75
    REST_SYMBOL=76
    METADATA_SYMBOL=77
    SERVICES_SYMBOL=78
    SERVICE_SYMBOL=79
    VIEWS_SYMBOL=80
    PROCEDURES_SYMBOL=81
    FUNCTIONS_SYMBOL=82
    RESULT_SYMBOL=83
    ENABLED_SYMBOL=84
    PUBLISHED_SYMBOL=85
    DISABLED_SYMBOL=86
    PRIVATE_SYMBOL=87
    UNPUBLISHED_SYMBOL=88
    PROTOCOL_SYMBOL=89
    HTTP_SYMBOL=90
    HTTPS_SYMBOL=91
    REQUEST_SYMBOL=92
    REDIRECTION_SYMBOL=93
    MANAGEMENT_SYMBOL=94
    AVAILABLE_SYMBOL=95
    REQUIRED_SYMBOL=96
    ITEMS_SYMBOL=97
    PER_SYMBOL=98
    CONTENT_SYMBOL=99
    MEDIA_SYMBOL=100
    AUTODETECT_SYMBOL=101
    FEED_SYMBOL=102
    ITEM_SYMBOL=103
    SETS_SYMBOL=104
    FILES_SYMBOL=105
    AUTH_SYMBOL=106
    APPS_SYMBOL=107
    APP_SYMBOL=108
    ID_SYMBOL=109
    SECRET_SYMBOL=110
    VENDOR_SYMBOL=111
    MRS_SYMBOL=112
    MYSQL_SYMBOL=113
    USERS_SYMBOL=114
    ALLOW_SYMBOL=115
    REGISTER_SYMBOL=116
    CLASS_SYMBOL=117
    DEVELOPMENT_SYMBOL=118
    SCRIPTS_SYMBOL=119
    MAPPING_SYMBOL=120
    TYPESCRIPT_SYMBOL=121
    ROLES_SYMBOL=122
    EXTENDS_SYMBOL=123
    OBJECT_SYMBOL=124
    HIERARCHY_SYMBOL=125
    INCLUDE_SYMBOL=126
    INCLUDING_SYMBOL=127
    ENDPOINTS_SYMBOL=128
    OBJECTS_SYMBOL=129
    DUMP_SYMBOL=130
    ZIP_SYMBOL=131
    SCRIPT_SYMBOL=132
    STATIC_SYMBOL=133
    AT_INOUT_SYMBOL=134
    AT_IN_SYMBOL=135
    AT_OUT_SYMBOL=136
    AT_CHECK_SYMBOL=137
    AT_NOCHECK_SYMBOL=138
    AT_NOUPDATE_SYMBOL=139
    AT_SORTABLE_SYMBOL=140
    AT_NOFILTERING_SYMBOL=141
    AT_ROWOWNERSHIP_SYMBOL=142
    AT_UNNEST_SYMBOL=143
    AT_DATATYPE_SYMBOL=144
    AT_SELECT_SYMBOL=145
    AT_NOSELECT_SYMBOL=146
    AT_INSERT_SYMBOL=147
    AT_NOINSERT_SYMBOL=148
    AT_UPDATE_SYMBOL=149
    AT_DELETE_SYMBOL=150
    AT_NODELETE_SYMBOL=151
    AT_KEY_SYMBOL=152
    REST_REQUEST_PATH=153
    EQUAL_OPERATOR=154
    ASSIGN_OPERATOR=155
    NULL_SAFE_EQUAL_OPERATOR=156
    GREATER_OR_EQUAL_OPERATOR=157
    GREATER_THAN_OPERATOR=158
    LESS_OR_EQUAL_OPERATOR=159
    LESS_THAN_OPERATOR=160
    NOT_EQUAL_OPERATOR=161
    PLUS_OPERATOR=162
    MINUS_OPERATOR=163
    MULT_OPERATOR=164
    DIV_OPERATOR=165
    MOD_OPERATOR=166
    LOGICAL_NOT_OPERATOR=167
    BITWISE_NOT_OPERATOR=168
    SHIFT_LEFT_OPERATOR=169
    SHIFT_RIGHT_OPERATOR=170
    LOGICAL_AND_OPERATOR=171
    BITWISE_AND_OPERATOR=172
    BITWISE_XOR_OPERATOR=173
    LOGICAL_OR_OPERATOR=174
    BITWISE_OR_OPERATOR=175
    DOT_SYMBOL=176
    COMMA_SYMBOL=177
    SEMICOLON_SYMBOL=178
    COLON_SYMBOL=179
    OPEN_PAR_SYMBOL=180
    CLOSE_PAR_SYMBOL=181
    OPEN_CURLY_SYMBOL=182
    CLOSE_CURLY_SYMBOL=183
    UNDERLINE_SYMBOL=184
    OPEN_SQUARE_SYMBOL=185
    CLOSE_SQUARE_SYMBOL=186
    JSON_SEPARATOR_SYMBOL=187
    JSON_UNQUOTED_SEPARATOR_SYMBOL=188
    AT_SIGN_SYMBOL=189
    AT_TEXT_SUFFIX=190
    AT_AT_SIGN_SYMBOL=191
    NULL2_SYMBOL=192
    PARAM_MARKER=193
    HEX_NUMBER=194
    BIN_NUMBER=195
    INT_NUMBER=196
    DECIMAL_NUMBER=197
    FLOAT_NUMBER=198
    WHITESPACE=199
    INVALID_INPUT=200
    IDENTIFIER=201
    NCHAR_TEXT=202
    BACK_TICK_QUOTED_ID=203
    DOUBLE_QUOTED_TEXT=204
    SINGLE_QUOTED_TEXT=205
    BLOCK_COMMENT=206
    POUND_COMMENT=207
    DASHDASH_COMMENT=208
    WS=209
    NOT_EQUAL2_OPERATOR=210

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 19175482788806706) != 0) or _la==75 or _la==130:
                self.state = 332
                self.mrsStatement()
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 334 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 333
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 336 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==178):
                                break

                        self.state = 338
                        self.mrsStatement() 
                    self.state = 343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 346
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 349
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentFileStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestRoleStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def cloneRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CloneRestServiceStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def alterRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestFunctionStatementContext,0)


        def alterRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestContentSetStatementContext,0)


        def alterRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestAuthAppStatementContext,0)


        def alterRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestUserStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentFileStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def dropRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestRoleStatementContext,0)


        def dumpRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DumpRestServiceStatementContext,0)


        def grantRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestRoleStatementContext,0)


        def grantRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestPrivilegeStatementContext,0)


        def revokeRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestPrivilegeStatementContext,0)


        def revokeRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestRoleStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestContentFilesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentFilesStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showRestRolesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestRolesStatementContext,0)


        def showRestGrantsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestGrantsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentSetStatementContext,0)


        def showCreateRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentFileStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def showCreateRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestRoleStatementContext,0)


        def showCreateRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestUserStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 352
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 354
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 355
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 356
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 357
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 358
                self.createRestContentFileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 359
                self.createRestAuthAppStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 360
                self.createRestRoleStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 361
                self.createRestUserStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 362
                self.cloneRestServiceStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 363
                self.alterRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 364
                self.alterRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 365
                self.alterRestViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 366
                self.alterRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 367
                self.alterRestFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 368
                self.alterRestContentSetStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 369
                self.alterRestAuthAppStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 370
                self.alterRestUserStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 371
                self.dropRestServiceStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 372
                self.dropRestSchemaStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 373
                self.dropRestViewStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 374
                self.dropRestProcedureStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 375
                self.dropRestFunctionStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 376
                self.dropRestContentSetStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 377
                self.dropRestContentFileStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 378
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 379
                self.dropRestUserStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 380
                self.dropRestRoleStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 381
                self.dumpRestServiceStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 382
                self.grantRestRoleStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 383
                self.grantRestPrivilegeStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 384
                self.revokeRestPrivilegeStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 385
                self.revokeRestRoleStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 386
                self.useStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 387
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 388
                self.showRestServicesStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 389
                self.showRestSchemasStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 390
                self.showRestViewsStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 391
                self.showRestProceduresStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 392
                self.showRestFunctionsStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 393
                self.showRestContentSetsStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 394
                self.showRestContentFilesStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 395
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 396
                self.showRestRolesStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 397
                self.showRestGrantsStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 398
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 399
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 400
                self.showCreateRestViewStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 401
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 402
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 403
                self.showCreateRestContentSetStatement()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 404
                self.showCreateRestContentFileStatement()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 405
                self.showCreateRestAuthAppStatement()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 406
                self.showCreateRestRoleStatement()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 407
                self.showCreateRestUserStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            _la = self._input.LA(1)
            if not(_la==84 or _la==86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledPrivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabledPrivate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabledPrivate" ):
                listener.enterEnabledDisabledPrivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabledPrivate" ):
                listener.exitEnabledDisabledPrivate(self)




    def enabledDisabledPrivate(self):

        localctx = MRSParser.EnabledDisabledPrivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_enabledDisabledPrivate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 414
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 415
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def MERGE_SYMBOL(self):
            return self.getToken(MRSParser.MERGE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_jsonOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 418
                self.match(MRSParser.MERGE_SYMBOL)


            self.state = 421
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 422
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = MRSParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 425
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT_SYMBOL(self):
            return self.getToken(MRSParser.COMMENT_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(MRSParser.COMMENT_SYMBOL)
            self.state = 428
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 431
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 434
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 437
            self.match(MRSParser.PER_SYMBOL)
            self.state = 438
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 439
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 443
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 444
                self.serviceRequestPath()


            self.state = 447
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 448
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathWildcardContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelectorWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelectorWildcard" ):
                listener.enterServiceSchemaSelectorWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelectorWildcard" ):
                listener.exitServiceSchemaSelectorWildcard(self)




    def serviceSchemaSelectorWildcard(self):

        localctx = MRSParser.ServiceSchemaSelectorWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_serviceSchemaSelectorWildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 450
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 451
                self.serviceRequestPathWildcard()


            self.state = 454
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 455
            self.schemaRequestPathWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_roleService

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleService" ):
                listener.enterRoleService(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleService" ):
                listener.exitRoleService(self)




    def roleService(self):

        localctx = MRSParser.RoleServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_roleService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(MRSParser.ON_SYMBOL)
            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 458
                self.match(MRSParser.ANY_SYMBOL)
                self.state = 459
                self.match(MRSParser.SERVICE_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 460
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 463
                self.serviceRequestPath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 467
            self.match(MRSParser.REST_SYMBOL)
            self.state = 468
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 1441169472944603649) != 0):
                self.state = 469
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 475
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [84, 86]:
                    self.state = 472
                    self.enabledDisabled()
                    pass
                elif token in [26, 70]:
                    self.state = 473
                    self.jsonOptions()
                    pass
                elif token in [35]:
                    self.state = 474
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 477 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 1441169472944603649) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 480
                self.match(MRSParser.IF_SYMBOL)
                self.state = 481
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 484
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 485
                self.match(MRSParser.OR_SYMBOL)
                self.state = 486
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 487
                self.match(MRSParser.REST_SYMBOL)
                self.state = 488
                self.match(MRSParser.SERVICE_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 489
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 490
                self.match(MRSParser.REST_SYMBOL)
                self.state = 491
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 492
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 493
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 494
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 499
            self.serviceRequestPath()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3605007) != 0):
                self.state = 500
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def publishedUnpublished(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.PublishedUnpublishedContext)
            else:
                return self.getTypedRuleContext(MRSParser.PublishedUnpublishedContext,i)


        def restProtocol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProtocolContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProtocolContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def addAuthApp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AddAuthAppContext)
            else:
                return self.getTypedRuleContext(MRSParser.AddAuthAppContext,i)


        def removeAuthApp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RemoveAuthAppContext)
            else:
                return self.getTypedRuleContext(MRSParser.RemoveAuthAppContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [84, 86]:
                    self.state = 503
                    self.enabledDisabled()
                    pass
                elif token in [85, 88]:
                    self.state = 504
                    self.publishedUnpublished()
                    pass
                elif token in [89]:
                    self.state = 505
                    self.restProtocol()
                    pass
                elif token in [21]:
                    self.state = 506
                    self.restAuthentication()
                    pass
                elif token in [26, 70]:
                    self.state = 507
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 508
                    self.comments()
                    pass
                elif token in [77]:
                    self.state = 509
                    self.metadata()
                    pass
                elif token in [68]:
                    self.state = 510
                    self.addAuthApp()
                    pass
                elif token in [69]:
                    self.state = 511
                    self.removeAuthApp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 514 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3605007) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublishedUnpublishedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_publishedUnpublished

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishedUnpublished" ):
                listener.enterPublishedUnpublished(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishedUnpublished" ):
                listener.exitPublishedUnpublished(self)




    def publishedUnpublished(self):

        localctx = MRSParser.PublishedUnpublishedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_publishedUnpublished)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            _la = self._input.LA(1)
            if not(_la==85 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_restProtocol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 519
            _la = self._input.LA(1)
            if not(_la==90 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1086324736) != 0) or _la==93:
                self.state = 526
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 522
                    self.authPath()
                    pass
                elif token in [93]:
                    self.state = 523
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 524
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 525
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 532
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 535
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 538
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 541
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 542
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(MRSParser.USER_SYMBOL)
            self.state = 545
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 546
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 547
                self.schemaName()
                pass

            elif la_ == 2:
                self.state = 548
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddAuthAppContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MRSParser.ADD_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_addAuthApp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddAuthApp" ):
                listener.enterAddAuthApp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddAuthApp" ):
                listener.exitAddAuthApp(self)




    def addAuthApp(self):

        localctx = MRSParser.AddAuthAppContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_addAuthApp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(MRSParser.ADD_SYMBOL)
            self.state = 552
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 553
            self.match(MRSParser.APP_SYMBOL)
            self.state = 554
            self.authAppName()
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 555
                self.match(MRSParser.IF_SYMBOL)
                self.state = 556
                self.match(MRSParser.EXISTS_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveAuthAppContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE_SYMBOL(self):
            return self.getToken(MRSParser.REMOVE_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_removeAuthApp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveAuthApp" ):
                listener.enterRemoveAuthApp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveAuthApp" ):
                listener.exitRemoveAuthApp(self)




    def removeAuthApp(self):

        localctx = MRSParser.RemoveAuthAppContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_removeAuthApp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(MRSParser.REMOVE_SYMBOL)
            self.state = 560
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 561
            self.match(MRSParser.APP_SYMBOL)
            self.state = 562
            self.authAppName()
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 563
                self.match(MRSParser.IF_SYMBOL)
                self.state = 564
                self.match(MRSParser.EXISTS_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 567
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 568
                self.match(MRSParser.OR_SYMBOL)
                self.state = 569
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 570
                self.match(MRSParser.REST_SYMBOL)
                self.state = 571
                self.match(MRSParser.DATABASE_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 572
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 573
                self.match(MRSParser.REST_SYMBOL)
                self.state = 574
                self.match(MRSParser.DATABASE_SYMBOL)
                self.state = 578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 575
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 576
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 577
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 582
                self.schemaRequestPath()


            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 585
                self.match(MRSParser.ON_SYMBOL)
                self.state = 587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 586
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 589
                self.serviceRequestPath()


            self.state = 592
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 593
            self.schemaName()
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 134430851) != 0):
                self.state = 594
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 603
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [84, 86, 87]:
                    self.state = 597
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 598
                    self.authenticationRequired()
                    pass
                elif token in [97]:
                    self.state = 599
                    self.itemsPerPage()
                    pass
                elif token in [26, 70]:
                    self.state = 600
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 601
                    self.comments()
                    pass
                elif token in [77]:
                    self.state = 602
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 605 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 134430851) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 607
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 608
                self.match(MRSParser.OR_SYMBOL)
                self.state = 609
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 610
                self.match(MRSParser.REST_SYMBOL)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 611
                    self.match(MRSParser.DATA_SYMBOL)


                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 614
                    self.match(MRSParser.MAPPING_SYMBOL)


                self.state = 617
                self.match(MRSParser.VIEW_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 618
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 619
                self.match(MRSParser.REST_SYMBOL)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 620
                    self.match(MRSParser.DATA_SYMBOL)


                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 623
                    self.match(MRSParser.MAPPING_SYMBOL)


                self.state = 626
                self.match(MRSParser.VIEW_SYMBOL)
                self.state = 630
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 628
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 629
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 634
            self.viewRequestPath()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 635
                self.match(MRSParser.ON_SYMBOL)
                self.state = 636
                self.serviceSchemaSelector()


            self.state = 639
            self.match(MRSParser.AS_SYMBOL)
            self.state = 640
            self.qualifiedIdentifier()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 641
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 642
                self.restObjectName()


            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 31751) != 0):
                self.state = 645
                self.graphQlCrudOptions()


            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 648
                self.graphQlObj()


            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0):
                self.state = 651
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 654
                    self.enabledDisabledPrivate()
                    pass

                elif la_ == 2:
                    self.state = 655
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 656
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 657
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 658
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 659
                    self.metadata()
                    pass

                elif la_ == 7:
                    self.state = 660
                    self.restViewMediaType()
                    pass

                elif la_ == 8:
                    self.state = 661
                    self.restViewFormat()
                    pass

                elif la_ == 9:
                    self.state = 662
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 665 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 668
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 669
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 670
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 674
            _la = self._input.LA(1)
            if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 677
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 678
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MRSParser.FORCE_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 680
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 681
                self.match(MRSParser.OR_SYMBOL)
                self.state = 682
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 683
                self.match(MRSParser.REST_SYMBOL)
                self.state = 684
                self.match(MRSParser.PROCEDURE_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 685
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 686
                self.match(MRSParser.REST_SYMBOL)
                self.state = 687
                self.match(MRSParser.PROCEDURE_SYMBOL)
                self.state = 691
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 689
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 690
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 695
            self.procedureRequestPath()
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 696
                self.match(MRSParser.ON_SYMBOL)
                self.state = 697
                self.serviceSchemaSelector()


            self.state = 700
            self.match(MRSParser.AS_SYMBOL)
            self.state = 701
            self.qualifiedIdentifier()
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 702
                self.match(MRSParser.FORCE_SYMBOL)


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 705
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 706
                    self.restObjectName()


                self.state = 709
                self.graphQlObj()


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 712
                self.restProcedureResult()
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0):
                self.state = 718
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_restProcedureResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 722
                self.restResultName()


            self.state = 725
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MRSParser.FORCE_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 727
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 728
                self.match(MRSParser.OR_SYMBOL)
                self.state = 729
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 730
                self.match(MRSParser.REST_SYMBOL)
                self.state = 731
                self.match(MRSParser.FUNCTION_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 732
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 733
                self.match(MRSParser.REST_SYMBOL)
                self.state = 734
                self.match(MRSParser.FUNCTION_SYMBOL)
                self.state = 738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 735
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 736
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 737
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 742
            self.functionRequestPath()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 743
                self.match(MRSParser.ON_SYMBOL)
                self.state = 744
                self.serviceSchemaSelector()


            self.state = 747
            self.match(MRSParser.AS_SYMBOL)
            self.state = 748
            self.qualifiedIdentifier()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 749
                self.match(MRSParser.FORCE_SYMBOL)


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 752
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 753
                    self.restObjectName()


                self.state = 756
                self.graphQlObj()


            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 759
                self.restFunctionResult()


            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0):
                self.state = 762
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_restFunctionResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 766
                self.restResultName()


            self.state = 769
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 771
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 772
                self.match(MRSParser.OR_SYMBOL)
                self.state = 773
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 774
                self.match(MRSParser.REST_SYMBOL)
                self.state = 775
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 776
                self.match(MRSParser.SET_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 777
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 778
                self.match(MRSParser.REST_SYMBOL)
                self.state = 779
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 780
                self.match(MRSParser.SET_SYMBOL)
                self.state = 784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 781
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 782
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 783
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 788
            self.contentSetRequestPath()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 789
                self.match(MRSParser.ON_SYMBOL)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 793
                self.serviceRequestPath()


            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 796
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 797
                self.directoryFilePath()


            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 580542208671744) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 212995) != 0):
                self.state = 800
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def fileIgnoreList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.FileIgnoreListContext)
            else:
                return self.getTypedRuleContext(MRSParser.FileIgnoreListContext,i)


        def loadScripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.LoadScriptsContext)
            else:
                return self.getTypedRuleContext(MRSParser.LoadScriptsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 811
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [84, 86, 87]:
                    self.state = 805
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 806
                    self.authenticationRequired()
                    pass
                elif token in [26, 70]:
                    self.state = 807
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 808
                    self.comments()
                    pass
                elif token in [44]:
                    self.state = 809
                    self.fileIgnoreList()
                    pass
                elif token in [49]:
                    self.state = 810
                    self.loadScripts()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 580542208671744) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 212995) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIgnoreListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_fileIgnoreList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIgnoreList" ):
                listener.enterFileIgnoreList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIgnoreList" ):
                listener.exitFileIgnoreList(self)




    def fileIgnoreList(self):

        localctx = MRSParser.FileIgnoreListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fileIgnoreList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(MRSParser.IGNORE_SYMBOL)
            self.state = 816
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadScriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_loadScripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadScripts" ):
                listener.enterLoadScripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadScripts" ):
                listener.exitLoadScripts(self)




    def loadScripts(self):

        localctx = MRSParser.LoadScriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_loadScripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(MRSParser.LOAD_SYMBOL)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 819
                self.match(MRSParser.TYPESCRIPT_SYMBOL)


            self.state = 822
            self.match(MRSParser.SCRIPTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restContentFileOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentFileOptionsContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentFileStatement" ):
                listener.enterCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentFileStatement" ):
                listener.exitCreateRestContentFileStatement(self)




    def createRestContentFileStatement(self):

        localctx = MRSParser.CreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_createRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 824
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 825
                self.match(MRSParser.OR_SYMBOL)
                self.state = 826
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 827
                self.match(MRSParser.REST_SYMBOL)
                self.state = 828
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 829
                self.match(MRSParser.FILE_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 830
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 831
                self.match(MRSParser.REST_SYMBOL)
                self.state = 832
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 833
                self.match(MRSParser.FILE_SYMBOL)
                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 834
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 835
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 836
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 841
            self.contentFileRequestPath()
            self.state = 842
            self.match(MRSParser.ON_SYMBOL)
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 843
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 846
                self.serviceRequestPath()


            self.state = 849
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 850
            self.match(MRSParser.SET_SYMBOL)
            self.state = 851
            self.contentSetRequestPath()
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 852
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 853
                self.directoryFilePath()
                pass
            elif token in [47, 99]:
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 854
                    self.match(MRSParser.BINARY_SYMBOL)


                self.state = 857
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 858
                self.textStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 212993) != 0):
                self.state = 861
                self.restContentFileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentFileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentFileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentFileOptions" ):
                listener.enterRestContentFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentFileOptions" ):
                listener.exitRestContentFileOptions(self)




    def restContentFileOptions(self):

        localctx = MRSParser.RestContentFileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_restContentFileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 867
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [84, 86, 87]:
                    self.state = 864
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 865
                    self.authenticationRequired()
                    pass
                elif token in [26, 70]:
                    self.state = 866
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 869 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 212993) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 871
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 872
                self.match(MRSParser.OR_SYMBOL)
                self.state = 873
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 874
                self.match(MRSParser.REST_SYMBOL)
                self.state = 875
                _la = self._input.LA(1)
                if not(_la==21 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 876
                self.match(MRSParser.APP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 877
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 878
                self.match(MRSParser.REST_SYMBOL)
                self.state = 879
                _la = self._input.LA(1)
                if not(_la==21 or _la==106):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 880
                self.match(MRSParser.APP_SYMBOL)
                self.state = 884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 881
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 882
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 883
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 888
            self.authAppName()
            self.state = 889
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 890
                self.match(MRSParser.MRS_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 891
                self.match(MRSParser.MYSQL_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 892
                self.vendorName()
                pass


            self.state = 896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018410610688) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1134696002486337) != 0):
                self.state = 895
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def appId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppIdContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppIdContext,i)


        def appSecret(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppSecretContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppSecretContext,i)


        def url(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UrlContext)
            else:
                return self.getTypedRuleContext(MRSParser.UrlContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 903
                    self.comments()
                    pass

                elif la_ == 3:
                    self.state = 904
                    self.allowNewUsersToRegister()
                    pass

                elif la_ == 4:
                    self.state = 905
                    self.defaultRole()
                    pass

                elif la_ == 5:
                    self.state = 906
                    self.appId()
                    pass

                elif la_ == 6:
                    self.state = 907
                    self.appSecret()
                    pass

                elif la_ == 7:
                    self.state = 908
                    self.url()
                    pass


                self.state = 911 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018410610688) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1134696002486337) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MRSParser.DO_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 913
                self.match(MRSParser.DO_SYMBOL)
                self.state = 914
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 917
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 918
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 919
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 920
                self.match(MRSParser.TO_SYMBOL)
                self.state = 921
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 925
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 926
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID_SYMBOL(self):
            return self.getToken(MRSParser.ID_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_appId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppId" ):
                listener.enterAppId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppId" ):
                listener.exitAppId(self)




    def appId(self):

        localctx = MRSParser.AppIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_appId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            _la = self._input.LA(1)
            if not(_la==62 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 929
            self.match(MRSParser.ID_SYMBOL)
            self.state = 930
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppSecretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECRET_SYMBOL(self):
            return self.getToken(MRSParser.SECRET_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_appSecret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppSecret" ):
                listener.enterAppSecret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppSecret" ):
                listener.exitAppSecret(self)




    def appSecret(self):

        localctx = MRSParser.AppSecretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_appSecret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            _la = self._input.LA(1)
            if not(_la==62 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 933
            self.match(MRSParser.SECRET_SYMBOL)
            self.state = 934
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UrlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URL_SYMBOL(self):
            return self.getToken(MRSParser.URL_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl" ):
                listener.enterUrl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl" ):
                listener.exitUrl(self)




    def url(self):

        localctx = MRSParser.UrlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(MRSParser.URL_SYMBOL)
            self.state = 937
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 939
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 940
                self.match(MRSParser.OR_SYMBOL)
                self.state = 941
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 942
                self.match(MRSParser.REST_SYMBOL)
                self.state = 943
                self.match(MRSParser.USER_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 944
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 945
                self.match(MRSParser.REST_SYMBOL)
                self.state = 946
                self.match(MRSParser.USER_SYMBOL)
                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 948
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 949
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 954
            self.userName()
            self.state = 955
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 956
            self.authAppName()
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 957
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 958
                self.match(MRSParser.BY_SYMBOL)
                self.state = 959
                self.userPassword()


            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==55 or _la==70 or _la==108:
                self.state = 962
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accountLock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AccountLockContext)
            else:
                return self.getTypedRuleContext(MRSParser.AccountLockContext,i)


        def appOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppOptionsContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_userOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserOptions" ):
                listener.enterUserOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserOptions" ):
                listener.exitUserOptions(self)




    def userOptions(self):

        localctx = MRSParser.UserOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_userOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 969
                    self.accountLock()
                    pass
                elif token in [108]:
                    self.state = 970
                    self.appOptions()
                    pass
                elif token in [26, 70]:
                    self.state = 971
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 974 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==55 or _la==70 or _la==108):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_appOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppOptions" ):
                listener.enterAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppOptions" ):
                listener.exitAppOptions(self)




    def appOptions(self):

        localctx = MRSParser.AppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_appOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(MRSParser.APP_SYMBOL)
            self.state = 977
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 978
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_accountLock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLock" ):
                listener.enterAccountLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLock" ):
                listener.exitAccountLock(self)




    def accountLock(self):

        localctx = MRSParser.AccountLockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_accountLock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(MRSParser.ACCOUNT_SYMBOL)
            self.state = 981
            _la = self._input.LA(1)
            if not(_la==56 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def parentRoleName(self):
            return self.getTypedRuleContext(MRSParser.ParentRoleNameContext,0)


        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def restRoleOptions(self):
            return self.getTypedRuleContext(MRSParser.RestRoleOptionsContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestRoleStatement" ):
                listener.enterCreateRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestRoleStatement" ):
                listener.exitCreateRestRoleStatement(self)




    def createRestRoleStatement(self):

        localctx = MRSParser.CreateRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_createRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 983
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 984
                self.match(MRSParser.OR_SYMBOL)
                self.state = 985
                self.match(MRSParser.REPLACE_SYMBOL)
                self.state = 986
                self.match(MRSParser.REST_SYMBOL)
                self.state = 987
                self.match(MRSParser.ROLE_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 988
                self.match(MRSParser.CREATE_SYMBOL)
                self.state = 989
                self.match(MRSParser.REST_SYMBOL)
                self.state = 990
                self.match(MRSParser.ROLE_SYMBOL)
                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 991
                    self.match(MRSParser.IF_SYMBOL)
                    self.state = 992
                    self.match(MRSParser.NOT_SYMBOL)
                    self.state = 993
                    self.match(MRSParser.EXISTS_SYMBOL)


                pass


            self.state = 998
            self.roleName()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 999
                self.match(MRSParser.EXTENDS_SYMBOL)
                self.state = 1000
                self.parentRoleName()


            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1003
                self.roleService()


            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 52776558133249) != 0):
                self.state = 1006
                self.restRoleOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestRoleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restRoleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestRoleOptions" ):
                listener.enterRestRoleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestRoleOptions" ):
                listener.exitRestRoleOptions(self)




    def restRoleOptions(self):

        localctx = MRSParser.RestRoleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_restRoleOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26, 70]:
                    self.state = 1009
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 1010
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1013 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 52776558133249) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParentRoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_parentRoleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentRoleName" ):
                listener.enterParentRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentRoleName" ):
                listener.exitParentRoleName(self)




    def parentRoleName(self):

        localctx = MRSParser.ParentRoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_parentRoleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MRSParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_roleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_cloneRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneRestServiceStatement" ):
                listener.enterCloneRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneRestServiceStatement" ):
                listener.exitCloneRestServiceStatement(self)




    def cloneRestServiceStatement(self):

        localctx = MRSParser.CloneRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_cloneRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(MRSParser.CLONE_SYMBOL)
            self.state = 1020
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1021
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1022
            self.serviceRequestPath()
            self.state = 1023
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 1024
            self.match(MRSParser.REQUEST_SYMBOL)
            self.state = 1025
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 1026
            self.newServiceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1029
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1030
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1031
            self.serviceRequestPath()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1032
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1033
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1034
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1035
                self.newServiceRequestPath()


            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3605007) != 0):
                self.state = 1038
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1042
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1043
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1044
                self.schemaRequestPath()


            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1047
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 1048
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1051
                self.serviceRequestPath()


            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1054
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1055
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1056
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1057
                self.newSchemaRequestPath()


            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1060
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1061
                self.schemaName()


            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 134430851) != 0):
                self.state = 1064
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1068
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1069
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 1072
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1075
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1076
            self.viewRequestPath()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1077
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1078
                self.serviceSchemaSelector()


            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1081
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1082
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1083
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1084
                self.newViewRequestPath()


            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 1087
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 1088
                self.restObjectName()
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 31751) != 0):
                    self.state = 1089
                    self.graphQlCrudOptions()


                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 1092
                    self.graphQlObj()




            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0):
                self.state = 1097
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1101
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1102
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1103
            self.procedureRequestPath()
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1104
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1105
                self.serviceSchemaSelector()


            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1108
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1109
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1110
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1111
                self.newProcedureRequestPath()


            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1114
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 1116
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1115
                    self.restObjectName()


                self.state = 1118
                self.graphQlObj()


            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1121
                self.restProcedureResult()
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0):
                self.state = 1127
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newFunctionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewFunctionRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestFunctionResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestFunctionStatement" ):
                listener.enterAlterRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestFunctionStatement" ):
                listener.exitAlterRestFunctionStatement(self)




    def alterRestFunctionStatement(self):

        localctx = MRSParser.AlterRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alterRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1131
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1132
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1133
            self.functionRequestPath()
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1134
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1135
                self.serviceSchemaSelector()


            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1138
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1139
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1140
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1141
                self.newFunctionRequestPath()


            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1144
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 1146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1145
                    self.restObjectName()


                self.state = 1148
                self.graphQlObj()


            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==83:
                self.state = 1151
                self.restFunctionResult()
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 1208172675) != 0):
                self.state = 1157
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newContentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewContentSetRequestPathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestContentSetStatement" ):
                listener.enterAlterRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestContentSetStatement" ):
                listener.exitAlterRestContentSetStatement(self)




    def alterRestContentSetStatement(self):

        localctx = MRSParser.AlterRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alterRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1161
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1162
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1163
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1164
            self.contentSetRequestPath()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1165
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1166
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1169
                self.serviceRequestPath()


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1172
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1173
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1174
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1175
                self.newContentSetRequestPath()


            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 580542208671744) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 212995) != 0):
                self.state = 1178
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MRSParser.NAME_SYMBOL, 0)

        def newAuthAppName(self):
            return self.getTypedRuleContext(MRSParser.NewAuthAppNameContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestAuthAppStatement" ):
                listener.enterAlterRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestAuthAppStatement" ):
                listener.exitAlterRestAuthAppStatement(self)




    def alterRestAuthAppStatement(self):

        localctx = MRSParser.AlterRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alterRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1182
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1183
            _la = self._input.LA(1)
            if not(_la==21 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1184
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1185
            self.authAppName()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1186
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1187
                self.match(MRSParser.NAME_SYMBOL)
                self.state = 1188
                self.newAuthAppName()


            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018410610688) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 1134696002486337) != 0):
                self.state = 1191
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewAuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newAuthAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewAuthAppName" ):
                listener.enterNewAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewAuthAppName" ):
                listener.exitNewAuthAppName(self)




    def newAuthAppName(self):

        localctx = MRSParser.NewAuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_newAuthAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestUserStatement" ):
                listener.enterAlterRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestUserStatement" ):
                listener.exitAlterRestUserStatement(self)




    def alterRestUserStatement(self):

        localctx = MRSParser.AlterRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_alterRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1197
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1198
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1199
            self.userName()
            self.state = 1200
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1201
            self.authAppName()
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 1202
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 1203
                self.match(MRSParser.BY_SYMBOL)
                self.state = 1204
                self.userPassword()


            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==55 or _la==70 or _la==108:
                self.state = 1207
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1211
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1212
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1214
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1217
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1220
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1221
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1222
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1223
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1226
            self.schemaRequestPath()
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1227
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1229
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1228
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1231
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestViewStatement" ):
                listener.enterDropRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestViewStatement" ):
                listener.exitDropRestViewStatement(self)




    def dropRestViewStatement(self):

        localctx = MRSParser.DropRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1235
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1236
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 1239
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1242
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1243
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1244
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1247
            self.viewRequestPath()
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1248
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1249
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1252
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1253
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1254
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1255
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1256
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1259
            self.procedureRequestPath()
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1260
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1261
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1265
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1266
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1267
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1268
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1271
            self.functionRequestPath()
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1272
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1273
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1277
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1278
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1279
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1280
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1281
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1284
            self.contentSetRequestPath()
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1285
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1286
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1289
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentFileStatement" ):
                listener.enterDropRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentFileStatement" ):
                listener.exitDropRestContentFileStatement(self)




    def dropRestContentFileStatement(self):

        localctx = MRSParser.DropRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropRestContentFileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1293
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1294
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1295
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1296
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1297
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1300
            self.contentFileRequestPath()
            self.state = 1301
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1302
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1305
                self.serviceRequestPath()


            self.state = 1308
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1309
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1310
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1313
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1314
            _la = self._input.LA(1)
            if not(_la==21 or _la==106):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1315
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1316
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1317
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1320
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dropRestUserStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1323
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1324
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1325
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1326
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1329
            self.userName()
            self.state = 1330
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1331
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestRoleStatement" ):
                listener.enterDropRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestRoleStatement" ):
                listener.exitDropRestRoleStatement(self)




    def dropRestRoleStatement(self):

        localctx = MRSParser.DropRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dropRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1334
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1335
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1336
                self.match(MRSParser.IF_SYMBOL)
                self.state = 1337
                self.match(MRSParser.EXISTS_SYMBOL)


            self.state = 1340
            self.roleName()
            self.state = 1342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1341
                self.roleService()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathWildcardContext,0)


        def serviceSchemaSelectorWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorWildcardContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestPrivilegeStatement" ):
                listener.enterGrantRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestPrivilegeStatement" ):
                listener.exitGrantRestPrivilegeStatement(self)




    def grantRestPrivilegeStatement(self):

        localctx = MRSParser.GrantRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_grantRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1344
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1345
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1346
            self.privilegeList()
            self.state = 1358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1347
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1348
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1351
                self.serviceRequestPathWildcard()

            elif la_ == 2:
                self.state = 1352
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1353
                self.serviceSchemaSelectorWildcard()
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 1354
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1355
                    self.objectRequestPathWildcard()




            self.state = 1360
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1361
            self.roleName()
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1362
                self.roleService()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeName(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeNameContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = MRSParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_privilegeList)
        try:
            self.state = 1370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.privilegeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.privilegeName()
                self.state = 1367
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1368
                self.privilegeList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_privilegeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeName" ):
                listener.enterPrivilegeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeName" ):
                listener.exitPrivilegeName(self)




    def privilegeName(self):

        localctx = MRSParser.PrivilegeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_privilegeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6755433800794114) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def comments(self):
            return self.getTypedRuleContext(MRSParser.CommentsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestRoleStatement" ):
                listener.enterGrantRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestRoleStatement" ):
                listener.exitGrantRestRoleStatement(self)




    def grantRestRoleStatement(self):

        localctx = MRSParser.GrantRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_grantRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1375
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1376
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1377
            self.roleName()
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1378
                self.roleService()


            self.state = 1381
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1382
            self.userName()
            self.state = 1383
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1384
            self.authAppName()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1385
                self.comments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathWildcardContext,0)


        def serviceSchemaSelectorWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorWildcardContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestPrivilegeStatement" ):
                listener.enterRevokeRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestPrivilegeStatement" ):
                listener.exitRevokeRestPrivilegeStatement(self)




    def revokeRestPrivilegeStatement(self):

        localctx = MRSParser.RevokeRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_revokeRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1389
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1390
            self.privilegeList()
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1391
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1393
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1392
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1395
                self.serviceRequestPathWildcard()

            elif la_ == 2:
                self.state = 1396
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1397
                self.serviceSchemaSelectorWildcard()
                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 1398
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1399
                    self.objectRequestPathWildcard()




            self.state = 1404
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1405
            self.roleName()
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1406
                self.roleService()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestRoleStatement" ):
                listener.enterRevokeRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestRoleStatement" ):
                listener.exitRevokeRestRoleStatement(self)




    def revokeRestRoleStatement(self):

        localctx = MRSParser.RevokeRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_revokeRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1410
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1411
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1412
            self.roleName()
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1413
                self.roleService()


            self.state = 1416
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1417
            self.userName()
            self.state = 1418
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1419
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(MRSParser.USE_SYMBOL)
            self.state = 1422
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1423
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1425
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 1426
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1427
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1431
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 1432
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 1435
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1438
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1439
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1442
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1443
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 1449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1444
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1445
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1448
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1452
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1453
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 1456
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1459
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 1462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1460
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1461
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1465
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1466
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 1469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1467
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1468
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1472
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1473
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1474
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1475
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1479
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1480
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1481
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 1487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1482
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1484
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1483
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1486
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentFilesStatement" ):
                listener.enterShowRestContentFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentFilesStatement" ):
                listener.exitShowRestContentFilesStatement(self)




    def showRestContentFilesStatement(self):

        localctx = MRSParser.ShowRestContentFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_showRestContentFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1490
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1491
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1492
            self.match(MRSParser.FILES_SYMBOL)
            self.state = 1493
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1494
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1497
                self.serviceRequestPath()


            self.state = 1500
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1501
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1502
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1505
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1506
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1507
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1508
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1509
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1512
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestRolesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestRolesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestRolesStatement" ):
                listener.enterShowRestRolesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestRolesStatement" ):
                listener.exitShowRestRolesStatement(self)




    def showRestRolesStatement(self):

        localctx = MRSParser.ShowRestRolesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_showRestRolesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1516
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1517
            self.match(MRSParser.ROLES_SYMBOL)
            self.state = 1527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1518
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1519
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 1520
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 1522
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                    if la_ == 1:
                        self.state = 1521
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 1524
                    self.serviceRequestPath()
                    pass




            self.state = 1535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1529
                self.match(MRSParser.FOR_SYMBOL)
                self.state = 1531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1530
                    self.userName()


                self.state = 1533
                self.match(MRSParser.AT_SIGN_SYMBOL)
                self.state = 1534
                self.authAppName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestGrantsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestGrantsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestGrantsStatement" ):
                listener.enterShowRestGrantsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestGrantsStatement" ):
                listener.exitShowRestGrantsStatement(self)




    def showRestGrantsStatement(self):

        localctx = MRSParser.ShowRestGrantsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_showRestGrantsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1538
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1539
            self.match(MRSParser.GRANTS_SYMBOL)
            self.state = 1540
            self.match(MRSParser.FOR_SYMBOL)
            self.state = 1541
            self.roleName()
            self.state = 1551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1542
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1543
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 1544
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 1546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
                    if la_ == 1:
                        self.state = 1545
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 1548
                    self.serviceRequestPath()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def INCLUDING_SYMBOL(self):
            return self.getToken(MRSParser.INCLUDING_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def ENDPOINTS_SYMBOL(self):
            return self.getToken(MRSParser.ENDPOINTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1554
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1555
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1556
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1557
                self.serviceRequestPath()


            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1560
                self.match(MRSParser.INCLUDING_SYMBOL)
                self.state = 1561
                self.match(MRSParser.DATABASE_SYMBOL)
                self.state = 1562
                self.match(MRSParser.ENDPOINTS_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1566
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1567
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1568
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.state = 1569
                self.schemaRequestPath()


            self.state = 1577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1572
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1574
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1573
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1576
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1580
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1581
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1582
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 1585
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1588
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1589
            self.viewRequestPath()
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1590
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1591
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1595
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1596
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1597
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1598
            self.procedureRequestPath()
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1599
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1600
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1604
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1605
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1606
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1607
            self.functionRequestPath()
            self.state = 1610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1608
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1609
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentSetStatement" ):
                listener.enterShowCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentSetStatement" ):
                listener.exitShowCreateRestContentSetStatement(self)




    def showCreateRestContentSetStatement(self):

        localctx = MRSParser.ShowCreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_showCreateRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1613
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1614
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1615
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1616
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1617
            self.contentSetRequestPath()
            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1618
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1619
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1622
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentFileStatement" ):
                listener.enterShowCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentFileStatement" ):
                listener.exitShowCreateRestContentFileStatement(self)




    def showCreateRestContentFileStatement(self):

        localctx = MRSParser.ShowCreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_showCreateRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1626
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1627
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1628
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1629
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1630
            self.contentFileRequestPath()
            self.state = 1631
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1633
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1632
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1635
                self.serviceRequestPath()


            self.state = 1638
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1639
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1640
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_showCreateRestAuthAppStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1643
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1644
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1645
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1646
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1647
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def roleService(self):
            return self.getTypedRuleContext(MRSParser.RoleServiceContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestRoleStatement" ):
                listener.enterShowCreateRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestRoleStatement" ):
                listener.exitShowCreateRestRoleStatement(self)




    def showCreateRestRoleStatement(self):

        localctx = MRSParser.ShowCreateRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_showCreateRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1650
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1651
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1652
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1653
            self.roleName()
            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1654
                self.roleService()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestUserStatement" ):
                listener.enterShowCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestUserStatement" ):
                listener.exitShowCreateRestUserStatement(self)




    def showCreateRestUserStatement(self):

        localctx = MRSParser.ShowCreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_showCreateRestUserStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1658
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1659
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1660
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1661
            self.userName()
            self.state = 1662
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1663
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DumpRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DUMP_SYMBOL(self):
            return self.getToken(MRSParser.DUMP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def SCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPT_SYMBOL, 0)

        def INCLUDING_SYMBOL(self):
            return self.getToken(MRSParser.INCLUDING_SYMBOL, 0)

        def ENDPOINTS_SYMBOL(self):
            return self.getToken(MRSParser.ENDPOINTS_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def ALL_SYMBOL(self):
            return self.getToken(MRSParser.ALL_SYMBOL, 0)

        def SQL_SYMBOL(self):
            return self.getToken(MRSParser.SQL_SYMBOL, 0)

        def ZIP_SYMBOL(self):
            return self.getToken(MRSParser.ZIP_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def AND_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AND_SYMBOL)
            else:
                return self.getToken(MRSParser.AND_SYMBOL, i)

        def STATIC_SYMBOL(self):
            return self.getToken(MRSParser.STATIC_SYMBOL, 0)

        def DYNAMIC_SYMBOL(self):
            return self.getToken(MRSParser.DYNAMIC_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dumpRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDumpRestServiceStatement" ):
                listener.enterDumpRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDumpRestServiceStatement" ):
                listener.exitDumpRestServiceStatement(self)




    def dumpRestServiceStatement(self):

        localctx = MRSParser.DumpRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_dumpRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(MRSParser.DUMP_SYMBOL)
            self.state = 1666
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1667
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1668
            self.serviceRequestPath()
            self.state = 1669
            self.match(MRSParser.AS_SYMBOL)
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 1670
                self.match(MRSParser.SQL_SYMBOL)


            self.state = 1673
            self.match(MRSParser.SCRIPT_SYMBOL)
            self.state = 1674
            self.match(MRSParser.INCLUDING_SYMBOL)
            self.state = 1685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 1675
                self.match(MRSParser.DATABASE_SYMBOL)
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 1676
                    self.match(MRSParser.AND_SYMBOL)
                    self.state = 1677
                    self.match(MRSParser.STATIC_SYMBOL)
                    self.state = 1680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 1678
                        self.match(MRSParser.AND_SYMBOL)
                        self.state = 1679
                        self.match(MRSParser.DYNAMIC_SYMBOL)




                pass
            elif token in [66]:
                self.state = 1684
                self.match(MRSParser.ALL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1687
            self.match(MRSParser.ENDPOINTS_SYMBOL)
            self.state = 1688
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1689
                self.match(MRSParser.ZIP_SYMBOL)


            self.state = 1692
            self.directoryFilePath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_serviceRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1694
                self.serviceDevelopersIdentifier()


            self.state = 1697
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_newServiceRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1699
                self.serviceDevelopersIdentifier()


            self.state = 1702
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifierWithWildcard(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierWithWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPathWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPathWildcard" ):
                listener.enterServiceRequestPathWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPathWildcard" ):
                listener.exitServiceRequestPathWildcard(self)




    def serviceRequestPathWildcard(self):

        localctx = MRSParser.ServiceRequestPathWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_serviceRequestPathWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.requestPathIdentifierWithWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifierWithWildcard(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierWithWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPathWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPathWildcard" ):
                listener.enterSchemaRequestPathWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPathWildcard" ):
                listener.exitSchemaRequestPathWildcard(self)




    def schemaRequestPathWildcard(self):

        localctx = MRSParser.SchemaRequestPathWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_schemaRequestPathWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.requestPathIdentifierWithWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1716
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPath" ):
                listener.enterObjectRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPath" ):
                listener.exitObjectRequestPath(self)




    def objectRequestPath(self):

        localctx = MRSParser.ObjectRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_objectRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifierWithWildcard(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierWithWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPathWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPathWildcard" ):
                listener.enterObjectRequestPathWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPathWildcard" ):
                listener.exitObjectRequestPathWildcard(self)




    def objectRequestPathWildcard(self):

        localctx = MRSParser.ObjectRequestPathWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_objectRequestPathWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1722
            self.requestPathIdentifierWithWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewFunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newFunctionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewFunctionRequestPath" ):
                listener.enterNewFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewFunctionRequestPath" ):
                listener.exitNewFunctionRequestPath(self)




    def newFunctionRequestPath(self):

        localctx = MRSParser.NewFunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_newFunctionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1732
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newContentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewContentSetRequestPath" ):
                listener.enterNewContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewContentSetRequestPath" ):
                listener.exitNewContentSetRequestPath(self)




    def newContentSetRequestPath(self):

        localctx = MRSParser.NewContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_newContentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentFileRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentFileRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentFileRequestPath" ):
                listener.enterContentFileRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentFileRequestPath" ):
                listener.exitContentFileRequestPath(self)




    def contentFileRequestPath(self):

        localctx = MRSParser.ContentFileRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_contentFileRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeveloperIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceDeveloperIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDeveloperIdentifier" ):
                listener.enterServiceDeveloperIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDeveloperIdentifier" ):
                listener.exitServiceDeveloperIdentifier(self)




    def serviceDeveloperIdentifier(self):

        localctx = MRSParser.ServiceDeveloperIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_serviceDeveloperIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDevelopersIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceDeveloperIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ServiceDeveloperIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.ServiceDeveloperIdentifierContext,i)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_serviceDevelopersIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDevelopersIdentifier" ):
                listener.enterServiceDevelopersIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDevelopersIdentifier" ):
                listener.exitServiceDevelopersIdentifier(self)




    def serviceDevelopersIdentifier(self):

        localctx = MRSParser.ServiceDevelopersIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_serviceDevelopersIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.serviceDeveloperIdentifier()
            self.state = 1745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==177:
                self.state = 1741
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1742
                self.serviceDeveloperIdentifier()
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1748
            self.match(MRSParser.AT_SIGN_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REST_REQUEST_PATH(self):
            return self.getToken(MRSParser.REST_REQUEST_PATH, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_requestPathIdentifier)
        try:
            self.state = 1754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1750
                self.match(MRSParser.REST_REQUEST_PATH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1751
                self.match(MRSParser.BACK_TICK_QUOTED_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1752
                if not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1753
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierWithWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REST_REQUEST_PATH(self):
            return self.getToken(MRSParser.REST_REQUEST_PATH, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifierWithWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifierWithWildcard" ):
                listener.enterRequestPathIdentifierWithWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifierWithWildcard" ):
                listener.exitRequestPathIdentifierWithWildcard(self)




    def requestPathIdentifierWithWildcard(self):

        localctx = MRSParser.RequestPathIdentifierWithWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_requestPathIdentifierWithWildcard)
        try:
            self.state = 1760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1756
                self.match(MRSParser.REST_REQUEST_PATH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1757
                self.match(MRSParser.BACK_TICK_QUOTED_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1758
                if not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1759
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1762
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1763
                self.jsonPair()
                self.state = 1768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==177:
                    self.state = 1764
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1765
                    self.jsonPair()
                    self.state = 1770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1771
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1773
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1774
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1778
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1779
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 481036337152) != 0) or ((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & 4483955294211) != 0):
                self.state = 1782
                self.jsonValue()
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==177:
                    self.state = 1783
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1784
                    self.jsonValue()
                    self.state = 1789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1792
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [204]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [162, 163, 198]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==162 or _la==163:
                    self.state = 1795
                    _la = self._input.LA(1)
                    if not(_la==162 or _la==163):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1798
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [196]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1799
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [182]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1800
                self.jsonObj()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1801
                self.jsonArr()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1802
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1803
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1804
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,230,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1808
                self.graphQlPair()
                self.state = 1813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==177:
                    self.state = 1809
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1810
                    self.graphQlPair()
                    self.state = 1815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1816
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1818
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1819
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def AT_CHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_CHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_CHECK_SYMBOL, i)

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1823 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1822
                _la = self._input.LA(1)
                if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 31751) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1825 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 31751) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def graphQlValueOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlValueOptionsContext,0)


        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlValueJsonSchema(self):
            return self.getTypedRuleContext(MRSParser.GraphQlValueJsonSchemaContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1827
            self.graphQlPairKey()
            self.state = 1828
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1829
            self.graphQlPairValue()
            self.state = 1831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 7) != 0):
                self.state = 1830
                _la = self._input.LA(1)
                if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1833
                self.graphQlValueOptions()


            self.state = 1841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 1836
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1837
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1838
                self.graphQlDatatypeValue()
                self.state = 1839
                self.match(MRSParser.CLOSE_PAR_SYMBOL)


            self.state = 1844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 31751) != 0):
                self.state = 1843
                self.graphQlCrudOptions()


            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1846
                self.graphQlValueJsonSchema()


            self.state = 1850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==182:
                self.state = 1849
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def AT_SORTABLE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SORTABLE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, i)

        def AT_NOFILTERING_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOFILTERING_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, i)

        def AT_ROWOWNERSHIP_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, i)

        def AT_UNNEST_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UNNEST_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UNNEST_SYMBOL, i)

        def AT_KEY_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_KEY_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_KEY_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValueOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValueOptions" ):
                listener.enterGraphQlValueOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValueOptions" ):
                listener.exitGraphQlValueOptions(self)




    def graphQlValueOptions(self):

        localctx = MRSParser.GraphQlValueOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_graphQlValueOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1852
                    _la = self._input.LA(1)
                    if not(((((_la - 138)) & ~0x3f) == 0 and ((1 << (_la - 138)) & 16445) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1855 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueJsonSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValueJsonSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValueJsonSchema" ):
                listener.enterGraphQlValueJsonSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValueJsonSchema" ):
                listener.exitGraphQlValueJsonSchema(self)




    def graphQlValueJsonSchema(self):

        localctx = MRSParser.GraphQlValueJsonSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_graphQlValueJsonSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.match(MRSParser.JSON_SYMBOL)
            self.state = 1858
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1859
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MRSParser.GROUP_SYMBOL, 0)

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MRSParser.LEVEL_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def URL_SYMBOL(self):
            return self.getToken(MRSParser.URL_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MRSParser.NAME_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MRSParser.DO_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MRSParser.COMMENT_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def ID_SYMBOL(self):
            return self.getToken(MRSParser.ID_SYMBOL, 0)

        def SECRET_SYMBOL(self):
            return self.getToken(MRSParser.SECRET_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def DEVELOPMENT_SYMBOL(self):
            return self.getToken(MRSParser.DEVELOPMENT_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def HIERARCHY_SYMBOL(self):
            return self.getToken(MRSParser.HIERARCHY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1861
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -17179869186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4611686018427385995) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_graphQlPairKey)
        try:
            self.state = 1866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1865
                self.graphQlAllowedKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_graphQlPairValue)
        try:
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1869
                self.graphQlAllowedKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1874
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1872
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1873
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1876
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1877
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_graphQlValue)
        try:
            self.state = 1882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1880
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1881
                self.graphQlObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1884
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1886
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1888
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1890
                _la = self._input.LA(1)
                if not(_la==201 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1891
                if not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1892
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.identifier()
            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==177:
                self.state = 1898
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1899
                self.identifier()
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1906
            self.identifierList()
            self.state = 1907
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1909
            self.identifier()
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 1910
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.identifier()
            self.state = 1918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 1914
                self.dotIdentifier()
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 1915
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1920
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1921
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_textStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteral" ):
                listener.enterTextStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteral" ):
                listener.exitTextStringLiteral(self)




    def textStringLiteral(self):

        localctx = MRSParser.TextStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_textStringLiteral)
        try:
            self.state = 1926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1923
                localctx.value = self.match(MRSParser.SINGLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                if not not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1925
                localctx.value = self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextOrIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_textOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextOrIdentifier" ):
                listener.enterTextOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextOrIdentifier" ):
                listener.exitTextOrIdentifier(self)




    def textOrIdentifier(self):

        localctx = MRSParser.TextOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_textOrIdentifier)
        try:
            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1928
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1929
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[137] = self.requestPathIdentifier_sempred
        self._predicates[138] = self.requestPathIdentifierWithWildcard_sempred
        self._predicates[157] = self.pureIdentifier_sempred
        self._predicates[164] = self.textStringLiteral_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def requestPathIdentifier_sempred(self, localctx:RequestPathIdentifierContext, predIndex:int):
            if predIndex == 0:
                return self.isSqlModeActive("ANSI_QUOTES")
         

    def requestPathIdentifierWithWildcard_sempred(self, localctx:RequestPathIdentifierWithWildcardContext, predIndex:int):
            if predIndex == 1:
                return self.isSqlModeActive("ANSI_QUOTES")
         

    def pureIdentifier_sempred(self, localctx:PureIdentifierContext, predIndex:int):
            if predIndex == 2:
                return self.isSqlModeActive("ANSI_QUOTES")
         

    def textStringLiteral_sempred(self, localctx:TextStringLiteralContext, predIndex:int):
            if predIndex == 3:
                return not self.isSqlModeActive("ANSI_QUOTES")
         




