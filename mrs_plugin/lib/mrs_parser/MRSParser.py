# Copyright (c) 2023, 2025, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,201,1722,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,1,0,1,0,4,0,327,8,0,11,0,12,
        0,328,1,0,5,0,332,8,0,10,0,12,0,335,9,0,3,0,337,8,0,1,0,3,0,340,
        8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,398,8,1,1,2,1,2,1,3,1,3,
        1,4,1,4,3,4,406,8,4,1,5,3,5,409,8,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,
        1,7,1,7,1,8,1,8,3,8,422,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,3,11,435,8,11,1,11,1,11,1,11,1,12,1,12,3,12,442,8,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,451,8,13,1,14,1,14,1,14,4,
        14,456,8,14,11,14,12,14,457,1,15,1,15,1,15,3,15,463,8,15,1,16,1,
        16,1,16,3,16,468,8,16,1,16,1,16,1,16,1,16,3,16,474,8,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,4,17,485,8,17,11,17,12,17,486,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,5,20,499,8,20,
        10,20,12,20,502,9,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,3,25,522,8,25,1,26,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,3,28,
        537,8,28,1,28,1,28,1,28,3,28,542,8,28,1,28,1,28,3,28,546,8,28,1,
        28,3,28,549,8,28,1,28,1,28,1,28,3,28,554,8,28,1,29,1,29,1,29,1,29,
        1,29,1,29,4,29,562,8,29,11,29,12,29,563,1,30,1,30,1,30,3,30,569,
        8,30,1,30,1,30,3,30,573,8,30,1,30,3,30,576,8,30,1,30,1,30,1,30,1,
        30,3,30,582,8,30,1,30,1,30,1,30,1,30,3,30,588,8,30,1,30,3,30,591,
        8,30,1,30,3,30,594,8,30,1,30,3,30,597,8,30,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,4,31,608,8,31,11,31,12,31,609,1,32,1,32,1,
        32,1,32,3,32,616,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,
        35,1,35,3,35,628,8,35,1,35,1,35,1,35,1,35,1,35,3,35,635,8,35,1,35,
        1,35,1,35,3,35,640,8,35,1,35,1,35,3,35,644,8,35,1,35,3,35,647,8,
        35,1,35,5,35,650,8,35,10,35,12,35,653,9,35,1,35,3,35,656,8,35,1,
        36,1,36,3,36,660,8,36,1,36,1,36,1,37,1,37,1,37,3,37,667,8,37,1,37,
        1,37,1,37,1,37,1,37,3,37,674,8,37,1,37,1,37,1,37,3,37,679,8,37,1,
        37,1,37,3,37,683,8,37,1,37,3,37,686,8,37,1,37,3,37,689,8,37,1,37,
        3,37,692,8,37,1,38,1,38,3,38,696,8,38,1,38,1,38,1,39,1,39,1,39,3,
        39,703,8,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,711,8,39,1,39,3,39,
        714,8,39,1,39,1,39,3,39,718,8,39,1,39,3,39,721,8,39,1,40,1,40,1,
        41,1,41,1,41,1,41,1,41,1,41,4,41,731,8,41,11,41,12,41,732,1,42,1,
        42,1,42,1,43,1,43,3,43,740,8,43,1,43,1,43,1,44,1,44,1,44,3,44,747,
        8,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,755,8,44,1,44,3,44,758,8,
        44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,766,8,44,1,44,1,44,3,44,770,
        8,44,1,44,3,44,773,8,44,1,45,1,45,1,45,4,45,778,8,45,11,45,12,45,
        779,1,46,1,46,1,46,3,46,785,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,3,46,795,8,46,1,46,3,46,798,8,46,1,47,1,47,1,48,1,48,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,4,49,811,8,49,11,49,12,49,812,1,50,
        1,50,3,50,817,8,50,1,50,1,50,1,50,1,50,1,50,3,50,824,8,50,1,51,1,
        51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,
        54,1,55,1,55,1,55,3,55,844,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,3,55,854,8,55,1,55,3,55,857,8,55,1,56,1,56,1,57,1,57,1,58,
        1,58,1,58,4,58,866,8,58,11,58,12,58,867,1,59,1,59,1,59,1,59,1,60,
        1,60,1,60,1,61,1,61,1,61,3,61,880,8,61,1,61,1,61,1,61,1,61,1,61,
        3,61,887,8,61,1,61,1,61,1,61,1,61,3,61,893,8,61,1,61,3,61,896,8,
        61,3,61,898,8,61,1,61,3,61,901,8,61,1,62,1,62,4,62,905,8,62,11,62,
        12,62,906,1,63,1,63,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,930,8,66,
        1,66,3,66,933,8,66,1,67,1,67,1,67,1,67,3,67,939,8,67,1,67,1,67,3,
        67,943,8,67,1,67,3,67,946,8,67,1,67,1,67,1,67,1,67,3,67,952,8,67,
        1,67,1,67,3,67,956,8,67,1,67,3,67,959,8,67,1,68,1,68,1,68,3,68,964,
        8,68,1,68,3,68,967,8,68,1,68,1,68,1,68,1,68,3,68,973,8,68,1,68,1,
        68,1,68,1,68,3,68,979,8,68,1,68,1,68,1,68,3,68,984,8,68,1,68,3,68,
        987,8,68,3,68,989,8,68,1,68,3,68,992,8,68,1,69,1,69,1,69,1,69,1,
        69,1,69,3,69,1000,8,69,1,69,1,69,1,69,1,69,3,69,1006,8,69,1,69,1,
        69,3,69,1010,8,69,1,69,3,69,1013,8,69,1,69,5,69,1016,8,69,10,69,
        12,69,1019,9,69,1,69,3,69,1022,8,69,1,70,1,70,1,70,1,70,1,70,1,70,
        3,70,1030,8,70,1,70,1,70,1,70,1,70,3,70,1036,8,70,1,70,1,70,3,70,
        1040,8,70,1,70,3,70,1043,8,70,1,70,5,70,1046,8,70,10,70,12,70,1049,
        9,70,1,70,3,70,1052,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,
        1061,8,71,1,71,3,71,1064,8,71,1,71,1,71,1,71,1,71,3,71,1070,8,71,
        1,71,3,71,1073,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,
        1083,8,72,1,72,3,72,1086,8,72,1,73,1,73,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,3,74,1099,8,74,1,74,3,74,1102,8,74,1,75,1,75,
        1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1115,8,76,1,76,
        3,76,1118,8,76,1,77,1,77,1,77,3,77,1123,8,77,1,77,3,77,1126,8,77,
        1,77,1,77,1,77,1,77,3,77,1132,8,77,1,78,1,78,1,78,1,78,1,78,1,78,
        3,78,1140,8,78,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1148,8,79,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,3,80,1157,8,80,1,80,3,80,1160,8,80,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1169,8,81,1,81,3,81,1172,
        8,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,
        1,85,1,85,3,85,1201,8,85,1,85,1,85,1,85,1,85,1,85,3,85,1208,8,85,
        3,85,1210,8,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,3,86,1220,
        8,86,1,87,1,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,3,88,
        1233,8,88,1,89,1,89,1,89,1,89,1,89,3,89,1240,8,89,1,89,1,89,1,89,
        1,89,1,89,3,89,1247,8,89,3,89,1249,8,89,1,89,1,89,1,89,1,90,1,90,
        1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,92,1,92,
        1,92,3,92,1270,8,92,1,93,1,93,1,93,3,93,1275,8,93,1,93,1,93,1,94,
        1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,3,95,1288,8,95,1,95,3,95,
        1291,8,95,1,96,1,96,1,96,3,96,1296,8,96,1,96,3,96,1299,8,96,1,96,
        1,96,1,96,3,96,1304,8,96,1,97,1,97,1,97,1,97,1,97,3,97,1311,8,97,
        1,98,1,98,1,98,1,98,1,98,3,98,1318,8,98,1,99,1,99,1,99,1,99,1,99,
        1,99,3,99,1326,8,99,1,99,3,99,1329,8,99,1,100,1,100,1,100,1,100,
        1,100,1,100,3,100,1337,8,100,1,100,3,100,1340,8,100,1,100,1,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1352,8,101,
        1,101,3,101,1355,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        3,102,1364,8,102,1,102,3,102,1367,8,102,3,102,1369,8,102,1,102,1,
        102,3,102,1373,8,102,1,102,1,102,3,102,1377,8,102,1,103,1,103,1,
        103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,104,3,104,1390,8,
        104,1,104,1,104,1,104,3,104,1395,8,104,1,105,1,105,1,105,1,105,1,
        105,3,105,1402,8,105,1,105,1,105,3,105,1406,8,105,1,105,3,105,1409,
        8,105,1,106,1,106,1,106,1,106,3,106,1415,8,106,1,106,3,106,1418,
        8,106,1,106,1,106,1,106,1,106,3,106,1424,8,106,1,107,1,107,1,107,
        1,107,1,107,1,107,1,107,3,107,1433,8,107,1,108,1,108,1,108,1,108,
        1,108,1,108,1,108,3,108,1442,8,108,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,3,109,1452,8,109,1,109,3,109,1455,8,109,1,110,
        1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,1465,8,110,1,110,
        3,110,1468,8,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,
        1,111,1,111,1,111,1,112,3,112,1482,8,112,1,112,1,112,1,113,3,113,
        1487,8,113,1,113,1,113,1,114,3,114,1492,8,114,1,114,1,114,1,115,
        1,115,1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,
        1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,126,
        1,126,1,127,1,127,1,128,1,128,1,129,1,129,1,130,1,130,1,131,1,131,
        1,132,1,132,1,132,5,132,1533,8,132,10,132,12,132,1536,9,132,1,132,
        1,132,1,133,1,133,1,133,1,133,3,133,1544,8,133,1,134,1,134,1,134,
        1,134,3,134,1550,8,134,1,135,1,135,1,135,1,135,5,135,1556,8,135,
        10,135,12,135,1559,9,135,1,135,1,135,1,135,1,135,3,135,1565,8,135,
        1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,5,137,1575,8,137,
        10,137,12,137,1578,9,137,3,137,1580,8,137,1,137,1,137,1,138,1,138,
        3,138,1586,8,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,3,138,
        1595,8,138,1,139,1,139,1,139,1,139,5,139,1601,8,139,10,139,12,139,
        1604,9,139,1,139,1,139,1,139,1,139,3,139,1610,8,139,1,140,4,140,
        1613,8,140,11,140,12,140,1614,1,141,1,141,1,141,1,141,3,141,1621,
        8,141,1,141,3,141,1624,8,141,1,141,1,141,1,141,1,141,1,141,3,141,
        1631,8,141,1,141,3,141,1634,8,141,1,141,3,141,1637,8,141,1,141,3,
        141,1640,8,141,1,142,4,142,1643,8,142,11,142,12,142,1644,1,143,1,
        143,1,143,1,143,1,144,1,144,1,145,1,145,1,145,3,145,1656,8,145,1,
        146,1,146,3,146,1660,8,146,1,147,1,147,3,147,1664,8,147,1,148,1,
        148,3,148,1668,8,148,1,149,1,149,3,149,1672,8,149,1,150,1,150,1,
        151,1,151,1,152,1,152,1,153,1,153,1,153,3,153,1683,8,153,1,154,1,
        154,1,155,1,155,1,155,5,155,1690,8,155,10,155,12,155,1693,9,155,
        1,156,1,156,1,156,1,156,1,157,1,157,3,157,1701,8,157,1,158,1,158,
        1,158,3,158,1706,8,158,3,158,1708,8,158,1,159,1,159,1,159,1,160,
        1,160,1,160,3,160,1716,8,160,1,161,1,161,3,161,1720,8,161,1,161,
        0,0,162,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,
        218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
        250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,
        282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,
        314,316,318,320,322,0,16,2,0,81,81,83,83,2,0,81,81,83,84,2,0,82,
        82,85,85,1,0,87,88,2,0,97,97,99,100,2,0,21,21,103,103,2,0,62,62,
        105,105,1,0,56,57,3,0,1,1,35,35,51,52,1,0,8,9,1,0,153,154,2,0,128,
        130,138,142,1,0,125,127,3,0,129,129,131,134,143,143,4,0,1,33,35,
        65,67,67,71,122,2,0,192,192,194,194,1869,0,336,1,0,0,0,2,397,1,0,
        0,0,4,399,1,0,0,0,6,401,1,0,0,0,8,405,1,0,0,0,10,408,1,0,0,0,12,
        413,1,0,0,0,14,416,1,0,0,0,16,419,1,0,0,0,18,425,1,0,0,0,20,430,
        1,0,0,0,22,434,1,0,0,0,24,441,1,0,0,0,26,446,1,0,0,0,28,455,1,0,
        0,0,30,459,1,0,0,0,32,464,1,0,0,0,34,484,1,0,0,0,36,488,1,0,0,0,
        38,490,1,0,0,0,40,493,1,0,0,0,42,503,1,0,0,0,44,506,1,0,0,0,46,509,
        1,0,0,0,48,512,1,0,0,0,50,516,1,0,0,0,52,523,1,0,0,0,54,528,1,0,
        0,0,56,533,1,0,0,0,58,561,1,0,0,0,60,565,1,0,0,0,62,607,1,0,0,0,
        64,611,1,0,0,0,66,617,1,0,0,0,68,620,1,0,0,0,70,624,1,0,0,0,72,657,
        1,0,0,0,74,663,1,0,0,0,76,693,1,0,0,0,78,699,1,0,0,0,80,722,1,0,
        0,0,82,730,1,0,0,0,84,734,1,0,0,0,86,737,1,0,0,0,88,743,1,0,0,0,
        90,777,1,0,0,0,92,781,1,0,0,0,94,799,1,0,0,0,96,801,1,0,0,0,98,810,
        1,0,0,0,100,816,1,0,0,0,102,825,1,0,0,0,104,829,1,0,0,0,106,833,
        1,0,0,0,108,837,1,0,0,0,110,840,1,0,0,0,112,858,1,0,0,0,114,860,
        1,0,0,0,116,865,1,0,0,0,118,869,1,0,0,0,120,873,1,0,0,0,122,876,
        1,0,0,0,124,904,1,0,0,0,126,908,1,0,0,0,128,910,1,0,0,0,130,912,
        1,0,0,0,132,921,1,0,0,0,134,934,1,0,0,0,136,960,1,0,0,0,138,993,
        1,0,0,0,140,1023,1,0,0,0,142,1053,1,0,0,0,144,1074,1,0,0,0,146,1087,
        1,0,0,0,148,1089,1,0,0,0,150,1103,1,0,0,0,152,1108,1,0,0,0,154,1119,
        1,0,0,0,156,1133,1,0,0,0,158,1141,1,0,0,0,160,1149,1,0,0,0,162,1161,
        1,0,0,0,164,1177,1,0,0,0,166,1183,1,0,0,0,168,1190,1,0,0,0,170,1195,
        1,0,0,0,172,1219,1,0,0,0,174,1221,1,0,0,0,176,1223,1,0,0,0,178,1234,
        1,0,0,0,180,1253,1,0,0,0,182,1262,1,0,0,0,184,1269,1,0,0,0,186,1271,
        1,0,0,0,188,1278,1,0,0,0,190,1282,1,0,0,0,192,1292,1,0,0,0,194,1305,
        1,0,0,0,196,1312,1,0,0,0,198,1319,1,0,0,0,200,1330,1,0,0,0,202,1345,
        1,0,0,0,204,1356,1,0,0,0,206,1378,1,0,0,0,208,1384,1,0,0,0,210,1396,
        1,0,0,0,212,1410,1,0,0,0,214,1425,1,0,0,0,216,1434,1,0,0,0,218,1443,
        1,0,0,0,220,1456,1,0,0,0,222,1473,1,0,0,0,224,1481,1,0,0,0,226,1486,
        1,0,0,0,228,1491,1,0,0,0,230,1495,1,0,0,0,232,1497,1,0,0,0,234,1499,
        1,0,0,0,236,1501,1,0,0,0,238,1503,1,0,0,0,240,1505,1,0,0,0,242,1507,
        1,0,0,0,244,1509,1,0,0,0,246,1511,1,0,0,0,248,1513,1,0,0,0,250,1515,
        1,0,0,0,252,1517,1,0,0,0,254,1519,1,0,0,0,256,1521,1,0,0,0,258,1523,
        1,0,0,0,260,1525,1,0,0,0,262,1527,1,0,0,0,264,1529,1,0,0,0,266,1543,
        1,0,0,0,268,1549,1,0,0,0,270,1564,1,0,0,0,272,1566,1,0,0,0,274,1570,
        1,0,0,0,276,1594,1,0,0,0,278,1609,1,0,0,0,280,1612,1,0,0,0,282,1616,
        1,0,0,0,284,1642,1,0,0,0,286,1646,1,0,0,0,288,1650,1,0,0,0,290,1655,
        1,0,0,0,292,1659,1,0,0,0,294,1663,1,0,0,0,296,1667,1,0,0,0,298,1671,
        1,0,0,0,300,1673,1,0,0,0,302,1675,1,0,0,0,304,1677,1,0,0,0,306,1682,
        1,0,0,0,308,1684,1,0,0,0,310,1686,1,0,0,0,312,1694,1,0,0,0,314,1698,
        1,0,0,0,316,1702,1,0,0,0,318,1709,1,0,0,0,320,1715,1,0,0,0,322,1719,
        1,0,0,0,324,333,3,2,1,0,325,327,5,169,0,0,326,325,1,0,0,0,327,328,
        1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,332,
        3,2,1,0,331,326,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,
        1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,336,324,1,0,0,0,336,337,
        1,0,0,0,337,339,1,0,0,0,338,340,5,169,0,0,339,338,1,0,0,0,339,340,
        1,0,0,0,340,341,1,0,0,0,341,342,5,0,0,1,342,1,1,0,0,0,343,398,3,
        26,13,0,344,398,3,32,16,0,345,398,3,56,28,0,346,398,3,60,30,0,347,
        398,3,70,35,0,348,398,3,74,37,0,349,398,3,78,39,0,350,398,3,88,44,
        0,351,398,3,92,46,0,352,398,3,122,61,0,353,398,3,110,55,0,354,398,
        3,130,65,0,355,398,3,132,66,0,356,398,3,134,67,0,357,398,3,136,68,
        0,358,398,3,138,69,0,359,398,3,140,70,0,360,398,3,142,71,0,361,398,
        3,144,72,0,362,398,3,148,74,0,363,398,3,150,75,0,364,398,3,152,76,
        0,365,398,3,154,77,0,366,398,3,156,78,0,367,398,3,158,79,0,368,398,
        3,160,80,0,369,398,3,162,81,0,370,398,3,164,82,0,371,398,3,166,83,
        0,372,398,3,168,84,0,373,398,3,176,88,0,374,398,3,170,85,0,375,398,
        3,178,89,0,376,398,3,180,90,0,377,398,3,182,91,0,378,398,3,186,93,
        0,379,398,3,188,94,0,380,398,3,190,95,0,381,398,3,192,96,0,382,398,
        3,194,97,0,383,398,3,196,98,0,384,398,3,198,99,0,385,398,3,200,100,
        0,386,398,3,202,101,0,387,398,3,204,102,0,388,398,3,206,103,0,389,
        398,3,208,104,0,390,398,3,210,105,0,391,398,3,212,106,0,392,398,
        3,214,107,0,393,398,3,216,108,0,394,398,3,218,109,0,395,398,3,220,
        110,0,396,398,3,222,111,0,397,343,1,0,0,0,397,344,1,0,0,0,397,345,
        1,0,0,0,397,346,1,0,0,0,397,347,1,0,0,0,397,348,1,0,0,0,397,349,
        1,0,0,0,397,350,1,0,0,0,397,351,1,0,0,0,397,352,1,0,0,0,397,353,
        1,0,0,0,397,354,1,0,0,0,397,355,1,0,0,0,397,356,1,0,0,0,397,357,
        1,0,0,0,397,358,1,0,0,0,397,359,1,0,0,0,397,360,1,0,0,0,397,361,
        1,0,0,0,397,362,1,0,0,0,397,363,1,0,0,0,397,364,1,0,0,0,397,365,
        1,0,0,0,397,366,1,0,0,0,397,367,1,0,0,0,397,368,1,0,0,0,397,369,
        1,0,0,0,397,370,1,0,0,0,397,371,1,0,0,0,397,372,1,0,0,0,397,373,
        1,0,0,0,397,374,1,0,0,0,397,375,1,0,0,0,397,376,1,0,0,0,397,377,
        1,0,0,0,397,378,1,0,0,0,397,379,1,0,0,0,397,380,1,0,0,0,397,381,
        1,0,0,0,397,382,1,0,0,0,397,383,1,0,0,0,397,384,1,0,0,0,397,385,
        1,0,0,0,397,386,1,0,0,0,397,387,1,0,0,0,397,388,1,0,0,0,397,389,
        1,0,0,0,397,390,1,0,0,0,397,391,1,0,0,0,397,392,1,0,0,0,397,393,
        1,0,0,0,397,394,1,0,0,0,397,395,1,0,0,0,397,396,1,0,0,0,398,3,1,
        0,0,0,399,400,7,0,0,0,400,5,1,0,0,0,401,402,7,1,0,0,402,7,1,0,0,
        0,403,406,3,320,160,0,404,406,5,24,0,0,405,403,1,0,0,0,405,404,1,
        0,0,0,406,9,1,0,0,0,407,409,5,70,0,0,408,407,1,0,0,0,408,409,1,0,
        0,0,409,410,1,0,0,0,410,411,5,26,0,0,411,412,3,276,138,0,412,11,
        1,0,0,0,413,414,5,74,0,0,414,415,3,276,138,0,415,13,1,0,0,0,416,
        417,5,71,0,0,417,418,3,320,160,0,418,15,1,0,0,0,419,421,5,21,0,0,
        420,422,5,28,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,
        423,424,5,93,0,0,424,17,1,0,0,0,425,426,5,94,0,0,426,427,5,95,0,
        0,427,428,5,30,0,0,428,429,3,20,10,0,429,19,1,0,0,0,430,431,5,187,
        0,0,431,21,1,0,0,0,432,433,5,76,0,0,433,435,3,224,112,0,434,432,
        1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,5,12,0,0,437,438,
        3,230,115,0,438,23,1,0,0,0,439,440,5,76,0,0,440,442,3,228,114,0,
        441,439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,444,5,12,0,0,
        444,445,3,234,117,0,445,25,1,0,0,0,446,447,5,72,0,0,447,448,5,73,
        0,0,448,450,5,74,0,0,449,451,3,28,14,0,450,449,1,0,0,0,450,451,1,
        0,0,0,451,27,1,0,0,0,452,456,3,4,2,0,453,456,3,10,5,0,454,456,3,
        30,15,0,455,452,1,0,0,0,455,453,1,0,0,0,455,454,1,0,0,0,456,457,
        1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,29,1,0,0,0,459,462,5,
        35,0,0,460,461,5,27,0,0,461,463,5,92,0,0,462,460,1,0,0,0,462,463,
        1,0,0,0,463,31,1,0,0,0,464,467,5,1,0,0,465,466,5,2,0,0,466,468,5,
        3,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,469,1,0,0,0,469,470,5,
        73,0,0,470,471,5,76,0,0,471,473,3,224,112,0,472,474,3,34,17,0,473,
        472,1,0,0,0,473,474,1,0,0,0,474,33,1,0,0,0,475,485,3,4,2,0,476,485,
        3,36,18,0,477,485,3,38,19,0,478,485,3,40,20,0,479,485,3,10,5,0,480,
        485,3,14,7,0,481,485,3,12,6,0,482,485,3,52,26,0,483,485,3,54,27,
        0,484,475,1,0,0,0,484,476,1,0,0,0,484,477,1,0,0,0,484,478,1,0,0,
        0,484,479,1,0,0,0,484,480,1,0,0,0,484,481,1,0,0,0,484,482,1,0,0,
        0,484,483,1,0,0,0,485,486,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,
        0,487,35,1,0,0,0,488,489,7,2,0,0,489,37,1,0,0,0,490,491,5,86,0,0,
        491,492,7,3,0,0,492,39,1,0,0,0,493,500,5,21,0,0,494,499,3,42,21,
        0,495,499,3,44,22,0,496,499,3,46,23,0,497,499,3,48,24,0,498,494,
        1,0,0,0,498,495,1,0,0,0,498,496,1,0,0,0,498,497,1,0,0,0,499,502,
        1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,41,1,0,0,0,502,500,1,
        0,0,0,503,504,5,22,0,0,504,505,3,8,4,0,505,43,1,0,0,0,506,507,5,
        90,0,0,507,508,3,8,4,0,508,45,1,0,0,0,509,510,5,23,0,0,510,511,3,
        8,4,0,511,47,1,0,0,0,512,513,5,30,0,0,513,514,5,96,0,0,514,515,3,
        8,4,0,515,49,1,0,0,0,516,517,5,25,0,0,517,518,5,91,0,0,518,521,5,
        12,0,0,519,522,3,300,150,0,520,522,5,24,0,0,521,519,1,0,0,0,521,
        520,1,0,0,0,522,51,1,0,0,0,523,524,5,68,0,0,524,525,5,103,0,0,525,
        526,5,105,0,0,526,527,3,94,47,0,527,53,1,0,0,0,528,529,5,69,0,0,
        529,530,5,103,0,0,530,531,5,105,0,0,531,532,3,94,47,0,532,55,1,0,
        0,0,533,536,5,1,0,0,534,535,5,2,0,0,535,537,5,3,0,0,536,534,1,0,
        0,0,536,537,1,0,0,0,537,538,1,0,0,0,538,539,5,73,0,0,539,541,5,12,
        0,0,540,542,3,230,115,0,541,540,1,0,0,0,541,542,1,0,0,0,542,548,
        1,0,0,0,543,545,5,8,0,0,544,546,5,76,0,0,545,544,1,0,0,0,545,546,
        1,0,0,0,546,547,1,0,0,0,547,549,3,224,112,0,548,543,1,0,0,0,548,
        549,1,0,0,0,549,550,1,0,0,0,550,551,5,9,0,0,551,553,3,300,150,0,
        552,554,3,58,29,0,553,552,1,0,0,0,553,554,1,0,0,0,554,57,1,0,0,0,
        555,562,3,6,3,0,556,562,3,16,8,0,557,562,3,18,9,0,558,562,3,10,5,
        0,559,562,3,14,7,0,560,562,3,12,6,0,561,555,1,0,0,0,561,556,1,0,
        0,0,561,557,1,0,0,0,561,558,1,0,0,0,561,559,1,0,0,0,561,560,1,0,
        0,0,562,563,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,59,1,0,0,
        0,565,568,5,1,0,0,566,567,5,2,0,0,567,569,5,3,0,0,568,566,1,0,0,
        0,568,569,1,0,0,0,569,570,1,0,0,0,570,572,5,73,0,0,571,573,5,48,
        0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,5,117,
        0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,578,5,14,
        0,0,578,581,3,236,118,0,579,580,5,8,0,0,580,582,3,22,11,0,581,579,
        1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,584,5,19,0,0,584,587,
        3,314,157,0,585,586,5,114,0,0,586,588,3,240,120,0,587,585,1,0,0,
        0,587,588,1,0,0,0,588,590,1,0,0,0,589,591,3,280,140,0,590,589,1,
        0,0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,594,3,278,139,0,593,592,
        1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,597,3,62,31,0,596,595,
        1,0,0,0,596,597,1,0,0,0,597,61,1,0,0,0,598,608,3,6,3,0,599,608,3,
        16,8,0,600,608,3,18,9,0,601,608,3,10,5,0,602,608,3,14,7,0,603,608,
        3,12,6,0,604,608,3,64,32,0,605,608,3,66,33,0,606,608,3,68,34,0,607,
        598,1,0,0,0,607,599,1,0,0,0,607,600,1,0,0,0,607,601,1,0,0,0,607,
        602,1,0,0,0,607,603,1,0,0,0,607,604,1,0,0,0,607,605,1,0,0,0,607,
        606,1,0,0,0,608,609,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,
        63,1,0,0,0,611,612,5,97,0,0,612,615,5,32,0,0,613,616,3,320,160,0,
        614,616,5,98,0,0,615,613,1,0,0,0,615,614,1,0,0,0,616,65,1,0,0,0,
        617,618,5,33,0,0,618,619,7,4,0,0,619,67,1,0,0,0,620,621,5,21,0,0,
        621,622,5,15,0,0,622,623,3,314,157,0,623,69,1,0,0,0,624,627,5,1,
        0,0,625,626,5,2,0,0,626,628,5,3,0,0,627,625,1,0,0,0,627,628,1,0,
        0,0,628,629,1,0,0,0,629,630,5,73,0,0,630,631,5,15,0,0,631,634,3,
        248,124,0,632,633,5,8,0,0,633,635,3,22,11,0,634,632,1,0,0,0,634,
        635,1,0,0,0,635,636,1,0,0,0,636,637,5,19,0,0,637,639,3,314,157,0,
        638,640,5,34,0,0,639,638,1,0,0,0,639,640,1,0,0,0,640,646,1,0,0,0,
        641,643,5,67,0,0,642,644,3,240,120,0,643,642,1,0,0,0,643,644,1,0,
        0,0,644,645,1,0,0,0,645,647,3,278,139,0,646,641,1,0,0,0,646,647,
        1,0,0,0,647,651,1,0,0,0,648,650,3,72,36,0,649,648,1,0,0,0,650,653,
        1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,655,1,0,0,0,653,651,
        1,0,0,0,654,656,3,62,31,0,655,654,1,0,0,0,655,656,1,0,0,0,656,71,
        1,0,0,0,657,659,5,80,0,0,658,660,3,242,121,0,659,658,1,0,0,0,659,
        660,1,0,0,0,660,661,1,0,0,0,661,662,3,278,139,0,662,73,1,0,0,0,663,
        666,5,1,0,0,664,665,5,2,0,0,665,667,5,3,0,0,666,664,1,0,0,0,666,
        667,1,0,0,0,667,668,1,0,0,0,668,669,5,73,0,0,669,670,5,16,0,0,670,
        673,3,250,125,0,671,672,5,8,0,0,672,674,3,22,11,0,673,671,1,0,0,
        0,673,674,1,0,0,0,674,675,1,0,0,0,675,676,5,19,0,0,676,678,3,314,
        157,0,677,679,5,34,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,685,1,
        0,0,0,680,682,5,67,0,0,681,683,3,240,120,0,682,681,1,0,0,0,682,683,
        1,0,0,0,683,684,1,0,0,0,684,686,3,278,139,0,685,680,1,0,0,0,685,
        686,1,0,0,0,686,688,1,0,0,0,687,689,3,76,38,0,688,687,1,0,0,0,688,
        689,1,0,0,0,689,691,1,0,0,0,690,692,3,62,31,0,691,690,1,0,0,0,691,
        692,1,0,0,0,692,75,1,0,0,0,693,695,5,80,0,0,694,696,3,242,121,0,
        695,694,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,698,3,278,139,
        0,698,77,1,0,0,0,699,702,5,1,0,0,700,701,5,2,0,0,701,703,5,3,0,0,
        702,700,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,705,5,73,0,0,
        705,706,5,96,0,0,706,707,5,39,0,0,707,713,3,256,128,0,708,710,5,
        8,0,0,709,711,5,76,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,
        0,0,0,712,714,3,224,112,0,713,708,1,0,0,0,713,714,1,0,0,0,714,717,
        1,0,0,0,715,716,5,9,0,0,716,718,3,80,40,0,717,715,1,0,0,0,717,718,
        1,0,0,0,718,720,1,0,0,0,719,721,3,82,41,0,720,719,1,0,0,0,720,721,
        1,0,0,0,721,79,1,0,0,0,722,723,3,320,160,0,723,81,1,0,0,0,724,731,
        3,6,3,0,725,731,3,16,8,0,726,731,3,10,5,0,727,731,3,14,7,0,728,731,
        3,84,42,0,729,731,3,86,43,0,730,724,1,0,0,0,730,725,1,0,0,0,730,
        726,1,0,0,0,730,727,1,0,0,0,730,728,1,0,0,0,730,729,1,0,0,0,731,
        732,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,83,1,0,0,0,734,735,
        5,44,0,0,735,736,3,320,160,0,736,85,1,0,0,0,737,739,5,49,0,0,738,
        740,5,118,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,
        742,5,116,0,0,742,87,1,0,0,0,743,746,5,1,0,0,744,745,5,2,0,0,745,
        747,5,3,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,
        749,5,73,0,0,749,750,5,96,0,0,750,751,5,46,0,0,751,752,3,260,130,
        0,752,757,5,8,0,0,753,755,5,76,0,0,754,753,1,0,0,0,754,755,1,0,0,
        0,755,756,1,0,0,0,756,758,3,224,112,0,757,754,1,0,0,0,757,758,1,
        0,0,0,758,759,1,0,0,0,759,760,5,96,0,0,760,761,5,39,0,0,761,769,
        3,256,128,0,762,763,5,9,0,0,763,770,3,80,40,0,764,766,5,47,0,0,765,
        764,1,0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,768,5,96,0,0,768,
        770,3,320,160,0,769,762,1,0,0,0,769,765,1,0,0,0,770,772,1,0,0,0,
        771,773,3,90,45,0,772,771,1,0,0,0,772,773,1,0,0,0,773,89,1,0,0,0,
        774,778,3,6,3,0,775,778,3,16,8,0,776,778,3,10,5,0,777,774,1,0,0,
        0,777,775,1,0,0,0,777,776,1,0,0,0,778,779,1,0,0,0,779,777,1,0,0,
        0,779,780,1,0,0,0,780,91,1,0,0,0,781,784,5,1,0,0,782,783,5,2,0,0,
        783,785,5,3,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,
        786,787,5,73,0,0,787,788,7,5,0,0,788,789,5,105,0,0,789,790,3,94,
        47,0,790,794,5,108,0,0,791,795,5,109,0,0,792,795,5,110,0,0,793,795,
        3,96,48,0,794,791,1,0,0,0,794,792,1,0,0,0,794,793,1,0,0,0,795,797,
        1,0,0,0,796,798,3,98,49,0,797,796,1,0,0,0,797,798,1,0,0,0,798,93,
        1,0,0,0,799,800,3,322,161,0,800,95,1,0,0,0,801,802,3,322,161,0,802,
        97,1,0,0,0,803,811,3,4,2,0,804,811,3,14,7,0,805,811,3,100,50,0,806,
        811,3,102,51,0,807,811,3,104,52,0,808,811,3,106,53,0,809,811,3,108,
        54,0,810,803,1,0,0,0,810,804,1,0,0,0,810,805,1,0,0,0,810,806,1,0,
        0,0,810,807,1,0,0,0,810,808,1,0,0,0,810,809,1,0,0,0,811,812,1,0,
        0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,99,1,0,0,0,814,815,5,65,
        0,0,815,817,5,28,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,818,1,0,
        0,0,818,819,5,112,0,0,819,820,5,7,0,0,820,823,5,111,0,0,821,822,
        5,43,0,0,822,824,5,113,0,0,823,821,1,0,0,0,823,824,1,0,0,0,824,101,
        1,0,0,0,825,826,5,24,0,0,826,827,5,42,0,0,827,828,3,322,161,0,828,
        103,1,0,0,0,829,830,7,6,0,0,830,831,5,106,0,0,831,832,3,320,160,
        0,832,105,1,0,0,0,833,834,7,6,0,0,834,835,5,107,0,0,835,836,3,320,
        160,0,836,107,1,0,0,0,837,838,5,63,0,0,838,839,3,320,160,0,839,109,
        1,0,0,0,840,843,5,1,0,0,841,842,5,2,0,0,842,844,5,3,0,0,843,841,
        1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,846,5,73,0,0,846,847,
        5,25,0,0,847,848,3,112,56,0,848,849,5,180,0,0,849,853,3,94,47,0,
        850,851,5,40,0,0,851,852,5,41,0,0,852,854,3,114,57,0,853,850,1,0,
        0,0,853,854,1,0,0,0,854,856,1,0,0,0,855,857,3,116,58,0,856,855,1,
        0,0,0,856,857,1,0,0,0,857,111,1,0,0,0,858,859,3,322,161,0,859,113,
        1,0,0,0,860,861,3,320,160,0,861,115,1,0,0,0,862,866,3,120,60,0,863,
        866,3,118,59,0,864,866,3,10,5,0,865,862,1,0,0,0,865,863,1,0,0,0,
        865,864,1,0,0,0,866,867,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,
        868,117,1,0,0,0,869,870,5,105,0,0,870,871,5,26,0,0,871,872,3,276,
        138,0,872,119,1,0,0,0,873,874,5,55,0,0,874,875,7,7,0,0,875,121,1,
        0,0,0,876,879,5,1,0,0,877,878,5,2,0,0,878,880,5,3,0,0,879,877,1,
        0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,882,5,73,0,0,882,883,5,
        42,0,0,883,886,3,128,64,0,884,885,5,120,0,0,885,887,3,126,63,0,886,
        884,1,0,0,0,886,887,1,0,0,0,887,897,1,0,0,0,888,895,5,8,0,0,889,
        890,5,61,0,0,890,896,5,76,0,0,891,893,5,76,0,0,892,891,1,0,0,0,892,
        893,1,0,0,0,893,894,1,0,0,0,894,896,3,224,112,0,895,889,1,0,0,0,
        895,892,1,0,0,0,896,898,1,0,0,0,897,888,1,0,0,0,897,898,1,0,0,0,
        898,900,1,0,0,0,899,901,3,124,62,0,900,899,1,0,0,0,900,901,1,0,0,
        0,901,123,1,0,0,0,902,905,3,10,5,0,903,905,3,14,7,0,904,902,1,0,
        0,0,904,903,1,0,0,0,905,906,1,0,0,0,906,904,1,0,0,0,906,907,1,0,
        0,0,907,125,1,0,0,0,908,909,3,322,161,0,909,127,1,0,0,0,910,911,
        3,322,161,0,911,129,1,0,0,0,912,913,5,45,0,0,913,914,5,73,0,0,914,
        915,5,76,0,0,915,916,3,224,112,0,916,917,5,7,0,0,917,918,5,89,0,
        0,918,919,5,22,0,0,919,920,3,226,113,0,920,131,1,0,0,0,921,922,5,
        4,0,0,922,923,5,73,0,0,923,924,5,76,0,0,924,929,3,224,112,0,925,
        926,5,7,0,0,926,927,5,89,0,0,927,928,5,22,0,0,928,930,3,226,113,
        0,929,925,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,933,3,34,17,
        0,932,931,1,0,0,0,932,933,1,0,0,0,933,133,1,0,0,0,934,935,5,4,0,
        0,935,936,5,73,0,0,936,938,5,12,0,0,937,939,3,230,115,0,938,937,
        1,0,0,0,938,939,1,0,0,0,939,945,1,0,0,0,940,942,5,8,0,0,941,943,
        5,76,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,946,
        3,224,112,0,945,940,1,0,0,0,945,946,1,0,0,0,946,951,1,0,0,0,947,
        948,5,7,0,0,948,949,5,89,0,0,949,950,5,22,0,0,950,952,3,232,116,
        0,951,947,1,0,0,0,951,952,1,0,0,0,952,955,1,0,0,0,953,954,5,9,0,
        0,954,956,3,300,150,0,955,953,1,0,0,0,955,956,1,0,0,0,956,958,1,
        0,0,0,957,959,3,58,29,0,958,957,1,0,0,0,958,959,1,0,0,0,959,135,
        1,0,0,0,960,961,5,4,0,0,961,963,5,73,0,0,962,964,5,48,0,0,963,962,
        1,0,0,0,963,964,1,0,0,0,964,966,1,0,0,0,965,967,5,117,0,0,966,965,
        1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,969,5,14,0,0,969,972,
        3,236,118,0,970,971,5,8,0,0,971,973,3,22,11,0,972,970,1,0,0,0,972,
        973,1,0,0,0,973,978,1,0,0,0,974,975,5,7,0,0,975,976,5,89,0,0,976,
        977,5,22,0,0,977,979,3,238,119,0,978,974,1,0,0,0,978,979,1,0,0,0,
        979,988,1,0,0,0,980,981,5,114,0,0,981,983,3,240,120,0,982,984,3,
        280,140,0,983,982,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,987,
        3,278,139,0,986,985,1,0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,988,
        980,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,992,3,62,31,0,991,
        990,1,0,0,0,991,992,1,0,0,0,992,137,1,0,0,0,993,994,5,4,0,0,994,
        995,5,73,0,0,995,996,5,15,0,0,996,999,3,248,124,0,997,998,5,8,0,
        0,998,1000,3,22,11,0,999,997,1,0,0,0,999,1000,1,0,0,0,1000,1005,
        1,0,0,0,1001,1002,5,7,0,0,1002,1003,5,89,0,0,1003,1004,5,22,0,0,
        1004,1006,3,252,126,0,1005,1001,1,0,0,0,1005,1006,1,0,0,0,1006,1012,
        1,0,0,0,1007,1009,5,67,0,0,1008,1010,3,240,120,0,1009,1008,1,0,0,
        0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,1013,3,278,139,0,1012,
        1007,1,0,0,0,1012,1013,1,0,0,0,1013,1017,1,0,0,0,1014,1016,3,72,
        36,0,1015,1014,1,0,0,0,1016,1019,1,0,0,0,1017,1015,1,0,0,0,1017,
        1018,1,0,0,0,1018,1021,1,0,0,0,1019,1017,1,0,0,0,1020,1022,3,62,
        31,0,1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,139,1,0,0,0,1023,1024,
        5,4,0,0,1024,1025,5,73,0,0,1025,1026,5,16,0,0,1026,1029,3,250,125,
        0,1027,1028,5,8,0,0,1028,1030,3,22,11,0,1029,1027,1,0,0,0,1029,1030,
        1,0,0,0,1030,1035,1,0,0,0,1031,1032,5,7,0,0,1032,1033,5,89,0,0,1033,
        1034,5,22,0,0,1034,1036,3,254,127,0,1035,1031,1,0,0,0,1035,1036,
        1,0,0,0,1036,1042,1,0,0,0,1037,1039,5,67,0,0,1038,1040,3,240,120,
        0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,1043,
        3,278,139,0,1042,1037,1,0,0,0,1042,1043,1,0,0,0,1043,1047,1,0,0,
        0,1044,1046,3,76,38,0,1045,1044,1,0,0,0,1046,1049,1,0,0,0,1047,1045,
        1,0,0,0,1047,1048,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,1050,
        1052,3,62,31,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,141,1,0,
        0,0,1053,1054,5,4,0,0,1054,1055,5,73,0,0,1055,1056,5,96,0,0,1056,
        1057,5,39,0,0,1057,1063,3,256,128,0,1058,1060,5,8,0,0,1059,1061,
        5,76,0,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,
        1064,3,224,112,0,1063,1058,1,0,0,0,1063,1064,1,0,0,0,1064,1069,1,
        0,0,0,1065,1066,5,7,0,0,1066,1067,5,89,0,0,1067,1068,5,22,0,0,1068,
        1070,3,258,129,0,1069,1065,1,0,0,0,1069,1070,1,0,0,0,1070,1072,1,
        0,0,0,1071,1073,3,82,41,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,
        143,1,0,0,0,1074,1075,5,4,0,0,1075,1076,5,73,0,0,1076,1077,7,5,0,
        0,1077,1078,5,105,0,0,1078,1082,3,94,47,0,1079,1080,5,7,0,0,1080,
        1081,5,64,0,0,1081,1083,3,146,73,0,1082,1079,1,0,0,0,1082,1083,1,
        0,0,0,1083,1085,1,0,0,0,1084,1086,3,98,49,0,1085,1084,1,0,0,0,1085,
        1086,1,0,0,0,1086,145,1,0,0,0,1087,1088,3,322,161,0,1088,147,1,0,
        0,0,1089,1090,5,4,0,0,1090,1091,5,73,0,0,1091,1092,5,25,0,0,1092,
        1093,3,112,56,0,1093,1094,5,180,0,0,1094,1098,3,94,47,0,1095,1096,
        5,40,0,0,1096,1097,5,41,0,0,1097,1099,3,114,57,0,1098,1095,1,0,0,
        0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,1102,3,116,58,0,1101,
        1100,1,0,0,0,1101,1102,1,0,0,0,1102,149,1,0,0,0,1103,1104,5,17,0,
        0,1104,1105,5,73,0,0,1105,1106,5,76,0,0,1106,1107,3,224,112,0,1107,
        151,1,0,0,0,1108,1109,5,17,0,0,1109,1110,5,73,0,0,1110,1111,5,12,
        0,0,1111,1117,3,230,115,0,1112,1114,5,9,0,0,1113,1115,5,76,0,0,1114,
        1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1118,3,224,
        112,0,1117,1112,1,0,0,0,1117,1118,1,0,0,0,1118,153,1,0,0,0,1119,
        1120,5,17,0,0,1120,1122,5,73,0,0,1121,1123,5,48,0,0,1122,1121,1,
        0,0,0,1122,1123,1,0,0,0,1123,1125,1,0,0,0,1124,1126,5,117,0,0,1125,
        1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1128,5,14,
        0,0,1128,1131,3,236,118,0,1129,1130,5,9,0,0,1130,1132,3,22,11,0,
        1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,155,1,0,0,0,1133,1134,5,
        17,0,0,1134,1135,5,73,0,0,1135,1136,5,15,0,0,1136,1139,3,248,124,
        0,1137,1138,5,9,0,0,1138,1140,3,22,11,0,1139,1137,1,0,0,0,1139,1140,
        1,0,0,0,1140,157,1,0,0,0,1141,1142,5,17,0,0,1142,1143,5,73,0,0,1143,
        1144,5,16,0,0,1144,1147,3,250,125,0,1145,1146,5,9,0,0,1146,1148,
        3,22,11,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,159,1,0,0,0,1149,
        1150,5,17,0,0,1150,1151,5,73,0,0,1151,1152,5,96,0,0,1152,1153,5,
        39,0,0,1153,1159,3,256,128,0,1154,1156,5,9,0,0,1155,1157,5,76,0,
        0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1160,
        3,224,112,0,1159,1154,1,0,0,0,1159,1160,1,0,0,0,1160,161,1,0,0,0,
        1161,1162,5,17,0,0,1162,1163,5,73,0,0,1163,1164,5,96,0,0,1164,1165,
        5,46,0,0,1165,1166,3,260,130,0,1166,1171,5,9,0,0,1167,1169,5,76,
        0,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,0,0,0,1170,1172,
        3,224,112,0,1171,1168,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,
        0,1173,1174,5,96,0,0,1174,1175,5,39,0,0,1175,1176,3,256,128,0,1176,
        163,1,0,0,0,1177,1178,5,17,0,0,1178,1179,5,73,0,0,1179,1180,7,5,
        0,0,1180,1181,5,105,0,0,1181,1182,3,94,47,0,1182,165,1,0,0,0,1183,
        1184,5,17,0,0,1184,1185,5,73,0,0,1185,1186,5,25,0,0,1186,1187,3,
        112,56,0,1187,1188,5,180,0,0,1188,1189,3,94,47,0,1189,167,1,0,0,
        0,1190,1191,5,17,0,0,1191,1192,5,73,0,0,1192,1193,5,42,0,0,1193,
        1194,3,128,64,0,1194,169,1,0,0,0,1195,1196,5,50,0,0,1196,1197,5,
        73,0,0,1197,1209,3,172,86,0,1198,1200,5,8,0,0,1199,1201,5,76,0,0,
        1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,1210,
        3,228,114,0,1203,1204,5,8,0,0,1204,1207,3,24,12,0,1205,1206,5,121,
        0,0,1206,1208,3,246,123,0,1207,1205,1,0,0,0,1207,1208,1,0,0,0,1208,
        1210,1,0,0,0,1209,1198,1,0,0,0,1209,1203,1,0,0,0,1209,1210,1,0,0,
        0,1210,1211,1,0,0,0,1211,1212,5,43,0,0,1212,1213,3,128,64,0,1213,
        171,1,0,0,0,1214,1220,3,174,87,0,1215,1216,3,174,87,0,1216,1217,
        5,168,0,0,1217,1218,3,172,86,0,1218,1220,1,0,0,0,1219,1214,1,0,0,
        0,1219,1215,1,0,0,0,1220,173,1,0,0,0,1221,1222,7,8,0,0,1222,175,
        1,0,0,0,1223,1224,5,50,0,0,1224,1225,5,73,0,0,1225,1226,5,42,0,0,
        1226,1227,3,128,64,0,1227,1228,5,43,0,0,1228,1229,3,112,56,0,1229,
        1230,5,180,0,0,1230,1232,3,94,47,0,1231,1233,3,14,7,0,1232,1231,
        1,0,0,0,1232,1233,1,0,0,0,1233,177,1,0,0,0,1234,1235,5,54,0,0,1235,
        1236,5,73,0,0,1236,1248,3,172,86,0,1237,1239,5,8,0,0,1238,1240,5,
        76,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,1,0,0,0,1241,
        1249,3,228,114,0,1242,1243,5,8,0,0,1243,1246,3,24,12,0,1244,1245,
        5,121,0,0,1245,1247,3,246,123,0,1246,1244,1,0,0,0,1246,1247,1,0,
        0,0,1247,1249,1,0,0,0,1248,1237,1,0,0,0,1248,1242,1,0,0,0,1248,1249,
        1,0,0,0,1249,1250,1,0,0,0,1250,1251,5,9,0,0,1251,1252,3,128,64,0,
        1252,179,1,0,0,0,1253,1254,5,54,0,0,1254,1255,5,73,0,0,1255,1256,
        5,42,0,0,1256,1257,3,128,64,0,1257,1258,5,9,0,0,1258,1259,3,112,
        56,0,1259,1260,5,180,0,0,1260,1261,3,94,47,0,1261,181,1,0,0,0,1262,
        1263,5,18,0,0,1263,1264,5,73,0,0,1264,1265,3,184,92,0,1265,183,1,
        0,0,0,1266,1267,5,76,0,0,1267,1270,3,224,112,0,1268,1270,3,22,11,
        0,1269,1266,1,0,0,0,1269,1268,1,0,0,0,1270,185,1,0,0,0,1271,1272,
        5,5,0,0,1272,1274,5,73,0,0,1273,1275,5,74,0,0,1274,1273,1,0,0,0,
        1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1277,5,6,0,0,1277,187,1,
        0,0,0,1278,1279,5,5,0,0,1279,1280,5,73,0,0,1280,1281,5,75,0,0,1281,
        189,1,0,0,0,1282,1283,5,5,0,0,1283,1284,5,73,0,0,1284,1290,5,11,
        0,0,1285,1287,7,9,0,0,1286,1288,5,76,0,0,1287,1286,1,0,0,0,1287,
        1288,1,0,0,0,1288,1289,1,0,0,0,1289,1291,3,224,112,0,1290,1285,1,
        0,0,0,1290,1291,1,0,0,0,1291,191,1,0,0,0,1292,1293,5,5,0,0,1293,
        1295,5,73,0,0,1294,1296,5,48,0,0,1295,1294,1,0,0,0,1295,1296,1,0,
        0,0,1296,1298,1,0,0,0,1297,1299,5,117,0,0,1298,1297,1,0,0,0,1298,
        1299,1,0,0,0,1299,1300,1,0,0,0,1300,1303,5,77,0,0,1301,1302,7,9,
        0,0,1302,1304,3,22,11,0,1303,1301,1,0,0,0,1303,1304,1,0,0,0,1304,
        193,1,0,0,0,1305,1306,5,5,0,0,1306,1307,5,73,0,0,1307,1310,5,78,
        0,0,1308,1309,7,9,0,0,1309,1311,3,22,11,0,1310,1308,1,0,0,0,1310,
        1311,1,0,0,0,1311,195,1,0,0,0,1312,1313,5,5,0,0,1313,1314,5,73,0,
        0,1314,1317,5,79,0,0,1315,1316,7,9,0,0,1316,1318,3,22,11,0,1317,
        1315,1,0,0,0,1317,1318,1,0,0,0,1318,197,1,0,0,0,1319,1320,5,5,0,
        0,1320,1321,5,73,0,0,1321,1322,5,96,0,0,1322,1328,5,101,0,0,1323,
        1325,7,9,0,0,1324,1326,5,76,0,0,1325,1324,1,0,0,0,1325,1326,1,0,
        0,0,1326,1327,1,0,0,0,1327,1329,3,224,112,0,1328,1323,1,0,0,0,1328,
        1329,1,0,0,0,1329,199,1,0,0,0,1330,1331,5,5,0,0,1331,1332,5,73,0,
        0,1332,1333,5,96,0,0,1333,1334,5,102,0,0,1334,1339,7,9,0,0,1335,
        1337,5,76,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,
        0,0,1338,1340,3,224,112,0,1339,1336,1,0,0,0,1339,1340,1,0,0,0,1340,
        1341,1,0,0,0,1341,1342,5,96,0,0,1342,1343,5,39,0,0,1343,1344,3,256,
        128,0,1344,201,1,0,0,0,1345,1346,5,5,0,0,1346,1347,5,73,0,0,1347,
        1348,5,103,0,0,1348,1354,5,104,0,0,1349,1351,7,9,0,0,1350,1352,5,
        76,0,0,1351,1350,1,0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,
        1355,3,224,112,0,1354,1349,1,0,0,0,1354,1355,1,0,0,0,1355,203,1,
        0,0,0,1356,1357,5,5,0,0,1357,1358,5,73,0,0,1358,1368,5,119,0,0,1359,
        1366,7,9,0,0,1360,1361,5,61,0,0,1361,1367,5,76,0,0,1362,1364,5,76,
        0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1367,
        3,224,112,0,1366,1360,1,0,0,0,1366,1363,1,0,0,0,1367,1369,1,0,0,
        0,1368,1359,1,0,0,0,1368,1369,1,0,0,0,1369,1376,1,0,0,0,1370,1372,
        5,59,0,0,1371,1373,3,112,56,0,1372,1371,1,0,0,0,1372,1373,1,0,0,
        0,1373,1374,1,0,0,0,1374,1375,5,180,0,0,1375,1377,3,94,47,0,1376,
        1370,1,0,0,0,1376,1377,1,0,0,0,1377,205,1,0,0,0,1378,1379,5,5,0,
        0,1379,1380,5,73,0,0,1380,1381,5,58,0,0,1381,1382,5,59,0,0,1382,
        1383,3,128,64,0,1383,207,1,0,0,0,1384,1385,5,5,0,0,1385,1386,5,1,
        0,0,1386,1387,5,73,0,0,1387,1389,5,76,0,0,1388,1390,3,224,112,0,
        1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1394,1,0,0,0,1391,1392,
        5,123,0,0,1392,1393,5,66,0,0,1393,1395,5,124,0,0,1394,1391,1,0,0,
        0,1394,1395,1,0,0,0,1395,209,1,0,0,0,1396,1397,5,5,0,0,1397,1398,
        5,1,0,0,1398,1399,5,73,0,0,1399,1401,5,12,0,0,1400,1402,3,230,115,
        0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1408,1,0,0,0,1403,1405,
        7,9,0,0,1404,1406,5,76,0,0,1405,1404,1,0,0,0,1405,1406,1,0,0,0,1406,
        1407,1,0,0,0,1407,1409,3,224,112,0,1408,1403,1,0,0,0,1408,1409,1,
        0,0,0,1409,211,1,0,0,0,1410,1411,5,5,0,0,1411,1412,5,1,0,0,1412,
        1414,5,73,0,0,1413,1415,5,48,0,0,1414,1413,1,0,0,0,1414,1415,1,0,
        0,0,1415,1417,1,0,0,0,1416,1418,5,117,0,0,1417,1416,1,0,0,0,1417,
        1418,1,0,0,0,1418,1419,1,0,0,0,1419,1420,5,14,0,0,1420,1423,3,236,
        118,0,1421,1422,7,9,0,0,1422,1424,3,22,11,0,1423,1421,1,0,0,0,1423,
        1424,1,0,0,0,1424,213,1,0,0,0,1425,1426,5,5,0,0,1426,1427,5,1,0,
        0,1427,1428,5,73,0,0,1428,1429,5,15,0,0,1429,1432,3,248,124,0,1430,
        1431,7,9,0,0,1431,1433,3,22,11,0,1432,1430,1,0,0,0,1432,1433,1,0,
        0,0,1433,215,1,0,0,0,1434,1435,5,5,0,0,1435,1436,5,1,0,0,1436,1437,
        5,73,0,0,1437,1438,5,16,0,0,1438,1441,3,250,125,0,1439,1440,7,9,
        0,0,1440,1442,3,22,11,0,1441,1439,1,0,0,0,1441,1442,1,0,0,0,1442,
        217,1,0,0,0,1443,1444,5,5,0,0,1444,1445,5,1,0,0,1445,1446,5,73,0,
        0,1446,1447,5,96,0,0,1447,1448,5,39,0,0,1448,1454,3,256,128,0,1449,
        1451,7,9,0,0,1450,1452,5,76,0,0,1451,1450,1,0,0,0,1451,1452,1,0,
        0,0,1452,1453,1,0,0,0,1453,1455,3,224,112,0,1454,1449,1,0,0,0,1454,
        1455,1,0,0,0,1455,219,1,0,0,0,1456,1457,5,5,0,0,1457,1458,5,1,0,
        0,1458,1459,5,73,0,0,1459,1460,5,96,0,0,1460,1461,5,46,0,0,1461,
        1462,3,260,130,0,1462,1467,7,9,0,0,1463,1465,5,76,0,0,1464,1463,
        1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1468,3,224,112,
        0,1467,1464,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,1470,
        5,96,0,0,1470,1471,5,39,0,0,1471,1472,3,256,128,0,1472,221,1,0,0,
        0,1473,1474,5,5,0,0,1474,1475,5,1,0,0,1475,1476,5,73,0,0,1476,1477,
        5,103,0,0,1477,1478,5,105,0,0,1478,1479,3,94,47,0,1479,223,1,0,0,
        0,1480,1482,3,264,132,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,
        1483,1,0,0,0,1483,1484,3,266,133,0,1484,225,1,0,0,0,1485,1487,3,
        264,132,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1488,1,0,0,0,
        1488,1489,3,266,133,0,1489,227,1,0,0,0,1490,1492,3,264,132,0,1491,
        1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1494,3,268,
        134,0,1494,229,1,0,0,0,1495,1496,3,266,133,0,1496,231,1,0,0,0,1497,
        1498,3,266,133,0,1498,233,1,0,0,0,1499,1500,3,268,134,0,1500,235,
        1,0,0,0,1501,1502,3,266,133,0,1502,237,1,0,0,0,1503,1504,3,266,133,
        0,1504,239,1,0,0,0,1505,1506,3,308,154,0,1506,241,1,0,0,0,1507,1508,
        3,308,154,0,1508,243,1,0,0,0,1509,1510,3,266,133,0,1510,245,1,0,
        0,0,1511,1512,3,268,134,0,1512,247,1,0,0,0,1513,1514,3,266,133,0,
        1514,249,1,0,0,0,1515,1516,3,266,133,0,1516,251,1,0,0,0,1517,1518,
        3,266,133,0,1518,253,1,0,0,0,1519,1520,3,266,133,0,1520,255,1,0,
        0,0,1521,1522,3,266,133,0,1522,257,1,0,0,0,1523,1524,3,266,133,0,
        1524,259,1,0,0,0,1525,1526,3,266,133,0,1526,261,1,0,0,0,1527,1528,
        3,322,161,0,1528,263,1,0,0,0,1529,1534,3,262,131,0,1530,1531,5,168,
        0,0,1531,1533,3,262,131,0,1532,1530,1,0,0,0,1533,1536,1,0,0,0,1534,
        1532,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,1534,1,0,0,
        0,1537,1538,5,180,0,0,1538,265,1,0,0,0,1539,1544,5,144,0,0,1540,
        1544,5,194,0,0,1541,1542,4,133,0,0,1542,1544,5,195,0,0,1543,1539,
        1,0,0,0,1543,1540,1,0,0,0,1543,1541,1,0,0,0,1544,267,1,0,0,0,1545,
        1550,5,144,0,0,1546,1550,5,194,0,0,1547,1548,4,134,1,0,1548,1550,
        5,195,0,0,1549,1545,1,0,0,0,1549,1546,1,0,0,0,1549,1547,1,0,0,0,
        1550,269,1,0,0,0,1551,1552,5,173,0,0,1552,1557,3,272,136,0,1553,
        1554,5,168,0,0,1554,1556,3,272,136,0,1555,1553,1,0,0,0,1556,1559,
        1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,1560,1,0,0,0,1559,
        1557,1,0,0,0,1560,1561,5,174,0,0,1561,1565,1,0,0,0,1562,1563,5,173,
        0,0,1563,1565,5,174,0,0,1564,1551,1,0,0,0,1564,1562,1,0,0,0,1565,
        271,1,0,0,0,1566,1567,5,195,0,0,1567,1568,5,170,0,0,1568,1569,3,
        276,138,0,1569,273,1,0,0,0,1570,1579,5,176,0,0,1571,1576,3,276,138,
        0,1572,1573,5,168,0,0,1573,1575,3,276,138,0,1574,1572,1,0,0,0,1575,
        1578,1,0,0,0,1576,1574,1,0,0,0,1576,1577,1,0,0,0,1577,1580,1,0,0,
        0,1578,1576,1,0,0,0,1579,1571,1,0,0,0,1579,1580,1,0,0,0,1580,1581,
        1,0,0,0,1581,1582,5,177,0,0,1582,275,1,0,0,0,1583,1595,5,195,0,0,
        1584,1586,7,10,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1587,
        1,0,0,0,1587,1595,5,189,0,0,1588,1595,5,187,0,0,1589,1595,3,270,
        135,0,1590,1595,3,274,137,0,1591,1595,5,37,0,0,1592,1595,5,38,0,
        0,1593,1595,5,36,0,0,1594,1583,1,0,0,0,1594,1585,1,0,0,0,1594,1588,
        1,0,0,0,1594,1589,1,0,0,0,1594,1590,1,0,0,0,1594,1591,1,0,0,0,1594,
        1592,1,0,0,0,1594,1593,1,0,0,0,1595,277,1,0,0,0,1596,1597,5,173,
        0,0,1597,1602,3,282,141,0,1598,1599,5,168,0,0,1599,1601,3,282,141,
        0,1600,1598,1,0,0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,0,1602,1603,
        1,0,0,0,1603,1605,1,0,0,0,1604,1602,1,0,0,0,1605,1606,5,174,0,0,
        1606,1610,1,0,0,0,1607,1608,5,173,0,0,1608,1610,5,174,0,0,1609,1596,
        1,0,0,0,1609,1607,1,0,0,0,1610,279,1,0,0,0,1611,1613,7,11,0,0,1612,
        1611,1,0,0,0,1613,1614,1,0,0,0,1614,1612,1,0,0,0,1614,1615,1,0,0,
        0,1615,281,1,0,0,0,1616,1617,3,290,145,0,1617,1618,5,170,0,0,1618,
        1620,3,292,146,0,1619,1621,7,12,0,0,1620,1619,1,0,0,0,1620,1621,
        1,0,0,0,1621,1623,1,0,0,0,1622,1624,3,284,142,0,1623,1622,1,0,0,
        0,1623,1624,1,0,0,0,1624,1630,1,0,0,0,1625,1626,5,135,0,0,1626,1627,
        5,171,0,0,1627,1628,3,296,148,0,1628,1629,5,172,0,0,1629,1631,1,
        0,0,0,1630,1625,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,0,0,0,1632,
        1634,3,280,140,0,1633,1632,1,0,0,0,1633,1634,1,0,0,0,1634,1636,1,
        0,0,0,1635,1637,3,286,143,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,
        1637,1639,1,0,0,0,1638,1640,3,278,139,0,1639,1638,1,0,0,0,1639,1640,
        1,0,0,0,1640,283,1,0,0,0,1641,1643,7,13,0,0,1642,1641,1,0,0,0,1643,
        1644,1,0,0,0,1644,1642,1,0,0,0,1644,1645,1,0,0,0,1645,285,1,0,0,
        0,1646,1647,5,13,0,0,1647,1648,5,12,0,0,1648,1649,3,276,138,0,1649,
        287,1,0,0,0,1650,1651,7,14,0,0,1651,289,1,0,0,0,1652,1656,5,195,
        0,0,1653,1656,3,308,154,0,1654,1656,3,288,144,0,1655,1652,1,0,0,
        0,1655,1653,1,0,0,0,1655,1654,1,0,0,0,1656,291,1,0,0,0,1657,1660,
        3,314,157,0,1658,1660,3,288,144,0,1659,1657,1,0,0,0,1659,1658,1,
        0,0,0,1660,293,1,0,0,0,1661,1664,5,195,0,0,1662,1664,3,308,154,0,
        1663,1661,1,0,0,0,1663,1662,1,0,0,0,1664,295,1,0,0,0,1665,1668,5,
        195,0,0,1666,1668,3,308,154,0,1667,1665,1,0,0,0,1667,1666,1,0,0,
        0,1668,297,1,0,0,0,1669,1672,3,314,157,0,1670,1672,3,278,139,0,1671,
        1669,1,0,0,0,1671,1670,1,0,0,0,1672,299,1,0,0,0,1673,1674,3,308,
        154,0,1674,301,1,0,0,0,1675,1676,3,308,154,0,1676,303,1,0,0,0,1677,
        1678,3,308,154,0,1678,305,1,0,0,0,1679,1683,7,15,0,0,1680,1681,4,
        153,2,0,1681,1683,5,195,0,0,1682,1679,1,0,0,0,1682,1680,1,0,0,0,
        1683,307,1,0,0,0,1684,1685,3,306,153,0,1685,309,1,0,0,0,1686,1691,
        3,308,154,0,1687,1688,5,168,0,0,1688,1690,3,308,154,0,1689,1687,
        1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,
        311,1,0,0,0,1693,1691,1,0,0,0,1694,1695,5,171,0,0,1695,1696,3,310,
        155,0,1696,1697,5,172,0,0,1697,313,1,0,0,0,1698,1700,3,308,154,0,
        1699,1701,3,318,159,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,315,
        1,0,0,0,1702,1707,3,308,154,0,1703,1705,3,318,159,0,1704,1706,3,
        318,159,0,1705,1704,1,0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,
        1707,1703,1,0,0,0,1707,1708,1,0,0,0,1708,317,1,0,0,0,1709,1710,5,
        167,0,0,1710,1711,3,308,154,0,1711,319,1,0,0,0,1712,1716,5,196,0,
        0,1713,1714,4,160,3,0,1714,1716,5,195,0,0,1715,1712,1,0,0,0,1715,
        1713,1,0,0,0,1716,321,1,0,0,0,1717,1720,3,308,154,0,1718,1720,3,
        320,160,0,1719,1717,1,0,0,0,1719,1718,1,0,0,0,1720,323,1,0,0,0,214,
        328,333,336,339,397,405,408,421,434,441,450,455,457,462,467,473,
        484,486,498,500,521,536,541,545,548,553,561,563,568,572,575,581,
        587,590,593,596,607,609,615,627,634,639,643,646,651,655,659,666,
        673,678,682,685,688,691,695,702,710,713,717,720,730,732,739,746,
        754,757,765,769,772,777,779,784,794,797,810,812,816,823,843,853,
        856,865,867,879,886,892,895,897,900,904,906,929,932,938,942,945,
        951,955,958,963,966,972,978,983,986,988,991,999,1005,1009,1012,1017,
        1021,1029,1035,1039,1042,1047,1051,1060,1063,1069,1072,1082,1085,
        1098,1101,1114,1117,1122,1125,1131,1139,1147,1156,1159,1168,1171,
        1200,1207,1209,1219,1232,1239,1246,1248,1269,1274,1287,1290,1295,
        1298,1303,1310,1317,1325,1328,1336,1339,1351,1354,1363,1366,1368,
        1372,1376,1389,1394,1401,1405,1408,1414,1417,1423,1432,1441,1451,
        1454,1464,1467,1481,1486,1491,1534,1543,1549,1557,1564,1576,1579,
        1585,1594,1602,1609,1614,1620,1623,1630,1633,1636,1639,1644,1655,
        1659,1663,1667,1671,1682,1691,1700,1705,1707,1715,1719
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "':='", "'<=>'", "'>='", "'>'", 
                     "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", 
                     "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", "'('", 
                     "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", "'->>'", 
                     "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "FORCE_SYMBOL", "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", 
                      "FALSE_SYMBOL", "SET_SYMBOL", "IDENTIFIED_SYMBOL", 
                      "BY_SYMBOL", "ROLE_SYMBOL", "TO_SYMBOL", "IGNORE_SYMBOL", 
                      "CLONE_SYMBOL", "FILE_SYMBOL", "BINARY_SYMBOL", "DATA_SYMBOL", 
                      "LOAD_SYMBOL", "GRANT_SYMBOL", "READ_SYMBOL", "DELETE_SYMBOL", 
                      "GROUP_SYMBOL", "REVOKE_SYMBOL", "ACCOUNT_SYMBOL", 
                      "LOCK_SYMBOL", "UNLOCK_SYMBOL", "GRANTS_SYMBOL", "FOR_SYMBOL", 
                      "LEVEL_SYMBOL", "ANY_SYMBOL", "CLIENT_SYMBOL", "URL_SYMBOL", 
                      "NAME_SYMBOL", "DO_SYMBOL", "ALL_SYMBOL", "PARAMETERS_SYMBOL", 
                      "ADD_SYMBOL", "REMOVE_SYMBOL", "MERGE_SYMBOL", "COMMENT_SYMBOL", 
                      "CONFIGURE_SYMBOL", "REST_SYMBOL", "METADATA_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "VIEWS_SYMBOL", 
                      "PROCEDURES_SYMBOL", "FUNCTIONS_SYMBOL", "RESULT_SYMBOL", 
                      "ENABLED_SYMBOL", "PUBLISHED_SYMBOL", "DISABLED_SYMBOL", 
                      "PRIVATE_SYMBOL", "UNPUBLISHED_SYMBOL", "PROTOCOL_SYMBOL", 
                      "HTTP_SYMBOL", "HTTPS_SYMBOL", "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", 
                      "MANAGEMENT_SYMBOL", "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", 
                      "ITEMS_SYMBOL", "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FEED_SYMBOL", "ITEM_SYMBOL", 
                      "SETS_SYMBOL", "FILES_SYMBOL", "AUTH_SYMBOL", "APPS_SYMBOL", 
                      "APP_SYMBOL", "ID_SYMBOL", "SECRET_SYMBOL", "VENDOR_SYMBOL", 
                      "MRS_SYMBOL", "MYSQL_SYMBOL", "USERS_SYMBOL", "ALLOW_SYMBOL", 
                      "REGISTER_SYMBOL", "CLASS_SYMBOL", "DEVELOPMENT_SYMBOL", 
                      "SCRIPTS_SYMBOL", "MAPPING_SYMBOL", "TYPESCRIPT_SYMBOL", 
                      "ROLES_SYMBOL", "EXTENDS_SYMBOL", "OBJECT_SYMBOL", 
                      "HIERARCHY_SYMBOL", "INCLUDE_SYMBOL", "OBJECTS_SYMBOL", 
                      "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", "AT_OUT_SYMBOL", 
                      "AT_CHECK_SYMBOL", "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", 
                      "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", 
                      "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", 
                      "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", 
                      "AT_KEY_SYMBOL", "REST_REQUEST_PATH", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_enabledDisabledPrivate = 3
    RULE_quotedTextOrDefault = 4
    RULE_jsonOptions = 5
    RULE_metadata = 6
    RULE_comments = 7
    RULE_authenticationRequired = 8
    RULE_itemsPerPage = 9
    RULE_itemsPerPageNumber = 10
    RULE_serviceSchemaSelector = 11
    RULE_serviceSchemaSelectorWildcard = 12
    RULE_configureRestMetadataStatement = 13
    RULE_restMetadataOptions = 14
    RULE_updateIfAvailable = 15
    RULE_createRestServiceStatement = 16
    RULE_restServiceOptions = 17
    RULE_publishedUnpublished = 18
    RULE_restProtocol = 19
    RULE_restAuthentication = 20
    RULE_authPath = 21
    RULE_authRedirection = 22
    RULE_authValidation = 23
    RULE_authPageContent = 24
    RULE_userManagementSchema = 25
    RULE_addAuthApp = 26
    RULE_removeAuthApp = 27
    RULE_createRestSchemaStatement = 28
    RULE_restSchemaOptions = 29
    RULE_createRestViewStatement = 30
    RULE_restObjectOptions = 31
    RULE_restViewMediaType = 32
    RULE_restViewFormat = 33
    RULE_restViewAuthenticationProcedure = 34
    RULE_createRestProcedureStatement = 35
    RULE_restProcedureResult = 36
    RULE_createRestFunctionStatement = 37
    RULE_restFunctionResult = 38
    RULE_createRestContentSetStatement = 39
    RULE_directoryFilePath = 40
    RULE_restContentSetOptions = 41
    RULE_fileIgnoreList = 42
    RULE_loadScripts = 43
    RULE_createRestContentFileStatement = 44
    RULE_restContentFileOptions = 45
    RULE_createRestAuthAppStatement = 46
    RULE_authAppName = 47
    RULE_vendorName = 48
    RULE_restAuthAppOptions = 49
    RULE_allowNewUsersToRegister = 50
    RULE_defaultRole = 51
    RULE_appId = 52
    RULE_appSecret = 53
    RULE_url = 54
    RULE_createRestUserStatement = 55
    RULE_userName = 56
    RULE_userPassword = 57
    RULE_userOptions = 58
    RULE_appOptions = 59
    RULE_accountLock = 60
    RULE_createRestRoleStatement = 61
    RULE_restRoleOptions = 62
    RULE_parentRoleName = 63
    RULE_roleName = 64
    RULE_cloneRestServiceStatement = 65
    RULE_alterRestServiceStatement = 66
    RULE_alterRestSchemaStatement = 67
    RULE_alterRestViewStatement = 68
    RULE_alterRestProcedureStatement = 69
    RULE_alterRestFunctionStatement = 70
    RULE_alterRestContentSetStatement = 71
    RULE_alterRestAuthAppStatement = 72
    RULE_newAuthAppName = 73
    RULE_alterRestUserStatement = 74
    RULE_dropRestServiceStatement = 75
    RULE_dropRestSchemaStatement = 76
    RULE_dropRestViewStatement = 77
    RULE_dropRestProcedureStatement = 78
    RULE_dropRestFunctionStatement = 79
    RULE_dropRestContentSetStatement = 80
    RULE_dropRestContentFileStatement = 81
    RULE_dropRestAuthAppStatement = 82
    RULE_dropRestUserStatement = 83
    RULE_dropRestRoleStatement = 84
    RULE_grantRestPrivilegeStatement = 85
    RULE_privilegeList = 86
    RULE_privilegeName = 87
    RULE_grantRestRoleStatement = 88
    RULE_revokeRestPrivilegeStatement = 89
    RULE_revokeRestRoleStatement = 90
    RULE_useStatement = 91
    RULE_serviceAndSchemaRequestPaths = 92
    RULE_showRestMetadataStatusStatement = 93
    RULE_showRestServicesStatement = 94
    RULE_showRestSchemasStatement = 95
    RULE_showRestViewsStatement = 96
    RULE_showRestProceduresStatement = 97
    RULE_showRestFunctionsStatement = 98
    RULE_showRestContentSetsStatement = 99
    RULE_showRestContentFilesStatement = 100
    RULE_showRestAuthAppsStatement = 101
    RULE_showRestRolesStatement = 102
    RULE_showRestGrantsStatement = 103
    RULE_showCreateRestServiceStatement = 104
    RULE_showCreateRestSchemaStatement = 105
    RULE_showCreateRestViewStatement = 106
    RULE_showCreateRestProcedureStatement = 107
    RULE_showCreateRestFunctionStatement = 108
    RULE_showCreateRestContentSetStatement = 109
    RULE_showCreateRestContentFileStatement = 110
    RULE_showCreateRestAuthAppStatement = 111
    RULE_serviceRequestPath = 112
    RULE_newServiceRequestPath = 113
    RULE_serviceRequestPathWildcard = 114
    RULE_schemaRequestPath = 115
    RULE_newSchemaRequestPath = 116
    RULE_schemaRequestPathWildcard = 117
    RULE_viewRequestPath = 118
    RULE_newViewRequestPath = 119
    RULE_restObjectName = 120
    RULE_restResultName = 121
    RULE_objectRequestPath = 122
    RULE_objectRequestPathWildcard = 123
    RULE_procedureRequestPath = 124
    RULE_functionRequestPath = 125
    RULE_newProcedureRequestPath = 126
    RULE_newFunctionRequestPath = 127
    RULE_contentSetRequestPath = 128
    RULE_newContentSetRequestPath = 129
    RULE_contentFileRequestPath = 130
    RULE_serviceDeveloperIdentifier = 131
    RULE_serviceDevelopersIdentifier = 132
    RULE_requestPathIdentifier = 133
    RULE_requestPathIdentifierWithWildcard = 134
    RULE_jsonObj = 135
    RULE_jsonPair = 136
    RULE_jsonArr = 137
    RULE_jsonValue = 138
    RULE_graphQlObj = 139
    RULE_graphQlCrudOptions = 140
    RULE_graphQlPair = 141
    RULE_graphQlValueOptions = 142
    RULE_graphQlValueJsonSchema = 143
    RULE_graphQlAllowedKeyword = 144
    RULE_graphQlPairKey = 145
    RULE_graphQlPairValue = 146
    RULE_graphQlReduceToValue = 147
    RULE_graphQlDatatypeValue = 148
    RULE_graphQlValue = 149
    RULE_schemaName = 150
    RULE_viewName = 151
    RULE_procedureName = 152
    RULE_pureIdentifier = 153
    RULE_identifier = 154
    RULE_identifierList = 155
    RULE_identifierListWithParentheses = 156
    RULE_qualifiedIdentifier = 157
    RULE_simpleIdentifier = 158
    RULE_dotIdentifier = 159
    RULE_textStringLiteral = 160
    RULE_textOrIdentifier = 161

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "enabledDisabledPrivate", 
                   "quotedTextOrDefault", "jsonOptions", "metadata", "comments", 
                   "authenticationRequired", "itemsPerPage", "itemsPerPageNumber", 
                   "serviceSchemaSelector", "serviceSchemaSelectorWildcard", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "publishedUnpublished", "restProtocol", "restAuthentication", 
                   "authPath", "authRedirection", "authValidation", "authPageContent", 
                   "userManagementSchema", "addAuthApp", "removeAuthApp", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restObjectOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "createRestFunctionStatement", 
                   "restFunctionResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "fileIgnoreList", 
                   "loadScripts", "createRestContentFileStatement", "restContentFileOptions", 
                   "createRestAuthAppStatement", "authAppName", "vendorName", 
                   "restAuthAppOptions", "allowNewUsersToRegister", "defaultRole", 
                   "appId", "appSecret", "url", "createRestUserStatement", 
                   "userName", "userPassword", "userOptions", "appOptions", 
                   "accountLock", "createRestRoleStatement", "restRoleOptions", 
                   "parentRoleName", "roleName", "cloneRestServiceStatement", 
                   "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "alterRestFunctionStatement", "alterRestContentSetStatement", 
                   "alterRestAuthAppStatement", "newAuthAppName", "alterRestUserStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestContentFileStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "dropRestRoleStatement", "grantRestPrivilegeStatement", 
                   "privilegeList", "privilegeName", "grantRestRoleStatement", 
                   "revokeRestPrivilegeStatement", "revokeRestRoleStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestFunctionsStatement", "showRestContentSetsStatement", 
                   "showRestContentFilesStatement", "showRestAuthAppsStatement", 
                   "showRestRolesStatement", "showRestGrantsStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "showCreateRestFunctionStatement", "showCreateRestContentSetStatement", 
                   "showCreateRestContentFileStatement", "showCreateRestAuthAppStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "serviceRequestPathWildcard", 
                   "schemaRequestPath", "newSchemaRequestPath", "schemaRequestPathWildcard", 
                   "viewRequestPath", "newViewRequestPath", "restObjectName", 
                   "restResultName", "objectRequestPath", "objectRequestPathWildcard", 
                   "procedureRequestPath", "functionRequestPath", "newProcedureRequestPath", 
                   "newFunctionRequestPath", "contentSetRequestPath", "newContentSetRequestPath", 
                   "contentFileRequestPath", "serviceDeveloperIdentifier", 
                   "serviceDevelopersIdentifier", "requestPathIdentifier", 
                   "requestPathIdentifierWithWildcard", "jsonObj", "jsonPair", 
                   "jsonArr", "jsonValue", "graphQlObj", "graphQlCrudOptions", 
                   "graphQlPair", "graphQlValueOptions", "graphQlValueJsonSchema", 
                   "graphQlAllowedKeyword", "graphQlPairKey", "graphQlPairValue", 
                   "graphQlReduceToValue", "graphQlDatatypeValue", "graphQlValue", 
                   "schemaName", "viewName", "procedureName", "pureIdentifier", 
                   "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "textStringLiteral", "textOrIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    FORCE_SYMBOL=34
    UPDATE_SYMBOL=35
    NULL_SYMBOL=36
    TRUE_SYMBOL=37
    FALSE_SYMBOL=38
    SET_SYMBOL=39
    IDENTIFIED_SYMBOL=40
    BY_SYMBOL=41
    ROLE_SYMBOL=42
    TO_SYMBOL=43
    IGNORE_SYMBOL=44
    CLONE_SYMBOL=45
    FILE_SYMBOL=46
    BINARY_SYMBOL=47
    DATA_SYMBOL=48
    LOAD_SYMBOL=49
    GRANT_SYMBOL=50
    READ_SYMBOL=51
    DELETE_SYMBOL=52
    GROUP_SYMBOL=53
    REVOKE_SYMBOL=54
    ACCOUNT_SYMBOL=55
    LOCK_SYMBOL=56
    UNLOCK_SYMBOL=57
    GRANTS_SYMBOL=58
    FOR_SYMBOL=59
    LEVEL_SYMBOL=60
    ANY_SYMBOL=61
    CLIENT_SYMBOL=62
    URL_SYMBOL=63
    NAME_SYMBOL=64
    DO_SYMBOL=65
    ALL_SYMBOL=66
    PARAMETERS_SYMBOL=67
    ADD_SYMBOL=68
    REMOVE_SYMBOL=69
    MERGE_SYMBOL=70
    COMMENT_SYMBOL=71
    CONFIGURE_SYMBOL=72
    REST_SYMBOL=73
    METADATA_SYMBOL=74
    SERVICES_SYMBOL=75
    SERVICE_SYMBOL=76
    VIEWS_SYMBOL=77
    PROCEDURES_SYMBOL=78
    FUNCTIONS_SYMBOL=79
    RESULT_SYMBOL=80
    ENABLED_SYMBOL=81
    PUBLISHED_SYMBOL=82
    DISABLED_SYMBOL=83
    PRIVATE_SYMBOL=84
    UNPUBLISHED_SYMBOL=85
    PROTOCOL_SYMBOL=86
    HTTP_SYMBOL=87
    HTTPS_SYMBOL=88
    REQUEST_SYMBOL=89
    REDIRECTION_SYMBOL=90
    MANAGEMENT_SYMBOL=91
    AVAILABLE_SYMBOL=92
    REQUIRED_SYMBOL=93
    ITEMS_SYMBOL=94
    PER_SYMBOL=95
    CONTENT_SYMBOL=96
    MEDIA_SYMBOL=97
    AUTODETECT_SYMBOL=98
    FEED_SYMBOL=99
    ITEM_SYMBOL=100
    SETS_SYMBOL=101
    FILES_SYMBOL=102
    AUTH_SYMBOL=103
    APPS_SYMBOL=104
    APP_SYMBOL=105
    ID_SYMBOL=106
    SECRET_SYMBOL=107
    VENDOR_SYMBOL=108
    MRS_SYMBOL=109
    MYSQL_SYMBOL=110
    USERS_SYMBOL=111
    ALLOW_SYMBOL=112
    REGISTER_SYMBOL=113
    CLASS_SYMBOL=114
    DEVELOPMENT_SYMBOL=115
    SCRIPTS_SYMBOL=116
    MAPPING_SYMBOL=117
    TYPESCRIPT_SYMBOL=118
    ROLES_SYMBOL=119
    EXTENDS_SYMBOL=120
    OBJECT_SYMBOL=121
    HIERARCHY_SYMBOL=122
    INCLUDE_SYMBOL=123
    OBJECTS_SYMBOL=124
    AT_INOUT_SYMBOL=125
    AT_IN_SYMBOL=126
    AT_OUT_SYMBOL=127
    AT_CHECK_SYMBOL=128
    AT_NOCHECK_SYMBOL=129
    AT_NOUPDATE_SYMBOL=130
    AT_SORTABLE_SYMBOL=131
    AT_NOFILTERING_SYMBOL=132
    AT_ROWOWNERSHIP_SYMBOL=133
    AT_UNNEST_SYMBOL=134
    AT_DATATYPE_SYMBOL=135
    AT_SELECT_SYMBOL=136
    AT_NOSELECT_SYMBOL=137
    AT_INSERT_SYMBOL=138
    AT_NOINSERT_SYMBOL=139
    AT_UPDATE_SYMBOL=140
    AT_DELETE_SYMBOL=141
    AT_NODELETE_SYMBOL=142
    AT_KEY_SYMBOL=143
    REST_REQUEST_PATH=144
    EQUAL_OPERATOR=145
    ASSIGN_OPERATOR=146
    NULL_SAFE_EQUAL_OPERATOR=147
    GREATER_OR_EQUAL_OPERATOR=148
    GREATER_THAN_OPERATOR=149
    LESS_OR_EQUAL_OPERATOR=150
    LESS_THAN_OPERATOR=151
    NOT_EQUAL_OPERATOR=152
    PLUS_OPERATOR=153
    MINUS_OPERATOR=154
    MULT_OPERATOR=155
    DIV_OPERATOR=156
    MOD_OPERATOR=157
    LOGICAL_NOT_OPERATOR=158
    BITWISE_NOT_OPERATOR=159
    SHIFT_LEFT_OPERATOR=160
    SHIFT_RIGHT_OPERATOR=161
    LOGICAL_AND_OPERATOR=162
    BITWISE_AND_OPERATOR=163
    BITWISE_XOR_OPERATOR=164
    LOGICAL_OR_OPERATOR=165
    BITWISE_OR_OPERATOR=166
    DOT_SYMBOL=167
    COMMA_SYMBOL=168
    SEMICOLON_SYMBOL=169
    COLON_SYMBOL=170
    OPEN_PAR_SYMBOL=171
    CLOSE_PAR_SYMBOL=172
    OPEN_CURLY_SYMBOL=173
    CLOSE_CURLY_SYMBOL=174
    UNDERLINE_SYMBOL=175
    OPEN_SQUARE_SYMBOL=176
    CLOSE_SQUARE_SYMBOL=177
    JSON_SEPARATOR_SYMBOL=178
    JSON_UNQUOTED_SEPARATOR_SYMBOL=179
    AT_SIGN_SYMBOL=180
    AT_TEXT_SUFFIX=181
    AT_AT_SIGN_SYMBOL=182
    NULL2_SYMBOL=183
    PARAM_MARKER=184
    HEX_NUMBER=185
    BIN_NUMBER=186
    INT_NUMBER=187
    DECIMAL_NUMBER=188
    FLOAT_NUMBER=189
    WHITESPACE=190
    INVALID_INPUT=191
    IDENTIFIER=192
    NCHAR_TEXT=193
    BACK_TICK_QUOTED_ID=194
    DOUBLE_QUOTED_TEXT=195
    SINGLE_QUOTED_TEXT=196
    BLOCK_COMMENT=197
    POUND_COMMENT=198
    DASHDASH_COMMENT=199
    WS=200
    NOT_EQUAL2_OPERATOR=201

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 19175482788806706) != 0) or _la==72:
                self.state = 324
                self.mrsStatement()
                self.state = 333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 326 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 325
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 328 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==169):
                                break

                        self.state = 330
                        self.mrsStatement() 
                    self.state = 335
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==169:
                self.state = 338
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 341
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentFileStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestRoleStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def cloneRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CloneRestServiceStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def alterRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestFunctionStatementContext,0)


        def alterRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestContentSetStatementContext,0)


        def alterRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestAuthAppStatementContext,0)


        def alterRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestUserStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentFileStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def dropRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestRoleStatementContext,0)


        def grantRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestRoleStatementContext,0)


        def grantRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestPrivilegeStatementContext,0)


        def revokeRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestPrivilegeStatementContext,0)


        def revokeRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestRoleStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestContentFilesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentFilesStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showRestRolesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestRolesStatementContext,0)


        def showRestGrantsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestGrantsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentSetStatementContext,0)


        def showCreateRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentFileStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 343
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 344
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 346
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 347
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 348
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 349
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 350
                self.createRestContentFileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 351
                self.createRestAuthAppStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 352
                self.createRestRoleStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 353
                self.createRestUserStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 354
                self.cloneRestServiceStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 355
                self.alterRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 356
                self.alterRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 357
                self.alterRestViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 358
                self.alterRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 359
                self.alterRestFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 360
                self.alterRestContentSetStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 361
                self.alterRestAuthAppStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 362
                self.alterRestUserStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 363
                self.dropRestServiceStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 364
                self.dropRestSchemaStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 365
                self.dropRestViewStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 366
                self.dropRestProcedureStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 367
                self.dropRestFunctionStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 368
                self.dropRestContentSetStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 369
                self.dropRestContentFileStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 370
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 371
                self.dropRestUserStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 372
                self.dropRestRoleStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 373
                self.grantRestRoleStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 374
                self.grantRestPrivilegeStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 375
                self.revokeRestPrivilegeStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 376
                self.revokeRestRoleStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 377
                self.useStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 378
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 379
                self.showRestServicesStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 380
                self.showRestSchemasStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 381
                self.showRestViewsStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 382
                self.showRestProceduresStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 383
                self.showRestFunctionsStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 384
                self.showRestContentSetsStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 385
                self.showRestContentFilesStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 386
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 387
                self.showRestRolesStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 388
                self.showRestGrantsStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 389
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 390
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 391
                self.showCreateRestViewStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 392
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 393
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 394
                self.showCreateRestContentSetStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 395
                self.showCreateRestContentFileStatement()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 396
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            _la = self._input.LA(1)
            if not(_la==81 or _la==83):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledPrivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabledPrivate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabledPrivate" ):
                listener.enterEnabledDisabledPrivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabledPrivate" ):
                listener.exitEnabledDisabledPrivate(self)




    def enabledDisabledPrivate(self):

        localctx = MRSParser.EnabledDisabledPrivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_enabledDisabledPrivate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            _la = self._input.LA(1)
            if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 403
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 404
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def MERGE_SYMBOL(self):
            return self.getToken(MRSParser.MERGE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_jsonOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 407
                self.match(MRSParser.MERGE_SYMBOL)


            self.state = 410
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 411
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = MRSParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 414
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT_SYMBOL(self):
            return self.getToken(MRSParser.COMMENT_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(MRSParser.COMMENT_SYMBOL)
            self.state = 417
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 420
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 423
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 426
            self.match(MRSParser.PER_SYMBOL)
            self.state = 427
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 428
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 432
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 433
                self.serviceRequestPath()


            self.state = 436
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 437
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathWildcardContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelectorWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelectorWildcard" ):
                listener.enterServiceSchemaSelectorWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelectorWildcard" ):
                listener.exitServiceSchemaSelectorWildcard(self)




    def serviceSchemaSelectorWildcard(self):

        localctx = MRSParser.ServiceSchemaSelectorWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_serviceSchemaSelectorWildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 439
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 440
                self.serviceRequestPathWildcard()


            self.state = 443
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 444
            self.schemaRequestPathWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 447
            self.match(MRSParser.REST_SYMBOL)
            self.state = 448
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 180161577280864769) != 0):
                self.state = 449
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 455
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [81, 83]:
                    self.state = 452
                    self.enabledDisabled()
                    pass
                elif token in [26, 70]:
                    self.state = 453
                    self.jsonOptions()
                    pass
                elif token in [35]:
                    self.state = 454
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 457 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 180161577280864769) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 460
                self.match(MRSParser.IF_SYMBOL)
                self.state = 461
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 465
                self.match(MRSParser.OR_SYMBOL)
                self.state = 466
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 469
            self.match(MRSParser.REST_SYMBOL)
            self.state = 470
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 471
            self.serviceRequestPath()
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 450639) != 0):
                self.state = 472
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def publishedUnpublished(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.PublishedUnpublishedContext)
            else:
                return self.getTypedRuleContext(MRSParser.PublishedUnpublishedContext,i)


        def restProtocol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProtocolContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProtocolContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def addAuthApp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AddAuthAppContext)
            else:
                return self.getTypedRuleContext(MRSParser.AddAuthAppContext,i)


        def removeAuthApp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RemoveAuthAppContext)
            else:
                return self.getTypedRuleContext(MRSParser.RemoveAuthAppContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 484
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [81, 83]:
                    self.state = 475
                    self.enabledDisabled()
                    pass
                elif token in [82, 85]:
                    self.state = 476
                    self.publishedUnpublished()
                    pass
                elif token in [86]:
                    self.state = 477
                    self.restProtocol()
                    pass
                elif token in [21]:
                    self.state = 478
                    self.restAuthentication()
                    pass
                elif token in [26, 70]:
                    self.state = 479
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 480
                    self.comments()
                    pass
                elif token in [74]:
                    self.state = 481
                    self.metadata()
                    pass
                elif token in [68]:
                    self.state = 482
                    self.addAuthApp()
                    pass
                elif token in [69]:
                    self.state = 483
                    self.removeAuthApp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 486 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 450639) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublishedUnpublishedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_publishedUnpublished

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishedUnpublished" ):
                listener.enterPublishedUnpublished(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishedUnpublished" ):
                listener.exitPublishedUnpublished(self)




    def publishedUnpublished(self):

        localctx = MRSParser.PublishedUnpublishedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_publishedUnpublished)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            _la = self._input.LA(1)
            if not(_la==82 or _la==85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restProtocol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 491
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1086324736) != 0) or _la==90:
                self.state = 498
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 494
                    self.authPath()
                    pass
                elif token in [90]:
                    self.state = 495
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 496
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 497
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 504
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 507
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 510
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 513
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 514
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(MRSParser.USER_SYMBOL)
            self.state = 517
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 518
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 519
                self.schemaName()
                pass

            elif la_ == 2:
                self.state = 520
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddAuthAppContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MRSParser.ADD_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_addAuthApp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddAuthApp" ):
                listener.enterAddAuthApp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddAuthApp" ):
                listener.exitAddAuthApp(self)




    def addAuthApp(self):

        localctx = MRSParser.AddAuthAppContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_addAuthApp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(MRSParser.ADD_SYMBOL)
            self.state = 524
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 525
            self.match(MRSParser.APP_SYMBOL)
            self.state = 526
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveAuthAppContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE_SYMBOL(self):
            return self.getToken(MRSParser.REMOVE_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_removeAuthApp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveAuthApp" ):
                listener.enterRemoveAuthApp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveAuthApp" ):
                listener.exitRemoveAuthApp(self)




    def removeAuthApp(self):

        localctx = MRSParser.RemoveAuthAppContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_removeAuthApp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(MRSParser.REMOVE_SYMBOL)
            self.state = 529
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 530
            self.match(MRSParser.APP_SYMBOL)
            self.state = 531
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 534
                self.match(MRSParser.OR_SYMBOL)
                self.state = 535
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 538
            self.match(MRSParser.REST_SYMBOL)
            self.state = 539
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 540
                self.schemaRequestPath()


            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 543
                self.match(MRSParser.ON_SYMBOL)
                self.state = 545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 544
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 547
                self.serviceRequestPath()


            self.state = 550
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 551
            self.schemaName()
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 16803859) != 0):
                self.state = 552
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 561
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [81, 83, 84]:
                    self.state = 555
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 556
                    self.authenticationRequired()
                    pass
                elif token in [94]:
                    self.state = 557
                    self.itemsPerPage()
                    pass
                elif token in [26, 70]:
                    self.state = 558
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 559
                    self.comments()
                    pass
                elif token in [74]:
                    self.state = 560
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 563 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 16803859) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 566
                self.match(MRSParser.OR_SYMBOL)
                self.state = 567
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 570
            self.match(MRSParser.REST_SYMBOL)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 571
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 574
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 577
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 578
            self.viewRequestPath()
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 579
                self.match(MRSParser.ON_SYMBOL)
                self.state = 580
                self.serviceSchemaSelector()


            self.state = 583
            self.match(MRSParser.AS_SYMBOL)
            self.state = 584
            self.qualifiedIdentifier()
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 585
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 586
                self.restObjectName()


            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 31751) != 0):
                self.state = 589
                self.graphQlCrudOptions()


            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 592
                self.graphQlObj()


            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0):
                self.state = 595
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 598
                    self.enabledDisabledPrivate()
                    pass

                elif la_ == 2:
                    self.state = 599
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 600
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 601
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 602
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 603
                    self.metadata()
                    pass

                elif la_ == 7:
                    self.state = 604
                    self.restViewMediaType()
                    pass

                elif la_ == 8:
                    self.state = 605
                    self.restViewFormat()
                    pass

                elif la_ == 9:
                    self.state = 606
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 609 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 612
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 613
                self.textStringLiteral()
                pass

            elif la_ == 2:
                self.state = 614
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 618
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 620
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 621
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 622
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MRSParser.FORCE_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 625
                self.match(MRSParser.OR_SYMBOL)
                self.state = 626
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 629
            self.match(MRSParser.REST_SYMBOL)
            self.state = 630
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 631
            self.procedureRequestPath()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 632
                self.match(MRSParser.ON_SYMBOL)
                self.state = 633
                self.serviceSchemaSelector()


            self.state = 636
            self.match(MRSParser.AS_SYMBOL)
            self.state = 637
            self.qualifiedIdentifier()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 638
                self.match(MRSParser.FORCE_SYMBOL)


            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 641
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 643
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 642
                    self.restObjectName()


                self.state = 645
                self.graphQlObj()


            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 648
                self.restProcedureResult()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0):
                self.state = 654
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_restProcedureResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 658
                self.restResultName()


            self.state = 661
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def FORCE_SYMBOL(self):
            return self.getToken(MRSParser.FORCE_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 664
                self.match(MRSParser.OR_SYMBOL)
                self.state = 665
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 668
            self.match(MRSParser.REST_SYMBOL)
            self.state = 669
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 670
            self.functionRequestPath()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 671
                self.match(MRSParser.ON_SYMBOL)
                self.state = 672
                self.serviceSchemaSelector()


            self.state = 675
            self.match(MRSParser.AS_SYMBOL)
            self.state = 676
            self.qualifiedIdentifier()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 677
                self.match(MRSParser.FORCE_SYMBOL)


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 680
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 681
                    self.restObjectName()


                self.state = 684
                self.graphQlObj()


            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 687
                self.restFunctionResult()


            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0):
                self.state = 690
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_restFunctionResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 695
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 694
                self.restResultName()


            self.state = 697
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 700
                self.match(MRSParser.OR_SYMBOL)
                self.state = 701
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 704
            self.match(MRSParser.REST_SYMBOL)
            self.state = 705
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 706
            self.match(MRSParser.SET_SYMBOL)
            self.state = 707
            self.contentSetRequestPath()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 708
                self.match(MRSParser.ON_SYMBOL)
                self.state = 710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 709
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 712
                self.serviceRequestPath()


            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 715
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 716
                self.directoryFilePath()


            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -3457075663683452895) != 0):
                self.state = 719
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def fileIgnoreList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.FileIgnoreListContext)
            else:
                return self.getTypedRuleContext(MRSParser.FileIgnoreListContext,i)


        def loadScripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.LoadScriptsContext)
            else:
                return self.getTypedRuleContext(MRSParser.LoadScriptsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 730
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [81, 83, 84]:
                    self.state = 724
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 725
                    self.authenticationRequired()
                    pass
                elif token in [26, 70]:
                    self.state = 726
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 727
                    self.comments()
                    pass
                elif token in [44]:
                    self.state = 728
                    self.fileIgnoreList()
                    pass
                elif token in [49]:
                    self.state = 729
                    self.loadScripts()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 732 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -3457075663683452895) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIgnoreListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_fileIgnoreList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIgnoreList" ):
                listener.enterFileIgnoreList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIgnoreList" ):
                listener.exitFileIgnoreList(self)




    def fileIgnoreList(self):

        localctx = MRSParser.FileIgnoreListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fileIgnoreList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(MRSParser.IGNORE_SYMBOL)
            self.state = 735
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadScriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_loadScripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadScripts" ):
                listener.enterLoadScripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadScripts" ):
                listener.exitLoadScripts(self)




    def loadScripts(self):

        localctx = MRSParser.LoadScriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_loadScripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(MRSParser.LOAD_SYMBOL)
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 738
                self.match(MRSParser.TYPESCRIPT_SYMBOL)


            self.state = 741
            self.match(MRSParser.SCRIPTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restContentFileOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentFileOptionsContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentFileStatement" ):
                listener.enterCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentFileStatement" ):
                listener.exitCreateRestContentFileStatement(self)




    def createRestContentFileStatement(self):

        localctx = MRSParser.CreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_createRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 744
                self.match(MRSParser.OR_SYMBOL)
                self.state = 745
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 748
            self.match(MRSParser.REST_SYMBOL)
            self.state = 749
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 750
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 751
            self.contentFileRequestPath()
            self.state = 752
            self.match(MRSParser.ON_SYMBOL)
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 754
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 753
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 756
                self.serviceRequestPath()


            self.state = 759
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 760
            self.match(MRSParser.SET_SYMBOL)
            self.state = 761
            self.contentSetRequestPath()
            self.state = 769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 762
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 763
                self.directoryFilePath()
                pass
            elif token in [47, 96]:
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 764
                    self.match(MRSParser.BINARY_SYMBOL)


                self.state = 767
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 768
                self.textStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -3458201563867119583) != 0):
                self.state = 771
                self.restContentFileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentFileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentFileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentFileOptions" ):
                listener.enterRestContentFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentFileOptions" ):
                listener.exitRestContentFileOptions(self)




    def restContentFileOptions(self):

        localctx = MRSParser.RestContentFileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_restContentFileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [81, 83, 84]:
                    self.state = 774
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 775
                    self.authenticationRequired()
                    pass
                elif token in [26, 70]:
                    self.state = 776
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 779 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -3458201563867119583) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 782
                self.match(MRSParser.OR_SYMBOL)
                self.state = 783
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 786
            self.match(MRSParser.REST_SYMBOL)
            self.state = 787
            _la = self._input.LA(1)
            if not(_la==21 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 788
            self.match(MRSParser.APP_SYMBOL)
            self.state = 789
            self.authAppName()
            self.state = 790
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 794
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 791
                self.match(MRSParser.MRS_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 792
                self.match(MRSParser.MYSQL_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 793
                self.vendorName()
                pass


            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018410610688) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 141837000310849) != 0):
                self.state = 796
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def appId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppIdContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppIdContext,i)


        def appSecret(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppSecretContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppSecretContext,i)


        def url(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UrlContext)
            else:
                return self.getTypedRuleContext(MRSParser.UrlContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 803
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 804
                    self.comments()
                    pass

                elif la_ == 3:
                    self.state = 805
                    self.allowNewUsersToRegister()
                    pass

                elif la_ == 4:
                    self.state = 806
                    self.defaultRole()
                    pass

                elif la_ == 5:
                    self.state = 807
                    self.appId()
                    pass

                elif la_ == 6:
                    self.state = 808
                    self.appSecret()
                    pass

                elif la_ == 7:
                    self.state = 809
                    self.url()
                    pass


                self.state = 812 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018410610688) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 141837000310849) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MRSParser.DO_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 814
                self.match(MRSParser.DO_SYMBOL)
                self.state = 815
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 818
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 819
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 820
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 821
                self.match(MRSParser.TO_SYMBOL)
                self.state = 822
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 826
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 827
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID_SYMBOL(self):
            return self.getToken(MRSParser.ID_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_appId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppId" ):
                listener.enterAppId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppId" ):
                listener.exitAppId(self)




    def appId(self):

        localctx = MRSParser.AppIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_appId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            _la = self._input.LA(1)
            if not(_la==62 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 830
            self.match(MRSParser.ID_SYMBOL)
            self.state = 831
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppSecretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECRET_SYMBOL(self):
            return self.getToken(MRSParser.SECRET_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_appSecret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppSecret" ):
                listener.enterAppSecret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppSecret" ):
                listener.exitAppSecret(self)




    def appSecret(self):

        localctx = MRSParser.AppSecretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_appSecret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            _la = self._input.LA(1)
            if not(_la==62 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 834
            self.match(MRSParser.SECRET_SYMBOL)
            self.state = 835
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UrlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URL_SYMBOL(self):
            return self.getToken(MRSParser.URL_SYMBOL, 0)

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl" ):
                listener.enterUrl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl" ):
                listener.exitUrl(self)




    def url(self):

        localctx = MRSParser.UrlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(MRSParser.URL_SYMBOL)
            self.state = 838
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 841
                self.match(MRSParser.OR_SYMBOL)
                self.state = 842
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 845
            self.match(MRSParser.REST_SYMBOL)
            self.state = 846
            self.match(MRSParser.USER_SYMBOL)
            self.state = 847
            self.userName()
            self.state = 848
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 849
            self.authAppName()
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 850
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 851
                self.match(MRSParser.BY_SYMBOL)
                self.state = 852
                self.userPassword()


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==55 or _la==70 or _la==105:
                self.state = 855
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.textStringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accountLock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AccountLockContext)
            else:
                return self.getTypedRuleContext(MRSParser.AccountLockContext,i)


        def appOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppOptionsContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_userOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserOptions" ):
                listener.enterUserOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserOptions" ):
                listener.exitUserOptions(self)




    def userOptions(self):

        localctx = MRSParser.UserOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_userOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 865
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 862
                    self.accountLock()
                    pass
                elif token in [105]:
                    self.state = 863
                    self.appOptions()
                    pass
                elif token in [26, 70]:
                    self.state = 864
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 867 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==55 or _la==70 or _la==105):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_appOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppOptions" ):
                listener.enterAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppOptions" ):
                listener.exitAppOptions(self)




    def appOptions(self):

        localctx = MRSParser.AppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_appOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(MRSParser.APP_SYMBOL)
            self.state = 870
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 871
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_accountLock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLock" ):
                listener.enterAccountLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLock" ):
                listener.exitAccountLock(self)




    def accountLock(self):

        localctx = MRSParser.AccountLockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_accountLock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(MRSParser.ACCOUNT_SYMBOL)
            self.state = 874
            _la = self._input.LA(1)
            if not(_la==56 or _la==57):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def parentRoleName(self):
            return self.getTypedRuleContext(MRSParser.ParentRoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def restRoleOptions(self):
            return self.getTypedRuleContext(MRSParser.RestRoleOptionsContext,0)


        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestRoleStatement" ):
                listener.enterCreateRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestRoleStatement" ):
                listener.exitCreateRestRoleStatement(self)




    def createRestRoleStatement(self):

        localctx = MRSParser.CreateRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_createRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 877
                self.match(MRSParser.OR_SYMBOL)
                self.state = 878
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 881
            self.match(MRSParser.REST_SYMBOL)
            self.state = 882
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 883
            self.roleName()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 884
                self.match(MRSParser.EXTENDS_SYMBOL)
                self.state = 885
                self.parentRoleName()


            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 888
                self.match(MRSParser.ON_SYMBOL)
                self.state = 895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 890
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 892
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 891
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 894
                    self.serviceRequestPath()
                    pass




            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 52776558133249) != 0):
                self.state = 899
                self.restRoleOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestRoleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restRoleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestRoleOptions" ):
                listener.enterRestRoleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestRoleOptions" ):
                listener.exitRestRoleOptions(self)




    def restRoleOptions(self):

        localctx = MRSParser.RestRoleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_restRoleOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 904
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26, 70]:
                    self.state = 902
                    self.jsonOptions()
                    pass
                elif token in [71]:
                    self.state = 903
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 906 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 52776558133249) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParentRoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_parentRoleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentRoleName" ):
                listener.enterParentRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentRoleName" ):
                listener.exitParentRoleName(self)




    def parentRoleName(self):

        localctx = MRSParser.ParentRoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_parentRoleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MRSParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_roleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_cloneRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneRestServiceStatement" ):
                listener.enterCloneRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneRestServiceStatement" ):
                listener.exitCloneRestServiceStatement(self)




    def cloneRestServiceStatement(self):

        localctx = MRSParser.CloneRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_cloneRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(MRSParser.CLONE_SYMBOL)
            self.state = 913
            self.match(MRSParser.REST_SYMBOL)
            self.state = 914
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 915
            self.serviceRequestPath()
            self.state = 916
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 917
            self.match(MRSParser.REQUEST_SYMBOL)
            self.state = 918
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 919
            self.newServiceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 922
            self.match(MRSParser.REST_SYMBOL)
            self.state = 923
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 924
            self.serviceRequestPath()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 925
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 926
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 927
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 928
                self.newServiceRequestPath()


            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 450639) != 0):
                self.state = 931
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 935
            self.match(MRSParser.REST_SYMBOL)
            self.state = 936
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 938
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 937
                self.schemaRequestPath()


            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 940
                self.match(MRSParser.ON_SYMBOL)
                self.state = 942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 941
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 944
                self.serviceRequestPath()


            self.state = 951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 947
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 948
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 949
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 950
                self.newSchemaRequestPath()


            self.state = 955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 953
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 954
                self.schemaName()


            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 16803859) != 0):
                self.state = 957
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 961
            self.match(MRSParser.REST_SYMBOL)
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 962
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 965
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 968
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 969
            self.viewRequestPath()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 970
                self.match(MRSParser.ON_SYMBOL)
                self.state = 971
                self.serviceSchemaSelector()


            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 974
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 975
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 976
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 977
                self.newViewRequestPath()


            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 980
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 981
                self.restObjectName()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 31751) != 0):
                    self.state = 982
                    self.graphQlCrudOptions()


                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 985
                    self.graphQlObj()




            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0):
                self.state = 990
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 994
            self.match(MRSParser.REST_SYMBOL)
            self.state = 995
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 996
            self.procedureRequestPath()
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 997
                self.match(MRSParser.ON_SYMBOL)
                self.state = 998
                self.serviceSchemaSelector()


            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1001
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1002
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1003
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1004
                self.newProcedureRequestPath()


            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1007
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 1008
                    self.restObjectName()


                self.state = 1011
                self.graphQlObj()


            self.state = 1017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 1014
                self.restProcedureResult()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0):
                self.state = 1020
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newFunctionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewFunctionRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestFunctionResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestFunctionStatement" ):
                listener.enterAlterRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestFunctionStatement" ):
                listener.exitAlterRestFunctionStatement(self)




    def alterRestFunctionStatement(self):

        localctx = MRSParser.AlterRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alterRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1024
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1025
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1026
            self.functionRequestPath()
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1027
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1028
                self.serviceSchemaSelector()


            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1031
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1032
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1033
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1034
                self.newFunctionRequestPath()


            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 1037
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 1039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 1038
                    self.restObjectName()


                self.state = 1041
                self.graphQlObj()


            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80:
                self.state = 1044
                self.restFunctionResult()
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 151021587) != 0):
                self.state = 1050
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newContentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewContentSetRequestPathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestContentSetStatement" ):
                listener.enterAlterRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestContentSetStatement" ):
                listener.exitAlterRestContentSetStatement(self)




    def alterRestContentSetStatement(self):

        localctx = MRSParser.AlterRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alterRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1054
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1055
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1056
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1057
            self.contentSetRequestPath()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1058
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1059
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1062
                self.serviceRequestPath()


            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1065
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1066
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1067
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1068
                self.newContentSetRequestPath()


            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & -3457075663683452895) != 0):
                self.state = 1071
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MRSParser.NAME_SYMBOL, 0)

        def newAuthAppName(self):
            return self.getTypedRuleContext(MRSParser.NewAuthAppNameContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestAuthAppStatement" ):
                listener.enterAlterRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestAuthAppStatement" ):
                listener.exitAlterRestAuthAppStatement(self)




    def alterRestAuthAppStatement(self):

        localctx = MRSParser.AlterRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alterRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1075
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1076
            _la = self._input.LA(1)
            if not(_la==21 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1077
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1078
            self.authAppName()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1079
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1080
                self.match(MRSParser.NAME_SYMBOL)
                self.state = 1081
                self.newAuthAppName()


            self.state = 1085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -4611686018410610688) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 141837000310849) != 0):
                self.state = 1084
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewAuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newAuthAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewAuthAppName" ):
                listener.enterNewAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewAuthAppName" ):
                listener.exitNewAuthAppName(self)




    def newAuthAppName(self):

        localctx = MRSParser.NewAuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_newAuthAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestUserStatement" ):
                listener.enterAlterRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestUserStatement" ):
                listener.exitAlterRestUserStatement(self)




    def alterRestUserStatement(self):

        localctx = MRSParser.AlterRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_alterRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1090
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1091
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1092
            self.userName()
            self.state = 1093
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1094
            self.authAppName()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 1095
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 1096
                self.match(MRSParser.BY_SYMBOL)
                self.state = 1097
                self.userPassword()


            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==55 or _la==70 or _la==105:
                self.state = 1100
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1104
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1105
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1106
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1109
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1110
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1111
            self.schemaRequestPath()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1112
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1114
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1113
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1116
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestViewStatement" ):
                listener.enterDropRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestViewStatement" ):
                listener.exitDropRestViewStatement(self)




    def dropRestViewStatement(self):

        localctx = MRSParser.DropRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1120
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1121
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 1124
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1127
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1128
            self.viewRequestPath()
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1129
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1130
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1134
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1135
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1136
            self.procedureRequestPath()
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1137
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1138
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1142
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1143
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1144
            self.functionRequestPath()
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1145
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1146
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1150
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1151
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1152
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1153
            self.contentSetRequestPath()
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1154
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1155
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1158
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentFileStatement" ):
                listener.enterDropRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentFileStatement" ):
                listener.exitDropRestContentFileStatement(self)




    def dropRestContentFileStatement(self):

        localctx = MRSParser.DropRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dropRestContentFileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1162
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1163
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1164
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1165
            self.contentFileRequestPath()
            self.state = 1166
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 1168
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1167
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1170
                self.serviceRequestPath()


            self.state = 1173
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1174
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1175
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1178
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1179
            _la = self._input.LA(1)
            if not(_la==21 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1180
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1181
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dropRestUserStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1184
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1185
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1186
            self.userName()
            self.state = 1187
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1188
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestRoleStatement" ):
                listener.enterDropRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestRoleStatement" ):
                listener.exitDropRestRoleStatement(self)




    def dropRestRoleStatement(self):

        localctx = MRSParser.DropRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dropRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1191
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1192
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1193
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathWildcardContext,0)


        def serviceSchemaSelectorWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorWildcardContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestPrivilegeStatement" ):
                listener.enterGrantRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestPrivilegeStatement" ):
                listener.exitGrantRestPrivilegeStatement(self)




    def grantRestPrivilegeStatement(self):

        localctx = MRSParser.GrantRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_grantRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1196
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1197
            self.privilegeList()
            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1198
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1199
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1202
                self.serviceRequestPathWildcard()

            elif la_ == 2:
                self.state = 1203
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1204
                self.serviceSchemaSelectorWildcard()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1205
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1206
                    self.objectRequestPathWildcard()




            self.state = 1211
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1212
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeName(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeNameContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = MRSParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_privilegeList)
        try:
            self.state = 1219
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1214
                self.privilegeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1215
                self.privilegeName()
                self.state = 1216
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1217
                self.privilegeList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_privilegeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeName" ):
                listener.enterPrivilegeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeName" ):
                listener.exitPrivilegeName(self)




    def privilegeName(self):

        localctx = MRSParser.PrivilegeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_privilegeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 6755433800794114) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def comments(self):
            return self.getTypedRuleContext(MRSParser.CommentsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestRoleStatement" ):
                listener.enterGrantRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestRoleStatement" ):
                listener.exitGrantRestRoleStatement(self)




    def grantRestRoleStatement(self):

        localctx = MRSParser.GrantRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_grantRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1224
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1225
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1226
            self.roleName()
            self.state = 1227
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1228
            self.userName()
            self.state = 1229
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1230
            self.authAppName()
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1231
                self.comments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathWildcardContext,0)


        def serviceSchemaSelectorWildcard(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorWildcardContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPathWildcard(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestPrivilegeStatement" ):
                listener.enterRevokeRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestPrivilegeStatement" ):
                listener.exitRevokeRestPrivilegeStatement(self)




    def revokeRestPrivilegeStatement(self):

        localctx = MRSParser.RevokeRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_revokeRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1235
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1236
            self.privilegeList()
            self.state = 1248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1237
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 1238
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1241
                self.serviceRequestPathWildcard()

            elif la_ == 2:
                self.state = 1242
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1243
                self.serviceSchemaSelectorWildcard()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1244
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1245
                    self.objectRequestPathWildcard()




            self.state = 1250
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1251
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestRoleStatement" ):
                listener.enterRevokeRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestRoleStatement" ):
                listener.exitRevokeRestRoleStatement(self)




    def revokeRestRoleStatement(self):

        localctx = MRSParser.RevokeRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_revokeRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1254
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1255
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1256
            self.roleName()
            self.state = 1257
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1258
            self.userName()
            self.state = 1259
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1260
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(MRSParser.USE_SYMBOL)
            self.state = 1263
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1264
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1266
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 1267
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1268
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1272
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1273
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 1276
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1279
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1280
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1283
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1284
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1285
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                if la_ == 1:
                    self.state = 1286
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1289
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1293
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1294
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 1297
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1300
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1301
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1302
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1306
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1307
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1308
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1309
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1313
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1314
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1315
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1316
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1320
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1321
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1322
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 1328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1323
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1324
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1327
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentFilesStatement" ):
                listener.enterShowRestContentFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentFilesStatement" ):
                listener.exitShowRestContentFilesStatement(self)




    def showRestContentFilesStatement(self):

        localctx = MRSParser.ShowRestContentFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_showRestContentFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1331
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1332
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1333
            self.match(MRSParser.FILES_SYMBOL)
            self.state = 1334
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 1335
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1338
                self.serviceRequestPath()


            self.state = 1341
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1342
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1343
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1346
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1347
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1348
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1349
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1350
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1353
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestRolesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestRolesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestRolesStatement" ):
                listener.enterShowRestRolesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestRolesStatement" ):
                listener.exitShowRestRolesStatement(self)




    def showRestRolesStatement(self):

        localctx = MRSParser.ShowRestRolesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_showRestRolesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1357
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1358
            self.match(MRSParser.ROLES_SYMBOL)
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1359
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                if la_ == 1:
                    self.state = 1360
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 1361
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass

                elif la_ == 2:
                    self.state = 1363
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        self.state = 1362
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 1365
                    self.serviceRequestPath()
                    pass




            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1370
                self.match(MRSParser.FOR_SYMBOL)
                self.state = 1372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 1371
                    self.userName()


                self.state = 1374
                self.match(MRSParser.AT_SIGN_SYMBOL)
                self.state = 1375
                self.authAppName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestGrantsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestGrantsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestGrantsStatement" ):
                listener.enterShowRestGrantsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestGrantsStatement" ):
                listener.exitShowRestGrantsStatement(self)




    def showRestGrantsStatement(self):

        localctx = MRSParser.ShowRestGrantsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_showRestGrantsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1379
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1380
            self.match(MRSParser.GRANTS_SYMBOL)
            self.state = 1381
            self.match(MRSParser.FOR_SYMBOL)
            self.state = 1382
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def INCLUDE_SYMBOL(self):
            return self.getToken(MRSParser.INCLUDE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MRSParser.ALL_SYMBOL, 0)

        def OBJECTS_SYMBOL(self):
            return self.getToken(MRSParser.OBJECTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1385
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1386
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1387
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1388
                self.serviceRequestPath()


            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 1391
                self.match(MRSParser.INCLUDE_SYMBOL)
                self.state = 1392
                self.match(MRSParser.ALL_SYMBOL)
                self.state = 1393
                self.match(MRSParser.OBJECTS_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1396
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1397
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1398
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1399
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1400
                self.schemaRequestPath()


            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1403
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1405
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 1404
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1407
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1411
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1412
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1413
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 1416
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1419
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1420
            self.viewRequestPath()
            self.state = 1423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1421
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1422
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1426
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1427
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1428
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1429
            self.procedureRequestPath()
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1431
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1435
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1436
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1437
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1438
            self.functionRequestPath()
            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1439
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1440
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentSetStatement" ):
                listener.enterShowCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentSetStatement" ):
                listener.exitShowCreateRestContentSetStatement(self)




    def showCreateRestContentSetStatement(self):

        localctx = MRSParser.ShowCreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_showCreateRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1444
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1445
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1446
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1447
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1448
            self.contentSetRequestPath()
            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1449
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1450
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1453
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentFileStatement" ):
                listener.enterShowCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentFileStatement" ):
                listener.exitShowCreateRestContentFileStatement(self)




    def showCreateRestContentFileStatement(self):

        localctx = MRSParser.ShowCreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_showCreateRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1457
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1458
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1459
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1460
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1461
            self.contentFileRequestPath()
            self.state = 1462
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1466
                self.serviceRequestPath()


            self.state = 1469
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1470
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1471
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_showCreateRestAuthAppStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1474
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1475
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1476
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1477
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1478
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_serviceRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1480
                self.serviceDevelopersIdentifier()


            self.state = 1483
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_newServiceRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1485
                self.serviceDevelopersIdentifier()


            self.state = 1488
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifierWithWildcard(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierWithWildcardContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPathWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPathWildcard" ):
                listener.enterServiceRequestPathWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPathWildcard" ):
                listener.exitServiceRequestPathWildcard(self)




    def serviceRequestPathWildcard(self):

        localctx = MRSParser.ServiceRequestPathWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_serviceRequestPathWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1490
                self.serviceDevelopersIdentifier()


            self.state = 1493
            self.requestPathIdentifierWithWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifierWithWildcard(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierWithWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPathWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPathWildcard" ):
                listener.enterSchemaRequestPathWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPathWildcard" ):
                listener.exitSchemaRequestPathWildcard(self)




    def schemaRequestPathWildcard(self):

        localctx = MRSParser.SchemaRequestPathWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_schemaRequestPathWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.requestPathIdentifierWithWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1501
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1505
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPath" ):
                listener.enterObjectRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPath" ):
                listener.exitObjectRequestPath(self)




    def objectRequestPath(self):

        localctx = MRSParser.ObjectRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_objectRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifierWithWildcard(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierWithWildcardContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPathWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPathWildcard" ):
                listener.enterObjectRequestPathWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPathWildcard" ):
                listener.exitObjectRequestPathWildcard(self)




    def objectRequestPathWildcard(self):

        localctx = MRSParser.ObjectRequestPathWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_objectRequestPathWildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.requestPathIdentifierWithWildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewFunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newFunctionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewFunctionRequestPath" ):
                listener.enterNewFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewFunctionRequestPath" ):
                listener.exitNewFunctionRequestPath(self)




    def newFunctionRequestPath(self):

        localctx = MRSParser.NewFunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_newFunctionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1519
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newContentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewContentSetRequestPath" ):
                listener.enterNewContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewContentSetRequestPath" ):
                listener.exitNewContentSetRequestPath(self)




    def newContentSetRequestPath(self):

        localctx = MRSParser.NewContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_newContentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentFileRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentFileRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentFileRequestPath" ):
                listener.enterContentFileRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentFileRequestPath" ):
                listener.exitContentFileRequestPath(self)




    def contentFileRequestPath(self):

        localctx = MRSParser.ContentFileRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_contentFileRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeveloperIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def textOrIdentifier(self):
            return self.getTypedRuleContext(MRSParser.TextOrIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceDeveloperIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDeveloperIdentifier" ):
                listener.enterServiceDeveloperIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDeveloperIdentifier" ):
                listener.exitServiceDeveloperIdentifier(self)




    def serviceDeveloperIdentifier(self):

        localctx = MRSParser.ServiceDeveloperIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_serviceDeveloperIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.textOrIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDevelopersIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceDeveloperIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ServiceDeveloperIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.ServiceDeveloperIdentifierContext,i)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_serviceDevelopersIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDevelopersIdentifier" ):
                listener.enterServiceDevelopersIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDevelopersIdentifier" ):
                listener.exitServiceDevelopersIdentifier(self)




    def serviceDevelopersIdentifier(self):

        localctx = MRSParser.ServiceDevelopersIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_serviceDevelopersIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.serviceDeveloperIdentifier()
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==168:
                self.state = 1530
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1531
                self.serviceDeveloperIdentifier()
                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1537
            self.match(MRSParser.AT_SIGN_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REST_REQUEST_PATH(self):
            return self.getToken(MRSParser.REST_REQUEST_PATH, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_requestPathIdentifier)
        try:
            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1539
                self.match(MRSParser.REST_REQUEST_PATH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1540
                self.match(MRSParser.BACK_TICK_QUOTED_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1541
                if not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1542
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierWithWildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REST_REQUEST_PATH(self):
            return self.getToken(MRSParser.REST_REQUEST_PATH, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifierWithWildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifierWithWildcard" ):
                listener.enterRequestPathIdentifierWithWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifierWithWildcard" ):
                listener.exitRequestPathIdentifierWithWildcard(self)




    def requestPathIdentifierWithWildcard(self):

        localctx = MRSParser.RequestPathIdentifierWithWildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_requestPathIdentifierWithWildcard)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(MRSParser.REST_REQUEST_PATH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1546
                self.match(MRSParser.BACK_TICK_QUOTED_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1547
                if not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1548
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1552
                self.jsonPair()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==168:
                    self.state = 1553
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1554
                    self.jsonPair()
                    self.state = 1559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1560
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1562
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1563
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1567
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1568
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 481036337152) != 0) or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 4483955294211) != 0):
                self.state = 1571
                self.jsonValue()
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==168:
                    self.state = 1572
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1573
                    self.jsonValue()
                    self.state = 1578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1581
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [195]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1583
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [153, 154, 189]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153 or _la==154:
                    self.state = 1584
                    _la = self._input.LA(1)
                    if not(_la==153 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1587
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [187]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1588
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1589
                self.jsonObj()
                pass
            elif token in [176]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1590
                self.jsonArr()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1591
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1592
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1593
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1596
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1597
                self.graphQlPair()
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==168:
                    self.state = 1598
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1599
                    self.graphQlPair()
                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1605
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1608
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def AT_CHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_CHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_CHECK_SYMBOL, i)

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1611
                _la = self._input.LA(1)
                if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 31751) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1614 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 31751) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def graphQlValueOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlValueOptionsContext,0)


        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlValueJsonSchema(self):
            return self.getTypedRuleContext(MRSParser.GraphQlValueJsonSchemaContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.graphQlPairKey()
            self.state = 1617
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1618
            self.graphQlPairValue()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 7) != 0):
                self.state = 1619
                _la = self._input.LA(1)
                if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.state = 1622
                self.graphQlValueOptions()


            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==135:
                self.state = 1625
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1626
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1627
                self.graphQlDatatypeValue()
                self.state = 1628
                self.match(MRSParser.CLOSE_PAR_SYMBOL)


            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 31751) != 0):
                self.state = 1632
                self.graphQlCrudOptions()


            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1635
                self.graphQlValueJsonSchema()


            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==173:
                self.state = 1638
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def AT_SORTABLE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SORTABLE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, i)

        def AT_NOFILTERING_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOFILTERING_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, i)

        def AT_ROWOWNERSHIP_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, i)

        def AT_UNNEST_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UNNEST_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UNNEST_SYMBOL, i)

        def AT_KEY_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_KEY_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_KEY_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValueOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValueOptions" ):
                listener.enterGraphQlValueOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValueOptions" ):
                listener.exitGraphQlValueOptions(self)




    def graphQlValueOptions(self):

        localctx = MRSParser.GraphQlValueOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_graphQlValueOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1642 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1641
                    _la = self._input.LA(1)
                    if not(((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 16445) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1644 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueJsonSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValueJsonSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValueJsonSchema" ):
                listener.enterGraphQlValueJsonSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValueJsonSchema" ):
                listener.exitGraphQlValueJsonSchema(self)




    def graphQlValueJsonSchema(self):

        localctx = MRSParser.GraphQlValueJsonSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_graphQlValueJsonSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.match(MRSParser.JSON_SYMBOL)
            self.state = 1647
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1648
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MRSParser.GROUP_SYMBOL, 0)

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MRSParser.LEVEL_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def URL_SYMBOL(self):
            return self.getToken(MRSParser.URL_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MRSParser.NAME_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MRSParser.DO_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENT_SYMBOL(self):
            return self.getToken(MRSParser.COMMENT_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def ID_SYMBOL(self):
            return self.getToken(MRSParser.ID_SYMBOL, 0)

        def SECRET_SYMBOL(self):
            return self.getToken(MRSParser.SECRET_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def DEVELOPMENT_SYMBOL(self):
            return self.getToken(MRSParser.DEVELOPMENT_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def HIERARCHY_SYMBOL(self):
            return self.getToken(MRSParser.HIERARCHY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -17179869186) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752303423371) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_graphQlPairKey)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1652
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1653
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1654
                self.graphQlAllowedKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_graphQlPairValue)
        try:
            self.state = 1659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1658
                self.graphQlAllowedKeyword()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1665
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1666
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_graphQlValue)
        try:
            self.state = 1671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1669
                self.qualifiedIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1670
                self.graphQlObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1679
                _la = self._input.LA(1)
                if not(_la==192 or _la==194):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1680
                if not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1681
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.identifier()
            self.state = 1691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==168:
                self.state = 1687
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1688
                self.identifier()
                self.state = 1693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1695
            self.identifierList()
            self.state = 1696
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.identifier()
            self.state = 1700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==167:
                self.state = 1699
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1702
            self.identifier()
            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==167:
                self.state = 1703
                self.dotIdentifier()
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167:
                    self.state = 1704
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1710
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Token

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_textStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextStringLiteral" ):
                listener.enterTextStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextStringLiteral" ):
                listener.exitTextStringLiteral(self)




    def textStringLiteral(self):

        localctx = MRSParser.TextStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_textStringLiteral)
        try:
            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1712
                localctx.value = self.match(MRSParser.SINGLE_QUOTED_TEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1713
                if not not self.isSqlModeActive("ANSI_QUOTES"):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "not self.isSqlModeActive(\"ANSI_QUOTES\")")
                self.state = 1714
                localctx.value = self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TextOrIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def textStringLiteral(self):
            return self.getTypedRuleContext(MRSParser.TextStringLiteralContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_textOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextOrIdentifier" ):
                listener.enterTextOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextOrIdentifier" ):
                listener.exitTextOrIdentifier(self)




    def textOrIdentifier(self):

        localctx = MRSParser.TextOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_textOrIdentifier)
        try:
            self.state = 1719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.textStringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[133] = self.requestPathIdentifier_sempred
        self._predicates[134] = self.requestPathIdentifierWithWildcard_sempred
        self._predicates[153] = self.pureIdentifier_sempred
        self._predicates[160] = self.textStringLiteral_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def requestPathIdentifier_sempred(self, localctx:RequestPathIdentifierContext, predIndex:int):
            if predIndex == 0:
                return self.isSqlModeActive("ANSI_QUOTES")
         

    def requestPathIdentifierWithWildcard_sempred(self, localctx:RequestPathIdentifierWithWildcardContext, predIndex:int):
            if predIndex == 1:
                return self.isSqlModeActive("ANSI_QUOTES")
         

    def pureIdentifier_sempred(self, localctx:PureIdentifierContext, predIndex:int):
            if predIndex == 2:
                return self.isSqlModeActive("ANSI_QUOTES")
         

    def textStringLiteral_sempred(self, localctx:TextStringLiteralContext, predIndex:int):
            if predIndex == 3:
                return not self.isSqlModeActive("ANSI_QUOTES")
         




