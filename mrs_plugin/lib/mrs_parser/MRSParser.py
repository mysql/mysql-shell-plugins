# Copyright (c) 2023, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,154,1077,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,1,0,1,0,4,0,207,8,0,11,
        0,12,0,208,1,0,5,0,212,8,0,10,0,12,0,215,9,0,3,0,217,8,0,1,0,3,0,
        220,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,3,1,254,8,1,1,2,1,2,1,3,1,3,3,3,260,8,3,1,4,1,4,1,4,1,5,
        1,5,1,5,1,6,1,6,3,6,270,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,9,1,9,3,9,283,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,292,8,10,
        1,11,1,11,1,11,4,11,297,8,11,11,11,12,11,298,1,12,1,12,1,12,3,12,
        304,8,12,1,13,1,13,1,13,3,13,309,8,13,1,13,1,13,1,13,1,13,3,13,315,
        8,13,1,14,1,14,1,14,1,14,4,14,321,8,14,11,14,12,14,322,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,334,8,15,1,16,1,16,1,16,
        1,16,1,16,5,16,341,8,16,10,16,12,16,344,9,16,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,3,21,364,8,21,1,22,1,22,1,22,3,22,369,8,22,1,22,1,22,1,22,3,
        22,374,8,22,1,22,1,22,3,22,378,8,22,1,22,3,22,381,8,22,1,22,1,22,
        1,22,3,22,386,8,22,1,23,1,23,1,23,1,23,1,23,4,23,393,8,23,11,23,
        12,23,394,1,24,1,24,1,24,3,24,400,8,24,1,24,1,24,3,24,404,8,24,1,
        24,3,24,407,8,24,1,24,3,24,410,8,24,1,24,1,24,1,24,1,24,3,24,416,
        8,24,1,24,1,24,1,24,3,24,421,8,24,1,24,1,24,1,24,3,24,426,8,24,1,
        24,3,24,429,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,439,
        8,25,11,25,12,25,440,1,26,1,26,1,26,1,26,3,26,447,8,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,459,8,29,1,29,1,29,
        1,29,1,29,1,29,3,29,466,8,29,1,29,1,29,1,29,3,29,471,8,29,1,29,1,
        29,1,29,1,29,1,29,5,29,478,8,29,10,29,12,29,481,9,29,1,30,1,30,1,
        30,1,30,1,31,1,31,1,31,3,31,490,8,31,1,31,1,31,1,31,1,31,1,31,1,
        31,3,31,498,8,31,1,31,3,31,501,8,31,1,31,1,31,3,31,505,8,31,1,31,
        3,31,508,8,31,1,32,1,32,1,33,1,33,1,33,1,33,4,33,516,8,33,11,33,
        12,33,517,1,34,1,34,1,34,3,34,523,8,34,1,34,1,34,1,34,1,34,1,34,
        1,34,3,34,531,8,34,1,34,3,34,534,8,34,1,34,1,34,1,34,1,34,3,34,540,
        8,34,1,34,3,34,543,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,
        4,37,553,8,37,11,37,12,37,554,1,38,1,38,1,39,1,39,1,39,1,39,1,40,
        1,40,1,40,3,40,566,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
        575,8,40,1,40,3,40,578,8,40,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,
        42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,596,8,43,1,43,3,
        43,599,8,43,1,44,1,44,1,44,1,44,3,44,605,8,44,1,44,1,44,3,44,609,
        8,44,1,44,3,44,612,8,44,1,44,1,44,1,44,1,44,3,44,618,8,44,1,44,1,
        44,3,44,622,8,44,1,44,3,44,625,8,44,1,45,1,45,1,45,3,45,630,8,45,
        1,45,3,45,633,8,45,1,45,3,45,636,8,45,1,45,1,45,1,45,1,45,1,45,1,
        45,3,45,644,8,45,1,45,1,45,3,45,648,8,45,1,45,3,45,651,8,45,1,45,
        1,45,1,45,3,45,656,8,45,1,45,3,45,659,8,45,3,45,661,8,45,1,46,1,
        46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,671,8,46,1,46,1,46,3,46,675,
        8,46,1,46,3,46,678,8,46,1,46,1,46,1,46,1,46,3,46,684,8,46,3,46,686,
        8,46,1,46,5,46,689,8,46,10,46,12,46,692,9,46,1,47,1,47,1,47,1,47,
        1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,705,8,48,1,48,3,48,708,8,
        48,1,49,1,49,1,49,3,49,713,8,49,1,49,3,49,716,8,49,1,49,3,49,719,
        8,49,1,49,1,49,1,49,1,49,3,49,725,8,49,1,50,1,50,1,50,1,50,1,50,
        1,50,3,50,733,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,742,8,
        51,1,51,3,51,745,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,754,
        8,52,1,52,3,52,757,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,767,8,53,1,53,3,53,770,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,
        55,3,55,779,8,55,1,56,1,56,1,56,3,56,784,8,56,1,56,1,56,1,57,1,57,
        1,57,1,57,1,58,1,58,1,58,1,58,1,58,3,58,797,8,58,1,58,3,58,800,8,
        58,1,59,1,59,1,59,3,59,805,8,59,1,59,3,59,808,8,59,1,59,3,59,811,
        8,59,1,59,1,59,1,59,3,59,816,8,59,1,60,1,60,1,60,1,60,1,60,3,60,
        823,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,831,8,61,1,62,1,62,1,
        62,1,62,1,62,3,62,838,8,62,1,63,1,63,1,63,1,63,1,63,3,63,845,8,63,
        1,63,1,63,3,63,849,8,63,1,63,3,63,852,8,63,1,64,1,64,1,64,1,64,3,
        64,858,8,64,1,64,3,64,861,8,64,1,64,3,64,864,8,64,1,64,1,64,1,64,
        1,64,3,64,870,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,879,8,
        65,1,66,3,66,882,8,66,1,66,1,66,1,67,3,67,887,8,67,1,67,1,67,1,68,
        1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,
        1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,
        1,81,1,82,1,82,1,82,5,82,922,8,82,10,82,12,82,925,9,82,1,83,1,83,
        1,83,1,83,1,84,1,84,3,84,933,8,84,1,85,1,85,1,85,3,85,938,8,85,3,
        85,940,8,85,1,86,1,86,1,86,1,87,1,87,1,87,5,87,948,8,87,10,87,12,
        87,951,9,87,3,87,953,8,87,1,88,1,88,1,88,3,88,958,8,88,1,89,1,89,
        1,89,1,89,3,89,964,8,89,1,90,1,90,1,91,1,91,1,91,1,91,5,91,972,8,
        91,10,91,12,91,975,9,91,1,91,1,91,1,91,1,91,3,91,981,8,91,1,92,1,
        92,1,92,1,92,1,93,1,93,1,93,1,93,5,93,991,8,93,10,93,12,93,994,9,
        93,3,93,996,8,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
        94,1,94,3,94,1009,8,94,1,95,1,95,1,95,1,95,5,95,1015,8,95,10,95,
        12,95,1018,9,95,1,95,1,95,1,95,1,95,3,95,1024,8,95,1,96,4,96,1027,
        8,96,11,96,12,96,1028,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,3,97,1053,8,97,1,97,3,97,1056,8,97,1,98,1,98,1,98,3,98,1061,8,
        98,1,99,1,99,1,99,3,99,1066,8,99,1,100,1,100,1,100,3,100,1071,8,
        100,1,101,1,101,3,101,1075,8,101,1,101,0,0,102,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,0,10,1,0,30,31,2,0,56,56,60,61,2,0,37,37,68,68,1,0,74,
        75,1,0,14,15,1,0,13,14,2,0,143,143,145,145,1,0,146,147,2,0,146,146,
        151,151,2,0,82,82,89,95,1181,0,216,1,0,0,0,2,253,1,0,0,0,4,255,1,
        0,0,0,6,259,1,0,0,0,8,261,1,0,0,0,10,264,1,0,0,0,12,267,1,0,0,0,
        14,273,1,0,0,0,16,278,1,0,0,0,18,282,1,0,0,0,20,287,1,0,0,0,22,296,
        1,0,0,0,24,300,1,0,0,0,26,305,1,0,0,0,28,320,1,0,0,0,30,324,1,0,
        0,0,32,335,1,0,0,0,34,345,1,0,0,0,36,348,1,0,0,0,38,351,1,0,0,0,
        40,354,1,0,0,0,42,358,1,0,0,0,44,365,1,0,0,0,46,392,1,0,0,0,48,396,
        1,0,0,0,50,438,1,0,0,0,52,442,1,0,0,0,54,448,1,0,0,0,56,451,1,0,
        0,0,58,455,1,0,0,0,60,482,1,0,0,0,62,486,1,0,0,0,64,509,1,0,0,0,
        66,515,1,0,0,0,68,519,1,0,0,0,70,544,1,0,0,0,72,546,1,0,0,0,74,552,
        1,0,0,0,76,556,1,0,0,0,78,558,1,0,0,0,80,562,1,0,0,0,82,583,1,0,
        0,0,84,585,1,0,0,0,86,587,1,0,0,0,88,600,1,0,0,0,90,626,1,0,0,0,
        92,662,1,0,0,0,94,693,1,0,0,0,96,698,1,0,0,0,98,709,1,0,0,0,100,
        726,1,0,0,0,102,734,1,0,0,0,104,746,1,0,0,0,106,758,1,0,0,0,108,
        771,1,0,0,0,110,778,1,0,0,0,112,780,1,0,0,0,114,787,1,0,0,0,116,
        791,1,0,0,0,118,801,1,0,0,0,120,817,1,0,0,0,122,824,1,0,0,0,124,
        832,1,0,0,0,126,839,1,0,0,0,128,853,1,0,0,0,130,871,1,0,0,0,132,
        881,1,0,0,0,134,886,1,0,0,0,136,890,1,0,0,0,138,892,1,0,0,0,140,
        894,1,0,0,0,142,896,1,0,0,0,144,898,1,0,0,0,146,900,1,0,0,0,148,
        902,1,0,0,0,150,904,1,0,0,0,152,906,1,0,0,0,154,908,1,0,0,0,156,
        910,1,0,0,0,158,912,1,0,0,0,160,914,1,0,0,0,162,916,1,0,0,0,164,
        918,1,0,0,0,166,926,1,0,0,0,168,930,1,0,0,0,170,934,1,0,0,0,172,
        941,1,0,0,0,174,952,1,0,0,0,176,954,1,0,0,0,178,959,1,0,0,0,180,
        965,1,0,0,0,182,980,1,0,0,0,184,982,1,0,0,0,186,986,1,0,0,0,188,
        1008,1,0,0,0,190,1023,1,0,0,0,192,1026,1,0,0,0,194,1030,1,0,0,0,
        196,1060,1,0,0,0,198,1065,1,0,0,0,200,1070,1,0,0,0,202,1074,1,0,
        0,0,204,213,3,2,1,0,205,207,5,120,0,0,206,205,1,0,0,0,207,208,1,
        0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,0,210,212,3,
        2,1,0,211,206,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,
        0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,216,204,1,0,0,0,216,217,1,
        0,0,0,217,219,1,0,0,0,218,220,5,120,0,0,219,218,1,0,0,0,219,220,
        1,0,0,0,220,221,1,0,0,0,221,222,5,0,0,1,222,1,1,0,0,0,223,254,3,
        20,10,0,224,254,3,26,13,0,225,254,3,44,22,0,226,254,3,48,24,0,227,
        254,3,58,29,0,228,254,3,62,31,0,229,254,3,68,34,0,230,254,3,80,40,
        0,231,254,3,86,43,0,232,254,3,88,44,0,233,254,3,90,45,0,234,254,
        3,92,46,0,235,254,3,94,47,0,236,254,3,96,48,0,237,254,3,98,49,0,
        238,254,3,100,50,0,239,254,3,102,51,0,240,254,3,104,52,0,241,254,
        3,106,53,0,242,254,3,108,54,0,243,254,3,112,56,0,244,254,3,114,57,
        0,245,254,3,116,58,0,246,254,3,118,59,0,247,254,3,120,60,0,248,254,
        3,122,61,0,249,254,3,124,62,0,250,254,3,126,63,0,251,254,3,128,64,
        0,252,254,3,130,65,0,253,223,1,0,0,0,253,224,1,0,0,0,253,225,1,0,
        0,0,253,226,1,0,0,0,253,227,1,0,0,0,253,228,1,0,0,0,253,229,1,0,
        0,0,253,230,1,0,0,0,253,231,1,0,0,0,253,232,1,0,0,0,253,233,1,0,
        0,0,253,234,1,0,0,0,253,235,1,0,0,0,253,236,1,0,0,0,253,237,1,0,
        0,0,253,238,1,0,0,0,253,239,1,0,0,0,253,240,1,0,0,0,253,241,1,0,
        0,0,253,242,1,0,0,0,253,243,1,0,0,0,253,244,1,0,0,0,253,245,1,0,
        0,0,253,246,1,0,0,0,253,247,1,0,0,0,253,248,1,0,0,0,253,249,1,0,
        0,0,253,250,1,0,0,0,253,251,1,0,0,0,253,252,1,0,0,0,254,3,1,0,0,
        0,255,256,7,0,0,0,256,5,1,0,0,0,257,260,3,180,90,0,258,260,5,42,
        0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,7,1,0,0,0,261,262,5,45,0,
        0,262,263,3,188,94,0,263,9,1,0,0,0,264,265,5,36,0,0,265,266,3,180,
        90,0,266,11,1,0,0,0,267,269,5,37,0,0,268,270,5,48,0,0,269,268,1,
        0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,271,272,5,50,0,0,272,13,1,
        0,0,0,273,274,5,51,0,0,274,275,5,52,0,0,275,276,5,53,0,0,276,277,
        3,16,8,0,277,15,1,0,0,0,278,279,5,138,0,0,279,17,1,0,0,0,280,281,
        5,11,0,0,281,283,3,132,66,0,282,280,1,0,0,0,282,283,1,0,0,0,283,
        284,1,0,0,0,284,285,5,17,0,0,285,286,3,138,69,0,286,19,1,0,0,0,287,
        288,5,1,0,0,288,289,5,7,0,0,289,291,5,8,0,0,290,292,3,22,11,0,291,
        290,1,0,0,0,291,292,1,0,0,0,292,21,1,0,0,0,293,297,3,4,2,0,294,297,
        3,8,4,0,295,297,3,24,12,0,296,293,1,0,0,0,296,294,1,0,0,0,296,295,
        1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,23,1,
        0,0,0,300,303,5,62,0,0,301,302,5,46,0,0,302,304,5,47,0,0,303,301,
        1,0,0,0,303,304,1,0,0,0,304,25,1,0,0,0,305,308,5,2,0,0,306,307,5,
        3,0,0,307,309,5,4,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,
        0,0,0,310,311,5,7,0,0,311,312,5,11,0,0,312,314,3,132,66,0,313,315,
        3,28,14,0,314,313,1,0,0,0,314,315,1,0,0,0,315,27,1,0,0,0,316,321,
        3,4,2,0,317,321,3,32,16,0,318,321,3,8,4,0,319,321,3,10,5,0,320,316,
        1,0,0,0,320,317,1,0,0,0,320,318,1,0,0,0,320,319,1,0,0,0,321,322,
        1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,29,1,0,0,0,324,333,5,
        32,0,0,325,334,5,33,0,0,326,334,5,34,0,0,327,328,5,33,0,0,328,329,
        5,119,0,0,329,334,5,34,0,0,330,331,5,34,0,0,331,332,5,119,0,0,332,
        334,5,33,0,0,333,325,1,0,0,0,333,326,1,0,0,0,333,327,1,0,0,0,333,
        330,1,0,0,0,334,31,1,0,0,0,335,342,5,37,0,0,336,341,3,34,17,0,337,
        341,3,36,18,0,338,341,3,38,19,0,339,341,3,40,20,0,340,336,1,0,0,
        0,340,337,1,0,0,0,340,338,1,0,0,0,340,339,1,0,0,0,341,344,1,0,0,
        0,342,340,1,0,0,0,342,343,1,0,0,0,343,33,1,0,0,0,344,342,1,0,0,0,
        345,346,5,39,0,0,346,347,3,6,3,0,347,35,1,0,0,0,348,349,5,40,0,0,
        349,350,3,6,3,0,350,37,1,0,0,0,351,352,5,41,0,0,352,353,3,6,3,0,
        353,39,1,0,0,0,354,355,5,53,0,0,355,356,5,54,0,0,356,357,3,6,3,0,
        357,41,1,0,0,0,358,359,5,43,0,0,359,360,5,44,0,0,360,363,5,17,0,
        0,361,364,3,136,68,0,362,364,5,42,0,0,363,361,1,0,0,0,363,362,1,
        0,0,0,364,43,1,0,0,0,365,368,5,2,0,0,366,367,5,3,0,0,367,369,5,4,
        0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,371,5,7,
        0,0,371,373,5,17,0,0,372,374,3,138,69,0,373,372,1,0,0,0,373,374,
        1,0,0,0,374,380,1,0,0,0,375,377,5,13,0,0,376,378,5,11,0,0,377,376,
        1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,381,3,132,66,0,380,375,
        1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,5,14,0,0,383,385,
        3,136,68,0,384,386,3,46,23,0,385,384,1,0,0,0,385,386,1,0,0,0,386,
        45,1,0,0,0,387,393,3,4,2,0,388,393,3,12,6,0,389,393,3,14,7,0,390,
        393,3,8,4,0,391,393,3,10,5,0,392,387,1,0,0,0,392,388,1,0,0,0,392,
        389,1,0,0,0,392,390,1,0,0,0,392,391,1,0,0,0,393,394,1,0,0,0,394,
        392,1,0,0,0,394,395,1,0,0,0,395,47,1,0,0,0,396,399,5,2,0,0,397,398,
        5,3,0,0,398,400,5,4,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,401,
        1,0,0,0,401,403,5,7,0,0,402,404,5,19,0,0,403,402,1,0,0,0,403,404,
        1,0,0,0,404,406,1,0,0,0,405,407,5,18,0,0,406,405,1,0,0,0,406,407,
        1,0,0,0,407,409,1,0,0,0,408,410,5,20,0,0,409,408,1,0,0,0,409,410,
        1,0,0,0,410,411,1,0,0,0,411,412,5,22,0,0,412,415,3,144,72,0,413,
        414,5,13,0,0,414,416,3,18,9,0,415,413,1,0,0,0,415,416,1,0,0,0,416,
        417,1,0,0,0,417,418,5,14,0,0,418,420,3,168,84,0,419,421,3,50,25,
        0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,423,5,29,0,
        0,423,425,3,148,74,0,424,426,3,192,96,0,425,424,1,0,0,0,425,426,
        1,0,0,0,426,428,1,0,0,0,427,429,3,190,95,0,428,427,1,0,0,0,428,429,
        1,0,0,0,429,49,1,0,0,0,430,439,3,4,2,0,431,439,3,12,6,0,432,439,
        3,14,7,0,433,439,3,8,4,0,434,439,3,10,5,0,435,439,3,52,26,0,436,
        439,3,54,27,0,437,439,3,56,28,0,438,430,1,0,0,0,438,431,1,0,0,0,
        438,432,1,0,0,0,438,433,1,0,0,0,438,434,1,0,0,0,438,435,1,0,0,0,
        438,436,1,0,0,0,438,437,1,0,0,0,439,440,1,0,0,0,440,438,1,0,0,0,
        440,441,1,0,0,0,441,51,1,0,0,0,442,443,5,56,0,0,443,446,5,57,0,0,
        444,447,3,180,90,0,445,447,5,58,0,0,446,444,1,0,0,0,446,445,1,0,
        0,0,447,53,1,0,0,0,448,449,5,59,0,0,449,450,7,1,0,0,450,55,1,0,0,
        0,451,452,5,37,0,0,452,453,5,24,0,0,453,454,3,168,84,0,454,57,1,
        0,0,0,455,458,5,2,0,0,456,457,5,3,0,0,457,459,5,4,0,0,458,456,1,
        0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,5,7,0,0,461,462,5,
        24,0,0,462,465,3,154,77,0,463,464,5,13,0,0,464,466,3,18,9,0,465,
        463,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,468,5,14,0,0,468,
        470,3,168,84,0,469,471,3,50,25,0,470,469,1,0,0,0,470,471,1,0,0,0,
        471,472,1,0,0,0,472,473,5,29,0,0,473,474,3,148,74,0,474,475,5,25,
        0,0,475,479,3,190,95,0,476,478,3,60,30,0,477,476,1,0,0,0,478,481,
        1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,59,1,0,0,0,481,479,1,
        0,0,0,482,483,5,26,0,0,483,484,3,150,75,0,484,485,3,190,95,0,485,
        61,1,0,0,0,486,489,5,2,0,0,487,488,5,3,0,0,488,490,5,4,0,0,489,487,
        1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,5,7,0,0,492,493,
        5,54,0,0,493,494,5,66,0,0,494,500,3,158,79,0,495,497,5,13,0,0,496,
        498,5,11,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,
        501,3,132,66,0,500,495,1,0,0,0,500,501,1,0,0,0,501,504,1,0,0,0,502,
        503,5,14,0,0,503,505,3,64,32,0,504,502,1,0,0,0,504,505,1,0,0,0,505,
        507,1,0,0,0,506,508,3,66,33,0,507,506,1,0,0,0,507,508,1,0,0,0,508,
        63,1,0,0,0,509,510,3,180,90,0,510,65,1,0,0,0,511,516,3,4,2,0,512,
        516,3,12,6,0,513,516,3,8,4,0,514,516,3,10,5,0,515,511,1,0,0,0,515,
        512,1,0,0,0,515,513,1,0,0,0,515,514,1,0,0,0,516,517,1,0,0,0,517,
        515,1,0,0,0,517,518,1,0,0,0,518,67,1,0,0,0,519,522,5,2,0,0,520,521,
        5,3,0,0,521,523,5,4,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,524,
        1,0,0,0,524,525,5,7,0,0,525,526,7,2,0,0,526,527,5,69,0,0,527,533,
        3,70,35,0,528,530,5,13,0,0,529,531,5,11,0,0,530,529,1,0,0,0,530,
        531,1,0,0,0,531,532,1,0,0,0,532,534,3,132,66,0,533,528,1,0,0,0,533,
        534,1,0,0,0,534,535,1,0,0,0,535,539,5,70,0,0,536,540,5,71,0,0,537,
        540,5,72,0,0,538,540,3,72,36,0,539,536,1,0,0,0,539,537,1,0,0,0,539,
        538,1,0,0,0,540,542,1,0,0,0,541,543,3,74,37,0,542,541,1,0,0,0,542,
        543,1,0,0,0,543,69,1,0,0,0,544,545,3,180,90,0,545,71,1,0,0,0,546,
        547,3,180,90,0,547,73,1,0,0,0,548,553,3,4,2,0,549,553,3,10,5,0,550,
        553,3,76,38,0,551,553,3,78,39,0,552,548,1,0,0,0,552,549,1,0,0,0,
        552,550,1,0,0,0,552,551,1,0,0,0,553,554,1,0,0,0,554,552,1,0,0,0,
        554,555,1,0,0,0,555,75,1,0,0,0,556,557,7,3,0,0,557,77,1,0,0,0,558,
        559,5,42,0,0,559,560,5,73,0,0,560,561,3,180,90,0,561,79,1,0,0,0,
        562,565,5,2,0,0,563,564,5,3,0,0,564,566,5,4,0,0,565,563,1,0,0,0,
        565,566,1,0,0,0,566,567,1,0,0,0,567,568,5,7,0,0,568,569,5,43,0,0,
        569,570,3,82,41,0,570,571,5,131,0,0,571,577,3,70,35,0,572,574,5,
        13,0,0,573,575,5,11,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,576,
        1,0,0,0,576,578,3,132,66,0,577,572,1,0,0,0,577,578,1,0,0,0,578,579,
        1,0,0,0,579,580,5,76,0,0,580,581,5,77,0,0,581,582,3,84,42,0,582,
        81,1,0,0,0,583,584,3,180,90,0,584,83,1,0,0,0,585,586,3,180,90,0,
        586,85,1,0,0,0,587,588,5,5,0,0,588,589,5,7,0,0,589,590,5,11,0,0,
        590,595,3,132,66,0,591,592,5,12,0,0,592,593,5,38,0,0,593,594,5,39,
        0,0,594,596,3,134,67,0,595,591,1,0,0,0,595,596,1,0,0,0,596,598,1,
        0,0,0,597,599,3,28,14,0,598,597,1,0,0,0,598,599,1,0,0,0,599,87,1,
        0,0,0,600,601,5,5,0,0,601,602,5,7,0,0,602,604,5,17,0,0,603,605,3,
        138,69,0,604,603,1,0,0,0,604,605,1,0,0,0,605,611,1,0,0,0,606,608,
        5,13,0,0,607,609,5,11,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,
        1,0,0,0,610,612,3,132,66,0,611,606,1,0,0,0,611,612,1,0,0,0,612,617,
        1,0,0,0,613,614,5,12,0,0,614,615,5,38,0,0,615,616,5,39,0,0,616,618,
        3,140,70,0,617,613,1,0,0,0,617,618,1,0,0,0,618,621,1,0,0,0,619,620,
        5,14,0,0,620,622,3,136,68,0,621,619,1,0,0,0,621,622,1,0,0,0,622,
        624,1,0,0,0,623,625,3,46,23,0,624,623,1,0,0,0,624,625,1,0,0,0,625,
        89,1,0,0,0,626,627,5,5,0,0,627,629,5,7,0,0,628,630,5,19,0,0,629,
        628,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,633,5,18,0,0,632,
        631,1,0,0,0,632,633,1,0,0,0,633,635,1,0,0,0,634,636,5,20,0,0,635,
        634,1,0,0,0,635,636,1,0,0,0,636,637,1,0,0,0,637,638,5,22,0,0,638,
        643,3,144,72,0,639,640,5,12,0,0,640,641,5,38,0,0,641,642,5,39,0,
        0,642,644,3,146,73,0,643,639,1,0,0,0,643,644,1,0,0,0,644,647,1,0,
        0,0,645,646,5,13,0,0,646,648,3,18,9,0,647,645,1,0,0,0,647,648,1,
        0,0,0,648,650,1,0,0,0,649,651,3,50,25,0,650,649,1,0,0,0,650,651,
        1,0,0,0,651,660,1,0,0,0,652,653,5,29,0,0,653,655,3,148,74,0,654,
        656,3,192,96,0,655,654,1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,
        659,3,190,95,0,658,657,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,
        652,1,0,0,0,660,661,1,0,0,0,661,91,1,0,0,0,662,663,5,5,0,0,663,664,
        5,7,0,0,664,665,5,24,0,0,665,670,3,154,77,0,666,667,5,12,0,0,667,
        668,5,38,0,0,668,669,5,39,0,0,669,671,3,156,78,0,670,666,1,0,0,0,
        670,671,1,0,0,0,671,674,1,0,0,0,672,673,5,13,0,0,673,675,3,18,9,
        0,674,672,1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,678,3,50,25,
        0,677,676,1,0,0,0,677,678,1,0,0,0,678,685,1,0,0,0,679,680,5,29,0,
        0,680,683,3,148,74,0,681,682,5,25,0,0,682,684,3,190,95,0,683,681,
        1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,679,1,0,0,0,685,686,
        1,0,0,0,686,690,1,0,0,0,687,689,3,60,30,0,688,687,1,0,0,0,689,692,
        1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,93,1,0,0,0,692,690,1,
        0,0,0,693,694,5,27,0,0,694,695,5,7,0,0,695,696,5,11,0,0,696,697,
        3,132,66,0,697,95,1,0,0,0,698,699,5,27,0,0,699,700,5,7,0,0,700,701,
        5,17,0,0,701,707,3,138,69,0,702,704,5,14,0,0,703,705,5,11,0,0,704,
        703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,708,3,132,66,0,707,
        702,1,0,0,0,707,708,1,0,0,0,708,97,1,0,0,0,709,710,5,27,0,0,710,
        712,5,7,0,0,711,713,5,19,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,
        715,1,0,0,0,714,716,5,18,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,
        718,1,0,0,0,717,719,5,20,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,
        720,1,0,0,0,720,721,5,22,0,0,721,724,3,144,72,0,722,723,5,14,0,0,
        723,725,3,18,9,0,724,722,1,0,0,0,724,725,1,0,0,0,725,99,1,0,0,0,
        726,727,5,27,0,0,727,728,5,7,0,0,728,729,5,24,0,0,729,732,3,154,
        77,0,730,731,5,14,0,0,731,733,3,18,9,0,732,730,1,0,0,0,732,733,1,
        0,0,0,733,101,1,0,0,0,734,735,5,27,0,0,735,736,5,7,0,0,736,737,5,
        54,0,0,737,738,5,66,0,0,738,744,3,158,79,0,739,741,5,14,0,0,740,
        742,5,11,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,
        745,3,132,66,0,744,739,1,0,0,0,744,745,1,0,0,0,745,103,1,0,0,0,746,
        747,5,27,0,0,747,748,5,7,0,0,748,749,7,2,0,0,749,750,5,69,0,0,750,
        756,3,70,35,0,751,753,5,14,0,0,752,754,5,11,0,0,753,752,1,0,0,0,
        753,754,1,0,0,0,754,755,1,0,0,0,755,757,3,132,66,0,756,751,1,0,0,
        0,756,757,1,0,0,0,757,105,1,0,0,0,758,759,5,27,0,0,759,760,5,7,0,
        0,760,761,5,43,0,0,761,762,3,82,41,0,762,763,5,131,0,0,763,769,3,
        70,35,0,764,766,5,13,0,0,765,767,5,11,0,0,766,765,1,0,0,0,766,767,
        1,0,0,0,767,768,1,0,0,0,768,770,3,132,66,0,769,764,1,0,0,0,769,770,
        1,0,0,0,770,107,1,0,0,0,771,772,5,28,0,0,772,773,5,7,0,0,773,774,
        3,110,55,0,774,109,1,0,0,0,775,776,5,11,0,0,776,779,3,132,66,0,777,
        779,3,18,9,0,778,775,1,0,0,0,778,777,1,0,0,0,779,111,1,0,0,0,780,
        781,5,6,0,0,781,783,5,7,0,0,782,784,5,8,0,0,783,782,1,0,0,0,783,
        784,1,0,0,0,784,785,1,0,0,0,785,786,5,9,0,0,786,113,1,0,0,0,787,
        788,5,6,0,0,788,789,5,7,0,0,789,790,5,10,0,0,790,115,1,0,0,0,791,
        792,5,6,0,0,792,793,5,7,0,0,793,799,5,16,0,0,794,796,7,4,0,0,795,
        797,5,11,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,
        800,3,132,66,0,799,794,1,0,0,0,799,800,1,0,0,0,800,117,1,0,0,0,801,
        802,5,6,0,0,802,804,5,7,0,0,803,805,5,19,0,0,804,803,1,0,0,0,804,
        805,1,0,0,0,805,807,1,0,0,0,806,808,5,18,0,0,807,806,1,0,0,0,807,
        808,1,0,0,0,808,810,1,0,0,0,809,811,5,20,0,0,810,809,1,0,0,0,810,
        811,1,0,0,0,811,812,1,0,0,0,812,815,5,21,0,0,813,814,7,4,0,0,814,
        816,3,18,9,0,815,813,1,0,0,0,815,816,1,0,0,0,816,119,1,0,0,0,817,
        818,5,6,0,0,818,819,5,7,0,0,819,822,5,23,0,0,820,821,7,4,0,0,821,
        823,3,18,9,0,822,820,1,0,0,0,822,823,1,0,0,0,823,121,1,0,0,0,824,
        825,5,6,0,0,825,826,5,7,0,0,826,827,5,54,0,0,827,830,5,67,0,0,828,
        829,7,4,0,0,829,831,3,18,9,0,830,828,1,0,0,0,830,831,1,0,0,0,831,
        123,1,0,0,0,832,833,5,6,0,0,833,834,5,2,0,0,834,835,5,7,0,0,835,
        837,5,11,0,0,836,838,3,132,66,0,837,836,1,0,0,0,837,838,1,0,0,0,
        838,125,1,0,0,0,839,840,5,6,0,0,840,841,5,2,0,0,841,842,5,7,0,0,
        842,844,5,17,0,0,843,845,3,138,69,0,844,843,1,0,0,0,844,845,1,0,
        0,0,845,851,1,0,0,0,846,848,7,4,0,0,847,849,5,11,0,0,848,847,1,0,
        0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,852,3,132,66,0,851,846,1,
        0,0,0,851,852,1,0,0,0,852,127,1,0,0,0,853,854,5,6,0,0,854,855,5,
        2,0,0,855,857,5,7,0,0,856,858,5,19,0,0,857,856,1,0,0,0,857,858,1,
        0,0,0,858,860,1,0,0,0,859,861,5,18,0,0,860,859,1,0,0,0,860,861,1,
        0,0,0,861,863,1,0,0,0,862,864,5,20,0,0,863,862,1,0,0,0,863,864,1,
        0,0,0,864,865,1,0,0,0,865,866,5,22,0,0,866,869,3,144,72,0,867,868,
        7,5,0,0,868,870,3,18,9,0,869,867,1,0,0,0,869,870,1,0,0,0,870,129,
        1,0,0,0,871,872,5,6,0,0,872,873,5,2,0,0,873,874,5,7,0,0,874,875,
        5,24,0,0,875,878,3,154,77,0,876,877,7,5,0,0,877,879,3,18,9,0,878,
        876,1,0,0,0,878,879,1,0,0,0,879,131,1,0,0,0,880,882,3,176,88,0,881,
        880,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,884,3,178,89,0,884,
        133,1,0,0,0,885,887,3,176,88,0,886,885,1,0,0,0,886,887,1,0,0,0,887,
        888,1,0,0,0,888,889,3,178,89,0,889,135,1,0,0,0,890,891,3,162,81,
        0,891,137,1,0,0,0,892,893,3,178,89,0,893,139,1,0,0,0,894,895,3,178,
        89,0,895,141,1,0,0,0,896,897,3,162,81,0,897,143,1,0,0,0,898,899,
        3,178,89,0,899,145,1,0,0,0,900,901,3,178,89,0,901,147,1,0,0,0,902,
        903,3,162,81,0,903,149,1,0,0,0,904,905,3,162,81,0,905,151,1,0,0,
        0,906,907,3,162,81,0,907,153,1,0,0,0,908,909,3,178,89,0,909,155,
        1,0,0,0,910,911,3,178,89,0,911,157,1,0,0,0,912,913,3,178,89,0,913,
        159,1,0,0,0,914,915,7,6,0,0,915,161,1,0,0,0,916,917,3,160,80,0,917,
        163,1,0,0,0,918,923,3,162,81,0,919,920,5,119,0,0,920,922,3,162,81,
        0,921,919,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,0,923,924,1,0,0,
        0,924,165,1,0,0,0,925,923,1,0,0,0,926,927,5,122,0,0,927,928,3,164,
        82,0,928,929,5,123,0,0,929,167,1,0,0,0,930,932,3,162,81,0,931,933,
        3,172,86,0,932,931,1,0,0,0,932,933,1,0,0,0,933,169,1,0,0,0,934,939,
        3,162,81,0,935,937,3,172,86,0,936,938,3,172,86,0,937,936,1,0,0,0,
        937,938,1,0,0,0,938,940,1,0,0,0,939,935,1,0,0,0,939,940,1,0,0,0,
        940,171,1,0,0,0,941,942,5,118,0,0,942,943,3,162,81,0,943,173,1,0,
        0,0,944,953,3,170,85,0,945,949,3,162,81,0,946,948,3,172,86,0,947,
        946,1,0,0,0,948,951,1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,
        953,1,0,0,0,951,949,1,0,0,0,952,944,1,0,0,0,952,945,1,0,0,0,953,
        175,1,0,0,0,954,957,3,174,87,0,955,956,5,121,0,0,956,958,5,138,0,
        0,957,955,1,0,0,0,957,958,1,0,0,0,958,177,1,0,0,0,959,960,5,107,
        0,0,960,963,3,174,87,0,961,962,5,107,0,0,962,964,3,174,87,0,963,
        961,1,0,0,0,963,964,1,0,0,0,964,179,1,0,0,0,965,966,7,7,0,0,966,
        181,1,0,0,0,967,968,5,124,0,0,968,973,3,184,92,0,969,970,5,119,0,
        0,970,972,3,184,92,0,971,969,1,0,0,0,972,975,1,0,0,0,973,971,1,0,
        0,0,973,974,1,0,0,0,974,976,1,0,0,0,975,973,1,0,0,0,976,977,5,125,
        0,0,977,981,1,0,0,0,978,979,5,124,0,0,979,981,5,125,0,0,980,967,
        1,0,0,0,980,978,1,0,0,0,981,183,1,0,0,0,982,983,7,8,0,0,983,984,
        5,121,0,0,984,985,3,188,94,0,985,185,1,0,0,0,986,995,5,127,0,0,987,
        992,3,188,94,0,988,989,5,119,0,0,989,991,3,188,94,0,990,988,1,0,
        0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,996,1,0,
        0,0,994,992,1,0,0,0,995,987,1,0,0,0,995,996,1,0,0,0,996,997,1,0,
        0,0,997,998,5,128,0,0,998,187,1,0,0,0,999,1009,5,151,0,0,1000,1009,
        5,146,0,0,1001,1009,5,152,0,0,1002,1009,5,138,0,0,1003,1009,3,182,
        91,0,1004,1009,3,186,93,0,1005,1009,5,64,0,0,1006,1009,5,65,0,0,
        1007,1009,5,63,0,0,1008,999,1,0,0,0,1008,1000,1,0,0,0,1008,1001,
        1,0,0,0,1008,1002,1,0,0,0,1008,1003,1,0,0,0,1008,1004,1,0,0,0,1008,
        1005,1,0,0,0,1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,189,1,0,0,
        0,1010,1011,5,124,0,0,1011,1016,3,194,97,0,1012,1013,5,119,0,0,1013,
        1015,3,194,97,0,1014,1012,1,0,0,0,1015,1018,1,0,0,0,1016,1014,1,
        0,0,0,1016,1017,1,0,0,0,1017,1019,1,0,0,0,1018,1016,1,0,0,0,1019,
        1020,5,125,0,0,1020,1024,1,0,0,0,1021,1022,5,124,0,0,1022,1024,5,
        125,0,0,1023,1010,1,0,0,0,1023,1021,1,0,0,0,1024,191,1,0,0,0,1025,
        1027,7,9,0,0,1026,1025,1,0,0,0,1027,1028,1,0,0,0,1028,1026,1,0,0,
        0,1028,1029,1,0,0,0,1029,193,1,0,0,0,1030,1031,3,196,98,0,1031,1032,
        5,121,0,0,1032,1052,3,168,84,0,1033,1053,5,79,0,0,1034,1053,5,80,
        0,0,1035,1053,5,78,0,0,1036,1053,5,81,0,0,1037,1053,5,83,0,0,1038,
        1053,5,84,0,0,1039,1053,5,85,0,0,1040,1053,5,86,0,0,1041,1042,5,
        87,0,0,1042,1043,5,122,0,0,1043,1044,3,198,99,0,1044,1045,5,123,
        0,0,1045,1053,1,0,0,0,1046,1047,5,88,0,0,1047,1048,5,122,0,0,1048,
        1049,3,200,100,0,1049,1050,5,123,0,0,1050,1053,1,0,0,0,1051,1053,
        3,192,96,0,1052,1033,1,0,0,0,1052,1034,1,0,0,0,1052,1035,1,0,0,0,
        1052,1036,1,0,0,0,1052,1037,1,0,0,0,1052,1038,1,0,0,0,1052,1039,
        1,0,0,0,1052,1040,1,0,0,0,1052,1041,1,0,0,0,1052,1046,1,0,0,0,1052,
        1051,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,1056,3,190,
        95,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,195,1,0,0,0,1057,1061,
        5,151,0,0,1058,1061,5,146,0,0,1059,1061,3,162,81,0,1060,1057,1,0,
        0,0,1060,1058,1,0,0,0,1060,1059,1,0,0,0,1061,197,1,0,0,0,1062,1066,
        5,151,0,0,1063,1066,5,146,0,0,1064,1066,3,162,81,0,1065,1062,1,0,
        0,0,1065,1063,1,0,0,0,1065,1064,1,0,0,0,1066,199,1,0,0,0,1067,1071,
        5,151,0,0,1068,1071,5,146,0,0,1069,1071,3,162,81,0,1070,1067,1,0,
        0,0,1070,1068,1,0,0,0,1070,1069,1,0,0,0,1071,201,1,0,0,0,1072,1075,
        3,168,84,0,1073,1075,3,190,95,0,1074,1072,1,0,0,0,1074,1073,1,0,
        0,0,1075,203,1,0,0,0,138,208,213,216,219,253,259,269,282,291,296,
        298,303,308,314,320,322,333,340,342,363,368,373,377,380,385,392,
        394,399,403,406,409,415,420,425,428,438,440,446,458,465,470,479,
        489,497,500,504,507,515,517,522,530,533,539,542,552,554,565,574,
        577,595,598,604,608,611,617,621,624,629,632,635,643,647,650,655,
        658,660,670,674,677,683,685,690,704,707,712,715,718,724,732,741,
        744,753,756,766,769,778,783,796,799,804,807,810,815,822,830,837,
        844,848,851,857,860,863,869,878,881,886,923,932,937,939,949,952,
        957,963,973,980,992,995,1008,1016,1023,1028,1052,1055,1060,1065,
        1070,1074
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'='", "':='", "'<=>'", "'>='", "'>'", "'<='", "'<'", 
                     "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
                     "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", 
                     "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", 
                     "'_'", "'['", "']'", "'->'", "'->>'", "'@'", "<INVALID>", 
                     "'@@'", "'\\N'", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CONFIGURE_SYMBOL", "CREATE_SYMBOL", 
                      "OR_SYMBOL", "REPLACE_SYMBOL", "ALTER_SYMBOL", "SHOW_SYMBOL", 
                      "REST_SYMBOL", "METADATA_SYMBOL", "STATUS_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "RELATIONAL_SYMBOL", 
                      "DUALITY_SYMBOL", "VIEWS_SYMBOL", "VIEW_SYMBOL", "PROCEDURES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PARAMETERS_SYMBOL", "RESULT_SYMBOL", 
                      "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", "ENABLED_SYMBOL", 
                      "DISABLED_SYMBOL", "PROTOCOL_SYMBOL", "HTTP_SYMBOL", 
                      "HTTPS_SYMBOL", "FILTER_SYMBOL", "COMMENTS_SYMBOL", 
                      "AUTHENTICATION_SYMBOL", "REQUEST_SYMBOL", "PATH_SYMBOL", 
                      "REDIRECTION_SYMBOL", "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", 
                      "USER_SYMBOL", "MANAGEMENT_SYMBOL", "OPTIONS_SYMBOL", 
                      "IF_SYMBOL", "AVAILABLE_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "REQUIRED_SYMBOL", "ITEMS_SYMBOL", "PER_SYMBOL", "PAGE_SYMBOL", 
                      "CONTENT_SYMBOL", "HOST_SYMBOL", "MEDIA_SYMBOL", "TYPE_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FORMAT_SYMBOL", "FEED_SYMBOL", 
                      "ITEM_SYMBOL", "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", 
                      "FALSE_SYMBOL", "SET_SYMBOL", "SETS_SYMBOL", "AUTH_SYMBOL", 
                      "APP_SYMBOL", "VENDOR_SYMBOL", "MRS_SYMBOL", "MYSQL_SYMBOL", 
                      "ROLE_SYMBOL", "LIMIT_TO_REGISTERED_USERS_SYMBOL", 
                      "ALLOW_NEW_USERS_SYMBOL", "IDENTIFIED_SYMBOL", "BY_SYMBOL", 
                      "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", "AT_OUT_SYMBOL", 
                      "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", 
                      "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_REDUCETO_SYMBOL", "AT_DATATYPE_SYMBOL", 
                      "AT_SELECT_SYMBOL", "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", 
                      "AT_NOINSERT_SYMBOL", "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", 
                      "AT_NODELETE_SYMBOL", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
                      "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "JSON_STRING", 
                      "JSON_NUMBER", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_comments = 5
    RULE_authenticationRequired = 6
    RULE_itemsPerPage = 7
    RULE_itemsPerPageNumber = 8
    RULE_serviceSchemaSelector = 9
    RULE_configureRestMetadataStatement = 10
    RULE_restMetadataOptions = 11
    RULE_updateIfAvailable = 12
    RULE_createRestServiceStatement = 13
    RULE_restServiceOptions = 14
    RULE_restProtocol = 15
    RULE_restAuthentication = 16
    RULE_authPath = 17
    RULE_authRedirection = 18
    RULE_authValidation = 19
    RULE_authPageContent = 20
    RULE_userManagementSchema = 21
    RULE_createRestSchemaStatement = 22
    RULE_restSchemaOptions = 23
    RULE_createRestViewStatement = 24
    RULE_restObjectOptions = 25
    RULE_restViewMediaType = 26
    RULE_restViewFormat = 27
    RULE_restViewAuthenticationProcedure = 28
    RULE_createRestProcedureStatement = 29
    RULE_restProcedureResult = 30
    RULE_createRestContentSetStatement = 31
    RULE_directoryFilePath = 32
    RULE_restContentSetOptions = 33
    RULE_createRestAuthAppStatement = 34
    RULE_authAppName = 35
    RULE_vendorName = 36
    RULE_restAuthAppOptions = 37
    RULE_limitUsers = 38
    RULE_defaultRole = 39
    RULE_createRestUserStatement = 40
    RULE_userName = 41
    RULE_userPassword = 42
    RULE_alterRestServiceStatement = 43
    RULE_alterRestSchemaStatement = 44
    RULE_alterRestViewStatement = 45
    RULE_alterRestProcedureStatement = 46
    RULE_dropRestServiceStatement = 47
    RULE_dropRestSchemaStatement = 48
    RULE_dropRestDualityViewStatement = 49
    RULE_dropRestProcedureStatement = 50
    RULE_dropRestContentSetStatement = 51
    RULE_dropRestAuthAppStatement = 52
    RULE_dropRestUserStatement = 53
    RULE_useStatement = 54
    RULE_serviceAndSchemaRequestPaths = 55
    RULE_showRestMetadataStatusStatement = 56
    RULE_showRestServicesStatement = 57
    RULE_showRestSchemasStatement = 58
    RULE_showRestViewsStatement = 59
    RULE_showRestProceduresStatement = 60
    RULE_showRestContentSetsStatement = 61
    RULE_showCreateRestServiceStatement = 62
    RULE_showCreateRestSchemaStatement = 63
    RULE_showCreateRestViewStatement = 64
    RULE_showCreateRestProcedureStatement = 65
    RULE_serviceRequestPath = 66
    RULE_newServiceRequestPath = 67
    RULE_schemaName = 68
    RULE_schemaRequestPath = 69
    RULE_newSchemaRequestPath = 70
    RULE_viewName = 71
    RULE_viewRequestPath = 72
    RULE_newViewRequestPath = 73
    RULE_restObjectName = 74
    RULE_restResultName = 75
    RULE_procedureName = 76
    RULE_procedureRequestPath = 77
    RULE_newProcedureRequestPath = 78
    RULE_contentSetRequestPath = 79
    RULE_pureIdentifier = 80
    RULE_identifier = 81
    RULE_identifierList = 82
    RULE_identifierListWithParentheses = 83
    RULE_qualifiedIdentifier = 84
    RULE_simpleIdentifier = 85
    RULE_dotIdentifier = 86
    RULE_dottedIdentifier = 87
    RULE_hostAndPortIdentifier = 88
    RULE_requestPathIdentifier = 89
    RULE_quotedText = 90
    RULE_jsonObj = 91
    RULE_jsonPair = 92
    RULE_jsonArr = 93
    RULE_jsonValue = 94
    RULE_graphGlObj = 95
    RULE_graphGlCrudOptions = 96
    RULE_graphGlPair = 97
    RULE_graphKeyValue = 98
    RULE_graphGlReduceToValue = 99
    RULE_graphGlDatatypeValue = 100
    RULE_graphGlValue = 101

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "restProtocol", "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restObjectOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "createRestAuthAppStatement", 
                   "authAppName", "vendorName", "restAuthAppOptions", "limitUsers", 
                   "defaultRole", "createRestUserStatement", "userName", 
                   "userPassword", "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestDualityViewStatement", "dropRestProcedureStatement", 
                   "dropRestContentSetStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "useStatement", "serviceAndSchemaRequestPaths", 
                   "showRestMetadataStatusStatement", "showRestServicesStatement", 
                   "showRestSchemasStatement", "showRestViewsStatement", 
                   "showRestProceduresStatement", "showRestContentSetsStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaName", 
                   "schemaRequestPath", "newSchemaRequestPath", "viewName", 
                   "viewRequestPath", "newViewRequestPath", "restObjectName", 
                   "restResultName", "procedureName", "procedureRequestPath", 
                   "newProcedureRequestPath", "contentSetRequestPath", "pureIdentifier", 
                   "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", 
                   "dottedIdentifier", "hostAndPortIdentifier", "requestPathIdentifier", 
                   "quotedText", "jsonObj", "jsonPair", "jsonArr", "jsonValue", 
                   "graphGlObj", "graphGlCrudOptions", "graphGlPair", "graphKeyValue", 
                   "graphGlReduceToValue", "graphGlDatatypeValue", "graphGlValue" ]

    EOF = Token.EOF
    CONFIGURE_SYMBOL=1
    CREATE_SYMBOL=2
    OR_SYMBOL=3
    REPLACE_SYMBOL=4
    ALTER_SYMBOL=5
    SHOW_SYMBOL=6
    REST_SYMBOL=7
    METADATA_SYMBOL=8
    STATUS_SYMBOL=9
    SERVICES_SYMBOL=10
    SERVICE_SYMBOL=11
    NEW_SYMBOL=12
    ON_SYMBOL=13
    FROM_SYMBOL=14
    IN_SYMBOL=15
    DATABASES_SYMBOL=16
    DATABASE_SYMBOL=17
    JSON_SYMBOL=18
    RELATIONAL_SYMBOL=19
    DUALITY_SYMBOL=20
    VIEWS_SYMBOL=21
    VIEW_SYMBOL=22
    PROCEDURES_SYMBOL=23
    PROCEDURE_SYMBOL=24
    PARAMETERS_SYMBOL=25
    RESULT_SYMBOL=26
    DROP_SYMBOL=27
    USE_SYMBOL=28
    AS_SYMBOL=29
    ENABLED_SYMBOL=30
    DISABLED_SYMBOL=31
    PROTOCOL_SYMBOL=32
    HTTP_SYMBOL=33
    HTTPS_SYMBOL=34
    FILTER_SYMBOL=35
    COMMENTS_SYMBOL=36
    AUTHENTICATION_SYMBOL=37
    REQUEST_SYMBOL=38
    PATH_SYMBOL=39
    REDIRECTION_SYMBOL=40
    VALIDATION_SYMBOL=41
    DEFAULT_SYMBOL=42
    USER_SYMBOL=43
    MANAGEMENT_SYMBOL=44
    OPTIONS_SYMBOL=45
    IF_SYMBOL=46
    AVAILABLE_SYMBOL=47
    NOT_SYMBOL=48
    EXISTS_SYMBOL=49
    REQUIRED_SYMBOL=50
    ITEMS_SYMBOL=51
    PER_SYMBOL=52
    PAGE_SYMBOL=53
    CONTENT_SYMBOL=54
    HOST_SYMBOL=55
    MEDIA_SYMBOL=56
    TYPE_SYMBOL=57
    AUTODETECT_SYMBOL=58
    FORMAT_SYMBOL=59
    FEED_SYMBOL=60
    ITEM_SYMBOL=61
    UPDATE_SYMBOL=62
    NULL_SYMBOL=63
    TRUE_SYMBOL=64
    FALSE_SYMBOL=65
    SET_SYMBOL=66
    SETS_SYMBOL=67
    AUTH_SYMBOL=68
    APP_SYMBOL=69
    VENDOR_SYMBOL=70
    MRS_SYMBOL=71
    MYSQL_SYMBOL=72
    ROLE_SYMBOL=73
    LIMIT_TO_REGISTERED_USERS_SYMBOL=74
    ALLOW_NEW_USERS_SYMBOL=75
    IDENTIFIED_SYMBOL=76
    BY_SYMBOL=77
    AT_INOUT_SYMBOL=78
    AT_IN_SYMBOL=79
    AT_OUT_SYMBOL=80
    AT_NOCHECK_SYMBOL=81
    AT_NOUPDATE_SYMBOL=82
    AT_SORTABLE_SYMBOL=83
    AT_NOFILTERING_SYMBOL=84
    AT_ROWOWNERSHIP_SYMBOL=85
    AT_UNNEST_SYMBOL=86
    AT_REDUCETO_SYMBOL=87
    AT_DATATYPE_SYMBOL=88
    AT_SELECT_SYMBOL=89
    AT_NOSELECT_SYMBOL=90
    AT_INSERT_SYMBOL=91
    AT_NOINSERT_SYMBOL=92
    AT_UPDATE_SYMBOL=93
    AT_DELETE_SYMBOL=94
    AT_NODELETE_SYMBOL=95
    EQUAL_OPERATOR=96
    ASSIGN_OPERATOR=97
    NULL_SAFE_EQUAL_OPERATOR=98
    GREATER_OR_EQUAL_OPERATOR=99
    GREATER_THAN_OPERATOR=100
    LESS_OR_EQUAL_OPERATOR=101
    LESS_THAN_OPERATOR=102
    NOT_EQUAL_OPERATOR=103
    PLUS_OPERATOR=104
    MINUS_OPERATOR=105
    MULT_OPERATOR=106
    DIV_OPERATOR=107
    MOD_OPERATOR=108
    LOGICAL_NOT_OPERATOR=109
    BITWISE_NOT_OPERATOR=110
    SHIFT_LEFT_OPERATOR=111
    SHIFT_RIGHT_OPERATOR=112
    LOGICAL_AND_OPERATOR=113
    BITWISE_AND_OPERATOR=114
    BITWISE_XOR_OPERATOR=115
    LOGICAL_OR_OPERATOR=116
    BITWISE_OR_OPERATOR=117
    DOT_SYMBOL=118
    COMMA_SYMBOL=119
    SEMICOLON_SYMBOL=120
    COLON_SYMBOL=121
    OPEN_PAR_SYMBOL=122
    CLOSE_PAR_SYMBOL=123
    OPEN_CURLY_SYMBOL=124
    CLOSE_CURLY_SYMBOL=125
    UNDERLINE_SYMBOL=126
    OPEN_SQUARE_SYMBOL=127
    CLOSE_SQUARE_SYMBOL=128
    JSON_SEPARATOR_SYMBOL=129
    JSON_UNQUOTED_SEPARATOR_SYMBOL=130
    AT_SIGN_SYMBOL=131
    AT_TEXT_SUFFIX=132
    AT_AT_SIGN_SYMBOL=133
    NULL2_SYMBOL=134
    PARAM_MARKER=135
    HEX_NUMBER=136
    BIN_NUMBER=137
    INT_NUMBER=138
    DECIMAL_NUMBER=139
    FLOAT_NUMBER=140
    WHITESPACE=141
    INVALID_INPUT=142
    IDENTIFIER=143
    NCHAR_TEXT=144
    BACK_TICK_QUOTED_ID=145
    DOUBLE_QUOTED_TEXT=146
    SINGLE_QUOTED_TEXT=147
    BLOCK_COMMENT=148
    POUND_COMMENT=149
    DASHDASH_COMMENT=150
    JSON_STRING=151
    JSON_NUMBER=152
    WS=153
    NOT_EQUAL2_OPERATOR=154

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 402653286) != 0):
                self.state = 204
                self.mrsStatement()
                self.state = 213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 206 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 205
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 208 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==120):
                                break

                        self.state = 210
                        self.mrsStatement() 
                    self.state = 215
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 218
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 221
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 224
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 225
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 226
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 227
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 228
                self.createRestContentSetStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 229
                self.createRestAuthAppStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 230
                self.createRestUserStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 231
                self.alterRestServiceStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 232
                self.alterRestSchemaStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 233
                self.alterRestViewStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 234
                self.alterRestProcedureStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 235
                self.dropRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 236
                self.dropRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 237
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 238
                self.dropRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 239
                self.dropRestContentSetStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 240
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 241
                self.dropRestUserStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 242
                self.useStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 243
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 244
                self.showRestServicesStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 245
                self.showRestSchemasStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 246
                self.showRestViewsStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 247
                self.showRestProceduresStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 248
                self.showRestContentSetsStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 249
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 250
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 251
                self.showCreateRestViewStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 252
                self.showCreateRestProcedureStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            _la = self._input.LA(1)
            if not(_la==30 or _la==31):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 147]:
                self.state = 257
                self.quotedText()
                pass
            elif token in [42]:
                self.state = 258
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 262
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 265
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 268
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 271
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 274
            self.match(MRSParser.PER_SYMBOL)
            self.state = 275
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 276
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 280
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 281
                self.serviceRequestPath()


            self.state = 284
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 285
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 288
            self.match(MRSParser.REST_SYMBOL)
            self.state = 289
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721206020702208) != 0):
                self.state = 290
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 296
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 293
                    self.enabledDisabled()
                    pass
                elif token in [45]:
                    self.state = 294
                    self.jsonOptions()
                    pass
                elif token in [62]:
                    self.state = 295
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 298 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721206020702208) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 301
                self.match(MRSParser.IF_SYMBOL)
                self.state = 302
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 306
                self.match(MRSParser.OR_SYMBOL)
                self.state = 307
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 310
            self.match(MRSParser.REST_SYMBOL)
            self.state = 311
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 312
            self.serviceRequestPath()
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 313
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 320
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 316
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 317
                    self.restAuthentication()
                    pass
                elif token in [45]:
                    self.state = 318
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 319
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 325
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 326
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 327
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 328
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 329
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 330
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 331
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 332
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9011047545438208) != 0):
                self.state = 340
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 336
                    self.authPath()
                    pass
                elif token in [40]:
                    self.state = 337
                    self.authRedirection()
                    pass
                elif token in [41]:
                    self.state = 338
                    self.authValidation()
                    pass
                elif token in [53]:
                    self.state = 339
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 346
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 349
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 352
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 355
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 356
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(MRSParser.USER_SYMBOL)
            self.state = 359
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 360
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143, 145]:
                self.state = 361
                self.schemaName()
                pass
            elif token in [42]:
                self.state = 362
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 366
                self.match(MRSParser.OR_SYMBOL)
                self.state = 367
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 370
            self.match(MRSParser.REST_SYMBOL)
            self.state = 371
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 372
                self.schemaRequestPath()


            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 375
                self.match(MRSParser.ON_SYMBOL)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 376
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 379
                self.serviceRequestPath()


            self.state = 382
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 383
            self.schemaName()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0):
                self.state = 384
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 392
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 387
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 388
                    self.authenticationRequired()
                    pass
                elif token in [51]:
                    self.state = 389
                    self.itemsPerPage()
                    pass
                elif token in [45]:
                    self.state = 390
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 391
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 397
                self.match(MRSParser.OR_SYMBOL)
                self.state = 398
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 401
            self.match(MRSParser.REST_SYMBOL)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 402
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 405
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 408
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 411
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 412
            self.viewRequestPath()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 413
                self.match(MRSParser.ON_SYMBOL)
                self.state = 414
                self.serviceSchemaSelector()


            self.state = 417
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 418
            self.qualifiedIdentifier()
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 419
                self.restObjectOptions()


            self.state = 422
            self.match(MRSParser.AS_SYMBOL)
            self.state = 423
            self.restObjectName()
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 16257) != 0):
                self.state = 424
                self.graphGlCrudOptions()


            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 427
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 431
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 432
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 433
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 434
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 435
                    self.restViewMediaType()
                    pass

                elif la_ == 7:
                    self.state = 436
                    self.restViewFormat()
                    pass

                elif la_ == 8:
                    self.state = 437
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 440 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 443
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 147]:
                self.state = 444
                self.quotedText()
                pass
            elif token in [58]:
                self.state = 445
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 449
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3530822107858468864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 452
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 453
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 456
                self.match(MRSParser.OR_SYMBOL)
                self.state = 457
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 460
            self.match(MRSParser.REST_SYMBOL)
            self.state = 461
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 462
            self.procedureRequestPath()
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 463
                self.match(MRSParser.ON_SYMBOL)
                self.state = 464
                self.serviceSchemaSelector()


            self.state = 467
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 468
            self.qualifiedIdentifier()
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 469
                self.restObjectOptions()


            self.state = 472
            self.match(MRSParser.AS_SYMBOL)
            self.state = 473
            self.restObjectName()
            self.state = 474
            self.match(MRSParser.PARAMETERS_SYMBOL)
            self.state = 475
            self.graphGlObj()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 476
                self.restProcedureResult()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restProcedureResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 483
            self.restResultName()
            self.state = 484
            self.graphGlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 487
                self.match(MRSParser.OR_SYMBOL)
                self.state = 488
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 491
            self.match(MRSParser.REST_SYMBOL)
            self.state = 492
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 493
            self.match(MRSParser.SET_SYMBOL)
            self.state = 494
            self.contentSetRequestPath()
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 495
                self.match(MRSParser.ON_SYMBOL)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 496
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 499
                self.serviceRequestPath()


            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 502
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 503
                self.directoryFilePath()


            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 506
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 515
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 511
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 512
                    self.authenticationRequired()
                    pass
                elif token in [45]:
                    self.state = 513
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 514
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 517 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 520
                self.match(MRSParser.OR_SYMBOL)
                self.state = 521
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 524
            self.match(MRSParser.REST_SYMBOL)
            self.state = 525
            _la = self._input.LA(1)
            if not(_la==37 or _la==68):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 526
            self.match(MRSParser.APP_SYMBOL)
            self.state = 527
            self.authAppName()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 528
                self.match(MRSParser.ON_SYMBOL)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 529
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 532
                self.serviceRequestPath()


            self.state = 535
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71]:
                self.state = 536
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [72]:
                self.state = 537
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [146, 147]:
                self.state = 538
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 52776558137411) != 0):
                self.state = 541
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def limitUsers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.LimitUsersContext)
            else:
                return self.getTypedRuleContext(MRSParser.LimitUsersContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 552
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 548
                    self.enabledDisabled()
                    pass
                elif token in [36]:
                    self.state = 549
                    self.comments()
                    pass
                elif token in [74, 75]:
                    self.state = 550
                    self.limitUsers()
                    pass
                elif token in [42]:
                    self.state = 551
                    self.defaultRole()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 554 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & 52776558137411) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitUsersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_TO_REGISTERED_USERS_SYMBOL(self):
            return self.getToken(MRSParser.LIMIT_TO_REGISTERED_USERS_SYMBOL, 0)

        def ALLOW_NEW_USERS_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_NEW_USERS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_limitUsers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitUsers" ):
                listener.enterLimitUsers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitUsers" ):
                listener.exitLimitUsers(self)




    def limitUsers(self):

        localctx = MRSParser.LimitUsersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_limitUsers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            _la = self._input.LA(1)
            if not(_la==74 or _la==75):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 559
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 560
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 563
                self.match(MRSParser.OR_SYMBOL)
                self.state = 564
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 567
            self.match(MRSParser.REST_SYMBOL)
            self.state = 568
            self.match(MRSParser.USER_SYMBOL)
            self.state = 569
            self.userName()
            self.state = 570
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 571
            self.authAppName()
            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 572
                self.match(MRSParser.ON_SYMBOL)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 573
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 576
                self.serviceRequestPath()


            self.state = 579
            self.match(MRSParser.IDENTIFIED_SYMBOL)
            self.state = 580
            self.match(MRSParser.BY_SYMBOL)
            self.state = 581
            self.userPassword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 588
            self.match(MRSParser.REST_SYMBOL)
            self.state = 589
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 590
            self.serviceRequestPath()
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 591
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 592
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 593
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 594
                self.newServiceRequestPath()


            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 597
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 601
            self.match(MRSParser.REST_SYMBOL)
            self.state = 602
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 603
                self.schemaRequestPath()


            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 606
                self.match(MRSParser.ON_SYMBOL)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 607
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 610
                self.serviceRequestPath()


            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 613
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 614
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 615
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 616
                self.newSchemaRequestPath()


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 619
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 620
                self.schemaName()


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0):
                self.state = 623
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 627
            self.match(MRSParser.REST_SYMBOL)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 628
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 631
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 634
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 637
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 638
            self.viewRequestPath()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 639
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 640
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 641
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 642
                self.newViewRequestPath()


            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 645
                self.match(MRSParser.ON_SYMBOL)
                self.state = 646
                self.serviceSchemaSelector()


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 649
                self.restObjectOptions()


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 652
                self.match(MRSParser.AS_SYMBOL)
                self.state = 653
                self.restObjectName()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 16257) != 0):
                    self.state = 654
                    self.graphGlCrudOptions()


                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 657
                    self.graphGlObj()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 663
            self.match(MRSParser.REST_SYMBOL)
            self.state = 664
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 665
            self.procedureRequestPath()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 666
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 667
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 668
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 669
                self.newProcedureRequestPath()


            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 672
                self.match(MRSParser.ON_SYMBOL)
                self.state = 673
                self.serviceSchemaSelector()


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 676
                self.restObjectOptions()


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 679
                self.match(MRSParser.AS_SYMBOL)
                self.state = 680
                self.restObjectName()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 681
                    self.match(MRSParser.PARAMETERS_SYMBOL)
                    self.state = 682
                    self.graphGlObj()




            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 687
                self.restProcedureResult()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 694
            self.match(MRSParser.REST_SYMBOL)
            self.state = 695
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 696
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 699
            self.match(MRSParser.REST_SYMBOL)
            self.state = 700
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 701
            self.schemaRequestPath()
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 702
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 703
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 706
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 710
            self.match(MRSParser.REST_SYMBOL)
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 711
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 714
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 717
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 720
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 721
            self.viewRequestPath()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 722
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 723
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 727
            self.match(MRSParser.REST_SYMBOL)
            self.state = 728
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 729
            self.procedureRequestPath()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 730
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 731
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 735
            self.match(MRSParser.REST_SYMBOL)
            self.state = 736
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 737
            self.match(MRSParser.SET_SYMBOL)
            self.state = 738
            self.contentSetRequestPath()
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 739
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 740
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 743
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 747
            self.match(MRSParser.REST_SYMBOL)
            self.state = 748
            _la = self._input.LA(1)
            if not(_la==37 or _la==68):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 749
            self.match(MRSParser.APP_SYMBOL)
            self.state = 750
            self.authAppName()
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 751
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 752
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 755
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dropRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 759
            self.match(MRSParser.REST_SYMBOL)
            self.state = 760
            self.match(MRSParser.USER_SYMBOL)
            self.state = 761
            self.userName()
            self.state = 762
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 763
            self.authAppName()
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 764
                self.match(MRSParser.ON_SYMBOL)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 765
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 768
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(MRSParser.USE_SYMBOL)
            self.state = 772
            self.match(MRSParser.REST_SYMBOL)
            self.state = 773
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 776
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 777
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 781
            self.match(MRSParser.REST_SYMBOL)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 782
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 785
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 788
            self.match(MRSParser.REST_SYMBOL)
            self.state = 789
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 792
            self.match(MRSParser.REST_SYMBOL)
            self.state = 793
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 794
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 795
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 798
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 802
            self.match(MRSParser.REST_SYMBOL)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 803
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 806
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 809
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 812
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 813
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 814
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 818
            self.match(MRSParser.REST_SYMBOL)
            self.state = 819
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 820
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 821
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 825
            self.match(MRSParser.REST_SYMBOL)
            self.state = 826
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 827
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 828
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 829
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 833
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 834
            self.match(MRSParser.REST_SYMBOL)
            self.state = 835
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 343597383681) != 0):
                self.state = 836
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 840
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 841
            self.match(MRSParser.REST_SYMBOL)
            self.state = 842
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 843
                self.schemaRequestPath()


            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 846
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 847
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 850
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 854
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 855
            self.match(MRSParser.REST_SYMBOL)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 856
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 859
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 862
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 865
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 866
            self.viewRequestPath()
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==14:
                self.state = 867
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 872
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 873
            self.match(MRSParser.REST_SYMBOL)
            self.state = 874
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 875
            self.procedureRequestPath()
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==14:
                self.state = 876
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 877
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143 or _la==145:
                self.state = 880
                self.hostAndPortIdentifier()


            self.state = 883
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==143 or _la==145:
                self.state = 885
                self.hostAndPortIdentifier()


            self.state = 888
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            _la = self._input.LA(1)
            if not(_la==143 or _la==145):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.identifier()
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==119:
                self.state = 919
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 920
                self.identifier()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 927
            self.identifierList()
            self.state = 928
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.identifier()
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 931
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.identifier()
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 935
                self.dotIdentifier()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 936
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 942
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.identifier()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==118:
                    self.state = 946
                    self.dotIdentifier()
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.dottedIdentifier()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 955
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 956
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.match(MRSParser.DIV_OPERATOR)
            self.state = 960
            self.dottedIdentifier()
            self.state = 963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==107:
                self.state = 961
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 962
                self.dottedIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            _la = self._input.LA(1)
            if not(_la==146 or _la==147):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 967
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 968
                self.jsonPair()
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==119:
                    self.state = 969
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 970
                    self.jsonPair()
                    self.state = 975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 976
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 978
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 979
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_jsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            _la = self._input.LA(1)
            if not(_la==146 or _la==151):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 983
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 984
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 2305843009213693959) != 0) or ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 50857985) != 0):
                self.state = 987
                self.jsonValue()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==119:
                    self.state = 988
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 989
                    self.jsonValue()
                    self.state = 994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 997
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def JSON_NUMBER(self):
            return self.getToken(MRSParser.JSON_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_jsonValue)
        try:
            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1001
                self.match(MRSParser.JSON_NUMBER)
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1002
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1003
                self.jsonObj()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self.jsonArr()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1005
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1006
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1007
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphGlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphGlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphGlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlObj" ):
                listener.enterGraphGlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlObj" ):
                listener.exitGraphGlObj(self)




    def graphGlObj(self):

        localctx = MRSParser.GraphGlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_graphGlObj)
        self._la = 0 # Token type
        try:
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1010
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1011
                self.graphGlPair()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==119:
                    self.state = 1012
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1013
                    self.graphGlPair()
                    self.state = 1018
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1019
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1022
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SELECT_SYMBOL, i)

        def AT_NOSELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOSELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOSELECT_SYMBOL, i)

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlCrudOptions" ):
                listener.enterGraphGlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlCrudOptions" ):
                listener.exitGraphGlCrudOptions(self)




    def graphGlCrudOptions(self):

        localctx = MRSParser.GraphGlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_graphGlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1025
                _la = self._input.LA(1)
                if not(((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 16257) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1028 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 16257) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphKeyValue(self):
            return self.getTypedRuleContext(MRSParser.GraphKeyValueContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_REDUCETO_SYMBOL(self):
            return self.getToken(MRSParser.AT_REDUCETO_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphGlReduceToValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlReduceToValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def graphGlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlDatatypeValueContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlPair" ):
                listener.enterGraphGlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlPair" ):
                listener.exitGraphGlPair(self)




    def graphGlPair(self):

        localctx = MRSParser.GraphGlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_graphGlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.graphKeyValue()
            self.state = 1031
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1032
            self.qualifiedIdentifier()
            self.state = 1052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.state = 1033
                self.match(MRSParser.AT_IN_SYMBOL)
                pass
            elif token in [80]:
                self.state = 1034
                self.match(MRSParser.AT_OUT_SYMBOL)
                pass
            elif token in [78]:
                self.state = 1035
                self.match(MRSParser.AT_INOUT_SYMBOL)
                pass
            elif token in [81]:
                self.state = 1036
                self.match(MRSParser.AT_NOCHECK_SYMBOL)
                pass
            elif token in [83]:
                self.state = 1037
                self.match(MRSParser.AT_SORTABLE_SYMBOL)
                pass
            elif token in [84]:
                self.state = 1038
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)
                pass
            elif token in [85]:
                self.state = 1039
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
                pass
            elif token in [86]:
                self.state = 1040
                self.match(MRSParser.AT_UNNEST_SYMBOL)
                pass
            elif token in [87]:
                self.state = 1041
                self.match(MRSParser.AT_REDUCETO_SYMBOL)
                self.state = 1042
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1043
                self.graphGlReduceToValue()
                self.state = 1044
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [88]:
                self.state = 1046
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1047
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1048
                self.graphGlDatatypeValue()
                self.state = 1049
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [82, 89, 90, 91, 92, 93, 94, 95]:
                self.state = 1051
                self.graphGlCrudOptions()
                pass
            elif token in [119, 124, 125]:
                pass
            else:
                pass
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 1054
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphKeyValue" ):
                listener.enterGraphKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphKeyValue" ):
                listener.exitGraphKeyValue(self)




    def graphKeyValue(self):

        localctx = MRSParser.GraphKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_graphKeyValue)
        try:
            self.state = 1060
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [143, 145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1059
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlReduceToValue" ):
                listener.enterGraphGlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlReduceToValue" ):
                listener.exitGraphGlReduceToValue(self)




    def graphGlReduceToValue(self):

        localctx = MRSParser.GraphGlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_graphGlReduceToValue)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [143, 145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlDatatypeValue" ):
                listener.enterGraphGlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlDatatypeValue" ):
                listener.exitGraphGlDatatypeValue(self)




    def graphGlDatatypeValue(self):

        localctx = MRSParser.GraphGlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_graphGlDatatypeValue)
        try:
            self.state = 1070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [143, 145]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1069
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlValue" ):
                listener.enterGraphGlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlValue" ):
                listener.exitGraphGlValue(self)




    def graphGlValue(self):

        localctx = MRSParser.GraphGlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_graphGlValue)
        try:
            self.state = 1074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143, 145]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.qualifiedIdentifier()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.graphGlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





