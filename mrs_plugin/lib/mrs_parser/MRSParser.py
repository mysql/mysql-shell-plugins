# Copyright (c) 2023, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,155,1115,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        1,0,1,0,4,0,211,8,0,11,0,12,0,212,1,0,5,0,216,8,0,10,0,12,0,219,
        9,0,3,0,221,8,0,1,0,3,0,224,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,260,8,1,1,2,1,2,1,3,
        1,3,3,3,266,8,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,3,6,276,8,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,3,9,289,8,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,3,10,298,8,10,1,11,1,11,1,11,4,11,303,8,11,11,
        11,12,11,304,1,12,1,12,1,12,3,12,310,8,12,1,13,1,13,1,13,3,13,315,
        8,13,1,13,1,13,1,13,1,13,3,13,321,8,13,1,14,1,14,1,14,1,14,4,14,
        327,8,14,11,14,12,14,328,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,3,15,340,8,15,1,16,1,16,1,16,1,16,1,16,5,16,347,8,16,10,16,
        12,16,350,9,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,370,8,21,1,22,1,22,
        1,22,3,22,375,8,22,1,22,1,22,1,22,3,22,380,8,22,1,22,1,22,3,22,384,
        8,22,1,22,3,22,387,8,22,1,22,1,22,1,22,3,22,392,8,22,1,23,1,23,1,
        23,1,23,1,23,4,23,399,8,23,11,23,12,23,400,1,24,1,24,1,24,3,24,406,
        8,24,1,24,1,24,3,24,410,8,24,1,24,3,24,413,8,24,1,24,3,24,416,8,
        24,1,24,1,24,1,24,1,24,3,24,422,8,24,1,24,1,24,1,24,1,24,3,24,428,
        8,24,1,24,3,24,431,8,24,1,24,3,24,434,8,24,1,24,3,24,437,8,24,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,447,8,25,11,25,12,25,
        448,1,26,1,26,1,26,1,26,3,26,455,8,26,1,27,1,27,1,27,1,28,1,28,1,
        28,1,28,1,29,1,29,1,29,3,29,467,8,29,1,29,1,29,1,29,1,29,1,29,3,
        29,474,8,29,1,29,1,29,1,29,1,29,3,29,480,8,29,1,29,3,29,483,8,29,
        1,29,5,29,486,8,29,10,29,12,29,489,9,29,1,29,3,29,492,8,29,1,30,
        1,30,3,30,496,8,30,1,30,1,30,1,31,1,31,1,31,3,31,503,8,31,1,31,1,
        31,1,31,1,31,1,31,1,31,3,31,511,8,31,1,31,3,31,514,8,31,1,31,1,31,
        3,31,518,8,31,1,31,3,31,521,8,31,1,32,1,32,1,33,1,33,1,33,1,33,4,
        33,529,8,33,11,33,12,33,530,1,34,1,34,1,34,3,34,536,8,34,1,34,1,
        34,1,34,1,34,1,34,1,34,3,34,544,8,34,1,34,3,34,547,8,34,1,34,1,34,
        1,34,1,34,3,34,553,8,34,1,34,3,34,556,8,34,1,35,1,35,1,36,1,36,1,
        37,1,37,1,37,1,37,4,37,566,8,37,11,37,12,37,567,1,38,1,38,1,38,1,
        38,1,38,3,38,575,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,3,40,584,
        8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,593,8,40,1,40,3,40,
        596,8,40,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,3,43,614,8,43,1,43,3,43,617,8,43,1,44,1,
        44,1,44,1,44,3,44,623,8,44,1,44,1,44,3,44,627,8,44,1,44,3,44,630,
        8,44,1,44,1,44,1,44,1,44,3,44,636,8,44,1,44,1,44,3,44,640,8,44,1,
        44,3,44,643,8,44,1,45,1,45,1,45,3,45,648,8,45,1,45,3,45,651,8,45,
        1,45,3,45,654,8,45,1,45,1,45,1,45,1,45,3,45,660,8,45,1,45,1,45,1,
        45,1,45,3,45,666,8,45,1,45,1,45,1,45,3,45,671,8,45,1,45,3,45,674,
        8,45,3,45,676,8,45,1,45,3,45,679,8,45,1,46,1,46,1,46,1,46,1,46,1,
        46,3,46,687,8,46,1,46,1,46,1,46,1,46,3,46,693,8,46,1,46,1,46,3,46,
        697,8,46,1,46,3,46,700,8,46,1,46,5,46,703,8,46,10,46,12,46,706,9,
        46,1,46,3,46,709,8,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,
        48,1,48,1,48,3,48,722,8,48,1,48,3,48,725,8,48,1,49,1,49,1,49,3,49,
        730,8,49,1,49,3,49,733,8,49,1,49,3,49,736,8,49,1,49,1,49,1,49,1,
        49,3,49,742,8,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,750,8,50,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,3,51,759,8,51,1,51,3,51,762,8,51,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,771,8,52,1,52,3,52,774,8,52,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,784,8,53,1,53,3,53,
        787,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,3,55,796,8,55,1,56,1,
        56,1,56,3,56,801,8,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,
        58,1,58,1,58,3,58,814,8,58,1,58,3,58,817,8,58,1,59,1,59,1,59,3,59,
        822,8,59,1,59,3,59,825,8,59,1,59,3,59,828,8,59,1,59,1,59,1,59,3,
        59,833,8,59,1,60,1,60,1,60,1,60,1,60,3,60,840,8,60,1,61,1,61,1,61,
        1,61,1,61,1,61,3,61,848,8,61,1,61,3,61,851,8,61,1,62,1,62,1,62,1,
        62,1,62,1,62,3,62,859,8,62,1,62,3,62,862,8,62,1,63,1,63,1,63,1,63,
        1,63,3,63,869,8,63,1,64,1,64,1,64,1,64,1,64,3,64,876,8,64,1,64,1,
        64,3,64,880,8,64,1,64,3,64,883,8,64,1,65,1,65,1,65,1,65,3,65,889,
        8,65,1,65,3,65,892,8,65,1,65,3,65,895,8,65,1,65,1,65,1,65,1,65,3,
        65,901,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,910,8,66,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,920,8,67,1,67,3,67,923,8,
        67,1,68,3,68,926,8,68,1,68,1,68,1,69,3,69,931,8,69,1,69,1,69,1,70,
        1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,
        1,77,1,77,1,78,1,78,1,79,1,79,1,79,5,79,956,8,79,10,79,12,79,959,
        9,79,3,79,961,8,79,1,80,1,80,1,80,3,80,966,8,80,1,81,1,81,1,81,1,
        81,3,81,972,8,81,1,82,1,82,1,83,1,83,1,83,1,83,5,83,980,8,83,10,
        83,12,83,983,9,83,1,83,1,83,1,83,1,83,3,83,989,8,83,1,84,1,84,1,
        84,1,84,1,85,1,85,1,85,1,85,5,85,999,8,85,10,85,12,85,1002,9,85,
        3,85,1004,8,85,1,85,1,85,1,86,1,86,3,86,1010,8,86,1,86,1,86,1,86,
        1,86,1,86,1,86,1,86,3,86,1019,8,86,1,87,1,87,1,87,1,87,5,87,1025,
        8,87,10,87,12,87,1028,9,87,1,87,1,87,1,87,1,87,3,87,1034,8,87,1,
        88,4,88,1037,8,88,11,88,12,88,1038,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1058,
        8,89,1,89,3,89,1061,8,89,1,90,1,90,3,90,1065,8,90,1,91,1,91,3,91,
        1069,8,91,1,92,1,92,3,92,1073,8,92,1,93,1,93,3,93,1077,8,93,1,94,
        1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,
        1092,8,99,10,99,12,99,1095,9,99,1,100,1,100,1,100,1,100,1,101,1,
        101,3,101,1103,8,101,1,102,1,102,1,102,3,102,1108,8,102,3,102,1110,
        8,102,1,103,1,103,1,103,1,103,0,0,104,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,0,9,1,0,53,54,2,0,67,67,69,70,2,0,20,20,72,72,1,0,9,10,1,
        0,8,9,1,0,149,150,1,0,107,108,2,0,86,86,92,98,2,0,146,146,148,148,
        1225,0,220,1,0,0,0,2,259,1,0,0,0,4,261,1,0,0,0,6,265,1,0,0,0,8,267,
        1,0,0,0,10,270,1,0,0,0,12,273,1,0,0,0,14,279,1,0,0,0,16,284,1,0,
        0,0,18,288,1,0,0,0,20,293,1,0,0,0,22,302,1,0,0,0,24,306,1,0,0,0,
        26,311,1,0,0,0,28,326,1,0,0,0,30,330,1,0,0,0,32,341,1,0,0,0,34,351,
        1,0,0,0,36,354,1,0,0,0,38,357,1,0,0,0,40,360,1,0,0,0,42,364,1,0,
        0,0,44,371,1,0,0,0,46,398,1,0,0,0,48,402,1,0,0,0,50,446,1,0,0,0,
        52,450,1,0,0,0,54,456,1,0,0,0,56,459,1,0,0,0,58,463,1,0,0,0,60,493,
        1,0,0,0,62,499,1,0,0,0,64,522,1,0,0,0,66,528,1,0,0,0,68,532,1,0,
        0,0,70,557,1,0,0,0,72,559,1,0,0,0,74,565,1,0,0,0,76,569,1,0,0,0,
        78,576,1,0,0,0,80,580,1,0,0,0,82,601,1,0,0,0,84,603,1,0,0,0,86,605,
        1,0,0,0,88,618,1,0,0,0,90,644,1,0,0,0,92,680,1,0,0,0,94,710,1,0,
        0,0,96,715,1,0,0,0,98,726,1,0,0,0,100,743,1,0,0,0,102,751,1,0,0,
        0,104,763,1,0,0,0,106,775,1,0,0,0,108,788,1,0,0,0,110,795,1,0,0,
        0,112,797,1,0,0,0,114,804,1,0,0,0,116,808,1,0,0,0,118,818,1,0,0,
        0,120,834,1,0,0,0,122,841,1,0,0,0,124,852,1,0,0,0,126,863,1,0,0,
        0,128,870,1,0,0,0,130,884,1,0,0,0,132,902,1,0,0,0,134,911,1,0,0,
        0,136,925,1,0,0,0,138,930,1,0,0,0,140,934,1,0,0,0,142,936,1,0,0,
        0,144,938,1,0,0,0,146,940,1,0,0,0,148,942,1,0,0,0,150,944,1,0,0,
        0,152,946,1,0,0,0,154,948,1,0,0,0,156,950,1,0,0,0,158,960,1,0,0,
        0,160,962,1,0,0,0,162,967,1,0,0,0,164,973,1,0,0,0,166,988,1,0,0,
        0,168,990,1,0,0,0,170,994,1,0,0,0,172,1018,1,0,0,0,174,1033,1,0,
        0,0,176,1036,1,0,0,0,178,1040,1,0,0,0,180,1064,1,0,0,0,182,1068,
        1,0,0,0,184,1072,1,0,0,0,186,1076,1,0,0,0,188,1078,1,0,0,0,190,1080,
        1,0,0,0,192,1082,1,0,0,0,194,1084,1,0,0,0,196,1086,1,0,0,0,198,1088,
        1,0,0,0,200,1096,1,0,0,0,202,1100,1,0,0,0,204,1104,1,0,0,0,206,1111,
        1,0,0,0,208,217,3,2,1,0,209,211,5,123,0,0,210,209,1,0,0,0,211,212,
        1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,216,
        3,2,1,0,215,210,1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,
        1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,220,208,1,0,0,0,220,221,
        1,0,0,0,221,223,1,0,0,0,222,224,5,123,0,0,223,222,1,0,0,0,223,224,
        1,0,0,0,224,225,1,0,0,0,225,226,5,0,0,1,226,1,1,0,0,0,227,260,3,
        20,10,0,228,260,3,26,13,0,229,260,3,44,22,0,230,260,3,48,24,0,231,
        260,3,58,29,0,232,260,3,62,31,0,233,260,3,68,34,0,234,260,3,80,40,
        0,235,260,3,86,43,0,236,260,3,88,44,0,237,260,3,90,45,0,238,260,
        3,92,46,0,239,260,3,94,47,0,240,260,3,96,48,0,241,260,3,98,49,0,
        242,260,3,100,50,0,243,260,3,102,51,0,244,260,3,104,52,0,245,260,
        3,106,53,0,246,260,3,108,54,0,247,260,3,112,56,0,248,260,3,114,57,
        0,249,260,3,116,58,0,250,260,3,118,59,0,251,260,3,120,60,0,252,260,
        3,122,61,0,253,260,3,124,62,0,254,260,3,126,63,0,255,260,3,128,64,
        0,256,260,3,130,65,0,257,260,3,132,66,0,258,260,3,134,67,0,259,227,
        1,0,0,0,259,228,1,0,0,0,259,229,1,0,0,0,259,230,1,0,0,0,259,231,
        1,0,0,0,259,232,1,0,0,0,259,233,1,0,0,0,259,234,1,0,0,0,259,235,
        1,0,0,0,259,236,1,0,0,0,259,237,1,0,0,0,259,238,1,0,0,0,259,239,
        1,0,0,0,259,240,1,0,0,0,259,241,1,0,0,0,259,242,1,0,0,0,259,243,
        1,0,0,0,259,244,1,0,0,0,259,245,1,0,0,0,259,246,1,0,0,0,259,247,
        1,0,0,0,259,248,1,0,0,0,259,249,1,0,0,0,259,250,1,0,0,0,259,251,
        1,0,0,0,259,252,1,0,0,0,259,253,1,0,0,0,259,254,1,0,0,0,259,255,
        1,0,0,0,259,256,1,0,0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,3,1,
        0,0,0,261,262,7,0,0,0,262,5,1,0,0,0,263,266,3,164,82,0,264,266,5,
        23,0,0,265,263,1,0,0,0,265,264,1,0,0,0,266,7,1,0,0,0,267,268,5,25,
        0,0,268,269,3,172,86,0,269,9,1,0,0,0,270,271,5,58,0,0,271,272,3,
        164,82,0,272,11,1,0,0,0,273,275,5,20,0,0,274,276,5,27,0,0,275,274,
        1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,278,5,63,0,0,278,13,
        1,0,0,0,279,280,5,64,0,0,280,281,5,65,0,0,281,282,5,29,0,0,282,283,
        3,16,8,0,283,15,1,0,0,0,284,285,5,141,0,0,285,17,1,0,0,0,286,287,
        5,46,0,0,287,289,3,136,68,0,288,286,1,0,0,0,288,289,1,0,0,0,289,
        290,1,0,0,0,290,291,5,12,0,0,291,292,3,140,70,0,292,19,1,0,0,0,293,
        294,5,42,0,0,294,295,5,43,0,0,295,297,5,44,0,0,296,298,3,22,11,0,
        297,296,1,0,0,0,297,298,1,0,0,0,298,21,1,0,0,0,299,303,3,4,2,0,300,
        303,3,8,4,0,301,303,3,24,12,0,302,299,1,0,0,0,302,300,1,0,0,0,302,
        301,1,0,0,0,303,304,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,
        23,1,0,0,0,306,309,5,33,0,0,307,308,5,26,0,0,308,310,5,62,0,0,309,
        307,1,0,0,0,309,310,1,0,0,0,310,25,1,0,0,0,311,314,5,1,0,0,312,313,
        5,2,0,0,313,315,5,3,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,316,
        1,0,0,0,316,317,5,43,0,0,317,318,5,46,0,0,318,320,3,136,68,0,319,
        321,3,28,14,0,320,319,1,0,0,0,320,321,1,0,0,0,321,27,1,0,0,0,322,
        327,3,4,2,0,323,327,3,32,16,0,324,327,3,8,4,0,325,327,3,10,5,0,326,
        322,1,0,0,0,326,323,1,0,0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,
        328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,29,1,0,0,0,330,339,
        5,55,0,0,331,340,5,56,0,0,332,340,5,57,0,0,333,334,5,56,0,0,334,
        335,5,122,0,0,335,340,5,57,0,0,336,337,5,57,0,0,337,338,5,122,0,
        0,338,340,5,56,0,0,339,331,1,0,0,0,339,332,1,0,0,0,339,333,1,0,0,
        0,339,336,1,0,0,0,340,31,1,0,0,0,341,348,5,20,0,0,342,347,3,34,17,
        0,343,347,3,36,18,0,344,347,3,38,19,0,345,347,3,40,20,0,346,342,
        1,0,0,0,346,343,1,0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,347,350,
        1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,33,1,0,0,0,350,348,1,
        0,0,0,351,352,5,21,0,0,352,353,3,6,3,0,353,35,1,0,0,0,354,355,5,
        60,0,0,355,356,3,6,3,0,356,37,1,0,0,0,357,358,5,22,0,0,358,359,3,
        6,3,0,359,39,1,0,0,0,360,361,5,29,0,0,361,362,5,66,0,0,362,363,3,
        6,3,0,363,41,1,0,0,0,364,365,5,24,0,0,365,366,5,61,0,0,366,369,5,
        12,0,0,367,370,3,188,94,0,368,370,5,23,0,0,369,367,1,0,0,0,369,368,
        1,0,0,0,370,43,1,0,0,0,371,374,5,1,0,0,372,373,5,2,0,0,373,375,5,
        3,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,376,1,0,0,0,376,377,5,
        43,0,0,377,379,5,12,0,0,378,380,3,140,70,0,379,378,1,0,0,0,379,380,
        1,0,0,0,380,386,1,0,0,0,381,383,5,8,0,0,382,384,5,46,0,0,383,382,
        1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,387,3,136,68,0,386,381,
        1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,389,5,9,0,0,389,391,
        3,188,94,0,390,392,3,46,23,0,391,390,1,0,0,0,391,392,1,0,0,0,392,
        45,1,0,0,0,393,399,3,4,2,0,394,399,3,12,6,0,395,399,3,14,7,0,396,
        399,3,8,4,0,397,399,3,10,5,0,398,393,1,0,0,0,398,394,1,0,0,0,398,
        395,1,0,0,0,398,396,1,0,0,0,398,397,1,0,0,0,399,400,1,0,0,0,400,
        398,1,0,0,0,400,401,1,0,0,0,401,47,1,0,0,0,402,405,5,1,0,0,403,404,
        5,2,0,0,404,406,5,3,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,407,
        1,0,0,0,407,409,5,43,0,0,408,410,5,13,0,0,409,408,1,0,0,0,409,410,
        1,0,0,0,410,412,1,0,0,0,411,413,5,47,0,0,412,411,1,0,0,0,412,413,
        1,0,0,0,413,415,1,0,0,0,414,416,5,48,0,0,415,414,1,0,0,0,415,416,
        1,0,0,0,416,417,1,0,0,0,417,418,5,14,0,0,418,421,3,144,72,0,419,
        420,5,8,0,0,420,422,3,18,9,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        423,1,0,0,0,423,424,5,18,0,0,424,427,3,202,101,0,425,426,5,81,0,
        0,426,428,3,148,74,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,
        0,0,429,431,3,176,88,0,430,429,1,0,0,0,430,431,1,0,0,0,431,433,1,
        0,0,0,432,434,3,174,87,0,433,432,1,0,0,0,433,434,1,0,0,0,434,436,
        1,0,0,0,435,437,3,50,25,0,436,435,1,0,0,0,436,437,1,0,0,0,437,49,
        1,0,0,0,438,447,3,4,2,0,439,447,3,12,6,0,440,447,3,14,7,0,441,447,
        3,8,4,0,442,447,3,10,5,0,443,447,3,52,26,0,444,447,3,54,27,0,445,
        447,3,56,28,0,446,438,1,0,0,0,446,439,1,0,0,0,446,440,1,0,0,0,446,
        441,1,0,0,0,446,442,1,0,0,0,446,443,1,0,0,0,446,444,1,0,0,0,446,
        445,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,449,1,0,0,0,449,
        51,1,0,0,0,450,451,5,67,0,0,451,454,5,31,0,0,452,455,3,164,82,0,
        453,455,5,68,0,0,454,452,1,0,0,0,454,453,1,0,0,0,455,53,1,0,0,0,
        456,457,5,32,0,0,457,458,7,1,0,0,458,55,1,0,0,0,459,460,5,20,0,0,
        460,461,5,15,0,0,461,462,3,202,101,0,462,57,1,0,0,0,463,466,5,1,
        0,0,464,465,5,2,0,0,465,467,5,3,0,0,466,464,1,0,0,0,466,467,1,0,
        0,0,467,468,1,0,0,0,468,469,5,43,0,0,469,470,5,15,0,0,470,473,3,
        152,76,0,471,472,5,8,0,0,472,474,3,18,9,0,473,471,1,0,0,0,473,474,
        1,0,0,0,474,475,1,0,0,0,475,476,5,18,0,0,476,482,3,202,101,0,477,
        479,5,51,0,0,478,480,3,148,74,0,479,478,1,0,0,0,479,480,1,0,0,0,
        480,481,1,0,0,0,481,483,3,174,87,0,482,477,1,0,0,0,482,483,1,0,0,
        0,483,487,1,0,0,0,484,486,3,60,30,0,485,484,1,0,0,0,486,489,1,0,
        0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,491,1,0,0,0,489,487,1,0,
        0,0,490,492,3,50,25,0,491,490,1,0,0,0,491,492,1,0,0,0,492,59,1,0,
        0,0,493,495,5,52,0,0,494,496,3,150,75,0,495,494,1,0,0,0,495,496,
        1,0,0,0,496,497,1,0,0,0,497,498,3,174,87,0,498,61,1,0,0,0,499,502,
        5,1,0,0,500,501,5,2,0,0,501,503,5,3,0,0,502,500,1,0,0,0,502,503,
        1,0,0,0,503,504,1,0,0,0,504,505,5,43,0,0,505,506,5,66,0,0,506,507,
        5,37,0,0,507,513,3,156,78,0,508,510,5,8,0,0,509,511,5,46,0,0,510,
        509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,514,3,136,68,0,513,
        508,1,0,0,0,513,514,1,0,0,0,514,517,1,0,0,0,515,516,5,9,0,0,516,
        518,3,64,32,0,517,515,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,
        521,3,66,33,0,520,519,1,0,0,0,520,521,1,0,0,0,521,63,1,0,0,0,522,
        523,3,164,82,0,523,65,1,0,0,0,524,529,3,4,2,0,525,529,3,12,6,0,526,
        529,3,8,4,0,527,529,3,10,5,0,528,524,1,0,0,0,528,525,1,0,0,0,528,
        526,1,0,0,0,528,527,1,0,0,0,529,530,1,0,0,0,530,528,1,0,0,0,530,
        531,1,0,0,0,531,67,1,0,0,0,532,535,5,1,0,0,533,534,5,2,0,0,534,536,
        5,3,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,538,
        5,43,0,0,538,539,7,2,0,0,539,540,5,74,0,0,540,546,3,70,35,0,541,
        543,5,8,0,0,542,544,5,46,0,0,543,542,1,0,0,0,543,544,1,0,0,0,544,
        545,1,0,0,0,545,547,3,136,68,0,546,541,1,0,0,0,546,547,1,0,0,0,547,
        548,1,0,0,0,548,552,5,75,0,0,549,553,5,76,0,0,550,553,5,77,0,0,551,
        553,3,72,36,0,552,549,1,0,0,0,552,550,1,0,0,0,552,551,1,0,0,0,553,
        555,1,0,0,0,554,556,3,74,37,0,555,554,1,0,0,0,555,556,1,0,0,0,556,
        69,1,0,0,0,557,558,3,164,82,0,558,71,1,0,0,0,559,560,3,164,82,0,
        560,73,1,0,0,0,561,566,3,4,2,0,562,566,3,10,5,0,563,566,3,76,38,
        0,564,566,3,78,39,0,565,561,1,0,0,0,565,562,1,0,0,0,565,563,1,0,
        0,0,565,564,1,0,0,0,566,567,1,0,0,0,567,565,1,0,0,0,567,568,1,0,
        0,0,568,75,1,0,0,0,569,570,5,79,0,0,570,571,5,7,0,0,571,574,5,78,
        0,0,572,573,5,41,0,0,573,575,5,80,0,0,574,572,1,0,0,0,574,575,1,
        0,0,0,575,77,1,0,0,0,576,577,5,23,0,0,577,578,5,40,0,0,578,579,3,
        164,82,0,579,79,1,0,0,0,580,583,5,1,0,0,581,582,5,2,0,0,582,584,
        5,3,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,586,
        5,43,0,0,586,587,5,24,0,0,587,588,3,82,41,0,588,589,5,134,0,0,589,
        595,3,70,35,0,590,592,5,8,0,0,591,593,5,46,0,0,592,591,1,0,0,0,592,
        593,1,0,0,0,593,594,1,0,0,0,594,596,3,136,68,0,595,590,1,0,0,0,595,
        596,1,0,0,0,596,597,1,0,0,0,597,598,5,38,0,0,598,599,5,39,0,0,599,
        600,3,84,42,0,600,81,1,0,0,0,601,602,3,164,82,0,602,83,1,0,0,0,603,
        604,3,164,82,0,604,85,1,0,0,0,605,606,5,4,0,0,606,607,5,43,0,0,607,
        608,5,46,0,0,608,613,3,136,68,0,609,610,5,7,0,0,610,611,5,59,0,0,
        611,612,5,21,0,0,612,614,3,138,69,0,613,609,1,0,0,0,613,614,1,0,
        0,0,614,616,1,0,0,0,615,617,3,28,14,0,616,615,1,0,0,0,616,617,1,
        0,0,0,617,87,1,0,0,0,618,619,5,4,0,0,619,620,5,43,0,0,620,622,5,
        12,0,0,621,623,3,140,70,0,622,621,1,0,0,0,622,623,1,0,0,0,623,629,
        1,0,0,0,624,626,5,8,0,0,625,627,5,46,0,0,626,625,1,0,0,0,626,627,
        1,0,0,0,627,628,1,0,0,0,628,630,3,136,68,0,629,624,1,0,0,0,629,630,
        1,0,0,0,630,635,1,0,0,0,631,632,5,7,0,0,632,633,5,59,0,0,633,634,
        5,21,0,0,634,636,3,142,71,0,635,631,1,0,0,0,635,636,1,0,0,0,636,
        639,1,0,0,0,637,638,5,9,0,0,638,640,3,188,94,0,639,637,1,0,0,0,639,
        640,1,0,0,0,640,642,1,0,0,0,641,643,3,46,23,0,642,641,1,0,0,0,642,
        643,1,0,0,0,643,89,1,0,0,0,644,645,5,4,0,0,645,647,5,43,0,0,646,
        648,5,13,0,0,647,646,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,
        651,5,47,0,0,650,649,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,
        654,5,48,0,0,653,652,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,
        656,5,14,0,0,656,659,3,144,72,0,657,658,5,8,0,0,658,660,3,18,9,0,
        659,657,1,0,0,0,659,660,1,0,0,0,660,665,1,0,0,0,661,662,5,7,0,0,
        662,663,5,59,0,0,663,664,5,21,0,0,664,666,3,146,73,0,665,661,1,0,
        0,0,665,666,1,0,0,0,666,675,1,0,0,0,667,668,5,81,0,0,668,670,3,148,
        74,0,669,671,3,176,88,0,670,669,1,0,0,0,670,671,1,0,0,0,671,673,
        1,0,0,0,672,674,3,174,87,0,673,672,1,0,0,0,673,674,1,0,0,0,674,676,
        1,0,0,0,675,667,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,679,
        3,50,25,0,678,677,1,0,0,0,678,679,1,0,0,0,679,91,1,0,0,0,680,681,
        5,4,0,0,681,682,5,43,0,0,682,683,5,15,0,0,683,686,3,152,76,0,684,
        685,5,8,0,0,685,687,3,18,9,0,686,684,1,0,0,0,686,687,1,0,0,0,687,
        692,1,0,0,0,688,689,5,7,0,0,689,690,5,59,0,0,690,691,5,21,0,0,691,
        693,3,154,77,0,692,688,1,0,0,0,692,693,1,0,0,0,693,699,1,0,0,0,694,
        696,5,51,0,0,695,697,3,148,74,0,696,695,1,0,0,0,696,697,1,0,0,0,
        697,698,1,0,0,0,698,700,3,174,87,0,699,694,1,0,0,0,699,700,1,0,0,
        0,700,704,1,0,0,0,701,703,3,60,30,0,702,701,1,0,0,0,703,706,1,0,
        0,0,704,702,1,0,0,0,704,705,1,0,0,0,705,708,1,0,0,0,706,704,1,0,
        0,0,707,709,3,50,25,0,708,707,1,0,0,0,708,709,1,0,0,0,709,93,1,0,
        0,0,710,711,5,16,0,0,711,712,5,43,0,0,712,713,5,46,0,0,713,714,3,
        136,68,0,714,95,1,0,0,0,715,716,5,16,0,0,716,717,5,43,0,0,717,718,
        5,12,0,0,718,724,3,140,70,0,719,721,5,9,0,0,720,722,5,46,0,0,721,
        720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,725,3,136,68,0,724,
        719,1,0,0,0,724,725,1,0,0,0,725,97,1,0,0,0,726,727,5,16,0,0,727,
        729,5,43,0,0,728,730,5,13,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,
        732,1,0,0,0,731,733,5,47,0,0,732,731,1,0,0,0,732,733,1,0,0,0,733,
        735,1,0,0,0,734,736,5,48,0,0,735,734,1,0,0,0,735,736,1,0,0,0,736,
        737,1,0,0,0,737,738,5,14,0,0,738,741,3,144,72,0,739,740,5,9,0,0,
        740,742,3,18,9,0,741,739,1,0,0,0,741,742,1,0,0,0,742,99,1,0,0,0,
        743,744,5,16,0,0,744,745,5,43,0,0,745,746,5,15,0,0,746,749,3,152,
        76,0,747,748,5,9,0,0,748,750,3,18,9,0,749,747,1,0,0,0,749,750,1,
        0,0,0,750,101,1,0,0,0,751,752,5,16,0,0,752,753,5,43,0,0,753,754,
        5,66,0,0,754,755,5,37,0,0,755,761,3,156,78,0,756,758,5,9,0,0,757,
        759,5,46,0,0,758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,
        762,3,136,68,0,761,756,1,0,0,0,761,762,1,0,0,0,762,103,1,0,0,0,763,
        764,5,16,0,0,764,765,5,43,0,0,765,766,7,2,0,0,766,767,5,74,0,0,767,
        773,3,70,35,0,768,770,5,9,0,0,769,771,5,46,0,0,770,769,1,0,0,0,770,
        771,1,0,0,0,771,772,1,0,0,0,772,774,3,136,68,0,773,768,1,0,0,0,773,
        774,1,0,0,0,774,105,1,0,0,0,775,776,5,16,0,0,776,777,5,43,0,0,777,
        778,5,24,0,0,778,779,3,82,41,0,779,780,5,134,0,0,780,786,3,70,35,
        0,781,783,5,8,0,0,782,784,5,46,0,0,783,782,1,0,0,0,783,784,1,0,0,
        0,784,785,1,0,0,0,785,787,3,136,68,0,786,781,1,0,0,0,786,787,1,0,
        0,0,787,107,1,0,0,0,788,789,5,17,0,0,789,790,5,43,0,0,790,791,3,
        110,55,0,791,109,1,0,0,0,792,793,5,46,0,0,793,796,3,136,68,0,794,
        796,3,18,9,0,795,792,1,0,0,0,795,794,1,0,0,0,796,111,1,0,0,0,797,
        798,5,5,0,0,798,800,5,43,0,0,799,801,5,44,0,0,800,799,1,0,0,0,800,
        801,1,0,0,0,801,802,1,0,0,0,802,803,5,6,0,0,803,113,1,0,0,0,804,
        805,5,5,0,0,805,806,5,43,0,0,806,807,5,45,0,0,807,115,1,0,0,0,808,
        809,5,5,0,0,809,810,5,43,0,0,810,816,5,11,0,0,811,813,7,3,0,0,812,
        814,5,46,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,815,1,0,0,0,815,
        817,3,136,68,0,816,811,1,0,0,0,816,817,1,0,0,0,817,117,1,0,0,0,818,
        819,5,5,0,0,819,821,5,43,0,0,820,822,5,13,0,0,821,820,1,0,0,0,821,
        822,1,0,0,0,822,824,1,0,0,0,823,825,5,47,0,0,824,823,1,0,0,0,824,
        825,1,0,0,0,825,827,1,0,0,0,826,828,5,48,0,0,827,826,1,0,0,0,827,
        828,1,0,0,0,828,829,1,0,0,0,829,832,5,49,0,0,830,831,7,3,0,0,831,
        833,3,18,9,0,832,830,1,0,0,0,832,833,1,0,0,0,833,119,1,0,0,0,834,
        835,5,5,0,0,835,836,5,43,0,0,836,839,5,50,0,0,837,838,7,3,0,0,838,
        840,3,18,9,0,839,837,1,0,0,0,839,840,1,0,0,0,840,121,1,0,0,0,841,
        842,5,5,0,0,842,843,5,43,0,0,843,844,5,66,0,0,844,850,5,71,0,0,845,
        847,7,3,0,0,846,848,5,46,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,
        849,1,0,0,0,849,851,3,136,68,0,850,845,1,0,0,0,850,851,1,0,0,0,851,
        123,1,0,0,0,852,853,5,5,0,0,853,854,5,43,0,0,854,855,5,72,0,0,855,
        861,5,73,0,0,856,858,7,3,0,0,857,859,5,46,0,0,858,857,1,0,0,0,858,
        859,1,0,0,0,859,860,1,0,0,0,860,862,3,136,68,0,861,856,1,0,0,0,861,
        862,1,0,0,0,862,125,1,0,0,0,863,864,5,5,0,0,864,865,5,1,0,0,865,
        866,5,43,0,0,866,868,5,46,0,0,867,869,3,136,68,0,868,867,1,0,0,0,
        868,869,1,0,0,0,869,127,1,0,0,0,870,871,5,5,0,0,871,872,5,1,0,0,
        872,873,5,43,0,0,873,875,5,12,0,0,874,876,3,140,70,0,875,874,1,0,
        0,0,875,876,1,0,0,0,876,882,1,0,0,0,877,879,7,4,0,0,878,880,5,46,
        0,0,879,878,1,0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,883,3,136,
        68,0,882,877,1,0,0,0,882,883,1,0,0,0,883,129,1,0,0,0,884,885,5,5,
        0,0,885,886,5,1,0,0,886,888,5,43,0,0,887,889,5,13,0,0,888,887,1,
        0,0,0,888,889,1,0,0,0,889,891,1,0,0,0,890,892,5,47,0,0,891,890,1,
        0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,895,5,48,0,0,894,893,1,
        0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,897,5,14,0,0,897,900,3,
        144,72,0,898,899,7,4,0,0,899,901,3,18,9,0,900,898,1,0,0,0,900,901,
        1,0,0,0,901,131,1,0,0,0,902,903,5,5,0,0,903,904,5,1,0,0,904,905,
        5,43,0,0,905,906,5,15,0,0,906,909,3,152,76,0,907,908,7,4,0,0,908,
        910,3,18,9,0,909,907,1,0,0,0,909,910,1,0,0,0,910,133,1,0,0,0,911,
        912,5,5,0,0,912,913,5,1,0,0,913,914,5,43,0,0,914,915,5,72,0,0,915,
        916,5,74,0,0,916,922,3,70,35,0,917,919,7,4,0,0,918,920,5,46,0,0,
        919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,923,3,136,68,
        0,922,917,1,0,0,0,922,923,1,0,0,0,923,135,1,0,0,0,924,926,3,160,
        80,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,3,162,
        81,0,928,137,1,0,0,0,929,931,3,160,80,0,930,929,1,0,0,0,930,931,
        1,0,0,0,931,932,1,0,0,0,932,933,3,162,81,0,933,139,1,0,0,0,934,935,
        3,162,81,0,935,141,1,0,0,0,936,937,3,162,81,0,937,143,1,0,0,0,938,
        939,3,162,81,0,939,145,1,0,0,0,940,941,3,162,81,0,941,147,1,0,0,
        0,942,943,3,196,98,0,943,149,1,0,0,0,944,945,3,196,98,0,945,151,
        1,0,0,0,946,947,3,162,81,0,947,153,1,0,0,0,948,949,3,162,81,0,949,
        155,1,0,0,0,950,951,3,162,81,0,951,157,1,0,0,0,952,961,3,204,102,
        0,953,957,3,196,98,0,954,956,3,206,103,0,955,954,1,0,0,0,956,959,
        1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,961,1,0,0,0,959,957,
        1,0,0,0,960,952,1,0,0,0,960,953,1,0,0,0,961,159,1,0,0,0,962,965,
        3,158,79,0,963,964,5,124,0,0,964,966,5,141,0,0,965,963,1,0,0,0,965,
        966,1,0,0,0,966,161,1,0,0,0,967,968,5,110,0,0,968,971,3,158,79,0,
        969,970,5,110,0,0,970,972,3,158,79,0,971,969,1,0,0,0,971,972,1,0,
        0,0,972,163,1,0,0,0,973,974,7,5,0,0,974,165,1,0,0,0,975,976,5,127,
        0,0,976,981,3,168,84,0,977,978,5,122,0,0,978,980,3,168,84,0,979,
        977,1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,
        984,1,0,0,0,983,981,1,0,0,0,984,985,5,128,0,0,985,989,1,0,0,0,986,
        987,5,127,0,0,987,989,5,128,0,0,988,975,1,0,0,0,988,986,1,0,0,0,
        989,167,1,0,0,0,990,991,5,149,0,0,991,992,5,124,0,0,992,993,3,172,
        86,0,993,169,1,0,0,0,994,1003,5,130,0,0,995,1000,3,172,86,0,996,
        997,5,122,0,0,997,999,3,172,86,0,998,996,1,0,0,0,999,1002,1,0,0,
        0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1004,1,0,0,0,1002,1000,
        1,0,0,0,1003,995,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,0,0,0,1005,
        1006,5,131,0,0,1006,171,1,0,0,0,1007,1019,5,149,0,0,1008,1010,7,
        6,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,0,0,1011,
        1019,5,143,0,0,1012,1019,5,141,0,0,1013,1019,3,166,83,0,1014,1019,
        3,170,85,0,1015,1019,5,35,0,0,1016,1019,5,36,0,0,1017,1019,5,34,
        0,0,1018,1007,1,0,0,0,1018,1009,1,0,0,0,1018,1012,1,0,0,0,1018,1013,
        1,0,0,0,1018,1014,1,0,0,0,1018,1015,1,0,0,0,1018,1016,1,0,0,0,1018,
        1017,1,0,0,0,1019,173,1,0,0,0,1020,1021,5,127,0,0,1021,1026,3,178,
        89,0,1022,1023,5,122,0,0,1023,1025,3,178,89,0,1024,1022,1,0,0,0,
        1025,1028,1,0,0,0,1026,1024,1,0,0,0,1026,1027,1,0,0,0,1027,1029,
        1,0,0,0,1028,1026,1,0,0,0,1029,1030,5,128,0,0,1030,1034,1,0,0,0,
        1031,1032,5,127,0,0,1032,1034,5,128,0,0,1033,1020,1,0,0,0,1033,1031,
        1,0,0,0,1034,175,1,0,0,0,1035,1037,7,7,0,0,1036,1035,1,0,0,0,1037,
        1038,1,0,0,0,1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,177,1,0,0,
        0,1040,1041,3,180,90,0,1041,1042,5,124,0,0,1042,1057,3,202,101,0,
        1043,1058,5,83,0,0,1044,1058,5,84,0,0,1045,1058,5,82,0,0,1046,1058,
        5,85,0,0,1047,1058,5,87,0,0,1048,1058,5,88,0,0,1049,1058,5,89,0,
        0,1050,1058,5,90,0,0,1051,1052,5,91,0,0,1052,1053,5,125,0,0,1053,
        1054,3,184,92,0,1054,1055,5,126,0,0,1055,1058,1,0,0,0,1056,1058,
        3,176,88,0,1057,1043,1,0,0,0,1057,1044,1,0,0,0,1057,1045,1,0,0,0,
        1057,1046,1,0,0,0,1057,1047,1,0,0,0,1057,1048,1,0,0,0,1057,1049,
        1,0,0,0,1057,1050,1,0,0,0,1057,1051,1,0,0,0,1057,1056,1,0,0,0,1057,
        1058,1,0,0,0,1058,1060,1,0,0,0,1059,1061,3,174,87,0,1060,1059,1,
        0,0,0,1060,1061,1,0,0,0,1061,179,1,0,0,0,1062,1065,5,149,0,0,1063,
        1065,3,196,98,0,1064,1062,1,0,0,0,1064,1063,1,0,0,0,1065,181,1,0,
        0,0,1066,1069,5,149,0,0,1067,1069,3,196,98,0,1068,1066,1,0,0,0,1068,
        1067,1,0,0,0,1069,183,1,0,0,0,1070,1073,5,149,0,0,1071,1073,3,196,
        98,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,185,1,0,0,0,1074,1077,
        3,202,101,0,1075,1077,3,174,87,0,1076,1074,1,0,0,0,1076,1075,1,0,
        0,0,1077,187,1,0,0,0,1078,1079,3,196,98,0,1079,189,1,0,0,0,1080,
        1081,3,196,98,0,1081,191,1,0,0,0,1082,1083,3,196,98,0,1083,193,1,
        0,0,0,1084,1085,7,8,0,0,1085,195,1,0,0,0,1086,1087,3,194,97,0,1087,
        197,1,0,0,0,1088,1093,3,196,98,0,1089,1090,5,122,0,0,1090,1092,3,
        196,98,0,1091,1089,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,0,1093,
        1094,1,0,0,0,1094,199,1,0,0,0,1095,1093,1,0,0,0,1096,1097,5,125,
        0,0,1097,1098,3,198,99,0,1098,1099,5,126,0,0,1099,201,1,0,0,0,1100,
        1102,3,196,98,0,1101,1103,3,206,103,0,1102,1101,1,0,0,0,1102,1103,
        1,0,0,0,1103,203,1,0,0,0,1104,1109,3,196,98,0,1105,1107,3,206,103,
        0,1106,1108,3,206,103,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,
        1110,1,0,0,0,1109,1105,1,0,0,0,1109,1110,1,0,0,0,1110,205,1,0,0,
        0,1111,1112,5,121,0,0,1112,1113,3,196,98,0,1113,207,1,0,0,0,149,
        212,217,220,223,259,265,275,288,297,302,304,309,314,320,326,328,
        339,346,348,369,374,379,383,386,391,398,400,405,409,412,415,421,
        427,430,433,436,446,448,454,466,473,479,482,487,491,495,502,510,
        513,517,520,528,530,535,543,546,552,555,565,567,574,583,592,595,
        613,616,622,626,629,635,639,642,647,650,653,659,665,670,673,675,
        678,686,692,696,699,704,708,721,724,729,732,735,741,749,758,761,
        770,773,783,786,795,800,813,816,821,824,827,832,839,847,850,858,
        861,868,875,879,882,888,891,894,900,909,919,922,925,930,957,960,
        965,971,981,988,1000,1003,1009,1018,1026,1033,1038,1057,1060,1064,
        1068,1072,1076,1093,1102,1107,1109
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "':='", 
                     "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", 
                     "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'_'", "'['", 
                     "']'", "'->'", "'->>'", "'@'", "<INVALID>", "'@@'", 
                     "'\\N'", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", "FILTER_SYMBOL", 
                      "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", "VALIDATION_SYMBOL", 
                      "DEFAULT_SYMBOL", "USER_SYMBOL", "OPTIONS_SYMBOL", 
                      "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", "PAGE_SYMBOL", 
                      "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", "UPDATE_SYMBOL", 
                      "NULL_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", "SET_SYMBOL", 
                      "IDENTIFIED_SYMBOL", "BY_SYMBOL", "ROLE_SYMBOL", "TO_SYMBOL", 
                      "CONFIGURE_SYMBOL", "REST_SYMBOL", "METADATA_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "RELATIONAL_SYMBOL", 
                      "DUALITY_SYMBOL", "VIEWS_SYMBOL", "PROCEDURES_SYMBOL", 
                      "PARAMETERS_SYMBOL", "RESULT_SYMBOL", "ENABLED_SYMBOL", 
                      "DISABLED_SYMBOL", "PROTOCOL_SYMBOL", "HTTP_SYMBOL", 
                      "HTTPS_SYMBOL", "COMMENTS_SYMBOL", "REQUEST_SYMBOL", 
                      "REDIRECTION_SYMBOL", "MANAGEMENT_SYMBOL", "AVAILABLE_SYMBOL", 
                      "REQUIRED_SYMBOL", "ITEMS_SYMBOL", "PER_SYMBOL", "CONTENT_SYMBOL", 
                      "MEDIA_SYMBOL", "AUTODETECT_SYMBOL", "FEED_SYMBOL", 
                      "ITEM_SYMBOL", "SETS_SYMBOL", "AUTH_SYMBOL", "APPS_SYMBOL", 
                      "APP_SYMBOL", "VENDOR_SYMBOL", "MRS_SYMBOL", "MYSQL_SYMBOL", 
                      "USERS_SYMBOL", "ALLOW_SYMBOL", "REGISTER_SYMBOL", 
                      "CLASS_SYMBOL", "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", 
                      "AT_OUT_SYMBOL", "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", 
                      "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", 
                      "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", 
                      "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", 
                      "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
                      "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
                      "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
                      "PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", 
                      "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", 
                      "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
                      "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", 
                      "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", 
                      "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", 
                      "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", 
                      "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", 
                      "CLOSE_SQUARE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_comments = 5
    RULE_authenticationRequired = 6
    RULE_itemsPerPage = 7
    RULE_itemsPerPageNumber = 8
    RULE_serviceSchemaSelector = 9
    RULE_configureRestMetadataStatement = 10
    RULE_restMetadataOptions = 11
    RULE_updateIfAvailable = 12
    RULE_createRestServiceStatement = 13
    RULE_restServiceOptions = 14
    RULE_restProtocol = 15
    RULE_restAuthentication = 16
    RULE_authPath = 17
    RULE_authRedirection = 18
    RULE_authValidation = 19
    RULE_authPageContent = 20
    RULE_userManagementSchema = 21
    RULE_createRestSchemaStatement = 22
    RULE_restSchemaOptions = 23
    RULE_createRestViewStatement = 24
    RULE_restObjectOptions = 25
    RULE_restViewMediaType = 26
    RULE_restViewFormat = 27
    RULE_restViewAuthenticationProcedure = 28
    RULE_createRestProcedureStatement = 29
    RULE_restProcedureResult = 30
    RULE_createRestContentSetStatement = 31
    RULE_directoryFilePath = 32
    RULE_restContentSetOptions = 33
    RULE_createRestAuthAppStatement = 34
    RULE_authAppName = 35
    RULE_vendorName = 36
    RULE_restAuthAppOptions = 37
    RULE_allowNewUsersToRegister = 38
    RULE_defaultRole = 39
    RULE_createRestUserStatement = 40
    RULE_userName = 41
    RULE_userPassword = 42
    RULE_alterRestServiceStatement = 43
    RULE_alterRestSchemaStatement = 44
    RULE_alterRestViewStatement = 45
    RULE_alterRestProcedureStatement = 46
    RULE_dropRestServiceStatement = 47
    RULE_dropRestSchemaStatement = 48
    RULE_dropRestDualityViewStatement = 49
    RULE_dropRestProcedureStatement = 50
    RULE_dropRestContentSetStatement = 51
    RULE_dropRestAuthAppStatement = 52
    RULE_dropRestUserStatement = 53
    RULE_useStatement = 54
    RULE_serviceAndSchemaRequestPaths = 55
    RULE_showRestMetadataStatusStatement = 56
    RULE_showRestServicesStatement = 57
    RULE_showRestSchemasStatement = 58
    RULE_showRestViewsStatement = 59
    RULE_showRestProceduresStatement = 60
    RULE_showRestContentSetsStatement = 61
    RULE_showRestAuthAppsStatement = 62
    RULE_showCreateRestServiceStatement = 63
    RULE_showCreateRestSchemaStatement = 64
    RULE_showCreateRestViewStatement = 65
    RULE_showCreateRestProcedureStatement = 66
    RULE_showCreateRestAuthAppStatement = 67
    RULE_serviceRequestPath = 68
    RULE_newServiceRequestPath = 69
    RULE_schemaRequestPath = 70
    RULE_newSchemaRequestPath = 71
    RULE_viewRequestPath = 72
    RULE_newViewRequestPath = 73
    RULE_restObjectName = 74
    RULE_restResultName = 75
    RULE_procedureRequestPath = 76
    RULE_newProcedureRequestPath = 77
    RULE_contentSetRequestPath = 78
    RULE_dottedIdentifier = 79
    RULE_hostAndPortIdentifier = 80
    RULE_requestPathIdentifier = 81
    RULE_quotedText = 82
    RULE_jsonObj = 83
    RULE_jsonPair = 84
    RULE_jsonArr = 85
    RULE_jsonValue = 86
    RULE_graphQlObj = 87
    RULE_graphQlCrudOptions = 88
    RULE_graphQlPair = 89
    RULE_graphKeyValue = 90
    RULE_graphQlReduceToValue = 91
    RULE_graphQlDatatypeValue = 92
    RULE_graphQlValue = 93
    RULE_schemaName = 94
    RULE_viewName = 95
    RULE_procedureName = 96
    RULE_pureIdentifier = 97
    RULE_identifier = 98
    RULE_identifierList = 99
    RULE_identifierListWithParentheses = 100
    RULE_qualifiedIdentifier = 101
    RULE_simpleIdentifier = 102
    RULE_dotIdentifier = 103

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "restProtocol", "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restObjectOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "createRestAuthAppStatement", 
                   "authAppName", "vendorName", "restAuthAppOptions", "allowNewUsersToRegister", 
                   "defaultRole", "createRestUserStatement", "userName", 
                   "userPassword", "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestDualityViewStatement", "dropRestProcedureStatement", 
                   "dropRestContentSetStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "useStatement", "serviceAndSchemaRequestPaths", 
                   "showRestMetadataStatusStatement", "showRestServicesStatement", 
                   "showRestSchemasStatement", "showRestViewsStatement", 
                   "showRestProceduresStatement", "showRestContentSetsStatement", 
                   "showRestAuthAppsStatement", "showCreateRestServiceStatement", 
                   "showCreateRestSchemaStatement", "showCreateRestViewStatement", 
                   "showCreateRestProcedureStatement", "showCreateRestAuthAppStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaRequestPath", 
                   "newSchemaRequestPath", "viewRequestPath", "newViewRequestPath", 
                   "restObjectName", "restResultName", "procedureRequestPath", 
                   "newProcedureRequestPath", "contentSetRequestPath", "dottedIdentifier", 
                   "hostAndPortIdentifier", "requestPathIdentifier", "quotedText", 
                   "jsonObj", "jsonPair", "jsonArr", "jsonValue", "graphQlObj", 
                   "graphQlCrudOptions", "graphQlPair", "graphKeyValue", 
                   "graphQlReduceToValue", "graphQlDatatypeValue", "graphQlValue", 
                   "schemaName", "viewName", "procedureName", "pureIdentifier", 
                   "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    DROP_SYMBOL=16
    USE_SYMBOL=17
    AS_SYMBOL=18
    FILTER_SYMBOL=19
    AUTHENTICATION_SYMBOL=20
    PATH_SYMBOL=21
    VALIDATION_SYMBOL=22
    DEFAULT_SYMBOL=23
    USER_SYMBOL=24
    OPTIONS_SYMBOL=25
    IF_SYMBOL=26
    NOT_SYMBOL=27
    EXISTS_SYMBOL=28
    PAGE_SYMBOL=29
    HOST_SYMBOL=30
    TYPE_SYMBOL=31
    FORMAT_SYMBOL=32
    UPDATE_SYMBOL=33
    NULL_SYMBOL=34
    TRUE_SYMBOL=35
    FALSE_SYMBOL=36
    SET_SYMBOL=37
    IDENTIFIED_SYMBOL=38
    BY_SYMBOL=39
    ROLE_SYMBOL=40
    TO_SYMBOL=41
    CONFIGURE_SYMBOL=42
    REST_SYMBOL=43
    METADATA_SYMBOL=44
    SERVICES_SYMBOL=45
    SERVICE_SYMBOL=46
    RELATIONAL_SYMBOL=47
    DUALITY_SYMBOL=48
    VIEWS_SYMBOL=49
    PROCEDURES_SYMBOL=50
    PARAMETERS_SYMBOL=51
    RESULT_SYMBOL=52
    ENABLED_SYMBOL=53
    DISABLED_SYMBOL=54
    PROTOCOL_SYMBOL=55
    HTTP_SYMBOL=56
    HTTPS_SYMBOL=57
    COMMENTS_SYMBOL=58
    REQUEST_SYMBOL=59
    REDIRECTION_SYMBOL=60
    MANAGEMENT_SYMBOL=61
    AVAILABLE_SYMBOL=62
    REQUIRED_SYMBOL=63
    ITEMS_SYMBOL=64
    PER_SYMBOL=65
    CONTENT_SYMBOL=66
    MEDIA_SYMBOL=67
    AUTODETECT_SYMBOL=68
    FEED_SYMBOL=69
    ITEM_SYMBOL=70
    SETS_SYMBOL=71
    AUTH_SYMBOL=72
    APPS_SYMBOL=73
    APP_SYMBOL=74
    VENDOR_SYMBOL=75
    MRS_SYMBOL=76
    MYSQL_SYMBOL=77
    USERS_SYMBOL=78
    ALLOW_SYMBOL=79
    REGISTER_SYMBOL=80
    CLASS_SYMBOL=81
    AT_INOUT_SYMBOL=82
    AT_IN_SYMBOL=83
    AT_OUT_SYMBOL=84
    AT_NOCHECK_SYMBOL=85
    AT_NOUPDATE_SYMBOL=86
    AT_SORTABLE_SYMBOL=87
    AT_NOFILTERING_SYMBOL=88
    AT_ROWOWNERSHIP_SYMBOL=89
    AT_UNNEST_SYMBOL=90
    AT_DATATYPE_SYMBOL=91
    AT_SELECT_SYMBOL=92
    AT_NOSELECT_SYMBOL=93
    AT_INSERT_SYMBOL=94
    AT_NOINSERT_SYMBOL=95
    AT_UPDATE_SYMBOL=96
    AT_DELETE_SYMBOL=97
    AT_NODELETE_SYMBOL=98
    EQUAL_OPERATOR=99
    ASSIGN_OPERATOR=100
    NULL_SAFE_EQUAL_OPERATOR=101
    GREATER_OR_EQUAL_OPERATOR=102
    GREATER_THAN_OPERATOR=103
    LESS_OR_EQUAL_OPERATOR=104
    LESS_THAN_OPERATOR=105
    NOT_EQUAL_OPERATOR=106
    PLUS_OPERATOR=107
    MINUS_OPERATOR=108
    MULT_OPERATOR=109
    DIV_OPERATOR=110
    MOD_OPERATOR=111
    LOGICAL_NOT_OPERATOR=112
    BITWISE_NOT_OPERATOR=113
    SHIFT_LEFT_OPERATOR=114
    SHIFT_RIGHT_OPERATOR=115
    LOGICAL_AND_OPERATOR=116
    BITWISE_AND_OPERATOR=117
    BITWISE_XOR_OPERATOR=118
    LOGICAL_OR_OPERATOR=119
    BITWISE_OR_OPERATOR=120
    DOT_SYMBOL=121
    COMMA_SYMBOL=122
    SEMICOLON_SYMBOL=123
    COLON_SYMBOL=124
    OPEN_PAR_SYMBOL=125
    CLOSE_PAR_SYMBOL=126
    OPEN_CURLY_SYMBOL=127
    CLOSE_CURLY_SYMBOL=128
    UNDERLINE_SYMBOL=129
    OPEN_SQUARE_SYMBOL=130
    CLOSE_SQUARE_SYMBOL=131
    JSON_SEPARATOR_SYMBOL=132
    JSON_UNQUOTED_SEPARATOR_SYMBOL=133
    AT_SIGN_SYMBOL=134
    AT_TEXT_SUFFIX=135
    AT_AT_SIGN_SYMBOL=136
    NULL2_SYMBOL=137
    PARAM_MARKER=138
    HEX_NUMBER=139
    BIN_NUMBER=140
    INT_NUMBER=141
    DECIMAL_NUMBER=142
    FLOAT_NUMBER=143
    WHITESPACE=144
    INVALID_INPUT=145
    IDENTIFIER=146
    NCHAR_TEXT=147
    BACK_TICK_QUOTED_ID=148
    DOUBLE_QUOTED_TEXT=149
    SINGLE_QUOTED_TEXT=150
    BLOCK_COMMENT=151
    POUND_COMMENT=152
    DASHDASH_COMMENT=153
    WS=154
    NOT_EQUAL2_OPERATOR=155

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4398046707762) != 0):
                self.state = 208
                self.mrsStatement()
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 210 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 209
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 212 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==123):
                                break

                        self.state = 214
                        self.mrsStatement() 
                    self.state = 219
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 222
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 225
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 227
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 228
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 229
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 230
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 231
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 232
                self.createRestContentSetStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 233
                self.createRestAuthAppStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 234
                self.createRestUserStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 235
                self.alterRestServiceStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 236
                self.alterRestSchemaStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 237
                self.alterRestViewStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 238
                self.alterRestProcedureStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 239
                self.dropRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 240
                self.dropRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 241
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 242
                self.dropRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 243
                self.dropRestContentSetStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 244
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 245
                self.dropRestUserStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 246
                self.useStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 247
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 248
                self.showRestServicesStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 249
                self.showRestSchemasStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 250
                self.showRestViewsStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 251
                self.showRestProceduresStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 252
                self.showRestContentSetsStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 253
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 254
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 255
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 256
                self.showCreateRestViewStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 257
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 258
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            _la = self._input.LA(1)
            if not(_la==53 or _la==54):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149, 150]:
                self.state = 263
                self.quotedText()
                pass
            elif token in [23]:
                self.state = 264
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 268
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 271
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 274
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 277
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 280
            self.match(MRSParser.PER_SYMBOL)
            self.state = 281
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 282
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 286
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 287
                self.serviceRequestPath()


            self.state = 290
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 291
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 294
            self.match(MRSParser.REST_SYMBOL)
            self.state = 295
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27021606387712000) != 0):
                self.state = 296
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 302 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 302
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54]:
                    self.state = 299
                    self.enabledDisabled()
                    pass
                elif token in [25]:
                    self.state = 300
                    self.jsonOptions()
                    pass
                elif token in [33]:
                    self.state = 301
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 304 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 27021606387712000) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 307
                self.match(MRSParser.IF_SYMBOL)
                self.state = 308
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 312
                self.match(MRSParser.OR_SYMBOL)
                self.state = 313
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 316
            self.match(MRSParser.REST_SYMBOL)
            self.state = 317
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 318
            self.serviceRequestPath()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 315251973950537728) != 0):
                self.state = 319
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 326
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54]:
                    self.state = 322
                    self.enabledDisabled()
                    pass
                elif token in [20]:
                    self.state = 323
                    self.restAuthentication()
                    pass
                elif token in [25]:
                    self.state = 324
                    self.jsonOptions()
                    pass
                elif token in [58]:
                    self.state = 325
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 315251973950537728) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 331
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 332
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 333
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 334
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 335
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 336
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 337
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 338
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152921505150009344) != 0):
                self.state = 346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [21]:
                    self.state = 342
                    self.authPath()
                    pass
                elif token in [60]:
                    self.state = 343
                    self.authRedirection()
                    pass
                elif token in [22]:
                    self.state = 344
                    self.authValidation()
                    pass
                elif token in [29]:
                    self.state = 345
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 352
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 355
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 358
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 361
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 362
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(MRSParser.USER_SYMBOL)
            self.state = 365
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 366
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 148]:
                self.state = 367
                self.schemaName()
                pass
            elif token in [23]:
                self.state = 368
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 372
                self.match(MRSParser.OR_SYMBOL)
                self.state = 373
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 376
            self.match(MRSParser.REST_SYMBOL)
            self.state = 377
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 378
                self.schemaRequestPath()


            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 381
                self.match(MRSParser.ON_SYMBOL)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 382
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 385
                self.serviceRequestPath()


            self.state = 388
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 389
            self.schemaName()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 17892833755169) != 0):
                self.state = 390
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 398
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54]:
                    self.state = 393
                    self.enabledDisabled()
                    pass
                elif token in [20]:
                    self.state = 394
                    self.authenticationRequired()
                    pass
                elif token in [64]:
                    self.state = 395
                    self.itemsPerPage()
                    pass
                elif token in [25]:
                    self.state = 396
                    self.jsonOptions()
                    pass
                elif token in [58]:
                    self.state = 397
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 17892833755169) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 403
                self.match(MRSParser.OR_SYMBOL)
                self.state = 404
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 407
            self.match(MRSParser.REST_SYMBOL)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 408
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 411
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 414
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 417
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 418
            self.viewRequestPath()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 419
                self.match(MRSParser.ON_SYMBOL)
                self.state = 420
                self.serviceSchemaSelector()


            self.state = 423
            self.match(MRSParser.AS_SYMBOL)
            self.state = 424
            self.qualifiedIdentifier()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 425
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 426
                self.restObjectName()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 8129) != 0):
                self.state = 429
                self.graphQlCrudOptions()


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 432
                self.graphQlObj()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 158630322114593) != 0):
                self.state = 435
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 438
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 439
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 440
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 441
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 442
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 443
                    self.restViewMediaType()
                    pass

                elif la_ == 7:
                    self.state = 444
                    self.restViewFormat()
                    pass

                elif la_ == 8:
                    self.state = 445
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 448 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 158630322114593) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 451
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149, 150]:
                self.state = 452
                self.quotedText()
                pass
            elif token in [68]:
                self.state = 453
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 457
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 460
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 461
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 464
                self.match(MRSParser.OR_SYMBOL)
                self.state = 465
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 468
            self.match(MRSParser.REST_SYMBOL)
            self.state = 469
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 470
            self.procedureRequestPath()
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 471
                self.match(MRSParser.ON_SYMBOL)
                self.state = 472
                self.serviceSchemaSelector()


            self.state = 475
            self.match(MRSParser.AS_SYMBOL)
            self.state = 476
            self.qualifiedIdentifier()
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 477
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==148:
                    self.state = 478
                    self.restObjectName()


                self.state = 481
                self.graphQlObj()


            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 484
                self.restProcedureResult()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 158630322114593) != 0):
                self.state = 490
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restProcedureResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146 or _la==148:
                self.state = 494
                self.restResultName()


            self.state = 497
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 500
                self.match(MRSParser.OR_SYMBOL)
                self.state = 501
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 504
            self.match(MRSParser.REST_SYMBOL)
            self.state = 505
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 506
            self.match(MRSParser.SET_SYMBOL)
            self.state = 507
            self.contentSetRequestPath()
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 508
                self.match(MRSParser.ON_SYMBOL)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 509
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 512
                self.serviceRequestPath()


            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 515
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 516
                self.directoryFilePath()


            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 315251973950537728) != 0):
                self.state = 519
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 528
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54]:
                    self.state = 524
                    self.enabledDisabled()
                    pass
                elif token in [20]:
                    self.state = 525
                    self.authenticationRequired()
                    pass
                elif token in [25]:
                    self.state = 526
                    self.jsonOptions()
                    pass
                elif token in [58]:
                    self.state = 527
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 530 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 315251973950537728) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 533
                self.match(MRSParser.OR_SYMBOL)
                self.state = 534
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 537
            self.match(MRSParser.REST_SYMBOL)
            self.state = 538
            _la = self._input.LA(1)
            if not(_la==20 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 539
            self.match(MRSParser.APP_SYMBOL)
            self.state = 540
            self.authAppName()
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 541
                self.match(MRSParser.ON_SYMBOL)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 542
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 545
                self.serviceRequestPath()


            self.state = 548
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [76]:
                self.state = 549
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [77]:
                self.state = 550
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [149, 150]:
                self.state = 551
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 72057631618891777) != 0):
                self.state = 554
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 565
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54]:
                    self.state = 561
                    self.enabledDisabled()
                    pass
                elif token in [58]:
                    self.state = 562
                    self.comments()
                    pass
                elif token in [79]:
                    self.state = 563
                    self.allowNewUsersToRegister()
                    pass
                elif token in [23]:
                    self.state = 564
                    self.defaultRole()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 567 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & 72057631618891777) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 570
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 571
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 572
                self.match(MRSParser.TO_SYMBOL)
                self.state = 573
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 577
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 578
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 581
                self.match(MRSParser.OR_SYMBOL)
                self.state = 582
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 585
            self.match(MRSParser.REST_SYMBOL)
            self.state = 586
            self.match(MRSParser.USER_SYMBOL)
            self.state = 587
            self.userName()
            self.state = 588
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 589
            self.authAppName()
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 590
                self.match(MRSParser.ON_SYMBOL)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 591
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 594
                self.serviceRequestPath()


            self.state = 597
            self.match(MRSParser.IDENTIFIED_SYMBOL)
            self.state = 598
            self.match(MRSParser.BY_SYMBOL)
            self.state = 599
            self.userPassword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 606
            self.match(MRSParser.REST_SYMBOL)
            self.state = 607
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 608
            self.serviceRequestPath()
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 609
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 610
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 611
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 612
                self.newServiceRequestPath()


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 315251973950537728) != 0):
                self.state = 615
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 619
            self.match(MRSParser.REST_SYMBOL)
            self.state = 620
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 621
                self.schemaRequestPath()


            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 624
                self.match(MRSParser.ON_SYMBOL)
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 625
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 628
                self.serviceRequestPath()


            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 631
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 632
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 633
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 634
                self.newSchemaRequestPath()


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 637
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 638
                self.schemaName()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 17892833755169) != 0):
                self.state = 641
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 645
            self.match(MRSParser.REST_SYMBOL)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 646
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 649
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 652
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 655
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 656
            self.viewRequestPath()
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 657
                self.match(MRSParser.ON_SYMBOL)
                self.state = 658
                self.serviceSchemaSelector()


            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 661
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 662
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 663
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 664
                self.newViewRequestPath()


            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 667
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 668
                self.restObjectName()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 8129) != 0):
                    self.state = 669
                    self.graphQlCrudOptions()


                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 672
                    self.graphQlObj()




            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 158630322114593) != 0):
                self.state = 677
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 681
            self.match(MRSParser.REST_SYMBOL)
            self.state = 682
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 683
            self.procedureRequestPath()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 684
                self.match(MRSParser.ON_SYMBOL)
                self.state = 685
                self.serviceSchemaSelector()


            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 688
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 689
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 690
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 691
                self.newProcedureRequestPath()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 694
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==148:
                    self.state = 695
                    self.restObjectName()


                self.state = 698
                self.graphQlObj()


            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 701
                self.restProcedureResult()
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 158630322114593) != 0):
                self.state = 707
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 711
            self.match(MRSParser.REST_SYMBOL)
            self.state = 712
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 713
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 716
            self.match(MRSParser.REST_SYMBOL)
            self.state = 717
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 718
            self.schemaRequestPath()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 719
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 720
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 723
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 727
            self.match(MRSParser.REST_SYMBOL)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 728
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 731
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 734
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 737
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 738
            self.viewRequestPath()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 739
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 740
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 744
            self.match(MRSParser.REST_SYMBOL)
            self.state = 745
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 746
            self.procedureRequestPath()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 747
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 748
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 752
            self.match(MRSParser.REST_SYMBOL)
            self.state = 753
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 754
            self.match(MRSParser.SET_SYMBOL)
            self.state = 755
            self.contentSetRequestPath()
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 756
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 757
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 760
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 764
            self.match(MRSParser.REST_SYMBOL)
            self.state = 765
            _la = self._input.LA(1)
            if not(_la==20 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 766
            self.match(MRSParser.APP_SYMBOL)
            self.state = 767
            self.authAppName()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 768
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 769
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 772
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dropRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 776
            self.match(MRSParser.REST_SYMBOL)
            self.state = 777
            self.match(MRSParser.USER_SYMBOL)
            self.state = 778
            self.userName()
            self.state = 779
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 780
            self.authAppName()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 781
                self.match(MRSParser.ON_SYMBOL)
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 782
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 785
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(MRSParser.USE_SYMBOL)
            self.state = 789
            self.match(MRSParser.REST_SYMBOL)
            self.state = 790
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 793
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 798
            self.match(MRSParser.REST_SYMBOL)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==44:
                self.state = 799
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 802
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 805
            self.match(MRSParser.REST_SYMBOL)
            self.state = 806
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 809
            self.match(MRSParser.REST_SYMBOL)
            self.state = 810
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 811
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 812
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 815
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 819
            self.match(MRSParser.REST_SYMBOL)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 820
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 823
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 826
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 829
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 830
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 831
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 835
            self.match(MRSParser.REST_SYMBOL)
            self.state = 836
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 837
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 838
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 842
            self.match(MRSParser.REST_SYMBOL)
            self.state = 843
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 844
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 845
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 846
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 849
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 853
            self.match(MRSParser.REST_SYMBOL)
            self.state = 854
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 855
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 856
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 857
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 860
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 864
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 865
            self.match(MRSParser.REST_SYMBOL)
            self.state = 866
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 343597383681) != 0):
                self.state = 867
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 871
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 872
            self.match(MRSParser.REST_SYMBOL)
            self.state = 873
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 874
                self.schemaRequestPath()


            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 877
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 878
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 881
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 885
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 886
            self.match(MRSParser.REST_SYMBOL)
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 887
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 890
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 893
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 896
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 897
            self.viewRequestPath()
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 898
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 899
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 903
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 904
            self.match(MRSParser.REST_SYMBOL)
            self.state = 905
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 906
            self.procedureRequestPath()
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 907
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 908
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_showCreateRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 912
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 913
            self.match(MRSParser.REST_SYMBOL)
            self.state = 914
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 915
            self.match(MRSParser.APP_SYMBOL)
            self.state = 916
            self.authAppName()
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 917
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 918
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 921
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146 or _la==148:
                self.state = 924
                self.hostAndPortIdentifier()


            self.state = 927
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==146 or _la==148:
                self.state = 929
                self.hostAndPortIdentifier()


            self.state = 932
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.identifier()
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==121:
                    self.state = 954
                    self.dotIdentifier()
                    self.state = 959
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.dottedIdentifier()
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==124:
                self.state = 963
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 964
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.match(MRSParser.DIV_OPERATOR)
            self.state = 968
            self.dottedIdentifier()
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 969
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 970
                self.dottedIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==149 or _la==150):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 976
                self.jsonPair()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==122:
                    self.state = 977
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 978
                    self.jsonPair()
                    self.state = 983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 984
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 987
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 991
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 992
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 120259084288) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & 4483955294211) != 0):
                self.state = 995
                self.jsonValue()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==122:
                    self.state = 996
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 997
                    self.jsonValue()
                    self.state = 1002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1005
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [107, 108, 143]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==107 or _la==108:
                    self.state = 1008
                    _la = self._input.LA(1)
                    if not(_la==107 or _la==108):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1011
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1012
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1013
                self.jsonObj()
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1014
                self.jsonArr()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1015
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1016
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1017
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1021
                self.graphQlPair()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==122:
                    self.state = 1022
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1023
                    self.graphQlPair()
                    self.state = 1028
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1029
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1031
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1032
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SELECT_SYMBOL, i)

        def AT_NOSELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOSELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOSELECT_SYMBOL, i)

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1035
                _la = self._input.LA(1)
                if not(((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 8129) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1038 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 8129) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphKeyValue(self):
            return self.getTypedRuleContext(MRSParser.GraphKeyValueContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.graphKeyValue()
            self.state = 1041
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1042
            self.qualifiedIdentifier()
            self.state = 1057
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.state = 1043
                self.match(MRSParser.AT_IN_SYMBOL)
                pass
            elif token in [84]:
                self.state = 1044
                self.match(MRSParser.AT_OUT_SYMBOL)
                pass
            elif token in [82]:
                self.state = 1045
                self.match(MRSParser.AT_INOUT_SYMBOL)
                pass
            elif token in [85]:
                self.state = 1046
                self.match(MRSParser.AT_NOCHECK_SYMBOL)
                pass
            elif token in [87]:
                self.state = 1047
                self.match(MRSParser.AT_SORTABLE_SYMBOL)
                pass
            elif token in [88]:
                self.state = 1048
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)
                pass
            elif token in [89]:
                self.state = 1049
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
                pass
            elif token in [90]:
                self.state = 1050
                self.match(MRSParser.AT_UNNEST_SYMBOL)
                pass
            elif token in [91]:
                self.state = 1051
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1052
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1053
                self.graphQlDatatypeValue()
                self.state = 1054
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [86, 92, 93, 94, 95, 96, 97, 98]:
                self.state = 1056
                self.graphQlCrudOptions()
                pass
            elif token in [122, 127, 128]:
                pass
            else:
                pass
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1059
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphKeyValue" ):
                listener.enterGraphKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphKeyValue" ):
                listener.exitGraphKeyValue(self)




    def graphKeyValue(self):

        localctx = MRSParser.GraphKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graphKeyValue)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [146, 148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [146, 148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [146, 148]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_graphQlValue)
        try:
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146, 148]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.qualifiedIdentifier()
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1075
                self.graphQlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            _la = self._input.LA(1)
            if not(_la==146 or _la==148):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.identifier()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==122:
                self.state = 1089
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1090
                self.identifier()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1097
            self.identifierList()
            self.state = 1098
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.identifier()
            self.state = 1102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1101
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.identifier()
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1105
                self.dotIdentifier()
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 1106
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1112
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





