# Copyright (c) 2023, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,157,1201,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,1,0,1,0,4,0,227,8,0,11,0,12,0,228,
        1,0,5,0,232,8,0,10,0,12,0,235,9,0,3,0,237,8,0,1,0,3,0,240,8,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,3,1,280,8,1,1,2,1,2,1,3,1,3,3,3,286,8,3,1,
        4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,3,6,296,8,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,3,9,309,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        3,10,318,8,10,1,11,1,11,1,11,4,11,323,8,11,11,11,12,11,324,1,12,
        1,12,1,12,3,12,330,8,12,1,13,1,13,1,13,3,13,335,8,13,1,13,1,13,1,
        13,1,13,3,13,341,8,13,1,14,1,14,1,14,1,14,4,14,347,8,14,11,14,12,
        14,348,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,360,8,15,
        1,16,1,16,1,16,1,16,1,16,5,16,367,8,16,10,16,12,16,370,9,16,1,17,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,3,21,390,8,21,1,22,1,22,1,22,3,22,395,8,22,1,
        22,1,22,1,22,3,22,400,8,22,1,22,1,22,3,22,404,8,22,1,22,3,22,407,
        8,22,1,22,1,22,1,22,3,22,412,8,22,1,23,1,23,1,23,1,23,1,23,4,23,
        419,8,23,11,23,12,23,420,1,24,1,24,1,24,3,24,426,8,24,1,24,1,24,
        3,24,430,8,24,1,24,3,24,433,8,24,1,24,3,24,436,8,24,1,24,1,24,1,
        24,1,24,3,24,442,8,24,1,24,1,24,1,24,1,24,3,24,448,8,24,1,24,3,24,
        451,8,24,1,24,3,24,454,8,24,1,24,3,24,457,8,24,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,4,25,467,8,25,11,25,12,25,468,1,26,1,26,1,
        26,1,26,3,26,475,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,
        29,1,29,3,29,487,8,29,1,29,1,29,1,29,1,29,1,29,3,29,494,8,29,1,29,
        1,29,1,29,1,29,3,29,500,8,29,1,29,3,29,503,8,29,1,29,5,29,506,8,
        29,10,29,12,29,509,9,29,1,29,3,29,512,8,29,1,30,1,30,3,30,516,8,
        30,1,30,1,30,1,31,1,31,1,31,3,31,523,8,31,1,31,1,31,1,31,1,31,1,
        31,3,31,530,8,31,1,31,1,31,1,31,1,31,3,31,536,8,31,1,31,3,31,539,
        8,31,1,31,3,31,542,8,31,1,31,3,31,545,8,31,1,32,1,32,3,32,549,8,
        32,1,32,1,32,1,33,1,33,1,33,3,33,556,8,33,1,33,1,33,1,33,1,33,1,
        33,1,33,3,33,564,8,33,1,33,3,33,567,8,33,1,33,1,33,3,33,571,8,33,
        1,33,3,33,574,8,33,1,34,1,34,1,35,1,35,1,35,1,35,4,35,582,8,35,11,
        35,12,35,583,1,36,1,36,1,36,3,36,589,8,36,1,36,1,36,1,36,1,36,1,
        36,1,36,3,36,597,8,36,1,36,3,36,600,8,36,1,36,1,36,1,36,1,36,3,36,
        606,8,36,1,36,3,36,609,8,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,
        39,4,39,619,8,39,11,39,12,39,620,1,40,1,40,1,40,1,40,1,40,3,40,628,
        8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,3,42,637,8,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,3,42,646,8,42,1,42,3,42,649,8,42,1,42,1,
        42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,3,45,667,8,45,1,45,3,45,670,8,45,1,46,1,46,1,46,1,46,3,46,
        676,8,46,1,46,1,46,3,46,680,8,46,1,46,3,46,683,8,46,1,46,1,46,1,
        46,1,46,3,46,689,8,46,1,46,1,46,3,46,693,8,46,1,46,3,46,696,8,46,
        1,47,1,47,1,47,3,47,701,8,47,1,47,3,47,704,8,47,1,47,3,47,707,8,
        47,1,47,1,47,1,47,1,47,3,47,713,8,47,1,47,1,47,1,47,1,47,3,47,719,
        8,47,1,47,1,47,1,47,3,47,724,8,47,1,47,3,47,727,8,47,3,47,729,8,
        47,1,47,3,47,732,8,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,740,8,48,
        1,48,1,48,1,48,1,48,3,48,746,8,48,1,48,1,48,3,48,750,8,48,1,48,3,
        48,753,8,48,1,48,5,48,756,8,48,10,48,12,48,759,9,48,1,48,3,48,762,
        8,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
        775,8,50,1,50,3,50,778,8,50,1,51,1,51,1,51,3,51,783,8,51,1,51,3,
        51,786,8,51,1,51,3,51,789,8,51,1,51,1,51,1,51,1,51,3,51,795,8,51,
        1,52,1,52,1,52,1,52,1,52,1,52,3,52,803,8,52,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,811,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
        820,8,54,1,54,3,54,823,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,
        55,832,8,55,1,55,3,55,835,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,3,56,845,8,56,1,56,3,56,848,8,56,1,57,1,57,1,57,1,57,1,58,1,
        58,1,58,3,58,857,8,58,1,59,1,59,1,59,3,59,862,8,59,1,59,1,59,1,60,
        1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,3,61,875,8,61,1,61,3,61,
        878,8,61,1,62,1,62,1,62,3,62,883,8,62,1,62,3,62,886,8,62,1,62,3,
        62,889,8,62,1,62,1,62,1,62,3,62,894,8,62,1,63,1,63,1,63,1,63,1,63,
        3,63,901,8,63,1,64,1,64,1,64,1,64,1,64,3,64,908,8,64,1,65,1,65,1,
        65,1,65,1,65,1,65,3,65,916,8,65,1,65,3,65,919,8,65,1,66,1,66,1,66,
        1,66,1,66,1,66,3,66,927,8,66,1,66,3,66,930,8,66,1,67,1,67,1,67,1,
        67,1,67,3,67,937,8,67,1,68,1,68,1,68,1,68,1,68,3,68,944,8,68,1,68,
        1,68,3,68,948,8,68,1,68,3,68,951,8,68,1,69,1,69,1,69,1,69,3,69,957,
        8,69,1,69,3,69,960,8,69,1,69,3,69,963,8,69,1,69,1,69,1,69,1,69,3,
        69,969,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,978,8,70,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,3,71,987,8,71,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,997,8,72,1,72,3,72,1000,8,72,1,73,3,73,
        1003,8,73,1,73,1,73,1,74,3,74,1008,8,74,1,74,1,74,1,75,1,75,1,76,
        1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,
        1,83,1,83,1,84,1,84,1,85,1,85,1,85,5,85,1035,8,85,10,85,12,85,1038,
        9,85,3,85,1040,8,85,1,86,1,86,1,86,3,86,1045,8,86,1,87,1,87,1,87,
        1,87,3,87,1051,8,87,1,88,1,88,1,89,1,89,1,89,1,89,5,89,1059,8,89,
        10,89,12,89,1062,9,89,1,89,1,89,1,89,1,89,3,89,1068,8,89,1,90,1,
        90,1,90,1,90,1,91,1,91,1,91,1,91,5,91,1078,8,91,10,91,12,91,1081,
        9,91,3,91,1083,8,91,1,91,1,91,1,92,1,92,3,92,1089,8,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,3,92,1098,8,92,1,93,1,93,1,93,1,93,5,93,
        1104,8,93,10,93,12,93,1107,9,93,1,93,1,93,1,93,1,93,3,93,1113,8,
        93,1,94,4,94,1116,8,94,11,94,12,94,1117,1,95,1,95,1,95,1,95,1,95,
        1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,
        1137,8,95,1,95,3,95,1140,8,95,1,96,1,96,1,97,1,97,1,97,3,97,1147,
        8,97,1,98,1,98,3,98,1151,8,98,1,99,1,99,3,99,1155,8,99,1,100,1,100,
        3,100,1159,8,100,1,101,1,101,3,101,1163,8,101,1,102,1,102,1,103,
        1,103,1,104,1,104,1,105,1,105,1,106,1,106,1,107,1,107,1,107,5,107,
        1178,8,107,10,107,12,107,1181,9,107,1,108,1,108,1,108,1,108,1,109,
        1,109,3,109,1189,8,109,1,110,1,110,1,110,3,110,1194,8,110,3,110,
        1196,8,110,1,111,1,111,1,111,1,111,0,0,112,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,0,10,1,0,55,56,2,
        0,69,69,71,72,2,0,21,21,74,74,1,0,9,10,1,0,8,9,1,0,151,152,1,0,109,
        110,2,0,88,88,94,100,12,0,11,16,20,20,22,22,25,26,30,34,41,41,43,
        63,65,66,68,69,71,77,79,80,82,83,2,0,148,148,150,150,1319,0,236,
        1,0,0,0,2,279,1,0,0,0,4,281,1,0,0,0,6,285,1,0,0,0,8,287,1,0,0,0,
        10,290,1,0,0,0,12,293,1,0,0,0,14,299,1,0,0,0,16,304,1,0,0,0,18,308,
        1,0,0,0,20,313,1,0,0,0,22,322,1,0,0,0,24,326,1,0,0,0,26,331,1,0,
        0,0,28,346,1,0,0,0,30,350,1,0,0,0,32,361,1,0,0,0,34,371,1,0,0,0,
        36,374,1,0,0,0,38,377,1,0,0,0,40,380,1,0,0,0,42,384,1,0,0,0,44,391,
        1,0,0,0,46,418,1,0,0,0,48,422,1,0,0,0,50,466,1,0,0,0,52,470,1,0,
        0,0,54,476,1,0,0,0,56,479,1,0,0,0,58,483,1,0,0,0,60,513,1,0,0,0,
        62,519,1,0,0,0,64,546,1,0,0,0,66,552,1,0,0,0,68,575,1,0,0,0,70,581,
        1,0,0,0,72,585,1,0,0,0,74,610,1,0,0,0,76,612,1,0,0,0,78,618,1,0,
        0,0,80,622,1,0,0,0,82,629,1,0,0,0,84,633,1,0,0,0,86,654,1,0,0,0,
        88,656,1,0,0,0,90,658,1,0,0,0,92,671,1,0,0,0,94,697,1,0,0,0,96,733,
        1,0,0,0,98,763,1,0,0,0,100,768,1,0,0,0,102,779,1,0,0,0,104,796,1,
        0,0,0,106,804,1,0,0,0,108,812,1,0,0,0,110,824,1,0,0,0,112,836,1,
        0,0,0,114,849,1,0,0,0,116,856,1,0,0,0,118,858,1,0,0,0,120,865,1,
        0,0,0,122,869,1,0,0,0,124,879,1,0,0,0,126,895,1,0,0,0,128,902,1,
        0,0,0,130,909,1,0,0,0,132,920,1,0,0,0,134,931,1,0,0,0,136,938,1,
        0,0,0,138,952,1,0,0,0,140,970,1,0,0,0,142,979,1,0,0,0,144,988,1,
        0,0,0,146,1002,1,0,0,0,148,1007,1,0,0,0,150,1011,1,0,0,0,152,1013,
        1,0,0,0,154,1015,1,0,0,0,156,1017,1,0,0,0,158,1019,1,0,0,0,160,1021,
        1,0,0,0,162,1023,1,0,0,0,164,1025,1,0,0,0,166,1027,1,0,0,0,168,1029,
        1,0,0,0,170,1039,1,0,0,0,172,1041,1,0,0,0,174,1046,1,0,0,0,176,1052,
        1,0,0,0,178,1067,1,0,0,0,180,1069,1,0,0,0,182,1073,1,0,0,0,184,1097,
        1,0,0,0,186,1112,1,0,0,0,188,1115,1,0,0,0,190,1119,1,0,0,0,192,1141,
        1,0,0,0,194,1146,1,0,0,0,196,1150,1,0,0,0,198,1154,1,0,0,0,200,1158,
        1,0,0,0,202,1162,1,0,0,0,204,1164,1,0,0,0,206,1166,1,0,0,0,208,1168,
        1,0,0,0,210,1170,1,0,0,0,212,1172,1,0,0,0,214,1174,1,0,0,0,216,1182,
        1,0,0,0,218,1186,1,0,0,0,220,1190,1,0,0,0,222,1197,1,0,0,0,224,233,
        3,2,1,0,225,227,5,125,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,
        1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,232,3,2,1,0,231,226,
        1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,237,
        1,0,0,0,235,233,1,0,0,0,236,224,1,0,0,0,236,237,1,0,0,0,237,239,
        1,0,0,0,238,240,5,125,0,0,239,238,1,0,0,0,239,240,1,0,0,0,240,241,
        1,0,0,0,241,242,5,0,0,1,242,1,1,0,0,0,243,280,3,20,10,0,244,280,
        3,26,13,0,245,280,3,44,22,0,246,280,3,48,24,0,247,280,3,58,29,0,
        248,280,3,62,31,0,249,280,3,66,33,0,250,280,3,72,36,0,251,280,3,
        84,42,0,252,280,3,90,45,0,253,280,3,92,46,0,254,280,3,94,47,0,255,
        280,3,96,48,0,256,280,3,98,49,0,257,280,3,100,50,0,258,280,3,102,
        51,0,259,280,3,104,52,0,260,280,3,106,53,0,261,280,3,108,54,0,262,
        280,3,110,55,0,263,280,3,112,56,0,264,280,3,114,57,0,265,280,3,118,
        59,0,266,280,3,120,60,0,267,280,3,122,61,0,268,280,3,124,62,0,269,
        280,3,126,63,0,270,280,3,128,64,0,271,280,3,130,65,0,272,280,3,132,
        66,0,273,280,3,134,67,0,274,280,3,136,68,0,275,280,3,138,69,0,276,
        280,3,140,70,0,277,280,3,142,71,0,278,280,3,144,72,0,279,243,1,0,
        0,0,279,244,1,0,0,0,279,245,1,0,0,0,279,246,1,0,0,0,279,247,1,0,
        0,0,279,248,1,0,0,0,279,249,1,0,0,0,279,250,1,0,0,0,279,251,1,0,
        0,0,279,252,1,0,0,0,279,253,1,0,0,0,279,254,1,0,0,0,279,255,1,0,
        0,0,279,256,1,0,0,0,279,257,1,0,0,0,279,258,1,0,0,0,279,259,1,0,
        0,0,279,260,1,0,0,0,279,261,1,0,0,0,279,262,1,0,0,0,279,263,1,0,
        0,0,279,264,1,0,0,0,279,265,1,0,0,0,279,266,1,0,0,0,279,267,1,0,
        0,0,279,268,1,0,0,0,279,269,1,0,0,0,279,270,1,0,0,0,279,271,1,0,
        0,0,279,272,1,0,0,0,279,273,1,0,0,0,279,274,1,0,0,0,279,275,1,0,
        0,0,279,276,1,0,0,0,279,277,1,0,0,0,279,278,1,0,0,0,280,3,1,0,0,
        0,281,282,7,0,0,0,282,5,1,0,0,0,283,286,3,176,88,0,284,286,5,24,
        0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,7,1,0,0,0,287,288,5,26,0,
        0,288,289,3,184,92,0,289,9,1,0,0,0,290,291,5,60,0,0,291,292,3,176,
        88,0,292,11,1,0,0,0,293,295,5,21,0,0,294,296,5,28,0,0,295,294,1,
        0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,298,5,65,0,0,298,13,1,
        0,0,0,299,300,5,66,0,0,300,301,5,67,0,0,301,302,5,30,0,0,302,303,
        3,16,8,0,303,15,1,0,0,0,304,305,5,143,0,0,305,17,1,0,0,0,306,307,
        5,47,0,0,307,309,3,146,73,0,308,306,1,0,0,0,308,309,1,0,0,0,309,
        310,1,0,0,0,310,311,5,12,0,0,311,312,3,150,75,0,312,19,1,0,0,0,313,
        314,5,43,0,0,314,315,5,44,0,0,315,317,5,45,0,0,316,318,3,22,11,0,
        317,316,1,0,0,0,317,318,1,0,0,0,318,21,1,0,0,0,319,323,3,4,2,0,320,
        323,3,8,4,0,321,323,3,24,12,0,322,319,1,0,0,0,322,320,1,0,0,0,322,
        321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,
        23,1,0,0,0,326,329,5,34,0,0,327,328,5,27,0,0,328,330,5,64,0,0,329,
        327,1,0,0,0,329,330,1,0,0,0,330,25,1,0,0,0,331,334,5,1,0,0,332,333,
        5,2,0,0,333,335,5,3,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,336,
        1,0,0,0,336,337,5,44,0,0,337,338,5,47,0,0,338,340,3,146,73,0,339,
        341,3,28,14,0,340,339,1,0,0,0,340,341,1,0,0,0,341,27,1,0,0,0,342,
        347,3,4,2,0,343,347,3,32,16,0,344,347,3,8,4,0,345,347,3,10,5,0,346,
        342,1,0,0,0,346,343,1,0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,347,
        348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,29,1,0,0,0,350,359,
        5,57,0,0,351,360,5,58,0,0,352,360,5,59,0,0,353,354,5,58,0,0,354,
        355,5,124,0,0,355,360,5,59,0,0,356,357,5,59,0,0,357,358,5,124,0,
        0,358,360,5,58,0,0,359,351,1,0,0,0,359,352,1,0,0,0,359,353,1,0,0,
        0,359,356,1,0,0,0,360,31,1,0,0,0,361,368,5,21,0,0,362,367,3,34,17,
        0,363,367,3,36,18,0,364,367,3,38,19,0,365,367,3,40,20,0,366,362,
        1,0,0,0,366,363,1,0,0,0,366,364,1,0,0,0,366,365,1,0,0,0,367,370,
        1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,33,1,0,0,0,370,368,1,
        0,0,0,371,372,5,22,0,0,372,373,3,6,3,0,373,35,1,0,0,0,374,375,5,
        62,0,0,375,376,3,6,3,0,376,37,1,0,0,0,377,378,5,23,0,0,378,379,3,
        6,3,0,379,39,1,0,0,0,380,381,5,30,0,0,381,382,5,68,0,0,382,383,3,
        6,3,0,383,41,1,0,0,0,384,385,5,25,0,0,385,386,5,63,0,0,386,389,5,
        12,0,0,387,390,3,204,102,0,388,390,5,24,0,0,389,387,1,0,0,0,389,
        388,1,0,0,0,390,43,1,0,0,0,391,394,5,1,0,0,392,393,5,2,0,0,393,395,
        5,3,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,396,1,0,0,0,396,397,
        5,44,0,0,397,399,5,12,0,0,398,400,3,150,75,0,399,398,1,0,0,0,399,
        400,1,0,0,0,400,406,1,0,0,0,401,403,5,8,0,0,402,404,5,47,0,0,403,
        402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,407,3,146,73,0,406,
        401,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,5,9,0,0,409,
        411,3,204,102,0,410,412,3,46,23,0,411,410,1,0,0,0,411,412,1,0,0,
        0,412,45,1,0,0,0,413,419,3,4,2,0,414,419,3,12,6,0,415,419,3,14,7,
        0,416,419,3,8,4,0,417,419,3,10,5,0,418,413,1,0,0,0,418,414,1,0,0,
        0,418,415,1,0,0,0,418,416,1,0,0,0,418,417,1,0,0,0,419,420,1,0,0,
        0,420,418,1,0,0,0,420,421,1,0,0,0,421,47,1,0,0,0,422,425,5,1,0,0,
        423,424,5,2,0,0,424,426,5,3,0,0,425,423,1,0,0,0,425,426,1,0,0,0,
        426,427,1,0,0,0,427,429,5,44,0,0,428,430,5,13,0,0,429,428,1,0,0,
        0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,5,48,0,0,432,431,1,0,0,
        0,432,433,1,0,0,0,433,435,1,0,0,0,434,436,5,49,0,0,435,434,1,0,0,
        0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,5,14,0,0,438,441,3,154,
        77,0,439,440,5,8,0,0,440,442,3,18,9,0,441,439,1,0,0,0,441,442,1,
        0,0,0,442,443,1,0,0,0,443,444,5,19,0,0,444,447,3,218,109,0,445,446,
        5,83,0,0,446,448,3,158,79,0,447,445,1,0,0,0,447,448,1,0,0,0,448,
        450,1,0,0,0,449,451,3,188,94,0,450,449,1,0,0,0,450,451,1,0,0,0,451,
        453,1,0,0,0,452,454,3,186,93,0,453,452,1,0,0,0,453,454,1,0,0,0,454,
        456,1,0,0,0,455,457,3,50,25,0,456,455,1,0,0,0,456,457,1,0,0,0,457,
        49,1,0,0,0,458,467,3,4,2,0,459,467,3,12,6,0,460,467,3,14,7,0,461,
        467,3,8,4,0,462,467,3,10,5,0,463,467,3,52,26,0,464,467,3,54,27,0,
        465,467,3,56,28,0,466,458,1,0,0,0,466,459,1,0,0,0,466,460,1,0,0,
        0,466,461,1,0,0,0,466,462,1,0,0,0,466,463,1,0,0,0,466,464,1,0,0,
        0,466,465,1,0,0,0,467,468,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,
        0,469,51,1,0,0,0,470,471,5,69,0,0,471,474,5,32,0,0,472,475,3,176,
        88,0,473,475,5,70,0,0,474,472,1,0,0,0,474,473,1,0,0,0,475,53,1,0,
        0,0,476,477,5,33,0,0,477,478,7,1,0,0,478,55,1,0,0,0,479,480,5,21,
        0,0,480,481,5,15,0,0,481,482,3,218,109,0,482,57,1,0,0,0,483,486,
        5,1,0,0,484,485,5,2,0,0,485,487,5,3,0,0,486,484,1,0,0,0,486,487,
        1,0,0,0,487,488,1,0,0,0,488,489,5,44,0,0,489,490,5,15,0,0,490,493,
        3,162,81,0,491,492,5,8,0,0,492,494,3,18,9,0,493,491,1,0,0,0,493,
        494,1,0,0,0,494,495,1,0,0,0,495,496,5,19,0,0,496,502,3,218,109,0,
        497,499,5,52,0,0,498,500,3,158,79,0,499,498,1,0,0,0,499,500,1,0,
        0,0,500,501,1,0,0,0,501,503,3,186,93,0,502,497,1,0,0,0,502,503,1,
        0,0,0,503,507,1,0,0,0,504,506,3,60,30,0,505,504,1,0,0,0,506,509,
        1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,511,1,0,0,0,509,507,
        1,0,0,0,510,512,3,50,25,0,511,510,1,0,0,0,511,512,1,0,0,0,512,59,
        1,0,0,0,513,515,5,54,0,0,514,516,3,160,80,0,515,514,1,0,0,0,515,
        516,1,0,0,0,516,517,1,0,0,0,517,518,3,186,93,0,518,61,1,0,0,0,519,
        522,5,1,0,0,520,521,5,2,0,0,521,523,5,3,0,0,522,520,1,0,0,0,522,
        523,1,0,0,0,523,524,1,0,0,0,524,525,5,44,0,0,525,526,5,16,0,0,526,
        529,3,164,82,0,527,528,5,8,0,0,528,530,3,18,9,0,529,527,1,0,0,0,
        529,530,1,0,0,0,530,531,1,0,0,0,531,532,5,19,0,0,532,538,3,218,109,
        0,533,535,5,52,0,0,534,536,3,158,79,0,535,534,1,0,0,0,535,536,1,
        0,0,0,536,537,1,0,0,0,537,539,3,186,93,0,538,533,1,0,0,0,538,539,
        1,0,0,0,539,541,1,0,0,0,540,542,3,64,32,0,541,540,1,0,0,0,541,542,
        1,0,0,0,542,544,1,0,0,0,543,545,3,50,25,0,544,543,1,0,0,0,544,545,
        1,0,0,0,545,63,1,0,0,0,546,548,5,54,0,0,547,549,3,160,80,0,548,547,
        1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,551,3,186,93,0,551,65,
        1,0,0,0,552,555,5,1,0,0,553,554,5,2,0,0,554,556,5,3,0,0,555,553,
        1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,44,0,0,558,559,
        5,68,0,0,559,560,5,38,0,0,560,566,3,168,84,0,561,563,5,8,0,0,562,
        564,5,47,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,
        567,3,146,73,0,566,561,1,0,0,0,566,567,1,0,0,0,567,570,1,0,0,0,568,
        569,5,9,0,0,569,571,3,68,34,0,570,568,1,0,0,0,570,571,1,0,0,0,571,
        573,1,0,0,0,572,574,3,70,35,0,573,572,1,0,0,0,573,574,1,0,0,0,574,
        67,1,0,0,0,575,576,3,176,88,0,576,69,1,0,0,0,577,582,3,4,2,0,578,
        582,3,12,6,0,579,582,3,8,4,0,580,582,3,10,5,0,581,577,1,0,0,0,581,
        578,1,0,0,0,581,579,1,0,0,0,581,580,1,0,0,0,582,583,1,0,0,0,583,
        581,1,0,0,0,583,584,1,0,0,0,584,71,1,0,0,0,585,588,5,1,0,0,586,587,
        5,2,0,0,587,589,5,3,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,590,
        1,0,0,0,590,591,5,44,0,0,591,592,7,2,0,0,592,593,5,76,0,0,593,599,
        3,74,37,0,594,596,5,8,0,0,595,597,5,47,0,0,596,595,1,0,0,0,596,597,
        1,0,0,0,597,598,1,0,0,0,598,600,3,146,73,0,599,594,1,0,0,0,599,600,
        1,0,0,0,600,601,1,0,0,0,601,605,5,77,0,0,602,606,5,78,0,0,603,606,
        5,79,0,0,604,606,3,76,38,0,605,602,1,0,0,0,605,603,1,0,0,0,605,604,
        1,0,0,0,606,608,1,0,0,0,607,609,3,78,39,0,608,607,1,0,0,0,608,609,
        1,0,0,0,609,73,1,0,0,0,610,611,3,176,88,0,611,75,1,0,0,0,612,613,
        3,176,88,0,613,77,1,0,0,0,614,619,3,4,2,0,615,619,3,10,5,0,616,619,
        3,80,40,0,617,619,3,82,41,0,618,614,1,0,0,0,618,615,1,0,0,0,618,
        616,1,0,0,0,618,617,1,0,0,0,619,620,1,0,0,0,620,618,1,0,0,0,620,
        621,1,0,0,0,621,79,1,0,0,0,622,623,5,81,0,0,623,624,5,7,0,0,624,
        627,5,80,0,0,625,626,5,42,0,0,626,628,5,82,0,0,627,625,1,0,0,0,627,
        628,1,0,0,0,628,81,1,0,0,0,629,630,5,24,0,0,630,631,5,41,0,0,631,
        632,3,176,88,0,632,83,1,0,0,0,633,636,5,1,0,0,634,635,5,2,0,0,635,
        637,5,3,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,638,1,0,0,0,638,
        639,5,44,0,0,639,640,5,25,0,0,640,641,3,86,43,0,641,642,5,136,0,
        0,642,648,3,74,37,0,643,645,5,8,0,0,644,646,5,47,0,0,645,644,1,0,
        0,0,645,646,1,0,0,0,646,647,1,0,0,0,647,649,3,146,73,0,648,643,1,
        0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,651,5,39,0,0,651,652,5,
        40,0,0,652,653,3,88,44,0,653,85,1,0,0,0,654,655,3,176,88,0,655,87,
        1,0,0,0,656,657,3,176,88,0,657,89,1,0,0,0,658,659,5,4,0,0,659,660,
        5,44,0,0,660,661,5,47,0,0,661,666,3,146,73,0,662,663,5,7,0,0,663,
        664,5,61,0,0,664,665,5,22,0,0,665,667,3,148,74,0,666,662,1,0,0,0,
        666,667,1,0,0,0,667,669,1,0,0,0,668,670,3,28,14,0,669,668,1,0,0,
        0,669,670,1,0,0,0,670,91,1,0,0,0,671,672,5,4,0,0,672,673,5,44,0,
        0,673,675,5,12,0,0,674,676,3,150,75,0,675,674,1,0,0,0,675,676,1,
        0,0,0,676,682,1,0,0,0,677,679,5,8,0,0,678,680,5,47,0,0,679,678,1,
        0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,683,3,146,73,0,682,677,
        1,0,0,0,682,683,1,0,0,0,683,688,1,0,0,0,684,685,5,7,0,0,685,686,
        5,61,0,0,686,687,5,22,0,0,687,689,3,152,76,0,688,684,1,0,0,0,688,
        689,1,0,0,0,689,692,1,0,0,0,690,691,5,9,0,0,691,693,3,204,102,0,
        692,690,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,696,3,46,23,
        0,695,694,1,0,0,0,695,696,1,0,0,0,696,93,1,0,0,0,697,698,5,4,0,0,
        698,700,5,44,0,0,699,701,5,13,0,0,700,699,1,0,0,0,700,701,1,0,0,
        0,701,703,1,0,0,0,702,704,5,48,0,0,703,702,1,0,0,0,703,704,1,0,0,
        0,704,706,1,0,0,0,705,707,5,49,0,0,706,705,1,0,0,0,706,707,1,0,0,
        0,707,708,1,0,0,0,708,709,5,14,0,0,709,712,3,154,77,0,710,711,5,
        8,0,0,711,713,3,18,9,0,712,710,1,0,0,0,712,713,1,0,0,0,713,718,1,
        0,0,0,714,715,5,7,0,0,715,716,5,61,0,0,716,717,5,22,0,0,717,719,
        3,156,78,0,718,714,1,0,0,0,718,719,1,0,0,0,719,728,1,0,0,0,720,721,
        5,83,0,0,721,723,3,158,79,0,722,724,3,188,94,0,723,722,1,0,0,0,723,
        724,1,0,0,0,724,726,1,0,0,0,725,727,3,186,93,0,726,725,1,0,0,0,726,
        727,1,0,0,0,727,729,1,0,0,0,728,720,1,0,0,0,728,729,1,0,0,0,729,
        731,1,0,0,0,730,732,3,50,25,0,731,730,1,0,0,0,731,732,1,0,0,0,732,
        95,1,0,0,0,733,734,5,4,0,0,734,735,5,44,0,0,735,736,5,15,0,0,736,
        739,3,162,81,0,737,738,5,8,0,0,738,740,3,18,9,0,739,737,1,0,0,0,
        739,740,1,0,0,0,740,745,1,0,0,0,741,742,5,7,0,0,742,743,5,61,0,0,
        743,744,5,22,0,0,744,746,3,166,83,0,745,741,1,0,0,0,745,746,1,0,
        0,0,746,752,1,0,0,0,747,749,5,52,0,0,748,750,3,158,79,0,749,748,
        1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,753,3,186,93,0,752,747,
        1,0,0,0,752,753,1,0,0,0,753,757,1,0,0,0,754,756,3,60,30,0,755,754,
        1,0,0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,761,
        1,0,0,0,759,757,1,0,0,0,760,762,3,50,25,0,761,760,1,0,0,0,761,762,
        1,0,0,0,762,97,1,0,0,0,763,764,5,17,0,0,764,765,5,44,0,0,765,766,
        5,47,0,0,766,767,3,146,73,0,767,99,1,0,0,0,768,769,5,17,0,0,769,
        770,5,44,0,0,770,771,5,12,0,0,771,777,3,150,75,0,772,774,5,9,0,0,
        773,775,5,47,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,
        776,778,3,146,73,0,777,772,1,0,0,0,777,778,1,0,0,0,778,101,1,0,0,
        0,779,780,5,17,0,0,780,782,5,44,0,0,781,783,5,13,0,0,782,781,1,0,
        0,0,782,783,1,0,0,0,783,785,1,0,0,0,784,786,5,48,0,0,785,784,1,0,
        0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,789,5,49,0,0,788,787,1,0,
        0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,791,5,14,0,0,791,794,3,154,
        77,0,792,793,5,9,0,0,793,795,3,18,9,0,794,792,1,0,0,0,794,795,1,
        0,0,0,795,103,1,0,0,0,796,797,5,17,0,0,797,798,5,44,0,0,798,799,
        5,15,0,0,799,802,3,162,81,0,800,801,5,9,0,0,801,803,3,18,9,0,802,
        800,1,0,0,0,802,803,1,0,0,0,803,105,1,0,0,0,804,805,5,17,0,0,805,
        806,5,44,0,0,806,807,5,16,0,0,807,810,3,164,82,0,808,809,5,9,0,0,
        809,811,3,18,9,0,810,808,1,0,0,0,810,811,1,0,0,0,811,107,1,0,0,0,
        812,813,5,17,0,0,813,814,5,44,0,0,814,815,5,68,0,0,815,816,5,38,
        0,0,816,822,3,168,84,0,817,819,5,9,0,0,818,820,5,47,0,0,819,818,
        1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,823,3,146,73,0,822,817,
        1,0,0,0,822,823,1,0,0,0,823,109,1,0,0,0,824,825,5,17,0,0,825,826,
        5,44,0,0,826,827,7,2,0,0,827,828,5,76,0,0,828,834,3,74,37,0,829,
        831,5,9,0,0,830,832,5,47,0,0,831,830,1,0,0,0,831,832,1,0,0,0,832,
        833,1,0,0,0,833,835,3,146,73,0,834,829,1,0,0,0,834,835,1,0,0,0,835,
        111,1,0,0,0,836,837,5,17,0,0,837,838,5,44,0,0,838,839,5,25,0,0,839,
        840,3,86,43,0,840,841,5,136,0,0,841,847,3,74,37,0,842,844,5,8,0,
        0,843,845,5,47,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,
        0,846,848,3,146,73,0,847,842,1,0,0,0,847,848,1,0,0,0,848,113,1,0,
        0,0,849,850,5,18,0,0,850,851,5,44,0,0,851,852,3,116,58,0,852,115,
        1,0,0,0,853,854,5,47,0,0,854,857,3,146,73,0,855,857,3,18,9,0,856,
        853,1,0,0,0,856,855,1,0,0,0,857,117,1,0,0,0,858,859,5,5,0,0,859,
        861,5,44,0,0,860,862,5,45,0,0,861,860,1,0,0,0,861,862,1,0,0,0,862,
        863,1,0,0,0,863,864,5,6,0,0,864,119,1,0,0,0,865,866,5,5,0,0,866,
        867,5,44,0,0,867,868,5,46,0,0,868,121,1,0,0,0,869,870,5,5,0,0,870,
        871,5,44,0,0,871,877,5,11,0,0,872,874,7,3,0,0,873,875,5,47,0,0,874,
        873,1,0,0,0,874,875,1,0,0,0,875,876,1,0,0,0,876,878,3,146,73,0,877,
        872,1,0,0,0,877,878,1,0,0,0,878,123,1,0,0,0,879,880,5,5,0,0,880,
        882,5,44,0,0,881,883,5,13,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,
        885,1,0,0,0,884,886,5,48,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,
        888,1,0,0,0,887,889,5,49,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,
        890,1,0,0,0,890,893,5,50,0,0,891,892,7,3,0,0,892,894,3,18,9,0,893,
        891,1,0,0,0,893,894,1,0,0,0,894,125,1,0,0,0,895,896,5,5,0,0,896,
        897,5,44,0,0,897,900,5,51,0,0,898,899,7,3,0,0,899,901,3,18,9,0,900,
        898,1,0,0,0,900,901,1,0,0,0,901,127,1,0,0,0,902,903,5,5,0,0,903,
        904,5,44,0,0,904,907,5,53,0,0,905,906,7,3,0,0,906,908,3,18,9,0,907,
        905,1,0,0,0,907,908,1,0,0,0,908,129,1,0,0,0,909,910,5,5,0,0,910,
        911,5,44,0,0,911,912,5,68,0,0,912,918,5,73,0,0,913,915,7,3,0,0,914,
        916,5,47,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,
        919,3,146,73,0,918,913,1,0,0,0,918,919,1,0,0,0,919,131,1,0,0,0,920,
        921,5,5,0,0,921,922,5,44,0,0,922,923,5,74,0,0,923,929,5,75,0,0,924,
        926,7,3,0,0,925,927,5,47,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,
        928,1,0,0,0,928,930,3,146,73,0,929,924,1,0,0,0,929,930,1,0,0,0,930,
        133,1,0,0,0,931,932,5,5,0,0,932,933,5,1,0,0,933,934,5,44,0,0,934,
        936,5,47,0,0,935,937,3,146,73,0,936,935,1,0,0,0,936,937,1,0,0,0,
        937,135,1,0,0,0,938,939,5,5,0,0,939,940,5,1,0,0,940,941,5,44,0,0,
        941,943,5,12,0,0,942,944,3,150,75,0,943,942,1,0,0,0,943,944,1,0,
        0,0,944,950,1,0,0,0,945,947,7,4,0,0,946,948,5,47,0,0,947,946,1,0,
        0,0,947,948,1,0,0,0,948,949,1,0,0,0,949,951,3,146,73,0,950,945,1,
        0,0,0,950,951,1,0,0,0,951,137,1,0,0,0,952,953,5,5,0,0,953,954,5,
        1,0,0,954,956,5,44,0,0,955,957,5,13,0,0,956,955,1,0,0,0,956,957,
        1,0,0,0,957,959,1,0,0,0,958,960,5,48,0,0,959,958,1,0,0,0,959,960,
        1,0,0,0,960,962,1,0,0,0,961,963,5,49,0,0,962,961,1,0,0,0,962,963,
        1,0,0,0,963,964,1,0,0,0,964,965,5,14,0,0,965,968,3,154,77,0,966,
        967,7,4,0,0,967,969,3,18,9,0,968,966,1,0,0,0,968,969,1,0,0,0,969,
        139,1,0,0,0,970,971,5,5,0,0,971,972,5,1,0,0,972,973,5,44,0,0,973,
        974,5,15,0,0,974,977,3,162,81,0,975,976,7,4,0,0,976,978,3,18,9,0,
        977,975,1,0,0,0,977,978,1,0,0,0,978,141,1,0,0,0,979,980,5,5,0,0,
        980,981,5,1,0,0,981,982,5,44,0,0,982,983,5,16,0,0,983,986,3,164,
        82,0,984,985,7,4,0,0,985,987,3,18,9,0,986,984,1,0,0,0,986,987,1,
        0,0,0,987,143,1,0,0,0,988,989,5,5,0,0,989,990,5,1,0,0,990,991,5,
        44,0,0,991,992,5,74,0,0,992,993,5,76,0,0,993,999,3,74,37,0,994,996,
        7,4,0,0,995,997,5,47,0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,998,
        1,0,0,0,998,1000,3,146,73,0,999,994,1,0,0,0,999,1000,1,0,0,0,1000,
        145,1,0,0,0,1001,1003,3,172,86,0,1002,1001,1,0,0,0,1002,1003,1,0,
        0,0,1003,1004,1,0,0,0,1004,1005,3,174,87,0,1005,147,1,0,0,0,1006,
        1008,3,172,86,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,
        0,0,0,1009,1010,3,174,87,0,1010,149,1,0,0,0,1011,1012,3,174,87,0,
        1012,151,1,0,0,0,1013,1014,3,174,87,0,1014,153,1,0,0,0,1015,1016,
        3,174,87,0,1016,155,1,0,0,0,1017,1018,3,174,87,0,1018,157,1,0,0,
        0,1019,1020,3,212,106,0,1020,159,1,0,0,0,1021,1022,3,212,106,0,1022,
        161,1,0,0,0,1023,1024,3,174,87,0,1024,163,1,0,0,0,1025,1026,3,174,
        87,0,1026,165,1,0,0,0,1027,1028,3,174,87,0,1028,167,1,0,0,0,1029,
        1030,3,174,87,0,1030,169,1,0,0,0,1031,1040,3,220,110,0,1032,1036,
        3,212,106,0,1033,1035,3,222,111,0,1034,1033,1,0,0,0,1035,1038,1,
        0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,1040,1,0,0,0,1038,
        1036,1,0,0,0,1039,1031,1,0,0,0,1039,1032,1,0,0,0,1040,171,1,0,0,
        0,1041,1044,3,170,85,0,1042,1043,5,126,0,0,1043,1045,5,143,0,0,1044,
        1042,1,0,0,0,1044,1045,1,0,0,0,1045,173,1,0,0,0,1046,1047,5,112,
        0,0,1047,1050,3,170,85,0,1048,1049,5,112,0,0,1049,1051,3,170,85,
        0,1050,1048,1,0,0,0,1050,1051,1,0,0,0,1051,175,1,0,0,0,1052,1053,
        7,5,0,0,1053,177,1,0,0,0,1054,1055,5,129,0,0,1055,1060,3,180,90,
        0,1056,1057,5,124,0,0,1057,1059,3,180,90,0,1058,1056,1,0,0,0,1059,
        1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,
        0,1062,1060,1,0,0,0,1063,1064,5,130,0,0,1064,1068,1,0,0,0,1065,1066,
        5,129,0,0,1066,1068,5,130,0,0,1067,1054,1,0,0,0,1067,1065,1,0,0,
        0,1068,179,1,0,0,0,1069,1070,5,151,0,0,1070,1071,5,126,0,0,1071,
        1072,3,184,92,0,1072,181,1,0,0,0,1073,1082,5,132,0,0,1074,1079,3,
        184,92,0,1075,1076,5,124,0,0,1076,1078,3,184,92,0,1077,1075,1,0,
        0,0,1078,1081,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,1083,
        1,0,0,0,1081,1079,1,0,0,0,1082,1074,1,0,0,0,1082,1083,1,0,0,0,1083,
        1084,1,0,0,0,1084,1085,5,133,0,0,1085,183,1,0,0,0,1086,1098,5,151,
        0,0,1087,1089,7,6,0,0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1090,
        1,0,0,0,1090,1098,5,145,0,0,1091,1098,5,143,0,0,1092,1098,3,178,
        89,0,1093,1098,3,182,91,0,1094,1098,5,36,0,0,1095,1098,5,37,0,0,
        1096,1098,5,35,0,0,1097,1086,1,0,0,0,1097,1088,1,0,0,0,1097,1091,
        1,0,0,0,1097,1092,1,0,0,0,1097,1093,1,0,0,0,1097,1094,1,0,0,0,1097,
        1095,1,0,0,0,1097,1096,1,0,0,0,1098,185,1,0,0,0,1099,1100,5,129,
        0,0,1100,1105,3,190,95,0,1101,1102,5,124,0,0,1102,1104,3,190,95,
        0,1103,1101,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,1106,
        1,0,0,0,1106,1108,1,0,0,0,1107,1105,1,0,0,0,1108,1109,5,130,0,0,
        1109,1113,1,0,0,0,1110,1111,5,129,0,0,1111,1113,5,130,0,0,1112,1099,
        1,0,0,0,1112,1110,1,0,0,0,1113,187,1,0,0,0,1114,1116,7,7,0,0,1115,
        1114,1,0,0,0,1116,1117,1,0,0,0,1117,1115,1,0,0,0,1117,1118,1,0,0,
        0,1118,189,1,0,0,0,1119,1120,3,194,97,0,1120,1121,5,126,0,0,1121,
        1136,3,196,98,0,1122,1137,5,85,0,0,1123,1137,5,86,0,0,1124,1137,
        5,84,0,0,1125,1137,5,87,0,0,1126,1137,5,89,0,0,1127,1137,5,90,0,
        0,1128,1137,5,91,0,0,1129,1137,5,92,0,0,1130,1131,5,93,0,0,1131,
        1132,5,127,0,0,1132,1133,3,200,100,0,1133,1134,5,128,0,0,1134,1137,
        1,0,0,0,1135,1137,3,188,94,0,1136,1122,1,0,0,0,1136,1123,1,0,0,0,
        1136,1124,1,0,0,0,1136,1125,1,0,0,0,1136,1126,1,0,0,0,1136,1127,
        1,0,0,0,1136,1128,1,0,0,0,1136,1129,1,0,0,0,1136,1130,1,0,0,0,1136,
        1135,1,0,0,0,1136,1137,1,0,0,0,1137,1139,1,0,0,0,1138,1140,3,186,
        93,0,1139,1138,1,0,0,0,1139,1140,1,0,0,0,1140,191,1,0,0,0,1141,1142,
        7,8,0,0,1142,193,1,0,0,0,1143,1147,5,151,0,0,1144,1147,3,212,106,
        0,1145,1147,3,192,96,0,1146,1143,1,0,0,0,1146,1144,1,0,0,0,1146,
        1145,1,0,0,0,1147,195,1,0,0,0,1148,1151,3,218,109,0,1149,1151,3,
        192,96,0,1150,1148,1,0,0,0,1150,1149,1,0,0,0,1151,197,1,0,0,0,1152,
        1155,5,151,0,0,1153,1155,3,212,106,0,1154,1152,1,0,0,0,1154,1153,
        1,0,0,0,1155,199,1,0,0,0,1156,1159,5,151,0,0,1157,1159,3,212,106,
        0,1158,1156,1,0,0,0,1158,1157,1,0,0,0,1159,201,1,0,0,0,1160,1163,
        3,218,109,0,1161,1163,3,186,93,0,1162,1160,1,0,0,0,1162,1161,1,0,
        0,0,1163,203,1,0,0,0,1164,1165,3,212,106,0,1165,205,1,0,0,0,1166,
        1167,3,212,106,0,1167,207,1,0,0,0,1168,1169,3,212,106,0,1169,209,
        1,0,0,0,1170,1171,7,9,0,0,1171,211,1,0,0,0,1172,1173,3,210,105,0,
        1173,213,1,0,0,0,1174,1179,3,212,106,0,1175,1176,5,124,0,0,1176,
        1178,3,212,106,0,1177,1175,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,
        0,0,0,1179,1180,1,0,0,0,1180,215,1,0,0,0,1181,1179,1,0,0,0,1182,
        1183,5,127,0,0,1183,1184,3,214,107,0,1184,1185,5,128,0,0,1185,217,
        1,0,0,0,1186,1188,3,212,106,0,1187,1189,3,222,111,0,1188,1187,1,
        0,0,0,1188,1189,1,0,0,0,1189,219,1,0,0,0,1190,1195,3,212,106,0,1191,
        1193,3,222,111,0,1192,1194,3,222,111,0,1193,1192,1,0,0,0,1193,1194,
        1,0,0,0,1194,1196,1,0,0,0,1195,1191,1,0,0,0,1195,1196,1,0,0,0,1196,
        221,1,0,0,0,1197,1198,5,123,0,0,1198,1199,3,212,106,0,1199,223,1,
        0,0,0,160,228,233,236,239,279,285,295,308,317,322,324,329,334,340,
        346,348,359,366,368,389,394,399,403,406,411,418,420,425,429,432,
        435,441,447,450,453,456,466,468,474,486,493,499,502,507,511,515,
        522,529,535,538,541,544,548,555,563,566,570,573,581,583,588,596,
        599,605,608,618,620,627,636,645,648,666,669,675,679,682,688,692,
        695,700,703,706,712,718,723,726,728,731,739,745,749,752,757,761,
        774,777,782,785,788,794,802,810,819,822,831,834,844,847,856,861,
        874,877,882,885,888,893,900,907,915,918,926,929,936,943,947,950,
        956,959,962,968,977,986,996,999,1002,1007,1036,1039,1044,1050,1060,
        1067,1079,1082,1088,1097,1105,1112,1117,1136,1139,1146,1150,1154,
        1158,1162,1179,1188,1193,1195
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "':='", "'<=>'", "'>='", "'>'", 
                     "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", 
                     "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", "'&'", 
                     "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", "'('", 
                     "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", "'->>'", 
                     "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", 
                      "SET_SYMBOL", "IDENTIFIED_SYMBOL", "BY_SYMBOL", "ROLE_SYMBOL", 
                      "TO_SYMBOL", "CONFIGURE_SYMBOL", "REST_SYMBOL", "METADATA_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "RELATIONAL_SYMBOL", 
                      "DUALITY_SYMBOL", "VIEWS_SYMBOL", "PROCEDURES_SYMBOL", 
                      "PARAMETERS_SYMBOL", "FUNCTIONS_SYMBOL", "RESULT_SYMBOL", 
                      "ENABLED_SYMBOL", "DISABLED_SYMBOL", "PROTOCOL_SYMBOL", 
                      "HTTP_SYMBOL", "HTTPS_SYMBOL", "COMMENTS_SYMBOL", 
                      "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", "MANAGEMENT_SYMBOL", 
                      "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", "ITEMS_SYMBOL", 
                      "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", "AUTODETECT_SYMBOL", 
                      "FEED_SYMBOL", "ITEM_SYMBOL", "SETS_SYMBOL", "AUTH_SYMBOL", 
                      "APPS_SYMBOL", "APP_SYMBOL", "VENDOR_SYMBOL", "MRS_SYMBOL", 
                      "MYSQL_SYMBOL", "USERS_SYMBOL", "ALLOW_SYMBOL", "REGISTER_SYMBOL", 
                      "CLASS_SYMBOL", "AT_INOUT_SYMBOL", "AT_IN_SYMBOL", 
                      "AT_OUT_SYMBOL", "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", 
                      "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", 
                      "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", 
                      "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", 
                      "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
                      "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
                      "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
                      "PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", 
                      "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", 
                      "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
                      "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", 
                      "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", 
                      "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", 
                      "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", 
                      "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", 
                      "CLOSE_SQUARE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_comments = 5
    RULE_authenticationRequired = 6
    RULE_itemsPerPage = 7
    RULE_itemsPerPageNumber = 8
    RULE_serviceSchemaSelector = 9
    RULE_configureRestMetadataStatement = 10
    RULE_restMetadataOptions = 11
    RULE_updateIfAvailable = 12
    RULE_createRestServiceStatement = 13
    RULE_restServiceOptions = 14
    RULE_restProtocol = 15
    RULE_restAuthentication = 16
    RULE_authPath = 17
    RULE_authRedirection = 18
    RULE_authValidation = 19
    RULE_authPageContent = 20
    RULE_userManagementSchema = 21
    RULE_createRestSchemaStatement = 22
    RULE_restSchemaOptions = 23
    RULE_createRestViewStatement = 24
    RULE_restObjectOptions = 25
    RULE_restViewMediaType = 26
    RULE_restViewFormat = 27
    RULE_restViewAuthenticationProcedure = 28
    RULE_createRestProcedureStatement = 29
    RULE_restProcedureResult = 30
    RULE_createRestFunctionStatement = 31
    RULE_restFunctionResult = 32
    RULE_createRestContentSetStatement = 33
    RULE_directoryFilePath = 34
    RULE_restContentSetOptions = 35
    RULE_createRestAuthAppStatement = 36
    RULE_authAppName = 37
    RULE_vendorName = 38
    RULE_restAuthAppOptions = 39
    RULE_allowNewUsersToRegister = 40
    RULE_defaultRole = 41
    RULE_createRestUserStatement = 42
    RULE_userName = 43
    RULE_userPassword = 44
    RULE_alterRestServiceStatement = 45
    RULE_alterRestSchemaStatement = 46
    RULE_alterRestViewStatement = 47
    RULE_alterRestProcedureStatement = 48
    RULE_dropRestServiceStatement = 49
    RULE_dropRestSchemaStatement = 50
    RULE_dropRestDualityViewStatement = 51
    RULE_dropRestProcedureStatement = 52
    RULE_dropRestFunctionStatement = 53
    RULE_dropRestContentSetStatement = 54
    RULE_dropRestAuthAppStatement = 55
    RULE_dropRestUserStatement = 56
    RULE_useStatement = 57
    RULE_serviceAndSchemaRequestPaths = 58
    RULE_showRestMetadataStatusStatement = 59
    RULE_showRestServicesStatement = 60
    RULE_showRestSchemasStatement = 61
    RULE_showRestViewsStatement = 62
    RULE_showRestProceduresStatement = 63
    RULE_showRestFunctionsStatement = 64
    RULE_showRestContentSetsStatement = 65
    RULE_showRestAuthAppsStatement = 66
    RULE_showCreateRestServiceStatement = 67
    RULE_showCreateRestSchemaStatement = 68
    RULE_showCreateRestViewStatement = 69
    RULE_showCreateRestProcedureStatement = 70
    RULE_showCreateRestFunctionStatement = 71
    RULE_showCreateRestAuthAppStatement = 72
    RULE_serviceRequestPath = 73
    RULE_newServiceRequestPath = 74
    RULE_schemaRequestPath = 75
    RULE_newSchemaRequestPath = 76
    RULE_viewRequestPath = 77
    RULE_newViewRequestPath = 78
    RULE_restObjectName = 79
    RULE_restResultName = 80
    RULE_procedureRequestPath = 81
    RULE_functionRequestPath = 82
    RULE_newProcedureRequestPath = 83
    RULE_contentSetRequestPath = 84
    RULE_dottedIdentifier = 85
    RULE_hostAndPortIdentifier = 86
    RULE_requestPathIdentifier = 87
    RULE_quotedText = 88
    RULE_jsonObj = 89
    RULE_jsonPair = 90
    RULE_jsonArr = 91
    RULE_jsonValue = 92
    RULE_graphQlObj = 93
    RULE_graphQlCrudOptions = 94
    RULE_graphQlPair = 95
    RULE_graphQlAllowedKeyword = 96
    RULE_graphQlPairKey = 97
    RULE_graphQlPairValue = 98
    RULE_graphQlReduceToValue = 99
    RULE_graphQlDatatypeValue = 100
    RULE_graphQlValue = 101
    RULE_schemaName = 102
    RULE_viewName = 103
    RULE_procedureName = 104
    RULE_pureIdentifier = 105
    RULE_identifier = 106
    RULE_identifierList = 107
    RULE_identifierListWithParentheses = 108
    RULE_qualifiedIdentifier = 109
    RULE_simpleIdentifier = 110
    RULE_dotIdentifier = 111

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "restProtocol", "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restObjectOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "createRestFunctionStatement", 
                   "restFunctionResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "createRestAuthAppStatement", 
                   "authAppName", "vendorName", "restAuthAppOptions", "allowNewUsersToRegister", 
                   "defaultRole", "createRestUserStatement", "userName", 
                   "userPassword", "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestDualityViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestAuthAppStatement", "dropRestUserStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestFunctionsStatement", "showRestContentSetsStatement", 
                   "showRestAuthAppsStatement", "showCreateRestServiceStatement", 
                   "showCreateRestSchemaStatement", "showCreateRestViewStatement", 
                   "showCreateRestProcedureStatement", "showCreateRestFunctionStatement", 
                   "showCreateRestAuthAppStatement", "serviceRequestPath", 
                   "newServiceRequestPath", "schemaRequestPath", "newSchemaRequestPath", 
                   "viewRequestPath", "newViewRequestPath", "restObjectName", 
                   "restResultName", "procedureRequestPath", "functionRequestPath", 
                   "newProcedureRequestPath", "contentSetRequestPath", "dottedIdentifier", 
                   "hostAndPortIdentifier", "requestPathIdentifier", "quotedText", 
                   "jsonObj", "jsonPair", "jsonArr", "jsonValue", "graphQlObj", 
                   "graphQlCrudOptions", "graphQlPair", "graphQlAllowedKeyword", 
                   "graphQlPairKey", "graphQlPairValue", "graphQlReduceToValue", 
                   "graphQlDatatypeValue", "graphQlValue", "schemaName", 
                   "viewName", "procedureName", "pureIdentifier", "identifier", 
                   "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
                   "simpleIdentifier", "dotIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    UPDATE_SYMBOL=34
    NULL_SYMBOL=35
    TRUE_SYMBOL=36
    FALSE_SYMBOL=37
    SET_SYMBOL=38
    IDENTIFIED_SYMBOL=39
    BY_SYMBOL=40
    ROLE_SYMBOL=41
    TO_SYMBOL=42
    CONFIGURE_SYMBOL=43
    REST_SYMBOL=44
    METADATA_SYMBOL=45
    SERVICES_SYMBOL=46
    SERVICE_SYMBOL=47
    RELATIONAL_SYMBOL=48
    DUALITY_SYMBOL=49
    VIEWS_SYMBOL=50
    PROCEDURES_SYMBOL=51
    PARAMETERS_SYMBOL=52
    FUNCTIONS_SYMBOL=53
    RESULT_SYMBOL=54
    ENABLED_SYMBOL=55
    DISABLED_SYMBOL=56
    PROTOCOL_SYMBOL=57
    HTTP_SYMBOL=58
    HTTPS_SYMBOL=59
    COMMENTS_SYMBOL=60
    REQUEST_SYMBOL=61
    REDIRECTION_SYMBOL=62
    MANAGEMENT_SYMBOL=63
    AVAILABLE_SYMBOL=64
    REQUIRED_SYMBOL=65
    ITEMS_SYMBOL=66
    PER_SYMBOL=67
    CONTENT_SYMBOL=68
    MEDIA_SYMBOL=69
    AUTODETECT_SYMBOL=70
    FEED_SYMBOL=71
    ITEM_SYMBOL=72
    SETS_SYMBOL=73
    AUTH_SYMBOL=74
    APPS_SYMBOL=75
    APP_SYMBOL=76
    VENDOR_SYMBOL=77
    MRS_SYMBOL=78
    MYSQL_SYMBOL=79
    USERS_SYMBOL=80
    ALLOW_SYMBOL=81
    REGISTER_SYMBOL=82
    CLASS_SYMBOL=83
    AT_INOUT_SYMBOL=84
    AT_IN_SYMBOL=85
    AT_OUT_SYMBOL=86
    AT_NOCHECK_SYMBOL=87
    AT_NOUPDATE_SYMBOL=88
    AT_SORTABLE_SYMBOL=89
    AT_NOFILTERING_SYMBOL=90
    AT_ROWOWNERSHIP_SYMBOL=91
    AT_UNNEST_SYMBOL=92
    AT_DATATYPE_SYMBOL=93
    AT_SELECT_SYMBOL=94
    AT_NOSELECT_SYMBOL=95
    AT_INSERT_SYMBOL=96
    AT_NOINSERT_SYMBOL=97
    AT_UPDATE_SYMBOL=98
    AT_DELETE_SYMBOL=99
    AT_NODELETE_SYMBOL=100
    EQUAL_OPERATOR=101
    ASSIGN_OPERATOR=102
    NULL_SAFE_EQUAL_OPERATOR=103
    GREATER_OR_EQUAL_OPERATOR=104
    GREATER_THAN_OPERATOR=105
    LESS_OR_EQUAL_OPERATOR=106
    LESS_THAN_OPERATOR=107
    NOT_EQUAL_OPERATOR=108
    PLUS_OPERATOR=109
    MINUS_OPERATOR=110
    MULT_OPERATOR=111
    DIV_OPERATOR=112
    MOD_OPERATOR=113
    LOGICAL_NOT_OPERATOR=114
    BITWISE_NOT_OPERATOR=115
    SHIFT_LEFT_OPERATOR=116
    SHIFT_RIGHT_OPERATOR=117
    LOGICAL_AND_OPERATOR=118
    BITWISE_AND_OPERATOR=119
    BITWISE_XOR_OPERATOR=120
    LOGICAL_OR_OPERATOR=121
    BITWISE_OR_OPERATOR=122
    DOT_SYMBOL=123
    COMMA_SYMBOL=124
    SEMICOLON_SYMBOL=125
    COLON_SYMBOL=126
    OPEN_PAR_SYMBOL=127
    CLOSE_PAR_SYMBOL=128
    OPEN_CURLY_SYMBOL=129
    CLOSE_CURLY_SYMBOL=130
    UNDERLINE_SYMBOL=131
    OPEN_SQUARE_SYMBOL=132
    CLOSE_SQUARE_SYMBOL=133
    JSON_SEPARATOR_SYMBOL=134
    JSON_UNQUOTED_SEPARATOR_SYMBOL=135
    AT_SIGN_SYMBOL=136
    AT_TEXT_SUFFIX=137
    AT_AT_SIGN_SYMBOL=138
    NULL2_SYMBOL=139
    PARAM_MARKER=140
    HEX_NUMBER=141
    BIN_NUMBER=142
    INT_NUMBER=143
    DECIMAL_NUMBER=144
    FLOAT_NUMBER=145
    WHITESPACE=146
    INVALID_INPUT=147
    IDENTIFIER=148
    NCHAR_TEXT=149
    BACK_TICK_QUOTED_ID=150
    DOUBLE_QUOTED_TEXT=151
    SINGLE_QUOTED_TEXT=152
    BLOCK_COMMENT=153
    POUND_COMMENT=154
    DASHDASH_COMMENT=155
    WS=156
    NOT_EQUAL2_OPERATOR=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8796093415474) != 0):
                self.state = 224
                self.mrsStatement()
                self.state = 233
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 226 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 225
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 228 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==125):
                                break

                        self.state = 230
                        self.mrsStatement() 
                    self.state = 235
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 238
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 241
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 245
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 246
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 247
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 248
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 249
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 250
                self.createRestAuthAppStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 251
                self.createRestUserStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 252
                self.alterRestServiceStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 253
                self.alterRestSchemaStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 254
                self.alterRestViewStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 255
                self.alterRestProcedureStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 256
                self.dropRestServiceStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 257
                self.dropRestSchemaStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 258
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 259
                self.dropRestProcedureStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 260
                self.dropRestFunctionStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 261
                self.dropRestContentSetStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 262
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 263
                self.dropRestUserStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 264
                self.useStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 265
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 266
                self.showRestServicesStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 267
                self.showRestSchemasStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 268
                self.showRestViewsStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 269
                self.showRestProceduresStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 270
                self.showRestFunctionsStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 271
                self.showRestContentSetsStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 272
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 273
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 274
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 275
                self.showCreateRestViewStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 276
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 277
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 278
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 152]:
                self.state = 283
                self.quotedText()
                pass
            elif token in [24]:
                self.state = 284
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 288
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 291
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 294
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 297
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 300
            self.match(MRSParser.PER_SYMBOL)
            self.state = 301
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 302
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 306
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 307
                self.serviceRequestPath()


            self.state = 310
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 311
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 314
            self.match(MRSParser.REST_SYMBOL)
            self.state = 315
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 108086408303869952) != 0):
                self.state = 316
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 322
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55, 56]:
                    self.state = 319
                    self.enabledDisabled()
                    pass
                elif token in [26]:
                    self.state = 320
                    self.jsonOptions()
                    pass
                elif token in [34]:
                    self.state = 321
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 324 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 108086408303869952) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 327
                self.match(MRSParser.IF_SYMBOL)
                self.state = 328
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 332
                self.match(MRSParser.OR_SYMBOL)
                self.state = 333
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 336
            self.match(MRSParser.REST_SYMBOL)
            self.state = 337
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 338
            self.serviceRequestPath()
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261007895732944896) != 0):
                self.state = 339
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 346 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55, 56]:
                    self.state = 342
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 343
                    self.restAuthentication()
                    pass
                elif token in [26]:
                    self.state = 344
                    self.jsonOptions()
                    pass
                elif token in [60]:
                    self.state = 345
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 348 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1261007895732944896) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 351
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 352
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 353
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 354
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 355
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 356
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 357
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 358
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611686019513712640) != 0):
                self.state = 366
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 362
                    self.authPath()
                    pass
                elif token in [62]:
                    self.state = 363
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 364
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 365
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 372
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 375
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 378
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 381
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 382
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(MRSParser.USER_SYMBOL)
            self.state = 385
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 386
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 150]:
                self.state = 387
                self.schemaName()
                pass
            elif token in [24]:
                self.state = 388
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 392
                self.match(MRSParser.OR_SYMBOL)
                self.state = 393
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 396
            self.match(MRSParser.REST_SYMBOL)
            self.state = 397
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 398
                self.schemaRequestPath()


            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 401
                self.match(MRSParser.ON_SYMBOL)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 402
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 405
                self.serviceRequestPath()


            self.state = 408
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 409
            self.schemaName()
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 35785667510305) != 0):
                self.state = 410
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 418
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55, 56]:
                    self.state = 413
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 414
                    self.authenticationRequired()
                    pass
                elif token in [66]:
                    self.state = 415
                    self.itemsPerPage()
                    pass
                elif token in [26]:
                    self.state = 416
                    self.jsonOptions()
                    pass
                elif token in [60]:
                    self.state = 417
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 420 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 35785667510305) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 423
                self.match(MRSParser.OR_SYMBOL)
                self.state = 424
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 427
            self.match(MRSParser.REST_SYMBOL)
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 428
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 431
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 434
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 437
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 438
            self.viewRequestPath()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 439
                self.match(MRSParser.ON_SYMBOL)
                self.state = 440
                self.serviceSchemaSelector()


            self.state = 443
            self.match(MRSParser.AS_SYMBOL)
            self.state = 444
            self.qualifiedIdentifier()
            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 445
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 446
                self.restObjectName()


            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 8129) != 0):
                self.state = 449
                self.graphQlCrudOptions()


            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 452
                self.graphQlObj()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 317260644225057) != 0):
                self.state = 455
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 458
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 459
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 460
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 461
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 462
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 463
                    self.restViewMediaType()
                    pass

                elif la_ == 7:
                    self.state = 464
                    self.restViewFormat()
                    pass

                elif la_ == 8:
                    self.state = 465
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 468 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 317260644225057) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 471
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 152]:
                self.state = 472
                self.quotedText()
                pass
            elif token in [70]:
                self.state = 473
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 477
            _la = self._input.LA(1)
            if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 480
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 481
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 484
                self.match(MRSParser.OR_SYMBOL)
                self.state = 485
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 488
            self.match(MRSParser.REST_SYMBOL)
            self.state = 489
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 490
            self.procedureRequestPath()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 491
                self.match(MRSParser.ON_SYMBOL)
                self.state = 492
                self.serviceSchemaSelector()


            self.state = 495
            self.match(MRSParser.AS_SYMBOL)
            self.state = 496
            self.qualifiedIdentifier()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 497
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148 or _la==150:
                    self.state = 498
                    self.restObjectName()


                self.state = 501
                self.graphQlObj()


            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 504
                self.restProcedureResult()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 317260644225057) != 0):
                self.state = 510
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restProcedureResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or _la==150:
                self.state = 514
                self.restResultName()


            self.state = 517
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 520
                self.match(MRSParser.OR_SYMBOL)
                self.state = 521
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 524
            self.match(MRSParser.REST_SYMBOL)
            self.state = 525
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 526
            self.functionRequestPath()
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 527
                self.match(MRSParser.ON_SYMBOL)
                self.state = 528
                self.serviceSchemaSelector()


            self.state = 531
            self.match(MRSParser.AS_SYMBOL)
            self.state = 532
            self.qualifiedIdentifier()
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 533
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148 or _la==150:
                    self.state = 534
                    self.restObjectName()


                self.state = 537
                self.graphQlObj()


            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 540
                self.restFunctionResult()


            self.state = 544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 317260644225057) != 0):
                self.state = 543
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_restFunctionResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or _la==150:
                self.state = 547
                self.restResultName()


            self.state = 550
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 553
                self.match(MRSParser.OR_SYMBOL)
                self.state = 554
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 557
            self.match(MRSParser.REST_SYMBOL)
            self.state = 558
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 559
            self.match(MRSParser.SET_SYMBOL)
            self.state = 560
            self.contentSetRequestPath()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 561
                self.match(MRSParser.ON_SYMBOL)
                self.state = 563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 562
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 565
                self.serviceRequestPath()


            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 568
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 569
                self.directoryFilePath()


            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261007895732944896) != 0):
                self.state = 572
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 581
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55, 56]:
                    self.state = 577
                    self.enabledDisabled()
                    pass
                elif token in [21]:
                    self.state = 578
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 579
                    self.jsonOptions()
                    pass
                elif token in [60]:
                    self.state = 580
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 583 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1261007895732944896) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 586
                self.match(MRSParser.OR_SYMBOL)
                self.state = 587
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 590
            self.match(MRSParser.REST_SYMBOL)
            self.state = 591
            _la = self._input.LA(1)
            if not(_la==21 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 592
            self.match(MRSParser.APP_SYMBOL)
            self.state = 593
            self.authAppName()
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 594
                self.match(MRSParser.ON_SYMBOL)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 595
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 598
                self.serviceRequestPath()


            self.state = 601
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 605
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 602
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [79]:
                self.state = 603
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [151, 152]:
                self.state = 604
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & 144115263237783553) != 0):
                self.state = 607
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55, 56]:
                    self.state = 614
                    self.enabledDisabled()
                    pass
                elif token in [60]:
                    self.state = 615
                    self.comments()
                    pass
                elif token in [81]:
                    self.state = 616
                    self.allowNewUsersToRegister()
                    pass
                elif token in [24]:
                    self.state = 617
                    self.defaultRole()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 620 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 24)) & ~0x3f) == 0 and ((1 << (_la - 24)) & 144115263237783553) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 623
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 624
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 625
                self.match(MRSParser.TO_SYMBOL)
                self.state = 626
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 630
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 631
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 634
                self.match(MRSParser.OR_SYMBOL)
                self.state = 635
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 638
            self.match(MRSParser.REST_SYMBOL)
            self.state = 639
            self.match(MRSParser.USER_SYMBOL)
            self.state = 640
            self.userName()
            self.state = 641
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 642
            self.authAppName()
            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 643
                self.match(MRSParser.ON_SYMBOL)
                self.state = 645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 644
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 647
                self.serviceRequestPath()


            self.state = 650
            self.match(MRSParser.IDENTIFIED_SYMBOL)
            self.state = 651
            self.match(MRSParser.BY_SYMBOL)
            self.state = 652
            self.userPassword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 659
            self.match(MRSParser.REST_SYMBOL)
            self.state = 660
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 661
            self.serviceRequestPath()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 662
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 663
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 664
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 665
                self.newServiceRequestPath()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1261007895732944896) != 0):
                self.state = 668
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 672
            self.match(MRSParser.REST_SYMBOL)
            self.state = 673
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 674
                self.schemaRequestPath()


            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 677
                self.match(MRSParser.ON_SYMBOL)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 678
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 681
                self.serviceRequestPath()


            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 684
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 685
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 686
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 687
                self.newSchemaRequestPath()


            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 690
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 691
                self.schemaName()


            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 35785667510305) != 0):
                self.state = 694
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 698
            self.match(MRSParser.REST_SYMBOL)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 699
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 702
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 705
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 708
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 709
            self.viewRequestPath()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 710
                self.match(MRSParser.ON_SYMBOL)
                self.state = 711
                self.serviceSchemaSelector()


            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 714
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 715
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 716
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 717
                self.newViewRequestPath()


            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==83:
                self.state = 720
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 721
                self.restObjectName()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 8129) != 0):
                    self.state = 722
                    self.graphQlCrudOptions()


                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 725
                    self.graphQlObj()




            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 317260644225057) != 0):
                self.state = 730
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 734
            self.match(MRSParser.REST_SYMBOL)
            self.state = 735
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 736
            self.procedureRequestPath()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 737
                self.match(MRSParser.ON_SYMBOL)
                self.state = 738
                self.serviceSchemaSelector()


            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 741
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 742
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 743
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 744
                self.newProcedureRequestPath()


            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 747
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148 or _la==150:
                    self.state = 748
                    self.restObjectName()


                self.state = 751
                self.graphQlObj()


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 754
                self.restProcedureResult()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 317260644225057) != 0):
                self.state = 760
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 764
            self.match(MRSParser.REST_SYMBOL)
            self.state = 765
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 766
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 769
            self.match(MRSParser.REST_SYMBOL)
            self.state = 770
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 771
            self.schemaRequestPath()
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 772
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 773
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 776
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 780
            self.match(MRSParser.REST_SYMBOL)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 781
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 784
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 787
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 790
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 791
            self.viewRequestPath()
            self.state = 794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 792
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 793
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 797
            self.match(MRSParser.REST_SYMBOL)
            self.state = 798
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 799
            self.procedureRequestPath()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 800
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 801
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 805
            self.match(MRSParser.REST_SYMBOL)
            self.state = 806
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 807
            self.functionRequestPath()
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 808
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 809
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 813
            self.match(MRSParser.REST_SYMBOL)
            self.state = 814
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 815
            self.match(MRSParser.SET_SYMBOL)
            self.state = 816
            self.contentSetRequestPath()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 817
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 818
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 821
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 825
            self.match(MRSParser.REST_SYMBOL)
            self.state = 826
            _la = self._input.LA(1)
            if not(_la==21 or _la==74):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 827
            self.match(MRSParser.APP_SYMBOL)
            self.state = 828
            self.authAppName()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 829
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 830
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 833
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_dropRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 837
            self.match(MRSParser.REST_SYMBOL)
            self.state = 838
            self.match(MRSParser.USER_SYMBOL)
            self.state = 839
            self.userName()
            self.state = 840
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 841
            self.authAppName()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 842
                self.match(MRSParser.ON_SYMBOL)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 843
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 846
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(MRSParser.USE_SYMBOL)
            self.state = 850
            self.match(MRSParser.REST_SYMBOL)
            self.state = 851
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 854
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 855
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 859
            self.match(MRSParser.REST_SYMBOL)
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 860
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 863
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 866
            self.match(MRSParser.REST_SYMBOL)
            self.state = 867
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 870
            self.match(MRSParser.REST_SYMBOL)
            self.state = 871
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 872
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 873
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 876
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 880
            self.match(MRSParser.REST_SYMBOL)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 881
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 884
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 887
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 890
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 891
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 892
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 896
            self.match(MRSParser.REST_SYMBOL)
            self.state = 897
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 898
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 899
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 903
            self.match(MRSParser.REST_SYMBOL)
            self.state = 904
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 905
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 906
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 910
            self.match(MRSParser.REST_SYMBOL)
            self.state = 911
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 912
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 913
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 914
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 917
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 921
            self.match(MRSParser.REST_SYMBOL)
            self.state = 922
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 923
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9 or _la==10:
                self.state = 924
                _la = self._input.LA(1)
                if not(_la==9 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 925
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 928
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 932
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 933
            self.match(MRSParser.REST_SYMBOL)
            self.state = 934
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & 343597383681) != 0):
                self.state = 935
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 939
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 940
            self.match(MRSParser.REST_SYMBOL)
            self.state = 941
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 942
                self.schemaRequestPath()


            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 945
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 946
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 949
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 953
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 954
            self.match(MRSParser.REST_SYMBOL)
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 955
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 958
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 961
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 964
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 965
            self.viewRequestPath()
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 966
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 967
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 971
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 972
            self.match(MRSParser.REST_SYMBOL)
            self.state = 973
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 974
            self.procedureRequestPath()
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 975
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 976
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 980
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 981
            self.match(MRSParser.REST_SYMBOL)
            self.state = 982
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 983
            self.functionRequestPath()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 984
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 985
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_showCreateRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 989
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 990
            self.match(MRSParser.REST_SYMBOL)
            self.state = 991
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 992
            self.match(MRSParser.APP_SYMBOL)
            self.state = 993
            self.authAppName()
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 994
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 995
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 998
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or _la==150:
                self.state = 1001
                self.hostAndPortIdentifier()


            self.state = 1004
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==148 or _la==150:
                self.state = 1006
                self.hostAndPortIdentifier()


            self.state = 1009
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.identifier()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==123:
                    self.state = 1033
                    self.dotIdentifier()
                    self.state = 1038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.dottedIdentifier()
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 1042
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 1043
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(MRSParser.DIV_OPERATOR)
            self.state = 1047
            self.dottedIdentifier()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 1048
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 1049
                self.dottedIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            _la = self._input.LA(1)
            if not(_la==151 or _la==152):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1055
                self.jsonPair()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 1056
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1057
                    self.jsonPair()
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1063
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1066
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1070
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1071
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0) or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 4483955294211) != 0):
                self.state = 1074
                self.jsonValue()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 1075
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1076
                    self.jsonValue()
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1084
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1097
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1086
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [109, 110, 145]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109 or _la==110:
                    self.state = 1087
                    _la = self._input.LA(1)
                    if not(_la==109 or _la==110):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1090
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1092
                self.jsonObj()
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1093
                self.jsonArr()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1094
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1095
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1096
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1099
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1100
                self.graphQlPair()
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==124:
                    self.state = 1101
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1102
                    self.graphQlPair()
                    self.state = 1107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1108
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1110
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1111
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SELECT_SYMBOL, i)

        def AT_NOSELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOSELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOSELECT_SYMBOL, i)

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1114
                _la = self._input.LA(1)
                if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 8129) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1117 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 8129) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.graphQlPairKey()
            self.state = 1120
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1121
            self.graphQlPairValue()
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.state = 1122
                self.match(MRSParser.AT_IN_SYMBOL)
                pass
            elif token in [86]:
                self.state = 1123
                self.match(MRSParser.AT_OUT_SYMBOL)
                pass
            elif token in [84]:
                self.state = 1124
                self.match(MRSParser.AT_INOUT_SYMBOL)
                pass
            elif token in [87]:
                self.state = 1125
                self.match(MRSParser.AT_NOCHECK_SYMBOL)
                pass
            elif token in [89]:
                self.state = 1126
                self.match(MRSParser.AT_SORTABLE_SYMBOL)
                pass
            elif token in [90]:
                self.state = 1127
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)
                pass
            elif token in [91]:
                self.state = 1128
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
                pass
            elif token in [92]:
                self.state = 1129
                self.match(MRSParser.AT_UNNEST_SYMBOL)
                pass
            elif token in [93]:
                self.state = 1130
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1131
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1132
                self.graphQlDatatypeValue()
                self.state = 1133
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [88, 94, 95, 96, 97, 98, 99, 100]:
                self.state = 1135
                self.graphQlCrudOptions()
                pass
            elif token in [124, 129, 130]:
                pass
            else:
                pass
            self.state = 1139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 1138
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6563677734912) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 450523) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_graphQlPairKey)
        try:
            self.state = 1146
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [148, 150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1144
                self.identifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1145
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_graphQlPairValue)
        try:
            self.state = 1150
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 150]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1148
                self.qualifiedIdentifier()
                pass
            elif token in [11, 12, 13, 14, 15, 16, 20, 22, 25, 26, 30, 31, 32, 33, 34, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1152
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [148, 150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1153
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [148, 150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_graphQlValue)
        try:
            self.state = 1162
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148, 150]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self.qualifiedIdentifier()
                pass
            elif token in [129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.graphQlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            _la = self._input.LA(1)
            if not(_la==148 or _la==150):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.identifier()
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==124:
                self.state = 1175
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1176
                self.identifier()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1183
            self.identifierList()
            self.state = 1184
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1186
            self.identifier()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 1187
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.identifier()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 1191
                self.dotIdentifier()
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 1192
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1198
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





