# Copyright (c) 2023, 2025, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,198,1703,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,1,0,1,0,4,
        0,319,8,0,11,0,12,0,320,1,0,5,0,324,8,0,10,0,12,0,327,9,0,3,0,329,
        8,0,1,0,3,0,332,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,390,8,1,
        1,2,1,2,1,3,1,3,1,4,1,4,3,4,398,8,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,
        1,7,1,7,1,8,1,8,3,8,411,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,11,1,11,3,11,424,8,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,3,12,
        433,8,12,1,13,1,13,1,13,4,13,438,8,13,11,13,12,13,439,1,14,1,14,
        1,14,3,14,445,8,14,1,15,1,15,1,15,3,15,450,8,15,1,15,1,15,1,15,1,
        15,3,15,456,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,
        16,467,8,16,11,16,12,16,468,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,5,19,481,8,19,10,19,12,19,484,9,19,1,20,1,20,1,20,1,
        21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,
        24,1,24,3,24,504,8,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,26,1,27,1,27,1,27,3,27,519,8,27,1,27,1,27,1,27,3,27,524,8,27,
        1,27,1,27,3,27,528,8,27,1,27,3,27,531,8,27,1,27,1,27,1,27,3,27,536,
        8,27,1,28,1,28,1,28,1,28,1,28,1,28,4,28,544,8,28,11,28,12,28,545,
        1,29,1,29,1,29,3,29,551,8,29,1,29,1,29,3,29,555,8,29,1,29,3,29,558,
        8,29,1,29,1,29,1,29,1,29,3,29,564,8,29,1,29,1,29,1,29,1,29,3,29,
        570,8,29,1,29,3,29,573,8,29,1,29,3,29,576,8,29,1,29,3,29,579,8,29,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,4,30,590,8,30,11,30,
        12,30,591,1,31,1,31,1,31,1,31,3,31,598,8,31,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,34,1,34,1,34,3,34,610,8,34,1,34,1,34,1,34,1,34,
        1,34,3,34,617,8,34,1,34,1,34,1,34,1,34,3,34,623,8,34,1,34,3,34,626,
        8,34,1,34,5,34,629,8,34,10,34,12,34,632,9,34,1,34,3,34,635,8,34,
        1,35,1,35,3,35,639,8,35,1,35,1,35,1,36,1,36,1,36,3,36,646,8,36,1,
        36,1,36,1,36,1,36,1,36,3,36,653,8,36,1,36,1,36,1,36,1,36,3,36,659,
        8,36,1,36,3,36,662,8,36,1,36,3,36,665,8,36,1,36,3,36,668,8,36,1,
        37,1,37,3,37,672,8,37,1,37,1,37,1,38,1,38,1,38,3,38,679,8,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,687,8,38,1,38,3,38,690,8,38,1,38,1,
        38,3,38,694,8,38,1,38,3,38,697,8,38,1,39,1,39,1,40,1,40,1,40,1,40,
        1,40,1,40,4,40,707,8,40,11,40,12,40,708,1,41,1,41,1,41,1,42,1,42,
        3,42,716,8,42,1,42,1,42,1,43,1,43,1,43,3,43,723,8,43,1,43,1,43,1,
        43,1,43,1,43,1,43,3,43,731,8,43,1,43,3,43,734,8,43,1,43,1,43,1,43,
        1,43,1,43,1,43,3,43,742,8,43,1,43,1,43,3,43,746,8,43,1,43,3,43,749,
        8,43,1,44,1,44,1,44,4,44,754,8,44,11,44,12,44,755,1,45,1,45,1,45,
        3,45,761,8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,771,8,
        45,1,45,3,45,774,8,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,4,48,787,8,48,11,48,12,48,788,1,49,1,49,3,49,793,8,
        49,1,49,1,49,1,49,1,49,1,49,3,49,800,8,49,1,50,1,50,1,50,1,50,1,
        51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,
        54,3,54,820,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,830,
        8,54,1,54,3,54,833,8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,4,57,
        842,8,57,11,57,12,57,843,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,60,
        1,60,1,60,3,60,856,8,60,1,60,1,60,1,60,1,60,1,60,3,60,863,8,60,1,
        60,1,60,1,60,1,60,3,60,869,8,60,1,60,3,60,872,8,60,3,60,874,8,60,
        1,60,3,60,877,8,60,1,61,1,61,4,61,881,8,61,11,61,12,61,882,1,62,
        1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,906,8,65,1,65,3,65,909,8,
        65,1,66,1,66,1,66,1,66,3,66,915,8,66,1,66,1,66,3,66,919,8,66,1,66,
        3,66,922,8,66,1,66,1,66,1,66,1,66,3,66,928,8,66,1,66,1,66,3,66,932,
        8,66,1,66,3,66,935,8,66,1,67,1,67,1,67,3,67,940,8,67,1,67,3,67,943,
        8,67,1,67,1,67,1,67,1,67,3,67,949,8,67,1,67,1,67,1,67,1,67,3,67,
        955,8,67,1,67,1,67,1,67,3,67,960,8,67,1,67,3,67,963,8,67,3,67,965,
        8,67,1,67,3,67,968,8,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,976,8,
        68,1,68,1,68,1,68,1,68,3,68,982,8,68,1,68,1,68,3,68,986,8,68,1,68,
        3,68,989,8,68,1,68,5,68,992,8,68,10,68,12,68,995,9,68,1,68,3,68,
        998,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1006,8,69,1,69,1,69,
        1,69,1,69,3,69,1012,8,69,1,69,1,69,3,69,1016,8,69,1,69,3,69,1019,
        8,69,1,69,5,69,1022,8,69,10,69,12,69,1025,9,69,1,69,3,69,1028,8,
        69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1037,8,70,1,70,3,70,1040,
        8,70,1,70,1,70,1,70,1,70,3,70,1046,8,70,1,70,3,70,1049,8,70,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1059,8,71,1,71,3,71,1062,
        8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        1075,8,73,1,73,3,73,1078,8,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,
        1,75,1,75,1,75,1,75,3,75,1091,8,75,1,75,3,75,1094,8,75,1,76,1,76,
        1,76,3,76,1099,8,76,1,76,3,76,1102,8,76,1,76,1,76,1,76,1,76,3,76,
        1108,8,76,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1116,8,77,1,78,1,78,
        1,78,1,78,1,78,1,78,3,78,1124,8,78,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,3,79,1133,8,79,1,79,3,79,1136,8,79,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,3,80,1145,8,80,1,80,3,80,1148,8,80,1,80,1,80,1,80,1,80,
        1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,3,84,1177,8,84,
        1,84,1,84,1,84,1,84,1,84,3,84,1184,8,84,3,84,1186,8,84,1,84,1,84,
        1,84,1,85,1,85,1,85,1,85,1,85,3,85,1196,8,85,1,86,1,86,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1209,8,87,1,88,1,88,1,88,
        1,88,1,88,3,88,1216,8,88,1,88,1,88,1,88,1,88,1,88,3,88,1223,8,88,
        3,88,1225,8,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,3,91,1246,8,91,1,92,
        1,92,1,92,3,92,1251,8,92,1,92,1,92,1,93,1,93,1,93,1,93,1,94,1,94,
        1,94,1,94,1,94,3,94,1264,8,94,1,94,3,94,1267,8,94,1,95,1,95,1,95,
        3,95,1272,8,95,1,95,3,95,1275,8,95,1,95,1,95,1,95,3,95,1280,8,95,
        1,96,1,96,1,96,1,96,1,96,3,96,1287,8,96,1,97,1,97,1,97,1,97,1,97,
        3,97,1294,8,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1302,8,98,1,98,
        3,98,1305,8,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1313,8,99,1,99,
        3,99,1316,8,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,
        1,100,3,100,1328,8,100,1,100,3,100,1331,8,100,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,3,101,1340,8,101,1,101,3,101,1343,8,101,
        3,101,1345,8,101,1,101,1,101,3,101,1349,8,101,1,101,1,101,3,101,
        1353,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,3,103,1366,8,103,1,103,1,103,1,103,3,103,1371,8,103,
        1,104,1,104,1,104,1,104,1,104,3,104,1378,8,104,1,104,1,104,3,104,
        1382,8,104,1,104,3,104,1385,8,104,1,105,1,105,1,105,1,105,3,105,
        1391,8,105,1,105,3,105,1394,8,105,1,105,1,105,1,105,1,105,3,105,
        1400,8,105,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1409,
        8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1418,8,107,
        1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1428,8,108,
        1,108,3,108,1431,8,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,3,109,1441,8,109,1,109,3,109,1444,8,109,1,109,1,109,1,109,
        1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,111,3,111,1458,
        8,111,1,111,3,111,1461,8,111,1,111,1,111,1,112,3,112,1466,8,112,
        1,112,3,112,1469,8,112,1,112,1,112,1,113,1,113,1,114,1,114,1,115,
        1,115,1,116,1,116,1,117,1,117,1,118,1,118,1,119,1,119,1,120,1,120,
        1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,125,1,125,1,126,
        1,126,1,127,1,127,3,127,1503,8,127,1,128,1,128,1,128,5,128,1508,
        8,128,10,128,12,128,1511,9,128,1,128,3,128,1514,8,128,1,129,1,129,
        1,129,5,129,1519,8,129,10,129,12,129,1522,9,129,3,129,1524,8,129,
        1,130,1,130,3,130,1528,8,130,1,130,1,130,3,130,1532,8,130,1,131,
        1,131,1,131,1,131,3,131,1538,8,131,1,131,3,131,1541,8,131,1,132,
        1,132,1,133,1,133,1,133,1,133,5,133,1549,8,133,10,133,12,133,1552,
        9,133,1,133,1,133,1,133,1,133,3,133,1558,8,133,1,134,1,134,1,134,
        1,134,1,135,1,135,1,135,1,135,5,135,1568,8,135,10,135,12,135,1571,
        9,135,3,135,1573,8,135,1,135,1,135,1,136,1,136,3,136,1579,8,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1588,8,136,1,137,
        1,137,1,137,1,137,5,137,1594,8,137,10,137,12,137,1597,9,137,1,137,
        1,137,1,137,1,137,3,137,1603,8,137,1,138,4,138,1606,8,138,11,138,
        12,138,1607,1,139,1,139,1,139,1,139,3,139,1614,8,139,1,139,3,139,
        1617,8,139,1,139,1,139,1,139,1,139,1,139,3,139,1624,8,139,1,139,
        3,139,1627,8,139,1,139,3,139,1630,8,139,1,139,3,139,1633,8,139,1,
        140,4,140,1636,8,140,11,140,12,140,1637,1,141,1,141,1,141,1,141,
        1,142,1,142,1,143,1,143,1,143,3,143,1649,8,143,1,144,1,144,3,144,
        1653,8,144,1,145,1,145,3,145,1657,8,145,1,146,1,146,3,146,1661,8,
        146,1,147,1,147,3,147,1665,8,147,1,148,1,148,1,149,1,149,1,150,1,
        150,1,151,1,151,1,152,1,152,1,153,1,153,1,153,5,153,1680,8,153,10,
        153,12,153,1683,9,153,1,154,1,154,1,154,1,154,1,155,1,155,3,155,
        1691,8,155,1,156,1,156,1,156,3,156,1696,8,156,3,156,1698,8,156,1,
        157,1,157,1,157,1,157,0,0,158,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,0,17,2,0,78,78,80,80,2,0,78,78,80,81,
        2,0,79,79,82,82,1,0,84,85,2,0,95,95,97,98,2,0,21,21,101,101,2,0,
        61,61,103,103,1,0,55,56,3,0,1,1,34,34,50,51,1,0,8,9,1,0,192,193,
        1,0,150,151,2,0,126,128,136,140,1,0,123,125,3,0,127,127,129,132,
        141,141,3,0,1,64,66,66,69,120,2,0,189,189,191,191,1852,0,328,1,0,
        0,0,2,389,1,0,0,0,4,391,1,0,0,0,6,393,1,0,0,0,8,397,1,0,0,0,10,399,
        1,0,0,0,12,402,1,0,0,0,14,405,1,0,0,0,16,408,1,0,0,0,18,414,1,0,
        0,0,20,419,1,0,0,0,22,423,1,0,0,0,24,428,1,0,0,0,26,437,1,0,0,0,
        28,441,1,0,0,0,30,446,1,0,0,0,32,466,1,0,0,0,34,470,1,0,0,0,36,472,
        1,0,0,0,38,475,1,0,0,0,40,485,1,0,0,0,42,488,1,0,0,0,44,491,1,0,
        0,0,46,494,1,0,0,0,48,498,1,0,0,0,50,505,1,0,0,0,52,510,1,0,0,0,
        54,515,1,0,0,0,56,543,1,0,0,0,58,547,1,0,0,0,60,589,1,0,0,0,62,593,
        1,0,0,0,64,599,1,0,0,0,66,602,1,0,0,0,68,606,1,0,0,0,70,636,1,0,
        0,0,72,642,1,0,0,0,74,669,1,0,0,0,76,675,1,0,0,0,78,698,1,0,0,0,
        80,706,1,0,0,0,82,710,1,0,0,0,84,713,1,0,0,0,86,719,1,0,0,0,88,753,
        1,0,0,0,90,757,1,0,0,0,92,775,1,0,0,0,94,777,1,0,0,0,96,786,1,0,
        0,0,98,792,1,0,0,0,100,801,1,0,0,0,102,805,1,0,0,0,104,809,1,0,0,
        0,106,813,1,0,0,0,108,816,1,0,0,0,110,834,1,0,0,0,112,836,1,0,0,
        0,114,841,1,0,0,0,116,845,1,0,0,0,118,849,1,0,0,0,120,852,1,0,0,
        0,122,880,1,0,0,0,124,884,1,0,0,0,126,886,1,0,0,0,128,888,1,0,0,
        0,130,897,1,0,0,0,132,910,1,0,0,0,134,936,1,0,0,0,136,969,1,0,0,
        0,138,999,1,0,0,0,140,1029,1,0,0,0,142,1050,1,0,0,0,144,1063,1,0,
        0,0,146,1065,1,0,0,0,148,1079,1,0,0,0,150,1084,1,0,0,0,152,1095,
        1,0,0,0,154,1109,1,0,0,0,156,1117,1,0,0,0,158,1125,1,0,0,0,160,1137,
        1,0,0,0,162,1153,1,0,0,0,164,1159,1,0,0,0,166,1166,1,0,0,0,168,1171,
        1,0,0,0,170,1195,1,0,0,0,172,1197,1,0,0,0,174,1199,1,0,0,0,176,1210,
        1,0,0,0,178,1229,1,0,0,0,180,1238,1,0,0,0,182,1245,1,0,0,0,184,1247,
        1,0,0,0,186,1254,1,0,0,0,188,1258,1,0,0,0,190,1268,1,0,0,0,192,1281,
        1,0,0,0,194,1288,1,0,0,0,196,1295,1,0,0,0,198,1306,1,0,0,0,200,1321,
        1,0,0,0,202,1332,1,0,0,0,204,1354,1,0,0,0,206,1360,1,0,0,0,208,1372,
        1,0,0,0,210,1386,1,0,0,0,212,1401,1,0,0,0,214,1410,1,0,0,0,216,1419,
        1,0,0,0,218,1432,1,0,0,0,220,1449,1,0,0,0,222,1457,1,0,0,0,224,1465,
        1,0,0,0,226,1472,1,0,0,0,228,1474,1,0,0,0,230,1476,1,0,0,0,232,1478,
        1,0,0,0,234,1480,1,0,0,0,236,1482,1,0,0,0,238,1484,1,0,0,0,240,1486,
        1,0,0,0,242,1488,1,0,0,0,244,1490,1,0,0,0,246,1492,1,0,0,0,248,1494,
        1,0,0,0,250,1496,1,0,0,0,252,1498,1,0,0,0,254,1502,1,0,0,0,256,1504,
        1,0,0,0,258,1523,1,0,0,0,260,1527,1,0,0,0,262,1540,1,0,0,0,264,1542,
        1,0,0,0,266,1557,1,0,0,0,268,1559,1,0,0,0,270,1563,1,0,0,0,272,1587,
        1,0,0,0,274,1602,1,0,0,0,276,1605,1,0,0,0,278,1609,1,0,0,0,280,1635,
        1,0,0,0,282,1639,1,0,0,0,284,1643,1,0,0,0,286,1648,1,0,0,0,288,1652,
        1,0,0,0,290,1656,1,0,0,0,292,1660,1,0,0,0,294,1664,1,0,0,0,296,1666,
        1,0,0,0,298,1668,1,0,0,0,300,1670,1,0,0,0,302,1672,1,0,0,0,304,1674,
        1,0,0,0,306,1676,1,0,0,0,308,1684,1,0,0,0,310,1688,1,0,0,0,312,1692,
        1,0,0,0,314,1699,1,0,0,0,316,325,3,2,1,0,317,319,5,166,0,0,318,317,
        1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,322,
        1,0,0,0,322,324,3,2,1,0,323,318,1,0,0,0,324,327,1,0,0,0,325,323,
        1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,328,316,
        1,0,0,0,328,329,1,0,0,0,329,331,1,0,0,0,330,332,5,166,0,0,331,330,
        1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,0,0,1,334,1,1,
        0,0,0,335,390,3,24,12,0,336,390,3,30,15,0,337,390,3,54,27,0,338,
        390,3,58,29,0,339,390,3,68,34,0,340,390,3,72,36,0,341,390,3,76,38,
        0,342,390,3,86,43,0,343,390,3,90,45,0,344,390,3,120,60,0,345,390,
        3,108,54,0,346,390,3,128,64,0,347,390,3,130,65,0,348,390,3,132,66,
        0,349,390,3,134,67,0,350,390,3,136,68,0,351,390,3,138,69,0,352,390,
        3,140,70,0,353,390,3,142,71,0,354,390,3,146,73,0,355,390,3,148,74,
        0,356,390,3,150,75,0,357,390,3,152,76,0,358,390,3,154,77,0,359,390,
        3,156,78,0,360,390,3,158,79,0,361,390,3,160,80,0,362,390,3,162,81,
        0,363,390,3,164,82,0,364,390,3,166,83,0,365,390,3,174,87,0,366,390,
        3,168,84,0,367,390,3,176,88,0,368,390,3,178,89,0,369,390,3,180,90,
        0,370,390,3,184,92,0,371,390,3,186,93,0,372,390,3,188,94,0,373,390,
        3,190,95,0,374,390,3,192,96,0,375,390,3,194,97,0,376,390,3,196,98,
        0,377,390,3,198,99,0,378,390,3,200,100,0,379,390,3,202,101,0,380,
        390,3,204,102,0,381,390,3,206,103,0,382,390,3,208,104,0,383,390,
        3,210,105,0,384,390,3,212,106,0,385,390,3,214,107,0,386,390,3,216,
        108,0,387,390,3,218,109,0,388,390,3,220,110,0,389,335,1,0,0,0,389,
        336,1,0,0,0,389,337,1,0,0,0,389,338,1,0,0,0,389,339,1,0,0,0,389,
        340,1,0,0,0,389,341,1,0,0,0,389,342,1,0,0,0,389,343,1,0,0,0,389,
        344,1,0,0,0,389,345,1,0,0,0,389,346,1,0,0,0,389,347,1,0,0,0,389,
        348,1,0,0,0,389,349,1,0,0,0,389,350,1,0,0,0,389,351,1,0,0,0,389,
        352,1,0,0,0,389,353,1,0,0,0,389,354,1,0,0,0,389,355,1,0,0,0,389,
        356,1,0,0,0,389,357,1,0,0,0,389,358,1,0,0,0,389,359,1,0,0,0,389,
        360,1,0,0,0,389,361,1,0,0,0,389,362,1,0,0,0,389,363,1,0,0,0,389,
        364,1,0,0,0,389,365,1,0,0,0,389,366,1,0,0,0,389,367,1,0,0,0,389,
        368,1,0,0,0,389,369,1,0,0,0,389,370,1,0,0,0,389,371,1,0,0,0,389,
        372,1,0,0,0,389,373,1,0,0,0,389,374,1,0,0,0,389,375,1,0,0,0,389,
        376,1,0,0,0,389,377,1,0,0,0,389,378,1,0,0,0,389,379,1,0,0,0,389,
        380,1,0,0,0,389,381,1,0,0,0,389,382,1,0,0,0,389,383,1,0,0,0,389,
        384,1,0,0,0,389,385,1,0,0,0,389,386,1,0,0,0,389,387,1,0,0,0,389,
        388,1,0,0,0,390,3,1,0,0,0,391,392,7,0,0,0,392,5,1,0,0,0,393,394,
        7,1,0,0,394,7,1,0,0,0,395,398,3,264,132,0,396,398,5,24,0,0,397,395,
        1,0,0,0,397,396,1,0,0,0,398,9,1,0,0,0,399,400,5,26,0,0,400,401,3,
        272,136,0,401,11,1,0,0,0,402,403,5,71,0,0,403,404,3,272,136,0,404,
        13,1,0,0,0,405,406,5,86,0,0,406,407,3,264,132,0,407,15,1,0,0,0,408,
        410,5,21,0,0,409,411,5,28,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,
        412,1,0,0,0,412,413,5,91,0,0,413,17,1,0,0,0,414,415,5,92,0,0,415,
        416,5,93,0,0,416,417,5,30,0,0,417,418,3,20,10,0,418,19,1,0,0,0,419,
        420,5,184,0,0,420,21,1,0,0,0,421,422,5,73,0,0,422,424,3,222,111,
        0,423,421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,426,5,12,0,
        0,426,427,3,226,113,0,427,23,1,0,0,0,428,429,5,69,0,0,429,430,5,
        70,0,0,430,432,5,71,0,0,431,433,3,26,13,0,432,431,1,0,0,0,432,433,
        1,0,0,0,433,25,1,0,0,0,434,438,3,4,2,0,435,438,3,10,5,0,436,438,
        3,28,14,0,437,434,1,0,0,0,437,435,1,0,0,0,437,436,1,0,0,0,438,439,
        1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,27,1,0,0,0,441,444,5,
        34,0,0,442,443,5,27,0,0,443,445,5,90,0,0,444,442,1,0,0,0,444,445,
        1,0,0,0,445,29,1,0,0,0,446,449,5,1,0,0,447,448,5,2,0,0,448,450,5,
        3,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,452,5,
        70,0,0,452,453,5,73,0,0,453,455,3,222,111,0,454,456,3,32,16,0,455,
        454,1,0,0,0,455,456,1,0,0,0,456,31,1,0,0,0,457,467,3,4,2,0,458,467,
        3,34,17,0,459,467,3,36,18,0,460,467,3,38,19,0,461,467,3,10,5,0,462,
        467,3,14,7,0,463,467,3,12,6,0,464,467,3,50,25,0,465,467,3,52,26,
        0,466,457,1,0,0,0,466,458,1,0,0,0,466,459,1,0,0,0,466,460,1,0,0,
        0,466,461,1,0,0,0,466,462,1,0,0,0,466,463,1,0,0,0,466,464,1,0,0,
        0,466,465,1,0,0,0,467,468,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,
        0,469,33,1,0,0,0,470,471,7,2,0,0,471,35,1,0,0,0,472,473,5,83,0,0,
        473,474,7,3,0,0,474,37,1,0,0,0,475,482,5,21,0,0,476,481,3,40,20,
        0,477,481,3,42,21,0,478,481,3,44,22,0,479,481,3,46,23,0,480,476,
        1,0,0,0,480,477,1,0,0,0,480,478,1,0,0,0,480,479,1,0,0,0,481,484,
        1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,39,1,0,0,0,484,482,1,
        0,0,0,485,486,5,22,0,0,486,487,3,8,4,0,487,41,1,0,0,0,488,489,5,
        88,0,0,489,490,3,8,4,0,490,43,1,0,0,0,491,492,5,23,0,0,492,493,3,
        8,4,0,493,45,1,0,0,0,494,495,5,30,0,0,495,496,5,94,0,0,496,497,3,
        8,4,0,497,47,1,0,0,0,498,499,5,25,0,0,499,500,5,89,0,0,500,503,5,
        12,0,0,501,504,3,296,148,0,502,504,5,24,0,0,503,501,1,0,0,0,503,
        502,1,0,0,0,504,49,1,0,0,0,505,506,5,67,0,0,506,507,5,101,0,0,507,
        508,5,103,0,0,508,509,3,92,46,0,509,51,1,0,0,0,510,511,5,68,0,0,
        511,512,5,101,0,0,512,513,5,103,0,0,513,514,3,92,46,0,514,53,1,0,
        0,0,515,518,5,1,0,0,516,517,5,2,0,0,517,519,5,3,0,0,518,516,1,0,
        0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,521,5,70,0,0,521,523,5,12,
        0,0,522,524,3,226,113,0,523,522,1,0,0,0,523,524,1,0,0,0,524,530,
        1,0,0,0,525,527,5,8,0,0,526,528,5,73,0,0,527,526,1,0,0,0,527,528,
        1,0,0,0,528,529,1,0,0,0,529,531,3,222,111,0,530,525,1,0,0,0,530,
        531,1,0,0,0,531,532,1,0,0,0,532,533,5,9,0,0,533,535,3,296,148,0,
        534,536,3,56,28,0,535,534,1,0,0,0,535,536,1,0,0,0,536,55,1,0,0,0,
        537,544,3,6,3,0,538,544,3,16,8,0,539,544,3,18,9,0,540,544,3,10,5,
        0,541,544,3,14,7,0,542,544,3,12,6,0,543,537,1,0,0,0,543,538,1,0,
        0,0,543,539,1,0,0,0,543,540,1,0,0,0,543,541,1,0,0,0,543,542,1,0,
        0,0,544,545,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,57,1,0,0,
        0,547,550,5,1,0,0,548,549,5,2,0,0,549,551,5,3,0,0,550,548,1,0,0,
        0,550,551,1,0,0,0,551,552,1,0,0,0,552,554,5,70,0,0,553,555,5,47,
        0,0,554,553,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,558,5,115,
        0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,5,14,
        0,0,560,563,3,230,115,0,561,562,5,8,0,0,562,564,3,22,11,0,563,561,
        1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,566,5,19,0,0,566,569,
        3,310,155,0,567,568,5,112,0,0,568,570,3,234,117,0,569,567,1,0,0,
        0,569,570,1,0,0,0,570,572,1,0,0,0,571,573,3,276,138,0,572,571,1,
        0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,576,3,274,137,0,575,574,
        1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,579,3,60,30,0,578,577,
        1,0,0,0,578,579,1,0,0,0,579,59,1,0,0,0,580,590,3,6,3,0,581,590,3,
        16,8,0,582,590,3,18,9,0,583,590,3,10,5,0,584,590,3,14,7,0,585,590,
        3,12,6,0,586,590,3,62,31,0,587,590,3,64,32,0,588,590,3,66,33,0,589,
        580,1,0,0,0,589,581,1,0,0,0,589,582,1,0,0,0,589,583,1,0,0,0,589,
        584,1,0,0,0,589,585,1,0,0,0,589,586,1,0,0,0,589,587,1,0,0,0,589,
        588,1,0,0,0,590,591,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,
        61,1,0,0,0,593,594,5,95,0,0,594,597,5,32,0,0,595,598,3,264,132,0,
        596,598,5,96,0,0,597,595,1,0,0,0,597,596,1,0,0,0,598,63,1,0,0,0,
        599,600,5,33,0,0,600,601,7,4,0,0,601,65,1,0,0,0,602,603,5,21,0,0,
        603,604,5,15,0,0,604,605,3,310,155,0,605,67,1,0,0,0,606,609,5,1,
        0,0,607,608,5,2,0,0,608,610,5,3,0,0,609,607,1,0,0,0,609,610,1,0,
        0,0,610,611,1,0,0,0,611,612,5,70,0,0,612,613,5,15,0,0,613,616,3,
        240,120,0,614,615,5,8,0,0,615,617,3,22,11,0,616,614,1,0,0,0,616,
        617,1,0,0,0,617,618,1,0,0,0,618,619,5,19,0,0,619,625,3,310,155,0,
        620,622,5,66,0,0,621,623,3,234,117,0,622,621,1,0,0,0,622,623,1,0,
        0,0,623,624,1,0,0,0,624,626,3,274,137,0,625,620,1,0,0,0,625,626,
        1,0,0,0,626,630,1,0,0,0,627,629,3,70,35,0,628,627,1,0,0,0,629,632,
        1,0,0,0,630,628,1,0,0,0,630,631,1,0,0,0,631,634,1,0,0,0,632,630,
        1,0,0,0,633,635,3,60,30,0,634,633,1,0,0,0,634,635,1,0,0,0,635,69,
        1,0,0,0,636,638,5,77,0,0,637,639,3,236,118,0,638,637,1,0,0,0,638,
        639,1,0,0,0,639,640,1,0,0,0,640,641,3,274,137,0,641,71,1,0,0,0,642,
        645,5,1,0,0,643,644,5,2,0,0,644,646,5,3,0,0,645,643,1,0,0,0,645,
        646,1,0,0,0,646,647,1,0,0,0,647,648,5,70,0,0,648,649,5,16,0,0,649,
        652,3,242,121,0,650,651,5,8,0,0,651,653,3,22,11,0,652,650,1,0,0,
        0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,5,19,0,0,655,661,3,310,
        155,0,656,658,5,66,0,0,657,659,3,234,117,0,658,657,1,0,0,0,658,659,
        1,0,0,0,659,660,1,0,0,0,660,662,3,274,137,0,661,656,1,0,0,0,661,
        662,1,0,0,0,662,664,1,0,0,0,663,665,3,74,37,0,664,663,1,0,0,0,664,
        665,1,0,0,0,665,667,1,0,0,0,666,668,3,60,30,0,667,666,1,0,0,0,667,
        668,1,0,0,0,668,73,1,0,0,0,669,671,5,77,0,0,670,672,3,236,118,0,
        671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,674,3,274,137,
        0,674,75,1,0,0,0,675,678,5,1,0,0,676,677,5,2,0,0,677,679,5,3,0,0,
        678,676,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,681,5,70,0,0,
        681,682,5,94,0,0,682,683,5,38,0,0,683,689,3,248,124,0,684,686,5,
        8,0,0,685,687,5,73,0,0,686,685,1,0,0,0,686,687,1,0,0,0,687,688,1,
        0,0,0,688,690,3,222,111,0,689,684,1,0,0,0,689,690,1,0,0,0,690,693,
        1,0,0,0,691,692,5,9,0,0,692,694,3,78,39,0,693,691,1,0,0,0,693,694,
        1,0,0,0,694,696,1,0,0,0,695,697,3,80,40,0,696,695,1,0,0,0,696,697,
        1,0,0,0,697,77,1,0,0,0,698,699,3,264,132,0,699,79,1,0,0,0,700,707,
        3,6,3,0,701,707,3,16,8,0,702,707,3,10,5,0,703,707,3,14,7,0,704,707,
        3,82,41,0,705,707,3,84,42,0,706,700,1,0,0,0,706,701,1,0,0,0,706,
        702,1,0,0,0,706,703,1,0,0,0,706,704,1,0,0,0,706,705,1,0,0,0,707,
        708,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,81,1,0,0,0,710,711,
        5,43,0,0,711,712,3,264,132,0,712,83,1,0,0,0,713,715,5,48,0,0,714,
        716,5,116,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,
        718,5,114,0,0,718,85,1,0,0,0,719,722,5,1,0,0,720,721,5,2,0,0,721,
        723,5,3,0,0,722,720,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,
        725,5,70,0,0,725,726,5,94,0,0,726,727,5,45,0,0,727,728,3,252,126,
        0,728,733,5,8,0,0,729,731,5,73,0,0,730,729,1,0,0,0,730,731,1,0,0,
        0,731,732,1,0,0,0,732,734,3,222,111,0,733,730,1,0,0,0,733,734,1,
        0,0,0,734,735,1,0,0,0,735,736,5,94,0,0,736,737,5,38,0,0,737,745,
        3,248,124,0,738,739,5,9,0,0,739,746,3,78,39,0,740,742,5,46,0,0,741,
        740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,5,94,0,0,744,
        746,3,264,132,0,745,738,1,0,0,0,745,741,1,0,0,0,746,748,1,0,0,0,
        747,749,3,88,44,0,748,747,1,0,0,0,748,749,1,0,0,0,749,87,1,0,0,0,
        750,754,3,6,3,0,751,754,3,16,8,0,752,754,3,10,5,0,753,750,1,0,0,
        0,753,751,1,0,0,0,753,752,1,0,0,0,754,755,1,0,0,0,755,753,1,0,0,
        0,755,756,1,0,0,0,756,89,1,0,0,0,757,760,5,1,0,0,758,759,5,2,0,0,
        759,761,5,3,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,
        762,763,5,70,0,0,763,764,7,5,0,0,764,765,5,103,0,0,765,766,3,92,
        46,0,766,770,5,106,0,0,767,771,5,107,0,0,768,771,5,108,0,0,769,771,
        3,94,47,0,770,767,1,0,0,0,770,768,1,0,0,0,770,769,1,0,0,0,771,773,
        1,0,0,0,772,774,3,96,48,0,773,772,1,0,0,0,773,774,1,0,0,0,774,91,
        1,0,0,0,775,776,3,264,132,0,776,93,1,0,0,0,777,778,3,264,132,0,778,
        95,1,0,0,0,779,787,3,4,2,0,780,787,3,14,7,0,781,787,3,98,49,0,782,
        787,3,100,50,0,783,787,3,102,51,0,784,787,3,104,52,0,785,787,3,106,
        53,0,786,779,1,0,0,0,786,780,1,0,0,0,786,781,1,0,0,0,786,782,1,0,
        0,0,786,783,1,0,0,0,786,784,1,0,0,0,786,785,1,0,0,0,787,788,1,0,
        0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,97,1,0,0,0,790,791,5,64,
        0,0,791,793,5,28,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,794,1,0,
        0,0,794,795,5,110,0,0,795,796,5,7,0,0,796,799,5,109,0,0,797,798,
        5,42,0,0,798,800,5,111,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,99,
        1,0,0,0,801,802,5,24,0,0,802,803,5,41,0,0,803,804,3,264,132,0,804,
        101,1,0,0,0,805,806,7,6,0,0,806,807,5,104,0,0,807,808,3,264,132,
        0,808,103,1,0,0,0,809,810,7,6,0,0,810,811,5,105,0,0,811,812,3,264,
        132,0,812,105,1,0,0,0,813,814,5,62,0,0,814,815,3,264,132,0,815,107,
        1,0,0,0,816,819,5,1,0,0,817,818,5,2,0,0,818,820,5,3,0,0,819,817,
        1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,822,5,70,0,0,822,823,
        5,25,0,0,823,824,3,110,55,0,824,825,5,177,0,0,825,829,3,92,46,0,
        826,827,5,39,0,0,827,828,5,40,0,0,828,830,3,112,56,0,829,826,1,0,
        0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,833,3,114,57,0,832,831,1,
        0,0,0,832,833,1,0,0,0,833,109,1,0,0,0,834,835,3,264,132,0,835,111,
        1,0,0,0,836,837,3,264,132,0,837,113,1,0,0,0,838,842,3,118,59,0,839,
        842,3,116,58,0,840,842,3,10,5,0,841,838,1,0,0,0,841,839,1,0,0,0,
        841,840,1,0,0,0,842,843,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,
        844,115,1,0,0,0,845,846,5,103,0,0,846,847,5,26,0,0,847,848,3,272,
        136,0,848,117,1,0,0,0,849,850,5,54,0,0,850,851,7,7,0,0,851,119,1,
        0,0,0,852,855,5,1,0,0,853,854,5,2,0,0,854,856,5,3,0,0,855,853,1,
        0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,858,5,70,0,0,858,859,5,
        41,0,0,859,862,3,126,63,0,860,861,5,118,0,0,861,863,3,124,62,0,862,
        860,1,0,0,0,862,863,1,0,0,0,863,873,1,0,0,0,864,871,5,8,0,0,865,
        866,5,60,0,0,866,872,5,73,0,0,867,869,5,73,0,0,868,867,1,0,0,0,868,
        869,1,0,0,0,869,870,1,0,0,0,870,872,3,222,111,0,871,865,1,0,0,0,
        871,868,1,0,0,0,872,874,1,0,0,0,873,864,1,0,0,0,873,874,1,0,0,0,
        874,876,1,0,0,0,875,877,3,122,61,0,876,875,1,0,0,0,876,877,1,0,0,
        0,877,121,1,0,0,0,878,881,3,10,5,0,879,881,3,14,7,0,880,878,1,0,
        0,0,880,879,1,0,0,0,881,882,1,0,0,0,882,880,1,0,0,0,882,883,1,0,
        0,0,883,123,1,0,0,0,884,885,3,264,132,0,885,125,1,0,0,0,886,887,
        3,264,132,0,887,127,1,0,0,0,888,889,5,44,0,0,889,890,5,70,0,0,890,
        891,5,73,0,0,891,892,3,222,111,0,892,893,5,7,0,0,893,894,5,87,0,
        0,894,895,5,22,0,0,895,896,3,224,112,0,896,129,1,0,0,0,897,898,5,
        4,0,0,898,899,5,70,0,0,899,900,5,73,0,0,900,905,3,222,111,0,901,
        902,5,7,0,0,902,903,5,87,0,0,903,904,5,22,0,0,904,906,3,224,112,
        0,905,901,1,0,0,0,905,906,1,0,0,0,906,908,1,0,0,0,907,909,3,32,16,
        0,908,907,1,0,0,0,908,909,1,0,0,0,909,131,1,0,0,0,910,911,5,4,0,
        0,911,912,5,70,0,0,912,914,5,12,0,0,913,915,3,226,113,0,914,913,
        1,0,0,0,914,915,1,0,0,0,915,921,1,0,0,0,916,918,5,8,0,0,917,919,
        5,73,0,0,918,917,1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,922,
        3,222,111,0,921,916,1,0,0,0,921,922,1,0,0,0,922,927,1,0,0,0,923,
        924,5,7,0,0,924,925,5,87,0,0,925,926,5,22,0,0,926,928,3,228,114,
        0,927,923,1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,930,5,9,0,
        0,930,932,3,296,148,0,931,929,1,0,0,0,931,932,1,0,0,0,932,934,1,
        0,0,0,933,935,3,56,28,0,934,933,1,0,0,0,934,935,1,0,0,0,935,133,
        1,0,0,0,936,937,5,4,0,0,937,939,5,70,0,0,938,940,5,47,0,0,939,938,
        1,0,0,0,939,940,1,0,0,0,940,942,1,0,0,0,941,943,5,115,0,0,942,941,
        1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,945,5,14,0,0,945,948,
        3,230,115,0,946,947,5,8,0,0,947,949,3,22,11,0,948,946,1,0,0,0,948,
        949,1,0,0,0,949,954,1,0,0,0,950,951,5,7,0,0,951,952,5,87,0,0,952,
        953,5,22,0,0,953,955,3,232,116,0,954,950,1,0,0,0,954,955,1,0,0,0,
        955,964,1,0,0,0,956,957,5,112,0,0,957,959,3,234,117,0,958,960,3,
        276,138,0,959,958,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,961,963,
        3,274,137,0,962,961,1,0,0,0,962,963,1,0,0,0,963,965,1,0,0,0,964,
        956,1,0,0,0,964,965,1,0,0,0,965,967,1,0,0,0,966,968,3,60,30,0,967,
        966,1,0,0,0,967,968,1,0,0,0,968,135,1,0,0,0,969,970,5,4,0,0,970,
        971,5,70,0,0,971,972,5,15,0,0,972,975,3,240,120,0,973,974,5,8,0,
        0,974,976,3,22,11,0,975,973,1,0,0,0,975,976,1,0,0,0,976,981,1,0,
        0,0,977,978,5,7,0,0,978,979,5,87,0,0,979,980,5,22,0,0,980,982,3,
        244,122,0,981,977,1,0,0,0,981,982,1,0,0,0,982,988,1,0,0,0,983,985,
        5,66,0,0,984,986,3,234,117,0,985,984,1,0,0,0,985,986,1,0,0,0,986,
        987,1,0,0,0,987,989,3,274,137,0,988,983,1,0,0,0,988,989,1,0,0,0,
        989,993,1,0,0,0,990,992,3,70,35,0,991,990,1,0,0,0,992,995,1,0,0,
        0,993,991,1,0,0,0,993,994,1,0,0,0,994,997,1,0,0,0,995,993,1,0,0,
        0,996,998,3,60,30,0,997,996,1,0,0,0,997,998,1,0,0,0,998,137,1,0,
        0,0,999,1000,5,4,0,0,1000,1001,5,70,0,0,1001,1002,5,16,0,0,1002,
        1005,3,242,121,0,1003,1004,5,8,0,0,1004,1006,3,22,11,0,1005,1003,
        1,0,0,0,1005,1006,1,0,0,0,1006,1011,1,0,0,0,1007,1008,5,7,0,0,1008,
        1009,5,87,0,0,1009,1010,5,22,0,0,1010,1012,3,246,123,0,1011,1007,
        1,0,0,0,1011,1012,1,0,0,0,1012,1018,1,0,0,0,1013,1015,5,66,0,0,1014,
        1016,3,234,117,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,
        0,0,0,1017,1019,3,274,137,0,1018,1013,1,0,0,0,1018,1019,1,0,0,0,
        1019,1023,1,0,0,0,1020,1022,3,74,37,0,1021,1020,1,0,0,0,1022,1025,
        1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,1027,1,0,0,0,1025,
        1023,1,0,0,0,1026,1028,3,60,30,0,1027,1026,1,0,0,0,1027,1028,1,0,
        0,0,1028,139,1,0,0,0,1029,1030,5,4,0,0,1030,1031,5,70,0,0,1031,1032,
        5,94,0,0,1032,1033,5,38,0,0,1033,1039,3,248,124,0,1034,1036,5,8,
        0,0,1035,1037,5,73,0,0,1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,
        1038,1,0,0,0,1038,1040,3,222,111,0,1039,1034,1,0,0,0,1039,1040,1,
        0,0,0,1040,1045,1,0,0,0,1041,1042,5,7,0,0,1042,1043,5,87,0,0,1043,
        1044,5,22,0,0,1044,1046,3,250,125,0,1045,1041,1,0,0,0,1045,1046,
        1,0,0,0,1046,1048,1,0,0,0,1047,1049,3,80,40,0,1048,1047,1,0,0,0,
        1048,1049,1,0,0,0,1049,141,1,0,0,0,1050,1051,5,4,0,0,1051,1052,5,
        70,0,0,1052,1053,7,5,0,0,1053,1054,5,103,0,0,1054,1058,3,92,46,0,
        1055,1056,5,7,0,0,1056,1057,5,63,0,0,1057,1059,3,144,72,0,1058,1055,
        1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1062,3,96,48,0,
        1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,143,1,0,0,0,1063,1064,3,
        264,132,0,1064,145,1,0,0,0,1065,1066,5,4,0,0,1066,1067,5,70,0,0,
        1067,1068,5,25,0,0,1068,1069,3,110,55,0,1069,1070,5,177,0,0,1070,
        1074,3,92,46,0,1071,1072,5,39,0,0,1072,1073,5,40,0,0,1073,1075,3,
        112,56,0,1074,1071,1,0,0,0,1074,1075,1,0,0,0,1075,1077,1,0,0,0,1076,
        1078,3,114,57,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,147,1,0,
        0,0,1079,1080,5,17,0,0,1080,1081,5,70,0,0,1081,1082,5,73,0,0,1082,
        1083,3,222,111,0,1083,149,1,0,0,0,1084,1085,5,17,0,0,1085,1086,5,
        70,0,0,1086,1087,5,12,0,0,1087,1093,3,226,113,0,1088,1090,5,9,0,
        0,1089,1091,5,73,0,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,
        1,0,0,0,1092,1094,3,222,111,0,1093,1088,1,0,0,0,1093,1094,1,0,0,
        0,1094,151,1,0,0,0,1095,1096,5,17,0,0,1096,1098,5,70,0,0,1097,1099,
        5,47,0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1101,1,0,0,0,1100,
        1102,5,115,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,0,1102,1103,1,0,
        0,0,1103,1104,5,14,0,0,1104,1107,3,230,115,0,1105,1106,5,9,0,0,1106,
        1108,3,22,11,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,153,1,0,
        0,0,1109,1110,5,17,0,0,1110,1111,5,70,0,0,1111,1112,5,15,0,0,1112,
        1115,3,240,120,0,1113,1114,5,9,0,0,1114,1116,3,22,11,0,1115,1113,
        1,0,0,0,1115,1116,1,0,0,0,1116,155,1,0,0,0,1117,1118,5,17,0,0,1118,
        1119,5,70,0,0,1119,1120,5,16,0,0,1120,1123,3,242,121,0,1121,1122,
        5,9,0,0,1122,1124,3,22,11,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,
        1124,157,1,0,0,0,1125,1126,5,17,0,0,1126,1127,5,70,0,0,1127,1128,
        5,94,0,0,1128,1129,5,38,0,0,1129,1135,3,248,124,0,1130,1132,5,9,
        0,0,1131,1133,5,73,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,
        1134,1,0,0,0,1134,1136,3,222,111,0,1135,1130,1,0,0,0,1135,1136,1,
        0,0,0,1136,159,1,0,0,0,1137,1138,5,17,0,0,1138,1139,5,70,0,0,1139,
        1140,5,94,0,0,1140,1141,5,45,0,0,1141,1142,3,252,126,0,1142,1147,
        5,9,0,0,1143,1145,5,73,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,
        1146,1,0,0,0,1146,1148,3,222,111,0,1147,1144,1,0,0,0,1147,1148,1,
        0,0,0,1148,1149,1,0,0,0,1149,1150,5,94,0,0,1150,1151,5,38,0,0,1151,
        1152,3,248,124,0,1152,161,1,0,0,0,1153,1154,5,17,0,0,1154,1155,5,
        70,0,0,1155,1156,7,5,0,0,1156,1157,5,103,0,0,1157,1158,3,92,46,0,
        1158,163,1,0,0,0,1159,1160,5,17,0,0,1160,1161,5,70,0,0,1161,1162,
        5,25,0,0,1162,1163,3,110,55,0,1163,1164,5,177,0,0,1164,1165,3,92,
        46,0,1165,165,1,0,0,0,1166,1167,5,17,0,0,1167,1168,5,70,0,0,1168,
        1169,5,41,0,0,1169,1170,3,126,63,0,1170,167,1,0,0,0,1171,1172,5,
        49,0,0,1172,1173,5,70,0,0,1173,1185,3,170,85,0,1174,1176,5,8,0,0,
        1175,1177,5,73,0,0,1176,1175,1,0,0,0,1176,1177,1,0,0,0,1177,1178,
        1,0,0,0,1178,1186,3,222,111,0,1179,1180,5,8,0,0,1180,1183,3,22,11,
        0,1181,1182,5,119,0,0,1182,1184,3,238,119,0,1183,1181,1,0,0,0,1183,
        1184,1,0,0,0,1184,1186,1,0,0,0,1185,1174,1,0,0,0,1185,1179,1,0,0,
        0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,1188,5,42,0,0,1188,1189,
        3,126,63,0,1189,169,1,0,0,0,1190,1196,3,172,86,0,1191,1192,3,172,
        86,0,1192,1193,5,165,0,0,1193,1194,3,170,85,0,1194,1196,1,0,0,0,
        1195,1190,1,0,0,0,1195,1191,1,0,0,0,1196,171,1,0,0,0,1197,1198,7,
        8,0,0,1198,173,1,0,0,0,1199,1200,5,49,0,0,1200,1201,5,70,0,0,1201,
        1202,5,41,0,0,1202,1203,3,126,63,0,1203,1204,5,42,0,0,1204,1205,
        3,110,55,0,1205,1206,5,177,0,0,1206,1208,3,92,46,0,1207,1209,3,14,
        7,0,1208,1207,1,0,0,0,1208,1209,1,0,0,0,1209,175,1,0,0,0,1210,1211,
        5,53,0,0,1211,1212,5,70,0,0,1212,1224,3,170,85,0,1213,1215,5,8,0,
        0,1214,1216,5,73,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,1217,
        1,0,0,0,1217,1225,3,222,111,0,1218,1219,5,8,0,0,1219,1222,3,22,11,
        0,1220,1221,5,119,0,0,1221,1223,3,238,119,0,1222,1220,1,0,0,0,1222,
        1223,1,0,0,0,1223,1225,1,0,0,0,1224,1213,1,0,0,0,1224,1218,1,0,0,
        0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,1226,1227,5,9,0,0,1227,1228,
        3,126,63,0,1228,177,1,0,0,0,1229,1230,5,53,0,0,1230,1231,5,70,0,
        0,1231,1232,5,41,0,0,1232,1233,3,126,63,0,1233,1234,5,9,0,0,1234,
        1235,3,110,55,0,1235,1236,5,177,0,0,1236,1237,3,92,46,0,1237,179,
        1,0,0,0,1238,1239,5,18,0,0,1239,1240,5,70,0,0,1240,1241,3,182,91,
        0,1241,181,1,0,0,0,1242,1243,5,73,0,0,1243,1246,3,222,111,0,1244,
        1246,3,22,11,0,1245,1242,1,0,0,0,1245,1244,1,0,0,0,1246,183,1,0,
        0,0,1247,1248,5,5,0,0,1248,1250,5,70,0,0,1249,1251,5,71,0,0,1250,
        1249,1,0,0,0,1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1253,5,6,0,
        0,1253,185,1,0,0,0,1254,1255,5,5,0,0,1255,1256,5,70,0,0,1256,1257,
        5,72,0,0,1257,187,1,0,0,0,1258,1259,5,5,0,0,1259,1260,5,70,0,0,1260,
        1266,5,11,0,0,1261,1263,7,9,0,0,1262,1264,5,73,0,0,1263,1262,1,0,
        0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1267,3,222,111,0,1266,
        1261,1,0,0,0,1266,1267,1,0,0,0,1267,189,1,0,0,0,1268,1269,5,5,0,
        0,1269,1271,5,70,0,0,1270,1272,5,47,0,0,1271,1270,1,0,0,0,1271,1272,
        1,0,0,0,1272,1274,1,0,0,0,1273,1275,5,115,0,0,1274,1273,1,0,0,0,
        1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1279,5,74,0,0,1277,1278,
        7,9,0,0,1278,1280,3,22,11,0,1279,1277,1,0,0,0,1279,1280,1,0,0,0,
        1280,191,1,0,0,0,1281,1282,5,5,0,0,1282,1283,5,70,0,0,1283,1286,
        5,75,0,0,1284,1285,7,9,0,0,1285,1287,3,22,11,0,1286,1284,1,0,0,0,
        1286,1287,1,0,0,0,1287,193,1,0,0,0,1288,1289,5,5,0,0,1289,1290,5,
        70,0,0,1290,1293,5,76,0,0,1291,1292,7,9,0,0,1292,1294,3,22,11,0,
        1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,195,1,0,0,0,1295,1296,5,
        5,0,0,1296,1297,5,70,0,0,1297,1298,5,94,0,0,1298,1304,5,99,0,0,1299,
        1301,7,9,0,0,1300,1302,5,73,0,0,1301,1300,1,0,0,0,1301,1302,1,0,
        0,0,1302,1303,1,0,0,0,1303,1305,3,222,111,0,1304,1299,1,0,0,0,1304,
        1305,1,0,0,0,1305,197,1,0,0,0,1306,1307,5,5,0,0,1307,1308,5,70,0,
        0,1308,1309,5,94,0,0,1309,1310,5,100,0,0,1310,1315,7,9,0,0,1311,
        1313,5,73,0,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,
        0,0,1314,1316,3,222,111,0,1315,1312,1,0,0,0,1315,1316,1,0,0,0,1316,
        1317,1,0,0,0,1317,1318,5,94,0,0,1318,1319,5,38,0,0,1319,1320,3,248,
        124,0,1320,199,1,0,0,0,1321,1322,5,5,0,0,1322,1323,5,70,0,0,1323,
        1324,5,101,0,0,1324,1330,5,102,0,0,1325,1327,7,9,0,0,1326,1328,5,
        73,0,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,
        1331,3,222,111,0,1330,1325,1,0,0,0,1330,1331,1,0,0,0,1331,201,1,
        0,0,0,1332,1333,5,5,0,0,1333,1334,5,70,0,0,1334,1344,5,117,0,0,1335,
        1342,7,9,0,0,1336,1337,5,60,0,0,1337,1343,5,73,0,0,1338,1340,5,73,
        0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,1343,
        3,222,111,0,1342,1336,1,0,0,0,1342,1339,1,0,0,0,1343,1345,1,0,0,
        0,1344,1335,1,0,0,0,1344,1345,1,0,0,0,1345,1352,1,0,0,0,1346,1348,
        5,58,0,0,1347,1349,3,110,55,0,1348,1347,1,0,0,0,1348,1349,1,0,0,
        0,1349,1350,1,0,0,0,1350,1351,5,177,0,0,1351,1353,3,92,46,0,1352,
        1346,1,0,0,0,1352,1353,1,0,0,0,1353,203,1,0,0,0,1354,1355,5,5,0,
        0,1355,1356,5,70,0,0,1356,1357,5,57,0,0,1357,1358,5,58,0,0,1358,
        1359,3,126,63,0,1359,205,1,0,0,0,1360,1361,5,5,0,0,1361,1362,5,1,
        0,0,1362,1363,5,70,0,0,1363,1365,5,73,0,0,1364,1366,3,222,111,0,
        1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,1370,1,0,0,0,1367,1368,
        5,121,0,0,1368,1369,5,65,0,0,1369,1371,5,122,0,0,1370,1367,1,0,0,
        0,1370,1371,1,0,0,0,1371,207,1,0,0,0,1372,1373,5,5,0,0,1373,1374,
        5,1,0,0,1374,1375,5,70,0,0,1375,1377,5,12,0,0,1376,1378,3,226,113,
        0,1377,1376,1,0,0,0,1377,1378,1,0,0,0,1378,1384,1,0,0,0,1379,1381,
        7,9,0,0,1380,1382,5,73,0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,
        1383,1,0,0,0,1383,1385,3,222,111,0,1384,1379,1,0,0,0,1384,1385,1,
        0,0,0,1385,209,1,0,0,0,1386,1387,5,5,0,0,1387,1388,5,1,0,0,1388,
        1390,5,70,0,0,1389,1391,5,47,0,0,1390,1389,1,0,0,0,1390,1391,1,0,
        0,0,1391,1393,1,0,0,0,1392,1394,5,115,0,0,1393,1392,1,0,0,0,1393,
        1394,1,0,0,0,1394,1395,1,0,0,0,1395,1396,5,14,0,0,1396,1399,3,230,
        115,0,1397,1398,7,9,0,0,1398,1400,3,22,11,0,1399,1397,1,0,0,0,1399,
        1400,1,0,0,0,1400,211,1,0,0,0,1401,1402,5,5,0,0,1402,1403,5,1,0,
        0,1403,1404,5,70,0,0,1404,1405,5,15,0,0,1405,1408,3,240,120,0,1406,
        1407,7,9,0,0,1407,1409,3,22,11,0,1408,1406,1,0,0,0,1408,1409,1,0,
        0,0,1409,213,1,0,0,0,1410,1411,5,5,0,0,1411,1412,5,1,0,0,1412,1413,
        5,70,0,0,1413,1414,5,16,0,0,1414,1417,3,242,121,0,1415,1416,7,9,
        0,0,1416,1418,3,22,11,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,
        215,1,0,0,0,1419,1420,5,5,0,0,1420,1421,5,1,0,0,1421,1422,5,70,0,
        0,1422,1423,5,94,0,0,1423,1424,5,38,0,0,1424,1430,3,248,124,0,1425,
        1427,7,9,0,0,1426,1428,5,73,0,0,1427,1426,1,0,0,0,1427,1428,1,0,
        0,0,1428,1429,1,0,0,0,1429,1431,3,222,111,0,1430,1425,1,0,0,0,1430,
        1431,1,0,0,0,1431,217,1,0,0,0,1432,1433,5,5,0,0,1433,1434,5,1,0,
        0,1434,1435,5,70,0,0,1435,1436,5,94,0,0,1436,1437,5,45,0,0,1437,
        1438,3,252,126,0,1438,1443,7,9,0,0,1439,1441,5,73,0,0,1440,1439,
        1,0,0,0,1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,1444,3,222,111,
        0,1443,1440,1,0,0,0,1443,1444,1,0,0,0,1444,1445,1,0,0,0,1445,1446,
        5,94,0,0,1446,1447,5,38,0,0,1447,1448,3,248,124,0,1448,219,1,0,0,
        0,1449,1450,5,5,0,0,1450,1451,5,1,0,0,1451,1452,5,70,0,0,1452,1453,
        5,101,0,0,1453,1454,5,103,0,0,1454,1455,3,92,46,0,1455,221,1,0,0,
        0,1456,1458,3,256,128,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,
        1460,1,0,0,0,1459,1461,3,260,130,0,1460,1459,1,0,0,0,1460,1461,1,
        0,0,0,1461,1462,1,0,0,0,1462,1463,3,262,131,0,1463,223,1,0,0,0,1464,
        1466,3,256,128,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,1468,1,
        0,0,0,1467,1469,3,260,130,0,1468,1467,1,0,0,0,1468,1469,1,0,0,0,
        1469,1470,1,0,0,0,1470,1471,3,262,131,0,1471,225,1,0,0,0,1472,1473,
        3,262,131,0,1473,227,1,0,0,0,1474,1475,3,262,131,0,1475,229,1,0,
        0,0,1476,1477,3,262,131,0,1477,231,1,0,0,0,1478,1479,3,262,131,0,
        1479,233,1,0,0,0,1480,1481,3,304,152,0,1481,235,1,0,0,0,1482,1483,
        3,304,152,0,1483,237,1,0,0,0,1484,1485,3,262,131,0,1485,239,1,0,
        0,0,1486,1487,3,262,131,0,1487,241,1,0,0,0,1488,1489,3,262,131,0,
        1489,243,1,0,0,0,1490,1491,3,262,131,0,1491,245,1,0,0,0,1492,1493,
        3,262,131,0,1493,247,1,0,0,0,1494,1495,3,262,131,0,1495,249,1,0,
        0,0,1496,1497,3,262,131,0,1497,251,1,0,0,0,1498,1499,3,262,131,0,
        1499,253,1,0,0,0,1500,1503,3,304,152,0,1501,1503,3,264,132,0,1502,
        1500,1,0,0,0,1502,1501,1,0,0,0,1503,255,1,0,0,0,1504,1509,3,254,
        127,0,1505,1506,5,165,0,0,1506,1508,3,254,127,0,1507,1505,1,0,0,
        0,1508,1511,1,0,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1513,
        1,0,0,0,1511,1509,1,0,0,0,1512,1514,5,177,0,0,1513,1512,1,0,0,0,
        1513,1514,1,0,0,0,1514,257,1,0,0,0,1515,1524,3,312,156,0,1516,1520,
        3,304,152,0,1517,1519,3,314,157,0,1518,1517,1,0,0,0,1519,1522,1,
        0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,0,1521,1524,1,0,0,0,1522,
        1520,1,0,0,0,1523,1515,1,0,0,0,1523,1516,1,0,0,0,1524,259,1,0,0,
        0,1525,1528,3,258,129,0,1526,1528,5,178,0,0,1527,1525,1,0,0,0,1527,
        1526,1,0,0,0,1528,1531,1,0,0,0,1529,1530,5,167,0,0,1530,1532,5,184,
        0,0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,261,1,0,0,0,1533,1534,
        5,153,0,0,1534,1537,3,258,129,0,1535,1536,5,153,0,0,1536,1538,3,
        258,129,0,1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1541,1,0,0,0,
        1539,1541,3,264,132,0,1540,1533,1,0,0,0,1540,1539,1,0,0,0,1541,263,
        1,0,0,0,1542,1543,7,10,0,0,1543,265,1,0,0,0,1544,1545,5,170,0,0,
        1545,1550,3,268,134,0,1546,1547,5,165,0,0,1547,1549,3,268,134,0,
        1548,1546,1,0,0,0,1549,1552,1,0,0,0,1550,1548,1,0,0,0,1550,1551,
        1,0,0,0,1551,1553,1,0,0,0,1552,1550,1,0,0,0,1553,1554,5,171,0,0,
        1554,1558,1,0,0,0,1555,1556,5,170,0,0,1556,1558,5,171,0,0,1557,1544,
        1,0,0,0,1557,1555,1,0,0,0,1558,267,1,0,0,0,1559,1560,5,192,0,0,1560,
        1561,5,167,0,0,1561,1562,3,272,136,0,1562,269,1,0,0,0,1563,1572,
        5,173,0,0,1564,1569,3,272,136,0,1565,1566,5,165,0,0,1566,1568,3,
        272,136,0,1567,1565,1,0,0,0,1568,1571,1,0,0,0,1569,1567,1,0,0,0,
        1569,1570,1,0,0,0,1570,1573,1,0,0,0,1571,1569,1,0,0,0,1572,1564,
        1,0,0,0,1572,1573,1,0,0,0,1573,1574,1,0,0,0,1574,1575,5,174,0,0,
        1575,271,1,0,0,0,1576,1588,5,192,0,0,1577,1579,7,11,0,0,1578,1577,
        1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1588,5,186,0,0,
        1581,1588,5,184,0,0,1582,1588,3,266,133,0,1583,1588,3,270,135,0,
        1584,1588,5,36,0,0,1585,1588,5,37,0,0,1586,1588,5,35,0,0,1587,1576,
        1,0,0,0,1587,1578,1,0,0,0,1587,1581,1,0,0,0,1587,1582,1,0,0,0,1587,
        1583,1,0,0,0,1587,1584,1,0,0,0,1587,1585,1,0,0,0,1587,1586,1,0,0,
        0,1588,273,1,0,0,0,1589,1590,5,170,0,0,1590,1595,3,278,139,0,1591,
        1592,5,165,0,0,1592,1594,3,278,139,0,1593,1591,1,0,0,0,1594,1597,
        1,0,0,0,1595,1593,1,0,0,0,1595,1596,1,0,0,0,1596,1598,1,0,0,0,1597,
        1595,1,0,0,0,1598,1599,5,171,0,0,1599,1603,1,0,0,0,1600,1601,5,170,
        0,0,1601,1603,5,171,0,0,1602,1589,1,0,0,0,1602,1600,1,0,0,0,1603,
        275,1,0,0,0,1604,1606,7,12,0,0,1605,1604,1,0,0,0,1606,1607,1,0,0,
        0,1607,1605,1,0,0,0,1607,1608,1,0,0,0,1608,277,1,0,0,0,1609,1610,
        3,286,143,0,1610,1611,5,167,0,0,1611,1613,3,288,144,0,1612,1614,
        7,13,0,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,1616,1,0,0,0,1615,
        1617,3,280,140,0,1616,1615,1,0,0,0,1616,1617,1,0,0,0,1617,1623,1,
        0,0,0,1618,1619,5,133,0,0,1619,1620,5,168,0,0,1620,1621,3,292,146,
        0,1621,1622,5,169,0,0,1622,1624,1,0,0,0,1623,1618,1,0,0,0,1623,1624,
        1,0,0,0,1624,1626,1,0,0,0,1625,1627,3,276,138,0,1626,1625,1,0,0,
        0,1626,1627,1,0,0,0,1627,1629,1,0,0,0,1628,1630,3,282,141,0,1629,
        1628,1,0,0,0,1629,1630,1,0,0,0,1630,1632,1,0,0,0,1631,1633,3,274,
        137,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,279,1,0,0,0,1634,
        1636,7,14,0,0,1635,1634,1,0,0,0,1636,1637,1,0,0,0,1637,1635,1,0,
        0,0,1637,1638,1,0,0,0,1638,281,1,0,0,0,1639,1640,5,13,0,0,1640,1641,
        5,12,0,0,1641,1642,3,272,136,0,1642,283,1,0,0,0,1643,1644,7,15,0,
        0,1644,285,1,0,0,0,1645,1649,5,192,0,0,1646,1649,3,304,152,0,1647,
        1649,3,284,142,0,1648,1645,1,0,0,0,1648,1646,1,0,0,0,1648,1647,1,
        0,0,0,1649,287,1,0,0,0,1650,1653,3,310,155,0,1651,1653,3,284,142,
        0,1652,1650,1,0,0,0,1652,1651,1,0,0,0,1653,289,1,0,0,0,1654,1657,
        5,192,0,0,1655,1657,3,304,152,0,1656,1654,1,0,0,0,1656,1655,1,0,
        0,0,1657,291,1,0,0,0,1658,1661,5,192,0,0,1659,1661,3,304,152,0,1660,
        1658,1,0,0,0,1660,1659,1,0,0,0,1661,293,1,0,0,0,1662,1665,3,310,
        155,0,1663,1665,3,274,137,0,1664,1662,1,0,0,0,1664,1663,1,0,0,0,
        1665,295,1,0,0,0,1666,1667,3,304,152,0,1667,297,1,0,0,0,1668,1669,
        3,304,152,0,1669,299,1,0,0,0,1670,1671,3,304,152,0,1671,301,1,0,
        0,0,1672,1673,7,16,0,0,1673,303,1,0,0,0,1674,1675,3,302,151,0,1675,
        305,1,0,0,0,1676,1681,3,304,152,0,1677,1678,5,165,0,0,1678,1680,
        3,304,152,0,1679,1677,1,0,0,0,1680,1683,1,0,0,0,1681,1679,1,0,0,
        0,1681,1682,1,0,0,0,1682,307,1,0,0,0,1683,1681,1,0,0,0,1684,1685,
        5,168,0,0,1685,1686,3,306,153,0,1686,1687,5,169,0,0,1687,309,1,0,
        0,0,1688,1690,3,304,152,0,1689,1691,3,314,157,0,1690,1689,1,0,0,
        0,1690,1691,1,0,0,0,1691,311,1,0,0,0,1692,1697,3,304,152,0,1693,
        1695,3,314,157,0,1694,1696,3,314,157,0,1695,1694,1,0,0,0,1695,1696,
        1,0,0,0,1696,1698,1,0,0,0,1697,1693,1,0,0,0,1697,1698,1,0,0,0,1698,
        313,1,0,0,0,1699,1700,5,164,0,0,1700,1701,3,304,152,0,1701,315,1,
        0,0,0,214,320,325,328,331,389,397,410,423,432,437,439,444,449,455,
        466,468,480,482,503,518,523,527,530,535,543,545,550,554,557,563,
        569,572,575,578,589,591,597,609,616,622,625,630,634,638,645,652,
        658,661,664,667,671,678,686,689,693,696,706,708,715,722,730,733,
        741,745,748,753,755,760,770,773,786,788,792,799,819,829,832,841,
        843,855,862,868,871,873,876,880,882,905,908,914,918,921,927,931,
        934,939,942,948,954,959,962,964,967,975,981,985,988,993,997,1005,
        1011,1015,1018,1023,1027,1036,1039,1045,1048,1058,1061,1074,1077,
        1090,1093,1098,1101,1107,1115,1123,1132,1135,1144,1147,1176,1183,
        1185,1195,1208,1215,1222,1224,1245,1250,1263,1266,1271,1274,1279,
        1286,1293,1301,1304,1312,1315,1327,1330,1339,1342,1344,1348,1352,
        1365,1370,1377,1381,1384,1390,1393,1399,1408,1417,1427,1430,1440,
        1443,1457,1460,1465,1468,1502,1509,1513,1520,1523,1527,1531,1537,
        1540,1550,1557,1569,1572,1578,1587,1595,1602,1607,1613,1616,1623,
        1626,1629,1632,1637,1648,1652,1656,1660,1664,1681,1690,1695,1697
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", 
                     "'->>'", "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'<>'" ]

    symbolicNames = [ "<INVALID>", "CREATE_SYMBOL", "OR_SYMBOL", "REPLACE_SYMBOL", 
                      "ALTER_SYMBOL", "SHOW_SYMBOL", "STATUS_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "DATABASES_SYMBOL", 
                      "DATABASE_SYMBOL", "JSON_SYMBOL", "VIEW_SYMBOL", "PROCEDURE_SYMBOL", 
                      "FUNCTION_SYMBOL", "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", 
                      "FILTER_SYMBOL", "AUTHENTICATION_SYMBOL", "PATH_SYMBOL", 
                      "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", "USER_SYMBOL", 
                      "OPTIONS_SYMBOL", "IF_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "PAGE_SYMBOL", "HOST_SYMBOL", "TYPE_SYMBOL", "FORMAT_SYMBOL", 
                      "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", "FALSE_SYMBOL", 
                      "SET_SYMBOL", "IDENTIFIED_SYMBOL", "BY_SYMBOL", "ROLE_SYMBOL", 
                      "TO_SYMBOL", "IGNORE_SYMBOL", "CLONE_SYMBOL", "FILE_SYMBOL", 
                      "BINARY_SYMBOL", "DATA_SYMBOL", "LOAD_SYMBOL", "GRANT_SYMBOL", 
                      "READ_SYMBOL", "DELETE_SYMBOL", "GROUP_SYMBOL", "REVOKE_SYMBOL", 
                      "ACCOUNT_SYMBOL", "LOCK_SYMBOL", "UNLOCK_SYMBOL", 
                      "GRANTS_SYMBOL", "FOR_SYMBOL", "LEVEL_SYMBOL", "ANY_SYMBOL", 
                      "CLIENT_SYMBOL", "URL_SYMBOL", "NAME_SYMBOL", "DO_SYMBOL", 
                      "ALL_SYMBOL", "PARAMETERS_SYMBOL", "ADD_SYMBOL", "REMOVE_SYMBOL", 
                      "CONFIGURE_SYMBOL", "REST_SYMBOL", "METADATA_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "VIEWS_SYMBOL", 
                      "PROCEDURES_SYMBOL", "FUNCTIONS_SYMBOL", "RESULT_SYMBOL", 
                      "ENABLED_SYMBOL", "PUBLISHED_SYMBOL", "DISABLED_SYMBOL", 
                      "PRIVATE_SYMBOL", "UNPUBLISHED_SYMBOL", "PROTOCOL_SYMBOL", 
                      "HTTP_SYMBOL", "HTTPS_SYMBOL", "COMMENTS_SYMBOL", 
                      "REQUEST_SYMBOL", "REDIRECTION_SYMBOL", "MANAGEMENT_SYMBOL", 
                      "AVAILABLE_SYMBOL", "REQUIRED_SYMBOL", "ITEMS_SYMBOL", 
                      "PER_SYMBOL", "CONTENT_SYMBOL", "MEDIA_SYMBOL", "AUTODETECT_SYMBOL", 
                      "FEED_SYMBOL", "ITEM_SYMBOL", "SETS_SYMBOL", "FILES_SYMBOL", 
                      "AUTH_SYMBOL", "APPS_SYMBOL", "APP_SYMBOL", "ID_SYMBOL", 
                      "SECRET_SYMBOL", "VENDOR_SYMBOL", "MRS_SYMBOL", "MYSQL_SYMBOL", 
                      "USERS_SYMBOL", "ALLOW_SYMBOL", "REGISTER_SYMBOL", 
                      "CLASS_SYMBOL", "DEVELOPMENT_SYMBOL", "SCRIPTS_SYMBOL", 
                      "MAPPING_SYMBOL", "TYPESCRIPT_SYMBOL", "ROLES_SYMBOL", 
                      "EXTENDS_SYMBOL", "OBJECT_SYMBOL", "HIERARCHY_SYMBOL", 
                      "INCLUDE_SYMBOL", "OBJECTS_SYMBOL", "AT_INOUT_SYMBOL", 
                      "AT_IN_SYMBOL", "AT_OUT_SYMBOL", "AT_CHECK_SYMBOL", 
                      "AT_NOCHECK_SYMBOL", "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", 
                      "AT_NOFILTERING_SYMBOL", "AT_ROWOWNERSHIP_SYMBOL", 
                      "AT_UNNEST_SYMBOL", "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", 
                      "AT_NOSELECT_SYMBOL", "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", 
                      "AT_UPDATE_SYMBOL", "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", 
                      "AT_KEY_SYMBOL", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
                      "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_enabledDisabledPrivate = 3
    RULE_quotedTextOrDefault = 4
    RULE_jsonOptions = 5
    RULE_metadata = 6
    RULE_comments = 7
    RULE_authenticationRequired = 8
    RULE_itemsPerPage = 9
    RULE_itemsPerPageNumber = 10
    RULE_serviceSchemaSelector = 11
    RULE_configureRestMetadataStatement = 12
    RULE_restMetadataOptions = 13
    RULE_updateIfAvailable = 14
    RULE_createRestServiceStatement = 15
    RULE_restServiceOptions = 16
    RULE_publishedUnpublished = 17
    RULE_restProtocol = 18
    RULE_restAuthentication = 19
    RULE_authPath = 20
    RULE_authRedirection = 21
    RULE_authValidation = 22
    RULE_authPageContent = 23
    RULE_userManagementSchema = 24
    RULE_addAuthApp = 25
    RULE_removeAuthApp = 26
    RULE_createRestSchemaStatement = 27
    RULE_restSchemaOptions = 28
    RULE_createRestViewStatement = 29
    RULE_restObjectOptions = 30
    RULE_restViewMediaType = 31
    RULE_restViewFormat = 32
    RULE_restViewAuthenticationProcedure = 33
    RULE_createRestProcedureStatement = 34
    RULE_restProcedureResult = 35
    RULE_createRestFunctionStatement = 36
    RULE_restFunctionResult = 37
    RULE_createRestContentSetStatement = 38
    RULE_directoryFilePath = 39
    RULE_restContentSetOptions = 40
    RULE_fileIgnoreList = 41
    RULE_loadScripts = 42
    RULE_createRestContentFileStatement = 43
    RULE_restContentFileOptions = 44
    RULE_createRestAuthAppStatement = 45
    RULE_authAppName = 46
    RULE_vendorName = 47
    RULE_restAuthAppOptions = 48
    RULE_allowNewUsersToRegister = 49
    RULE_defaultRole = 50
    RULE_appId = 51
    RULE_appSecret = 52
    RULE_url = 53
    RULE_createRestUserStatement = 54
    RULE_userName = 55
    RULE_userPassword = 56
    RULE_userOptions = 57
    RULE_appOptions = 58
    RULE_accountLock = 59
    RULE_createRestRoleStatement = 60
    RULE_restRoleOptions = 61
    RULE_parentRoleName = 62
    RULE_roleName = 63
    RULE_cloneRestServiceStatement = 64
    RULE_alterRestServiceStatement = 65
    RULE_alterRestSchemaStatement = 66
    RULE_alterRestViewStatement = 67
    RULE_alterRestProcedureStatement = 68
    RULE_alterRestFunctionStatement = 69
    RULE_alterRestContentSetStatement = 70
    RULE_alterRestAuthAppStatement = 71
    RULE_newAuthAppName = 72
    RULE_alterRestUserStatement = 73
    RULE_dropRestServiceStatement = 74
    RULE_dropRestSchemaStatement = 75
    RULE_dropRestViewStatement = 76
    RULE_dropRestProcedureStatement = 77
    RULE_dropRestFunctionStatement = 78
    RULE_dropRestContentSetStatement = 79
    RULE_dropRestContentFileStatement = 80
    RULE_dropRestAuthAppStatement = 81
    RULE_dropRestUserStatement = 82
    RULE_dropRestRoleStatement = 83
    RULE_grantRestPrivilegeStatement = 84
    RULE_privilegeList = 85
    RULE_privilegeName = 86
    RULE_grantRestRoleStatement = 87
    RULE_revokeRestPrivilegeStatement = 88
    RULE_revokeRestRoleStatement = 89
    RULE_useStatement = 90
    RULE_serviceAndSchemaRequestPaths = 91
    RULE_showRestMetadataStatusStatement = 92
    RULE_showRestServicesStatement = 93
    RULE_showRestSchemasStatement = 94
    RULE_showRestViewsStatement = 95
    RULE_showRestProceduresStatement = 96
    RULE_showRestFunctionsStatement = 97
    RULE_showRestContentSetsStatement = 98
    RULE_showRestContentFilesStatement = 99
    RULE_showRestAuthAppsStatement = 100
    RULE_showRestRolesStatement = 101
    RULE_showRestGrantsStatement = 102
    RULE_showCreateRestServiceStatement = 103
    RULE_showCreateRestSchemaStatement = 104
    RULE_showCreateRestViewStatement = 105
    RULE_showCreateRestProcedureStatement = 106
    RULE_showCreateRestFunctionStatement = 107
    RULE_showCreateRestContentSetStatement = 108
    RULE_showCreateRestContentFileStatement = 109
    RULE_showCreateRestAuthAppStatement = 110
    RULE_serviceRequestPath = 111
    RULE_newServiceRequestPath = 112
    RULE_schemaRequestPath = 113
    RULE_newSchemaRequestPath = 114
    RULE_viewRequestPath = 115
    RULE_newViewRequestPath = 116
    RULE_restObjectName = 117
    RULE_restResultName = 118
    RULE_objectRequestPath = 119
    RULE_procedureRequestPath = 120
    RULE_functionRequestPath = 121
    RULE_newProcedureRequestPath = 122
    RULE_newFunctionRequestPath = 123
    RULE_contentSetRequestPath = 124
    RULE_newContentSetRequestPath = 125
    RULE_contentFileRequestPath = 126
    RULE_serviceDeveloperIdentifier = 127
    RULE_serviceDevelopersIdentifier = 128
    RULE_dottedIdentifier = 129
    RULE_hostAndPortIdentifier = 130
    RULE_requestPathIdentifier = 131
    RULE_quotedText = 132
    RULE_jsonObj = 133
    RULE_jsonPair = 134
    RULE_jsonArr = 135
    RULE_jsonValue = 136
    RULE_graphQlObj = 137
    RULE_graphQlCrudOptions = 138
    RULE_graphQlPair = 139
    RULE_graphQlValueOptions = 140
    RULE_graphQlValueJsonSchema = 141
    RULE_graphQlAllowedKeyword = 142
    RULE_graphQlPairKey = 143
    RULE_graphQlPairValue = 144
    RULE_graphQlReduceToValue = 145
    RULE_graphQlDatatypeValue = 146
    RULE_graphQlValue = 147
    RULE_schemaName = 148
    RULE_viewName = 149
    RULE_procedureName = 150
    RULE_pureIdentifier = 151
    RULE_identifier = 152
    RULE_identifierList = 153
    RULE_identifierListWithParentheses = 154
    RULE_qualifiedIdentifier = 155
    RULE_simpleIdentifier = 156
    RULE_dotIdentifier = 157

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "enabledDisabledPrivate", 
                   "quotedTextOrDefault", "jsonOptions", "metadata", "comments", 
                   "authenticationRequired", "itemsPerPage", "itemsPerPageNumber", 
                   "serviceSchemaSelector", "configureRestMetadataStatement", 
                   "restMetadataOptions", "updateIfAvailable", "createRestServiceStatement", 
                   "restServiceOptions", "publishedUnpublished", "restProtocol", 
                   "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "addAuthApp", "removeAuthApp", "createRestSchemaStatement", 
                   "restSchemaOptions", "createRestViewStatement", "restObjectOptions", 
                   "restViewMediaType", "restViewFormat", "restViewAuthenticationProcedure", 
                   "createRestProcedureStatement", "restProcedureResult", 
                   "createRestFunctionStatement", "restFunctionResult", 
                   "createRestContentSetStatement", "directoryFilePath", 
                   "restContentSetOptions", "fileIgnoreList", "loadScripts", 
                   "createRestContentFileStatement", "restContentFileOptions", 
                   "createRestAuthAppStatement", "authAppName", "vendorName", 
                   "restAuthAppOptions", "allowNewUsersToRegister", "defaultRole", 
                   "appId", "appSecret", "url", "createRestUserStatement", 
                   "userName", "userPassword", "userOptions", "appOptions", 
                   "accountLock", "createRestRoleStatement", "restRoleOptions", 
                   "parentRoleName", "roleName", "cloneRestServiceStatement", 
                   "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "alterRestFunctionStatement", "alterRestContentSetStatement", 
                   "alterRestAuthAppStatement", "newAuthAppName", "alterRestUserStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestViewStatement", "dropRestProcedureStatement", 
                   "dropRestFunctionStatement", "dropRestContentSetStatement", 
                   "dropRestContentFileStatement", "dropRestAuthAppStatement", 
                   "dropRestUserStatement", "dropRestRoleStatement", "grantRestPrivilegeStatement", 
                   "privilegeList", "privilegeName", "grantRestRoleStatement", 
                   "revokeRestPrivilegeStatement", "revokeRestRoleStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestFunctionsStatement", "showRestContentSetsStatement", 
                   "showRestContentFilesStatement", "showRestAuthAppsStatement", 
                   "showRestRolesStatement", "showRestGrantsStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "showCreateRestFunctionStatement", "showCreateRestContentSetStatement", 
                   "showCreateRestContentFileStatement", "showCreateRestAuthAppStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaRequestPath", 
                   "newSchemaRequestPath", "viewRequestPath", "newViewRequestPath", 
                   "restObjectName", "restResultName", "objectRequestPath", 
                   "procedureRequestPath", "functionRequestPath", "newProcedureRequestPath", 
                   "newFunctionRequestPath", "contentSetRequestPath", "newContentSetRequestPath", 
                   "contentFileRequestPath", "serviceDeveloperIdentifier", 
                   "serviceDevelopersIdentifier", "dottedIdentifier", "hostAndPortIdentifier", 
                   "requestPathIdentifier", "quotedText", "jsonObj", "jsonPair", 
                   "jsonArr", "jsonValue", "graphQlObj", "graphQlCrudOptions", 
                   "graphQlPair", "graphQlValueOptions", "graphQlValueJsonSchema", 
                   "graphQlAllowedKeyword", "graphQlPairKey", "graphQlPairValue", 
                   "graphQlReduceToValue", "graphQlDatatypeValue", "graphQlValue", 
                   "schemaName", "viewName", "procedureName", "pureIdentifier", 
                   "identifier", "identifierList", "identifierListWithParentheses", 
                   "qualifiedIdentifier", "simpleIdentifier", "dotIdentifier" ]

    EOF = Token.EOF
    CREATE_SYMBOL=1
    OR_SYMBOL=2
    REPLACE_SYMBOL=3
    ALTER_SYMBOL=4
    SHOW_SYMBOL=5
    STATUS_SYMBOL=6
    NEW_SYMBOL=7
    ON_SYMBOL=8
    FROM_SYMBOL=9
    IN_SYMBOL=10
    DATABASES_SYMBOL=11
    DATABASE_SYMBOL=12
    JSON_SYMBOL=13
    VIEW_SYMBOL=14
    PROCEDURE_SYMBOL=15
    FUNCTION_SYMBOL=16
    DROP_SYMBOL=17
    USE_SYMBOL=18
    AS_SYMBOL=19
    FILTER_SYMBOL=20
    AUTHENTICATION_SYMBOL=21
    PATH_SYMBOL=22
    VALIDATION_SYMBOL=23
    DEFAULT_SYMBOL=24
    USER_SYMBOL=25
    OPTIONS_SYMBOL=26
    IF_SYMBOL=27
    NOT_SYMBOL=28
    EXISTS_SYMBOL=29
    PAGE_SYMBOL=30
    HOST_SYMBOL=31
    TYPE_SYMBOL=32
    FORMAT_SYMBOL=33
    UPDATE_SYMBOL=34
    NULL_SYMBOL=35
    TRUE_SYMBOL=36
    FALSE_SYMBOL=37
    SET_SYMBOL=38
    IDENTIFIED_SYMBOL=39
    BY_SYMBOL=40
    ROLE_SYMBOL=41
    TO_SYMBOL=42
    IGNORE_SYMBOL=43
    CLONE_SYMBOL=44
    FILE_SYMBOL=45
    BINARY_SYMBOL=46
    DATA_SYMBOL=47
    LOAD_SYMBOL=48
    GRANT_SYMBOL=49
    READ_SYMBOL=50
    DELETE_SYMBOL=51
    GROUP_SYMBOL=52
    REVOKE_SYMBOL=53
    ACCOUNT_SYMBOL=54
    LOCK_SYMBOL=55
    UNLOCK_SYMBOL=56
    GRANTS_SYMBOL=57
    FOR_SYMBOL=58
    LEVEL_SYMBOL=59
    ANY_SYMBOL=60
    CLIENT_SYMBOL=61
    URL_SYMBOL=62
    NAME_SYMBOL=63
    DO_SYMBOL=64
    ALL_SYMBOL=65
    PARAMETERS_SYMBOL=66
    ADD_SYMBOL=67
    REMOVE_SYMBOL=68
    CONFIGURE_SYMBOL=69
    REST_SYMBOL=70
    METADATA_SYMBOL=71
    SERVICES_SYMBOL=72
    SERVICE_SYMBOL=73
    VIEWS_SYMBOL=74
    PROCEDURES_SYMBOL=75
    FUNCTIONS_SYMBOL=76
    RESULT_SYMBOL=77
    ENABLED_SYMBOL=78
    PUBLISHED_SYMBOL=79
    DISABLED_SYMBOL=80
    PRIVATE_SYMBOL=81
    UNPUBLISHED_SYMBOL=82
    PROTOCOL_SYMBOL=83
    HTTP_SYMBOL=84
    HTTPS_SYMBOL=85
    COMMENTS_SYMBOL=86
    REQUEST_SYMBOL=87
    REDIRECTION_SYMBOL=88
    MANAGEMENT_SYMBOL=89
    AVAILABLE_SYMBOL=90
    REQUIRED_SYMBOL=91
    ITEMS_SYMBOL=92
    PER_SYMBOL=93
    CONTENT_SYMBOL=94
    MEDIA_SYMBOL=95
    AUTODETECT_SYMBOL=96
    FEED_SYMBOL=97
    ITEM_SYMBOL=98
    SETS_SYMBOL=99
    FILES_SYMBOL=100
    AUTH_SYMBOL=101
    APPS_SYMBOL=102
    APP_SYMBOL=103
    ID_SYMBOL=104
    SECRET_SYMBOL=105
    VENDOR_SYMBOL=106
    MRS_SYMBOL=107
    MYSQL_SYMBOL=108
    USERS_SYMBOL=109
    ALLOW_SYMBOL=110
    REGISTER_SYMBOL=111
    CLASS_SYMBOL=112
    DEVELOPMENT_SYMBOL=113
    SCRIPTS_SYMBOL=114
    MAPPING_SYMBOL=115
    TYPESCRIPT_SYMBOL=116
    ROLES_SYMBOL=117
    EXTENDS_SYMBOL=118
    OBJECT_SYMBOL=119
    HIERARCHY_SYMBOL=120
    INCLUDE_SYMBOL=121
    OBJECTS_SYMBOL=122
    AT_INOUT_SYMBOL=123
    AT_IN_SYMBOL=124
    AT_OUT_SYMBOL=125
    AT_CHECK_SYMBOL=126
    AT_NOCHECK_SYMBOL=127
    AT_NOUPDATE_SYMBOL=128
    AT_SORTABLE_SYMBOL=129
    AT_NOFILTERING_SYMBOL=130
    AT_ROWOWNERSHIP_SYMBOL=131
    AT_UNNEST_SYMBOL=132
    AT_DATATYPE_SYMBOL=133
    AT_SELECT_SYMBOL=134
    AT_NOSELECT_SYMBOL=135
    AT_INSERT_SYMBOL=136
    AT_NOINSERT_SYMBOL=137
    AT_UPDATE_SYMBOL=138
    AT_DELETE_SYMBOL=139
    AT_NODELETE_SYMBOL=140
    AT_KEY_SYMBOL=141
    EQUAL_OPERATOR=142
    ASSIGN_OPERATOR=143
    NULL_SAFE_EQUAL_OPERATOR=144
    GREATER_OR_EQUAL_OPERATOR=145
    GREATER_THAN_OPERATOR=146
    LESS_OR_EQUAL_OPERATOR=147
    LESS_THAN_OPERATOR=148
    NOT_EQUAL_OPERATOR=149
    PLUS_OPERATOR=150
    MINUS_OPERATOR=151
    MULT_OPERATOR=152
    DIV_OPERATOR=153
    MOD_OPERATOR=154
    LOGICAL_NOT_OPERATOR=155
    BITWISE_NOT_OPERATOR=156
    SHIFT_LEFT_OPERATOR=157
    SHIFT_RIGHT_OPERATOR=158
    LOGICAL_AND_OPERATOR=159
    BITWISE_AND_OPERATOR=160
    BITWISE_XOR_OPERATOR=161
    LOGICAL_OR_OPERATOR=162
    BITWISE_OR_OPERATOR=163
    DOT_SYMBOL=164
    COMMA_SYMBOL=165
    SEMICOLON_SYMBOL=166
    COLON_SYMBOL=167
    OPEN_PAR_SYMBOL=168
    CLOSE_PAR_SYMBOL=169
    OPEN_CURLY_SYMBOL=170
    CLOSE_CURLY_SYMBOL=171
    UNDERLINE_SYMBOL=172
    OPEN_SQUARE_SYMBOL=173
    CLOSE_SQUARE_SYMBOL=174
    JSON_SEPARATOR_SYMBOL=175
    JSON_UNQUOTED_SEPARATOR_SYMBOL=176
    AT_SIGN_SYMBOL=177
    AT_TEXT_SUFFIX=178
    AT_AT_SIGN_SYMBOL=179
    NULL2_SYMBOL=180
    PARAM_MARKER=181
    HEX_NUMBER=182
    BIN_NUMBER=183
    INT_NUMBER=184
    DECIMAL_NUMBER=185
    FLOAT_NUMBER=186
    WHITESPACE=187
    INVALID_INPUT=188
    IDENTIFIER=189
    NCHAR_TEXT=190
    BACK_TICK_QUOTED_ID=191
    DOUBLE_QUOTED_TEXT=192
    SINGLE_QUOTED_TEXT=193
    BLOCK_COMMENT=194
    POUND_COMMENT=195
    DASHDASH_COMMENT=196
    WS=197
    NOT_EQUAL2_OPERATOR=198

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9587741394599986) != 0) or _la==69:
                self.state = 316
                self.mrsStatement()
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 318 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 317
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 320 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==166):
                                break

                        self.state = 322
                        self.mrsStatement() 
                    self.state = 327
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==166:
                self.state = 330
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 333
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestFunctionStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def createRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentFileStatementContext,0)


        def createRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestAuthAppStatementContext,0)


        def createRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestRoleStatementContext,0)


        def createRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestUserStatementContext,0)


        def cloneRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CloneRestServiceStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def alterRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestFunctionStatementContext,0)


        def alterRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestContentSetStatementContext,0)


        def alterRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestAuthAppStatementContext,0)


        def alterRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestUserStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestFunctionStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def dropRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentFileStatementContext,0)


        def dropRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestAuthAppStatementContext,0)


        def dropRestUserStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestUserStatementContext,0)


        def dropRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestRoleStatementContext,0)


        def grantRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestRoleStatementContext,0)


        def grantRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.GrantRestPrivilegeStatementContext,0)


        def revokeRestPrivilegeStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestPrivilegeStatementContext,0)


        def revokeRestRoleStatement(self):
            return self.getTypedRuleContext(MRSParser.RevokeRestRoleStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestFunctionsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestFunctionsStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showRestContentFilesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentFilesStatementContext,0)


        def showRestAuthAppsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestAuthAppsStatementContext,0)


        def showRestRolesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestRolesStatementContext,0)


        def showRestGrantsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestGrantsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def showCreateRestFunctionStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestFunctionStatementContext,0)


        def showCreateRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentSetStatementContext,0)


        def showCreateRestContentFileStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestContentFileStatementContext,0)


        def showCreateRestAuthAppStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestAuthAppStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 338
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 339
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 340
                self.createRestFunctionStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 341
                self.createRestContentSetStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 342
                self.createRestContentFileStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 343
                self.createRestAuthAppStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 344
                self.createRestRoleStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 345
                self.createRestUserStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 346
                self.cloneRestServiceStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 347
                self.alterRestServiceStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 348
                self.alterRestSchemaStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 349
                self.alterRestViewStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 350
                self.alterRestProcedureStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 351
                self.alterRestFunctionStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 352
                self.alterRestContentSetStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 353
                self.alterRestAuthAppStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 354
                self.alterRestUserStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 355
                self.dropRestServiceStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 356
                self.dropRestSchemaStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 357
                self.dropRestViewStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 358
                self.dropRestProcedureStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 359
                self.dropRestFunctionStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 360
                self.dropRestContentSetStatement()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 361
                self.dropRestContentFileStatement()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 362
                self.dropRestAuthAppStatement()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 363
                self.dropRestUserStatement()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 364
                self.dropRestRoleStatement()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 365
                self.grantRestRoleStatement()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 366
                self.grantRestPrivilegeStatement()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 367
                self.revokeRestPrivilegeStatement()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 368
                self.revokeRestRoleStatement()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 369
                self.useStatement()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 370
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 371
                self.showRestServicesStatement()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 372
                self.showRestSchemasStatement()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 373
                self.showRestViewsStatement()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 374
                self.showRestProceduresStatement()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 375
                self.showRestFunctionsStatement()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 376
                self.showRestContentSetsStatement()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 377
                self.showRestContentFilesStatement()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 378
                self.showRestAuthAppsStatement()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 379
                self.showRestRolesStatement()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 380
                self.showRestGrantsStatement()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 381
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 382
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 383
                self.showCreateRestViewStatement()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 384
                self.showCreateRestProcedureStatement()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 385
                self.showCreateRestFunctionStatement()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 386
                self.showCreateRestContentSetStatement()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 387
                self.showCreateRestContentFileStatement()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 388
                self.showCreateRestAuthAppStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            _la = self._input.LA(1)
            if not(_la==78 or _la==80):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledPrivateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabledPrivate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabledPrivate" ):
                listener.enterEnabledDisabledPrivate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabledPrivate" ):
                listener.exitEnabledDisabledPrivate(self)




    def enabledDisabledPrivate(self):

        localctx = MRSParser.EnabledDisabledPrivateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_enabledDisabledPrivate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192, 193]:
                self.state = 395
                self.quotedText()
                pass
            elif token in [24]:
                self.state = 396
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 400
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MetadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadata" ):
                listener.enterMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadata" ):
                listener.exitMetadata(self)




    def metadata(self):

        localctx = MRSParser.MetadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 403
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 406
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==28:
                self.state = 409
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 412
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 415
            self.match(MRSParser.PER_SYMBOL)
            self.state = 416
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 417
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 421
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 422
                self.serviceRequestPath()


            self.state = 425
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 426
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 429
            self.match(MRSParser.REST_SYMBOL)
            self.state = 430
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 22517998136852737) != 0):
                self.state = 431
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 437
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78, 80]:
                    self.state = 434
                    self.enabledDisabled()
                    pass
                elif token in [26]:
                    self.state = 435
                    self.jsonOptions()
                    pass
                elif token in [34]:
                    self.state = 436
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 439 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 26)) & ~0x3f) == 0 and ((1 << (_la - 26)) & 22517998136852737) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 442
                self.match(MRSParser.IF_SYMBOL)
                self.state = 443
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 447
                self.match(MRSParser.OR_SYMBOL)
                self.state = 448
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 451
            self.match(MRSParser.REST_SYMBOL)
            self.state = 452
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 453
            self.serviceRequestPath()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 636947) != 0):
                self.state = 454
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def publishedUnpublished(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.PublishedUnpublishedContext)
            else:
                return self.getTypedRuleContext(MRSParser.PublishedUnpublishedContext,i)


        def restProtocol(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProtocolContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProtocolContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def addAuthApp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AddAuthAppContext)
            else:
                return self.getTypedRuleContext(MRSParser.AddAuthAppContext,i)


        def removeAuthApp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RemoveAuthAppContext)
            else:
                return self.getTypedRuleContext(MRSParser.RemoveAuthAppContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 466
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78, 80]:
                    self.state = 457
                    self.enabledDisabled()
                    pass
                elif token in [79, 82]:
                    self.state = 458
                    self.publishedUnpublished()
                    pass
                elif token in [83]:
                    self.state = 459
                    self.restProtocol()
                    pass
                elif token in [21]:
                    self.state = 460
                    self.restAuthentication()
                    pass
                elif token in [26]:
                    self.state = 461
                    self.jsonOptions()
                    pass
                elif token in [86]:
                    self.state = 462
                    self.comments()
                    pass
                elif token in [71]:
                    self.state = 463
                    self.metadata()
                    pass
                elif token in [67]:
                    self.state = 464
                    self.addAuthApp()
                    pass
                elif token in [68]:
                    self.state = 465
                    self.removeAuthApp()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 468 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 636947) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublishedUnpublishedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_publishedUnpublished

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublishedUnpublished" ):
                listener.enterPublishedUnpublished(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublishedUnpublished" ):
                listener.exitPublishedUnpublished(self)




    def publishedUnpublished(self):

        localctx = MRSParser.PublishedUnpublishedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_publishedUnpublished)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            _la = self._input.LA(1)
            if not(_la==79 or _la==82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_restProtocol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 473
            _la = self._input.LA(1)
            if not(_la==84 or _la==85):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1086324736) != 0) or _la==88:
                self.state = 480
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [22]:
                    self.state = 476
                    self.authPath()
                    pass
                elif token in [88]:
                    self.state = 477
                    self.authRedirection()
                    pass
                elif token in [23]:
                    self.state = 478
                    self.authValidation()
                    pass
                elif token in [30]:
                    self.state = 479
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 486
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 489
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 492
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 495
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 496
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(MRSParser.USER_SYMBOL)
            self.state = 499
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 500
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 503
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189, 191]:
                self.state = 501
                self.schemaName()
                pass
            elif token in [24]:
                self.state = 502
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddAuthAppContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_SYMBOL(self):
            return self.getToken(MRSParser.ADD_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_addAuthApp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddAuthApp" ):
                listener.enterAddAuthApp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddAuthApp" ):
                listener.exitAddAuthApp(self)




    def addAuthApp(self):

        localctx = MRSParser.AddAuthAppContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_addAuthApp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(MRSParser.ADD_SYMBOL)
            self.state = 506
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 507
            self.match(MRSParser.APP_SYMBOL)
            self.state = 508
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveAuthAppContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE_SYMBOL(self):
            return self.getToken(MRSParser.REMOVE_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_removeAuthApp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemoveAuthApp" ):
                listener.enterRemoveAuthApp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemoveAuthApp" ):
                listener.exitRemoveAuthApp(self)




    def removeAuthApp(self):

        localctx = MRSParser.RemoveAuthAppContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_removeAuthApp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.match(MRSParser.REMOVE_SYMBOL)
            self.state = 511
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 512
            self.match(MRSParser.APP_SYMBOL)
            self.state = 513
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 516
                self.match(MRSParser.OR_SYMBOL)
                self.state = 517
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 520
            self.match(MRSParser.REST_SYMBOL)
            self.state = 521
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1649267441665) != 0):
                self.state = 522
                self.schemaRequestPath()


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 525
                self.match(MRSParser.ON_SYMBOL)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 526
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 529
                self.serviceRequestPath()


            self.state = 532
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 533
            self.schemaName()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2131585) != 0):
                self.state = 534
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78, 80, 81]:
                    self.state = 537
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 538
                    self.authenticationRequired()
                    pass
                elif token in [92]:
                    self.state = 539
                    self.itemsPerPage()
                    pass
                elif token in [26]:
                    self.state = 540
                    self.jsonOptions()
                    pass
                elif token in [86]:
                    self.state = 541
                    self.comments()
                    pass
                elif token in [71]:
                    self.state = 542
                    self.metadata()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 545 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==21 or _la==26 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2131585) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 548
                self.match(MRSParser.OR_SYMBOL)
                self.state = 549
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 552
            self.match(MRSParser.REST_SYMBOL)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 553
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 556
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 559
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 560
            self.viewRequestPath()
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 561
                self.match(MRSParser.ON_SYMBOL)
                self.state = 562
                self.serviceSchemaSelector()


            self.state = 565
            self.match(MRSParser.AS_SYMBOL)
            self.state = 566
            self.qualifiedIdentifier()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 567
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 568
                self.restObjectName()


            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 31751) != 0):
                self.state = 571
                self.graphQlCrudOptions()


            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 574
                self.graphQlObj()


            self.state = 578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0):
                self.state = 577
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def metadata(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MetadataContext)
            else:
                return self.getTypedRuleContext(MRSParser.MetadataContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectOptions" ):
                listener.enterRestObjectOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectOptions" ):
                listener.exitRestObjectOptions(self)




    def restObjectOptions(self):

        localctx = MRSParser.RestObjectOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restObjectOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self.enabledDisabledPrivate()
                    pass

                elif la_ == 2:
                    self.state = 581
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 582
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 583
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 584
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 585
                    self.metadata()
                    pass

                elif la_ == 7:
                    self.state = 586
                    self.restViewMediaType()
                    pass

                elif la_ == 8:
                    self.state = 587
                    self.restViewFormat()
                    pass

                elif la_ == 9:
                    self.state = 588
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 591 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 594
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192, 193]:
                self.state = 595
                self.quotedText()
                pass
            elif token in [96]:
                self.state = 596
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 600
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 13) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 603
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 604
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 607
                self.match(MRSParser.OR_SYMBOL)
                self.state = 608
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 611
            self.match(MRSParser.REST_SYMBOL)
            self.state = 612
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 613
            self.procedureRequestPath()
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 614
                self.match(MRSParser.ON_SYMBOL)
                self.state = 615
                self.serviceSchemaSelector()


            self.state = 618
            self.match(MRSParser.AS_SYMBOL)
            self.state = 619
            self.qualifiedIdentifier()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 620
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189 or _la==191:
                    self.state = 621
                    self.restObjectName()


                self.state = 624
                self.graphQlObj()


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 627
                self.restProcedureResult()
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0):
                self.state = 633
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_restProcedureResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189 or _la==191:
                self.state = 637
                self.restResultName()


            self.state = 640
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self):
            return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestFunctionStatement" ):
                listener.enterCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestFunctionStatement" ):
                listener.exitCreateRestFunctionStatement(self)




    def createRestFunctionStatement(self):

        localctx = MRSParser.CreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_createRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 643
                self.match(MRSParser.OR_SYMBOL)
                self.state = 644
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 647
            self.match(MRSParser.REST_SYMBOL)
            self.state = 648
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 649
            self.functionRequestPath()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 650
                self.match(MRSParser.ON_SYMBOL)
                self.state = 651
                self.serviceSchemaSelector()


            self.state = 654
            self.match(MRSParser.AS_SYMBOL)
            self.state = 655
            self.qualifiedIdentifier()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 656
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189 or _la==191:
                    self.state = 657
                    self.restObjectName()


                self.state = 660
                self.graphQlObj()


            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 663
                self.restFunctionResult()


            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0):
                self.state = 666
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestFunctionResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restFunctionResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestFunctionResult" ):
                listener.enterRestFunctionResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestFunctionResult" ):
                listener.exitRestFunctionResult(self)




    def restFunctionResult(self):

        localctx = MRSParser.RestFunctionResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_restFunctionResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189 or _la==191:
                self.state = 670
                self.restResultName()


            self.state = 673
            self.graphQlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 676
                self.match(MRSParser.OR_SYMBOL)
                self.state = 677
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 680
            self.match(MRSParser.REST_SYMBOL)
            self.state = 681
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 682
            self.match(MRSParser.SET_SYMBOL)
            self.state = 683
            self.contentSetRequestPath()
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 684
                self.match(MRSParser.ON_SYMBOL)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 685
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 688
                self.serviceRequestPath()


            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 691
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 692
                self.directoryFilePath()


            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 290271138938880) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 269) != 0):
                self.state = 695
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def fileIgnoreList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.FileIgnoreListContext)
            else:
                return self.getTypedRuleContext(MRSParser.FileIgnoreListContext,i)


        def loadScripts(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.LoadScriptsContext)
            else:
                return self.getTypedRuleContext(MRSParser.LoadScriptsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 706
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78, 80, 81]:
                    self.state = 700
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 701
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 702
                    self.jsonOptions()
                    pass
                elif token in [86]:
                    self.state = 703
                    self.comments()
                    pass
                elif token in [43]:
                    self.state = 704
                    self.fileIgnoreList()
                    pass
                elif token in [48]:
                    self.state = 705
                    self.loadScripts()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 708 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 290271138938880) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 269) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileIgnoreListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_fileIgnoreList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileIgnoreList" ):
                listener.enterFileIgnoreList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileIgnoreList" ):
                listener.exitFileIgnoreList(self)




    def fileIgnoreList(self):

        localctx = MRSParser.FileIgnoreListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fileIgnoreList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(MRSParser.IGNORE_SYMBOL)
            self.state = 711
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadScriptsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_loadScripts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadScripts" ):
                listener.enterLoadScripts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadScripts" ):
                listener.exitLoadScripts(self)




    def loadScripts(self):

        localctx = MRSParser.LoadScriptsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_loadScripts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(MRSParser.LOAD_SYMBOL)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==116:
                self.state = 714
                self.match(MRSParser.TYPESCRIPT_SYMBOL)


            self.state = 717
            self.match(MRSParser.SCRIPTS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restContentFileOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentFileOptionsContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentFileStatement" ):
                listener.enterCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentFileStatement" ):
                listener.exitCreateRestContentFileStatement(self)




    def createRestContentFileStatement(self):

        localctx = MRSParser.CreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_createRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 720
                self.match(MRSParser.OR_SYMBOL)
                self.state = 721
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 724
            self.match(MRSParser.REST_SYMBOL)
            self.state = 725
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 726
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 727
            self.contentFileRequestPath()
            self.state = 728
            self.match(MRSParser.ON_SYMBOL)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73 or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1992898379777) != 0):
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 729
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 732
                self.serviceRequestPath()


            self.state = 735
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 736
            self.match(MRSParser.SET_SYMBOL)
            self.state = 737
            self.contentSetRequestPath()
            self.state = 745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 738
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 739
                self.directoryFilePath()
                pass
            elif token in [46, 94]:
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==46:
                    self.state = 740
                    self.match(MRSParser.BINARY_SYMBOL)


                self.state = 743
                self.match(MRSParser.CONTENT_SYMBOL)
                self.state = 744
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 1873497444986126369) != 0):
                self.state = 747
                self.restContentFileOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentFileOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabledPrivate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledPrivateContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledPrivateContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentFileOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentFileOptions" ):
                listener.enterRestContentFileOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentFileOptions" ):
                listener.exitRestContentFileOptions(self)




    def restContentFileOptions(self):

        localctx = MRSParser.RestContentFileOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_restContentFileOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 753
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [78, 80, 81]:
                    self.state = 750
                    self.enabledDisabledPrivate()
                    pass
                elif token in [21]:
                    self.state = 751
                    self.authenticationRequired()
                    pass
                elif token in [26]:
                    self.state = 752
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 755 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & 1873497444986126369) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def vendorName(self):
            return self.getTypedRuleContext(MRSParser.VendorNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestAuthAppStatement" ):
                listener.enterCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestAuthAppStatement" ):
                listener.exitCreateRestAuthAppStatement(self)




    def createRestAuthAppStatement(self):

        localctx = MRSParser.CreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_createRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 758
                self.match(MRSParser.OR_SYMBOL)
                self.state = 759
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 762
            self.match(MRSParser.REST_SYMBOL)
            self.state = 763
            _la = self._input.LA(1)
            if not(_la==21 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 764
            self.match(MRSParser.APP_SYMBOL)
            self.state = 765
            self.authAppName()
            self.state = 766
            self.match(MRSParser.VENDOR_SYMBOL)
            self.state = 770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107]:
                self.state = 767
                self.match(MRSParser.MRS_SYMBOL)
                pass
            elif token in [108]:
                self.state = 768
                self.match(MRSParser.MYSQL_SYMBOL)
                pass
            elif token in [192, 193]:
                self.state = 769
                self.vendorName()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917529027657859072) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70918504267777) != 0):
                self.state = 772
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthAppName" ):
                listener.enterAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthAppName" ):
                listener.exitAuthAppName(self)




    def authAppName(self):

        localctx = MRSParser.AuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_authAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VendorNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_vendorName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVendorName" ):
                listener.enterVendorName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVendorName" ):
                listener.exitVendorName(self)




    def vendorName(self):

        localctx = MRSParser.VendorNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_vendorName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthAppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def allowNewUsersToRegister(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AllowNewUsersToRegisterContext)
            else:
                return self.getTypedRuleContext(MRSParser.AllowNewUsersToRegisterContext,i)


        def defaultRole(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DefaultRoleContext)
            else:
                return self.getTypedRuleContext(MRSParser.DefaultRoleContext,i)


        def appId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppIdContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppIdContext,i)


        def appSecret(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppSecretContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppSecretContext,i)


        def url(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UrlContext)
            else:
                return self.getTypedRuleContext(MRSParser.UrlContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthAppOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthAppOptions" ):
                listener.enterRestAuthAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthAppOptions" ):
                listener.exitRestAuthAppOptions(self)




    def restAuthAppOptions(self):

        localctx = MRSParser.RestAuthAppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_restAuthAppOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 786
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 779
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 780
                    self.comments()
                    pass

                elif la_ == 3:
                    self.state = 781
                    self.allowNewUsersToRegister()
                    pass

                elif la_ == 4:
                    self.state = 782
                    self.defaultRole()
                    pass

                elif la_ == 5:
                    self.state = 783
                    self.appId()
                    pass

                elif la_ == 6:
                    self.state = 784
                    self.appSecret()
                    pass

                elif la_ == 7:
                    self.state = 785
                    self.url()
                    pass


                self.state = 788 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6917529027657859072) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70918504267777) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowNewUsersToRegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MRSParser.DO_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_allowNewUsersToRegister

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowNewUsersToRegister" ):
                listener.enterAllowNewUsersToRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowNewUsersToRegister" ):
                listener.exitAllowNewUsersToRegister(self)




    def allowNewUsersToRegister(self):

        localctx = MRSParser.AllowNewUsersToRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_allowNewUsersToRegister)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 790
                self.match(MRSParser.DO_SYMBOL)
                self.state = 791
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 794
            self.match(MRSParser.ALLOW_SYMBOL)
            self.state = 795
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 796
            self.match(MRSParser.USERS_SYMBOL)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 797
                self.match(MRSParser.TO_SYMBOL)
                self.state = 798
                self.match(MRSParser.REGISTER_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_defaultRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultRole" ):
                listener.enterDefaultRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultRole" ):
                listener.exitDefaultRole(self)




    def defaultRole(self):

        localctx = MRSParser.DefaultRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_defaultRole)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(MRSParser.DEFAULT_SYMBOL)
            self.state = 802
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 803
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID_SYMBOL(self):
            return self.getToken(MRSParser.ID_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_appId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppId" ):
                listener.enterAppId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppId" ):
                listener.exitAppId(self)




    def appId(self):

        localctx = MRSParser.AppIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_appId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            _la = self._input.LA(1)
            if not(_la==61 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 806
            self.match(MRSParser.ID_SYMBOL)
            self.state = 807
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppSecretContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SECRET_SYMBOL(self):
            return self.getToken(MRSParser.SECRET_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_appSecret

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppSecret" ):
                listener.enterAppSecret(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppSecret" ):
                listener.exitAppSecret(self)




    def appSecret(self):

        localctx = MRSParser.AppSecretContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_appSecret)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            _la = self._input.LA(1)
            if not(_la==61 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 810
            self.match(MRSParser.SECRET_SYMBOL)
            self.state = 811
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UrlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def URL_SYMBOL(self):
            return self.getToken(MRSParser.URL_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUrl" ):
                listener.enterUrl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUrl" ):
                listener.exitUrl(self)




    def url(self):

        localctx = MRSParser.UrlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(MRSParser.URL_SYMBOL)
            self.state = 814
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestUserStatement" ):
                listener.enterCreateRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestUserStatement" ):
                listener.exitCreateRestUserStatement(self)




    def createRestUserStatement(self):

        localctx = MRSParser.CreateRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_createRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 817
                self.match(MRSParser.OR_SYMBOL)
                self.state = 818
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 821
            self.match(MRSParser.REST_SYMBOL)
            self.state = 822
            self.match(MRSParser.USER_SYMBOL)
            self.state = 823
            self.userName()
            self.state = 824
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 825
            self.authAppName()
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 826
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 827
                self.match(MRSParser.BY_SYMBOL)
                self.state = 828
                self.userPassword()


            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==54 or _la==103:
                self.state = 831
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MRSParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_userPassword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPassword" ):
                listener.enterUserPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPassword" ):
                listener.exitUserPassword(self)




    def userPassword(self):

        localctx = MRSParser.UserPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_userPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def accountLock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AccountLockContext)
            else:
                return self.getTypedRuleContext(MRSParser.AccountLockContext,i)


        def appOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AppOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.AppOptionsContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_userOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserOptions" ):
                listener.enterUserOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserOptions" ):
                listener.exitUserOptions(self)




    def userOptions(self):

        localctx = MRSParser.UserOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_userOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54]:
                    self.state = 838
                    self.accountLock()
                    pass
                elif token in [103]:
                    self.state = 839
                    self.appOptions()
                    pass
                elif token in [26]:
                    self.state = 840
                    self.jsonOptions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 843 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==54 or _la==103):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_appOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppOptions" ):
                listener.enterAppOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppOptions" ):
                listener.exitAppOptions(self)




    def appOptions(self):

        localctx = MRSParser.AppOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_appOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(MRSParser.APP_SYMBOL)
            self.state = 846
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 847
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccountLockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_accountLock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccountLock" ):
                listener.enterAccountLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccountLock" ):
                listener.exitAccountLock(self)




    def accountLock(self):

        localctx = MRSParser.AccountLockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_accountLock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(MRSParser.ACCOUNT_SYMBOL)
            self.state = 850
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def parentRoleName(self):
            return self.getTypedRuleContext(MRSParser.ParentRoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def restRoleOptions(self):
            return self.getTypedRuleContext(MRSParser.RestRoleOptionsContext,0)


        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestRoleStatement" ):
                listener.enterCreateRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestRoleStatement" ):
                listener.exitCreateRestRoleStatement(self)




    def createRestRoleStatement(self):

        localctx = MRSParser.CreateRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_createRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 853
                self.match(MRSParser.OR_SYMBOL)
                self.state = 854
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 857
            self.match(MRSParser.REST_SYMBOL)
            self.state = 858
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 859
            self.roleName()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 860
                self.match(MRSParser.EXTENDS_SYMBOL)
                self.state = 861
                self.parentRoleName()


            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 864
                self.match(MRSParser.ON_SYMBOL)
                self.state = 871
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 865
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 866
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass
                elif token in [73, 153, 178, 189, 191, 192, 193]:
                    self.state = 868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 867
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 870
                    self.serviceRequestPath()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 876
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==86:
                self.state = 875
                self.restRoleOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestRoleOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restRoleOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestRoleOptions" ):
                listener.enterRestRoleOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestRoleOptions" ):
                listener.exitRestRoleOptions(self)




    def restRoleOptions(self):

        localctx = MRSParser.RestRoleOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_restRoleOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 880
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 878
                    self.jsonOptions()
                    pass
                elif token in [86]:
                    self.state = 879
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 882 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==26 or _la==86):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParentRoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_parentRoleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentRoleName" ):
                listener.enterParentRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentRoleName" ):
                listener.exitParentRoleName(self)




    def parentRoleName(self):

        localctx = MRSParser.ParentRoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parentRoleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MRSParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_roleName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CloneRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_cloneRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneRestServiceStatement" ):
                listener.enterCloneRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneRestServiceStatement" ):
                listener.exitCloneRestServiceStatement(self)




    def cloneRestServiceStatement(self):

        localctx = MRSParser.CloneRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_cloneRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(MRSParser.CLONE_SYMBOL)
            self.state = 889
            self.match(MRSParser.REST_SYMBOL)
            self.state = 890
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 891
            self.serviceRequestPath()
            self.state = 892
            self.match(MRSParser.NEW_SYMBOL)
            self.state = 893
            self.match(MRSParser.REQUEST_SYMBOL)
            self.state = 894
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 895
            self.newServiceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 898
            self.match(MRSParser.REST_SYMBOL)
            self.state = 899
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 900
            self.serviceRequestPath()
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 901
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 902
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 903
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 904
                self.newServiceRequestPath()


            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 636947) != 0):
                self.state = 907
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 911
            self.match(MRSParser.REST_SYMBOL)
            self.state = 912
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1649267441665) != 0):
                self.state = 913
                self.schemaRequestPath()


            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 916
                self.match(MRSParser.ON_SYMBOL)
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 917
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 920
                self.serviceRequestPath()


            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 923
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 924
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 925
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 926
                self.newSchemaRequestPath()


            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 929
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 930
                self.schemaName()


            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==26 or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 2131585) != 0):
                self.state = 933
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 937
            self.match(MRSParser.REST_SYMBOL)
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 938
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 941
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 944
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 945
            self.viewRequestPath()
            self.state = 948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 946
                self.match(MRSParser.ON_SYMBOL)
                self.state = 947
                self.serviceSchemaSelector()


            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 950
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 951
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 952
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 953
                self.newViewRequestPath()


            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==112:
                self.state = 956
                self.match(MRSParser.CLASS_SYMBOL)
                self.state = 957
                self.restObjectName()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 31751) != 0):
                    self.state = 958
                    self.graphQlCrudOptions()


                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 961
                    self.graphQlObj()




            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0):
                self.state = 966
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 970
            self.match(MRSParser.REST_SYMBOL)
            self.state = 971
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 972
            self.procedureRequestPath()
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 973
                self.match(MRSParser.ON_SYMBOL)
                self.state = 974
                self.serviceSchemaSelector()


            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 977
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 978
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 979
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 980
                self.newProcedureRequestPath()


            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 983
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189 or _la==191:
                    self.state = 984
                    self.restObjectName()


                self.state = 987
                self.graphQlObj()


            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 990
                self.restProcedureResult()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0):
                self.state = 996
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newFunctionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewFunctionRequestPathContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def restFunctionResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestFunctionResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestFunctionResultContext,i)


        def restObjectOptions(self):
            return self.getTypedRuleContext(MRSParser.RestObjectOptionsContext,0)


        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestFunctionStatement" ):
                listener.enterAlterRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestFunctionStatement" ):
                listener.exitAlterRestFunctionStatement(self)




    def alterRestFunctionStatement(self):

        localctx = MRSParser.AlterRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alterRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1000
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1001
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1002
            self.functionRequestPath()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1003
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1004
                self.serviceSchemaSelector()


            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1007
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1008
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1009
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1010
                self.newFunctionRequestPath()


            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 1013
                self.match(MRSParser.PARAMETERS_SYMBOL)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189 or _la==191:
                    self.state = 1014
                    self.restObjectName()


                self.state = 1017
                self.graphQlObj()


            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77:
                self.state = 1020
                self.restFunctionResult()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8659140608) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 18908801) != 0):
                self.state = 1026
                self.restObjectOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newContentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewContentSetRequestPathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestContentSetStatement" ):
                listener.enterAlterRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestContentSetStatement" ):
                listener.exitAlterRestContentSetStatement(self)




    def alterRestContentSetStatement(self):

        localctx = MRSParser.AlterRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alterRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1030
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1031
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1032
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1033
            self.contentSetRequestPath()
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 1034
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1035
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1038
                self.serviceRequestPath()


            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1041
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1042
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 1043
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 1044
                self.newContentSetRequestPath()


            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 290271138938880) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 269) != 0):
                self.state = 1047
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MRSParser.NAME_SYMBOL, 0)

        def newAuthAppName(self):
            return self.getTypedRuleContext(MRSParser.NewAuthAppNameContext,0)


        def restAuthAppOptions(self):
            return self.getTypedRuleContext(MRSParser.RestAuthAppOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestAuthAppStatement" ):
                listener.enterAlterRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestAuthAppStatement" ):
                listener.exitAlterRestAuthAppStatement(self)




    def alterRestAuthAppStatement(self):

        localctx = MRSParser.AlterRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alterRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1051
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1052
            _la = self._input.LA(1)
            if not(_la==21 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1053
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1054
            self.authAppName()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1055
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 1056
                self.match(MRSParser.NAME_SYMBOL)
                self.state = 1057
                self.newAuthAppName()


            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6917529027657859072) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 70918504267777) != 0):
                self.state = 1060
                self.restAuthAppOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewAuthAppNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newAuthAppName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewAuthAppName" ):
                listener.enterNewAuthAppName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewAuthAppName" ):
                listener.exitNewAuthAppName(self)




    def newAuthAppName(self):

        localctx = MRSParser.NewAuthAppNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_newAuthAppName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def userPassword(self):
            return self.getTypedRuleContext(MRSParser.UserPasswordContext,0)


        def userOptions(self):
            return self.getTypedRuleContext(MRSParser.UserOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestUserStatement" ):
                listener.enterAlterRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestUserStatement" ):
                listener.exitAlterRestUserStatement(self)




    def alterRestUserStatement(self):

        localctx = MRSParser.AlterRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alterRestUserStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 1066
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1067
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1068
            self.userName()
            self.state = 1069
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1070
            self.authAppName()
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1071
                self.match(MRSParser.IDENTIFIED_SYMBOL)
                self.state = 1072
                self.match(MRSParser.BY_SYMBOL)
                self.state = 1073
                self.userPassword()


            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26 or _la==54 or _la==103:
                self.state = 1076
                self.userOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1080
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1081
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1082
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1085
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1086
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1087
            self.schemaRequestPath()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1088
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1089
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1092
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestViewStatement" ):
                listener.enterDropRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestViewStatement" ):
                listener.exitDropRestViewStatement(self)




    def dropRestViewStatement(self):

        localctx = MRSParser.DropRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1096
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1097
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1100
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1103
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1104
            self.viewRequestPath()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1105
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1106
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1110
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1111
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1112
            self.procedureRequestPath()
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1113
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1114
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestFunctionStatement" ):
                listener.enterDropRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestFunctionStatement" ):
                listener.exitDropRestFunctionStatement(self)




    def dropRestFunctionStatement(self):

        localctx = MRSParser.DropRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1118
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1119
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1120
            self.functionRequestPath()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1121
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1122
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1126
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1127
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1128
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1129
            self.contentSetRequestPath()
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 1130
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1131
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1134
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentFileStatement" ):
                listener.enterDropRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentFileStatement" ):
                listener.exitDropRestContentFileStatement(self)




    def dropRestContentFileStatement(self):

        localctx = MRSParser.DropRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dropRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1138
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1139
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1140
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1141
            self.contentFileRequestPath()
            self.state = 1142
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73 or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1992898379777) != 0):
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1143
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1146
                self.serviceRequestPath()


            self.state = 1149
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1150
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1151
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestAuthAppStatement" ):
                listener.enterDropRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestAuthAppStatement" ):
                listener.exitDropRestAuthAppStatement(self)




    def dropRestAuthAppStatement(self):

        localctx = MRSParser.DropRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dropRestAuthAppStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1154
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1155
            _la = self._input.LA(1)
            if not(_la==21 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1156
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1157
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestUserStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestUserStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestUserStatement" ):
                listener.enterDropRestUserStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestUserStatement" ):
                listener.exitDropRestUserStatement(self)




    def dropRestUserStatement(self):

        localctx = MRSParser.DropRestUserStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropRestUserStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1159
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1160
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1161
            self.match(MRSParser.USER_SYMBOL)
            self.state = 1162
            self.userName()
            self.state = 1163
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1164
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestRoleStatement" ):
                listener.enterDropRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestRoleStatement" ):
                listener.exitDropRestRoleStatement(self)




    def dropRestRoleStatement(self):

        localctx = MRSParser.DropRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dropRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 1167
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1168
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1169
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestPrivilegeStatement" ):
                listener.enterGrantRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestPrivilegeStatement" ):
                listener.exitGrantRestPrivilegeStatement(self)




    def grantRestPrivilegeStatement(self):

        localctx = MRSParser.GrantRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_grantRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1172
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1173
            self.privilegeList()
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 1174
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1175
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1178
                self.serviceRequestPath()

            elif la_ == 2:
                self.state = 1179
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1180
                self.serviceSchemaSelector()
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1181
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1182
                    self.objectRequestPath()




            self.state = 1187
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1188
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilegeName(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeNameContext,0)


        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_privilegeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeList" ):
                listener.enterPrivilegeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeList" ):
                listener.exitPrivilegeList(self)




    def privilegeList(self):

        localctx = MRSParser.PrivilegeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_privilegeList)
        try:
            self.state = 1195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.privilegeName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1191
                self.privilegeName()
                self.state = 1192
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1193
                self.privilegeList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_privilegeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeName" ):
                listener.enterPrivilegeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeName" ):
                listener.exitPrivilegeName(self)




    def privilegeName(self):

        localctx = MRSParser.PrivilegeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_privilegeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3377716900397058) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def comments(self):
            return self.getTypedRuleContext(MRSParser.CommentsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_grantRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRestRoleStatement" ):
                listener.enterGrantRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRestRoleStatement" ):
                listener.exitGrantRestRoleStatement(self)




    def grantRestRoleStatement(self):

        localctx = MRSParser.GrantRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_grantRestRoleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(MRSParser.GRANT_SYMBOL)
            self.state = 1200
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1201
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1202
            self.roleName()
            self.state = 1203
            self.match(MRSParser.TO_SYMBOL)
            self.state = 1204
            self.userName()
            self.state = 1205
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1206
            self.authAppName()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 1207
                self.comments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestPrivilegeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def privilegeList(self):
            return self.getTypedRuleContext(MRSParser.PrivilegeListContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def objectRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ObjectRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestPrivilegeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestPrivilegeStatement" ):
                listener.enterRevokeRestPrivilegeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestPrivilegeStatement" ):
                listener.exitRevokeRestPrivilegeStatement(self)




    def revokeRestPrivilegeStatement(self):

        localctx = MRSParser.RevokeRestPrivilegeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_revokeRestPrivilegeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1211
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1212
            self.privilegeList()
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1214
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1217
                self.serviceRequestPath()

            elif la_ == 2:
                self.state = 1218
                self.match(MRSParser.ON_SYMBOL)
                self.state = 1219
                self.serviceSchemaSelector()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 1220
                    self.match(MRSParser.OBJECT_SYMBOL)
                    self.state = 1221
                    self.objectRequestPath()




            self.state = 1226
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1227
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeRestRoleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_revokeRestRoleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRestRoleStatement" ):
                listener.enterRevokeRestRoleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRestRoleStatement" ):
                listener.exitRevokeRestRoleStatement(self)




    def revokeRestRoleStatement(self):

        localctx = MRSParser.RevokeRestRoleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_revokeRestRoleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            self.match(MRSParser.REVOKE_SYMBOL)
            self.state = 1230
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1231
            self.match(MRSParser.ROLE_SYMBOL)
            self.state = 1232
            self.roleName()
            self.state = 1233
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 1234
            self.userName()
            self.state = 1235
            self.match(MRSParser.AT_SIGN_SYMBOL)
            self.state = 1236
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(MRSParser.USE_SYMBOL)
            self.state = 1239
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1240
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1242
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 1243
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1244
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1248
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 1249
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 1252
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1255
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1256
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1259
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1260
            self.match(MRSParser.DATABASES_SYMBOL)
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1261
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1262
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1265
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1269
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1270
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1273
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1276
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 1279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1277
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1278
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1281
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1282
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1283
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1284
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1285
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestFunctionsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestFunctionsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestFunctionsStatement" ):
                listener.enterShowRestFunctionsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestFunctionsStatement" ):
                listener.exitShowRestFunctionsStatement(self)




    def showRestFunctionsStatement(self):

        localctx = MRSParser.ShowRestFunctionsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_showRestFunctionsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1289
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1290
            self.match(MRSParser.FUNCTIONS_SYMBOL)
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1291
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1292
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1296
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1297
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1298
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1299
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1300
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1303
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentFilesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentFilesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentFilesStatement" ):
                listener.enterShowRestContentFilesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentFilesStatement" ):
                listener.exitShowRestContentFilesStatement(self)




    def showRestContentFilesStatement(self):

        localctx = MRSParser.ShowRestContentFilesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_showRestContentFilesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1307
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1308
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1309
            self.match(MRSParser.FILES_SYMBOL)
            self.state = 1310
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73 or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1992898379777) != 0):
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1311
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1314
                self.serviceRequestPath()


            self.state = 1317
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1318
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1319
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestAuthAppsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestAuthAppsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestAuthAppsStatement" ):
                listener.enterShowRestAuthAppsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestAuthAppsStatement" ):
                listener.exitShowRestAuthAppsStatement(self)




    def showRestAuthAppsStatement(self):

        localctx = MRSParser.ShowRestAuthAppsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_showRestAuthAppsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1322
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1323
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1324
            self.match(MRSParser.APPS_SYMBOL)
            self.state = 1330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1325
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1326
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1329
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestRolesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def userName(self):
            return self.getTypedRuleContext(MRSParser.UserNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestRolesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestRolesStatement" ):
                listener.enterShowRestRolesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestRolesStatement" ):
                listener.exitShowRestRolesStatement(self)




    def showRestRolesStatement(self):

        localctx = MRSParser.ShowRestRolesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_showRestRolesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1333
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1334
            self.match(MRSParser.ROLES_SYMBOL)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1335
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [60]:
                    self.state = 1336
                    self.match(MRSParser.ANY_SYMBOL)
                    self.state = 1337
                    self.match(MRSParser.SERVICE_SYMBOL)
                    pass
                elif token in [73, 153, 178, 189, 191, 192, 193]:
                    self.state = 1339
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==73:
                        self.state = 1338
                        self.match(MRSParser.SERVICE_SYMBOL)


                    self.state = 1341
                    self.serviceRequestPath()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 1346
                self.match(MRSParser.FOR_SYMBOL)
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192 or _la==193:
                    self.state = 1347
                    self.userName()


                self.state = 1350
                self.match(MRSParser.AT_SIGN_SYMBOL)
                self.state = 1351
                self.authAppName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestGrantsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def roleName(self):
            return self.getTypedRuleContext(MRSParser.RoleNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showRestGrantsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestGrantsStatement" ):
                listener.enterShowRestGrantsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestGrantsStatement" ):
                listener.exitShowRestGrantsStatement(self)




    def showRestGrantsStatement(self):

        localctx = MRSParser.ShowRestGrantsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_showRestGrantsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1355
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1356
            self.match(MRSParser.GRANTS_SYMBOL)
            self.state = 1357
            self.match(MRSParser.FOR_SYMBOL)
            self.state = 1358
            self.roleName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def INCLUDE_SYMBOL(self):
            return self.getToken(MRSParser.INCLUDE_SYMBOL, 0)

        def ALL_SYMBOL(self):
            return self.getToken(MRSParser.ALL_SYMBOL, 0)

        def OBJECTS_SYMBOL(self):
            return self.getToken(MRSParser.OBJECTS_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1361
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1362
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1363
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1992898379777) != 0):
                self.state = 1364
                self.serviceRequestPath()


            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==121:
                self.state = 1367
                self.match(MRSParser.INCLUDE_SYMBOL)
                self.state = 1368
                self.match(MRSParser.ALL_SYMBOL)
                self.state = 1369
                self.match(MRSParser.OBJECTS_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1373
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1374
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1375
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1649267441665) != 0):
                self.state = 1376
                self.schemaRequestPath()


            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1379
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1380
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1383
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1387
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1388
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 1389
                self.match(MRSParser.DATA_SYMBOL)


            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 1392
                self.match(MRSParser.MAPPING_SYMBOL)


            self.state = 1395
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 1396
            self.viewRequestPath()
            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1397
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1398
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1402
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1403
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1404
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 1405
            self.procedureRequestPath()
            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1406
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1407
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestFunctionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def functionRequestPath(self):
            return self.getTypedRuleContext(MRSParser.FunctionRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestFunctionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestFunctionStatement" ):
                listener.enterShowCreateRestFunctionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestFunctionStatement" ):
                listener.exitShowCreateRestFunctionStatement(self)




    def showCreateRestFunctionStatement(self):

        localctx = MRSParser.ShowCreateRestFunctionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_showCreateRestFunctionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1411
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1412
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1413
            self.match(MRSParser.FUNCTION_SYMBOL)
            self.state = 1414
            self.functionRequestPath()
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1415
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1416
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentSetStatement" ):
                listener.enterShowCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentSetStatement" ):
                listener.exitShowCreateRestContentSetStatement(self)




    def showCreateRestContentSetStatement(self):

        localctx = MRSParser.ShowCreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_showCreateRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1420
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1421
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1422
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1423
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1424
            self.contentSetRequestPath()
            self.state = 1430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==9:
                self.state = 1425
                _la = self._input.LA(1)
                if not(_la==8 or _la==9):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1426
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1429
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestContentFileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.CONTENT_SYMBOL)
            else:
                return self.getToken(MRSParser.CONTENT_SYMBOL, i)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def contentFileRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentFileRequestPathContext,0)


        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestContentFileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestContentFileStatement" ):
                listener.enterShowCreateRestContentFileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestContentFileStatement" ):
                listener.exitShowCreateRestContentFileStatement(self)




    def showCreateRestContentFileStatement(self):

        localctx = MRSParser.ShowCreateRestContentFileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_showCreateRestContentFileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1433
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1434
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1435
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1436
            self.match(MRSParser.FILE_SYMBOL)
            self.state = 1437
            self.contentFileRequestPath()
            self.state = 1438
            _la = self._input.LA(1)
            if not(_la==8 or _la==9):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73 or ((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & 1992898379777) != 0):
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1439
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 1442
                self.serviceRequestPath()


            self.state = 1445
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 1446
            self.match(MRSParser.SET_SYMBOL)
            self.state = 1447
            self.contentSetRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestAuthAppStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def authAppName(self):
            return self.getTypedRuleContext(MRSParser.AuthAppNameContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestAuthAppStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestAuthAppStatement" ):
                listener.enterShowCreateRestAuthAppStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestAuthAppStatement" ):
                listener.exitShowCreateRestAuthAppStatement(self)




    def showCreateRestAuthAppStatement(self):

        localctx = MRSParser.ShowCreateRestAuthAppStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_showCreateRestAuthAppStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1449
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 1450
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 1451
            self.match(MRSParser.REST_SYMBOL)
            self.state = 1452
            self.match(MRSParser.AUTH_SYMBOL)
            self.state = 1453
            self.match(MRSParser.APP_SYMBOL)
            self.state = 1454
            self.authAppName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
            if la_ == 1:
                self.state = 1456
                self.serviceDevelopersIdentifier()


            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 10241) != 0):
                self.state = 1459
                self.hostAndPortIdentifier()


            self.state = 1462
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def serviceDevelopersIdentifier(self):
            return self.getTypedRuleContext(MRSParser.ServiceDevelopersIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1464
                self.serviceDevelopersIdentifier()


            self.state = 1468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 10241) != 0):
                self.state = 1467
                self.hostAndPortIdentifier()


            self.state = 1470
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1478
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_objectRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectRequestPath" ):
                listener.enterObjectRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectRequestPath" ):
                listener.exitObjectRequestPath(self)




    def objectRequestPath(self):

        localctx = MRSParser.ObjectRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_objectRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_functionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionRequestPath" ):
                listener.enterFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionRequestPath" ):
                listener.exitFunctionRequestPath(self)




    def functionRequestPath(self):

        localctx = MRSParser.FunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1490
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewFunctionRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newFunctionRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewFunctionRequestPath" ):
                listener.enterNewFunctionRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewFunctionRequestPath" ):
                listener.exitNewFunctionRequestPath(self)




    def newFunctionRequestPath(self):

        localctx = MRSParser.NewFunctionRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_newFunctionRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newContentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewContentSetRequestPath" ):
                listener.enterNewContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewContentSetRequestPath" ):
                listener.exitNewContentSetRequestPath(self)




    def newContentSetRequestPath(self):

        localctx = MRSParser.NewContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_newContentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentFileRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentFileRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentFileRequestPath" ):
                listener.enterContentFileRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentFileRequestPath" ):
                listener.exitContentFileRequestPath(self)




    def contentFileRequestPath(self):

        localctx = MRSParser.ContentFileRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_contentFileRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeveloperIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceDeveloperIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDeveloperIdentifier" ):
                listener.enterServiceDeveloperIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDeveloperIdentifier" ):
                listener.exitServiceDeveloperIdentifier(self)




    def serviceDeveloperIdentifier(self):

        localctx = MRSParser.ServiceDeveloperIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_serviceDeveloperIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189, 191]:
                self.state = 1500
                self.identifier()
                pass
            elif token in [192, 193]:
                self.state = 1501
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDevelopersIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def serviceDeveloperIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ServiceDeveloperIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.ServiceDeveloperIdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def AT_SIGN_SYMBOL(self):
            return self.getToken(MRSParser.AT_SIGN_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_serviceDevelopersIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDevelopersIdentifier" ):
                listener.enterServiceDevelopersIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDevelopersIdentifier" ):
                listener.exitServiceDevelopersIdentifier(self)




    def serviceDevelopersIdentifier(self):

        localctx = MRSParser.ServiceDevelopersIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_serviceDevelopersIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.serviceDeveloperIdentifier()
            self.state = 1509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==165:
                self.state = 1505
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1506
                self.serviceDeveloperIdentifier()
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==177:
                self.state = 1512
                self.match(MRSParser.AT_SIGN_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 1523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1515
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1516
                self.identifier()
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==164:
                    self.state = 1517
                    self.dotIdentifier()
                    self.state = 1522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def AT_TEXT_SUFFIX(self):
            return self.getToken(MRSParser.AT_TEXT_SUFFIX, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189, 191]:
                self.state = 1525
                self.dottedIdentifier()
                pass
            elif token in [178]:
                self.state = 1526
                self.match(MRSParser.AT_TEXT_SUFFIX)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==167:
                self.state = 1529
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 1530
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [153]:
                self.state = 1533
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 1534
                self.dottedIdentifier()
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 1535
                    self.match(MRSParser.DIV_OPERATOR)
                    self.state = 1536
                    self.dottedIdentifier()


                pass
            elif token in [192, 193]:
                self.state = 1539
                self.quotedText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            _la = self._input.LA(1)
            if not(_la==192 or _la==193):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1544
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1545
                self.jsonPair()
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==165:
                    self.state = 1546
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1547
                    self.jsonPair()
                    self.state = 1552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1553
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1555
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1556
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_jsonPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.match(MRSParser.DOUBLE_QUOTED_TEXT)
            self.state = 1560
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1561
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 1572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0) or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 4483955294211) != 0):
                self.state = 1564
                self.jsonValue()
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==165:
                    self.state = 1565
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1566
                    self.jsonValue()
                    self.state = 1571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1574
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(MRSParser.FLOAT_NUMBER, 0)

        def MINUS_OPERATOR(self):
            return self.getToken(MRSParser.MINUS_OPERATOR, 0)

        def PLUS_OPERATOR(self):
            return self.getToken(MRSParser.PLUS_OPERATOR, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_jsonValue)
        self._la = 0 # Token type
        try:
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1576
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [150, 151, 186]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150 or _la==151:
                    self.state = 1577
                    _la = self._input.LA(1)
                    if not(_la==150 or _la==151):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1580
                self.match(MRSParser.FLOAT_NUMBER)
                pass
            elif token in [184]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1581
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1582
                self.jsonObj()
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1583
                self.jsonArr()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1584
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1585
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1586
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphQlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphQlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphQlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlObj" ):
                listener.enterGraphQlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlObj" ):
                listener.exitGraphQlObj(self)




    def graphQlObj(self):

        localctx = MRSParser.GraphQlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_graphQlObj)
        self._la = 0 # Token type
        try:
            self.state = 1602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1590
                self.graphQlPair()
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==165:
                    self.state = 1591
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 1592
                    self.graphQlPair()
                    self.state = 1597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1598
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1600
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 1601
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def AT_CHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_CHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_CHECK_SYMBOL, i)

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlCrudOptions" ):
                listener.enterGraphQlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlCrudOptions" ):
                listener.exitGraphQlCrudOptions(self)




    def graphQlCrudOptions(self):

        localctx = MRSParser.GraphQlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_graphQlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1605 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1604
                _la = self._input.LA(1)
                if not(((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 31751) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1607 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 31751) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphQlPairKey(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairKeyContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def graphQlPairValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlPairValueContext,0)


        def graphQlValueOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlValueOptionsContext,0)


        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphQlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphQlDatatypeValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def graphQlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphQlCrudOptionsContext,0)


        def graphQlValueJsonSchema(self):
            return self.getTypedRuleContext(MRSParser.GraphQlValueJsonSchemaContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPair" ):
                listener.enterGraphQlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPair" ):
                listener.exitGraphQlPair(self)




    def graphQlPair(self):

        localctx = MRSParser.GraphQlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_graphQlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self.graphQlPairKey()
            self.state = 1610
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 1611
            self.graphQlPairValue()
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & 7) != 0):
                self.state = 1612
                _la = self._input.LA(1)
                if not(((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & 7) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1615
                self.graphQlValueOptions()


            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133:
                self.state = 1618
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 1619
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 1620
                self.graphQlDatatypeValue()
                self.state = 1621
                self.match(MRSParser.CLOSE_PAR_SYMBOL)


            self.state = 1626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 126)) & ~0x3f) == 0 and ((1 << (_la - 126)) & 31751) != 0):
                self.state = 1625
                self.graphQlCrudOptions()


            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 1628
                self.graphQlValueJsonSchema()


            self.state = 1632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 1631
                self.graphQlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_NOCHECK_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOCHECK_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, i)

        def AT_SORTABLE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SORTABLE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, i)

        def AT_NOFILTERING_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOFILTERING_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, i)

        def AT_ROWOWNERSHIP_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, i)

        def AT_UNNEST_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UNNEST_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UNNEST_SYMBOL, i)

        def AT_KEY_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_KEY_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_KEY_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValueOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValueOptions" ):
                listener.enterGraphQlValueOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValueOptions" ):
                listener.exitGraphQlValueOptions(self)




    def graphQlValueOptions(self):

        localctx = MRSParser.GraphQlValueOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_graphQlValueOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1634
                    _la = self._input.LA(1)
                    if not(((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & 16445) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1637 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueJsonSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValueJsonSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValueJsonSchema" ):
                listener.enterGraphQlValueJsonSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValueJsonSchema" ):
                listener.exitGraphQlValueJsonSchema(self)




    def graphQlValueJsonSchema(self):

        localctx = MRSParser.GraphQlValueJsonSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_graphQlValueJsonSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(MRSParser.JSON_SYMBOL)
            self.state = 1640
            self.match(MRSParser.DATABASE_SYMBOL)
            self.state = 1641
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlAllowedKeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def DATABASES_SYMBOL(self):
            return self.getToken(MRSParser.DATABASES_SYMBOL, 0)

        def DATABASE_SYMBOL(self):
            return self.getToken(MRSParser.DATABASE_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def FUNCTION_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTION_SYMBOL, 0)

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def FILTER_SYMBOL(self):
            return self.getToken(MRSParser.FILTER_SYMBOL, 0)

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def EXISTS_SYMBOL(self):
            return self.getToken(MRSParser.EXISTS_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def HOST_SYMBOL(self):
            return self.getToken(MRSParser.HOST_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def IDENTIFIED_SYMBOL(self):
            return self.getToken(MRSParser.IDENTIFIED_SYMBOL, 0)

        def BY_SYMBOL(self):
            return self.getToken(MRSParser.BY_SYMBOL, 0)

        def ROLE_SYMBOL(self):
            return self.getToken(MRSParser.ROLE_SYMBOL, 0)

        def TO_SYMBOL(self):
            return self.getToken(MRSParser.TO_SYMBOL, 0)

        def IGNORE_SYMBOL(self):
            return self.getToken(MRSParser.IGNORE_SYMBOL, 0)

        def CLONE_SYMBOL(self):
            return self.getToken(MRSParser.CLONE_SYMBOL, 0)

        def FILE_SYMBOL(self):
            return self.getToken(MRSParser.FILE_SYMBOL, 0)

        def BINARY_SYMBOL(self):
            return self.getToken(MRSParser.BINARY_SYMBOL, 0)

        def DATA_SYMBOL(self):
            return self.getToken(MRSParser.DATA_SYMBOL, 0)

        def LOAD_SYMBOL(self):
            return self.getToken(MRSParser.LOAD_SYMBOL, 0)

        def GRANT_SYMBOL(self):
            return self.getToken(MRSParser.GRANT_SYMBOL, 0)

        def READ_SYMBOL(self):
            return self.getToken(MRSParser.READ_SYMBOL, 0)

        def DELETE_SYMBOL(self):
            return self.getToken(MRSParser.DELETE_SYMBOL, 0)

        def GROUP_SYMBOL(self):
            return self.getToken(MRSParser.GROUP_SYMBOL, 0)

        def REVOKE_SYMBOL(self):
            return self.getToken(MRSParser.REVOKE_SYMBOL, 0)

        def ACCOUNT_SYMBOL(self):
            return self.getToken(MRSParser.ACCOUNT_SYMBOL, 0)

        def LOCK_SYMBOL(self):
            return self.getToken(MRSParser.LOCK_SYMBOL, 0)

        def UNLOCK_SYMBOL(self):
            return self.getToken(MRSParser.UNLOCK_SYMBOL, 0)

        def GRANTS_SYMBOL(self):
            return self.getToken(MRSParser.GRANTS_SYMBOL, 0)

        def FOR_SYMBOL(self):
            return self.getToken(MRSParser.FOR_SYMBOL, 0)

        def LEVEL_SYMBOL(self):
            return self.getToken(MRSParser.LEVEL_SYMBOL, 0)

        def ANY_SYMBOL(self):
            return self.getToken(MRSParser.ANY_SYMBOL, 0)

        def CLIENT_SYMBOL(self):
            return self.getToken(MRSParser.CLIENT_SYMBOL, 0)

        def URL_SYMBOL(self):
            return self.getToken(MRSParser.URL_SYMBOL, 0)

        def NAME_SYMBOL(self):
            return self.getToken(MRSParser.NAME_SYMBOL, 0)

        def DO_SYMBOL(self):
            return self.getToken(MRSParser.DO_SYMBOL, 0)

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def FUNCTIONS_SYMBOL(self):
            return self.getToken(MRSParser.FUNCTIONS_SYMBOL, 0)

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def PUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.PUBLISHED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def PRIVATE_SYMBOL(self):
            return self.getToken(MRSParser.PRIVATE_SYMBOL, 0)

        def UNPUBLISHED_SYMBOL(self):
            return self.getToken(MRSParser.UNPUBLISHED_SYMBOL, 0)

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def FILES_SYMBOL(self):
            return self.getToken(MRSParser.FILES_SYMBOL, 0)

        def AUTH_SYMBOL(self):
            return self.getToken(MRSParser.AUTH_SYMBOL, 0)

        def APPS_SYMBOL(self):
            return self.getToken(MRSParser.APPS_SYMBOL, 0)

        def APP_SYMBOL(self):
            return self.getToken(MRSParser.APP_SYMBOL, 0)

        def ID_SYMBOL(self):
            return self.getToken(MRSParser.ID_SYMBOL, 0)

        def SECRET_SYMBOL(self):
            return self.getToken(MRSParser.SECRET_SYMBOL, 0)

        def VENDOR_SYMBOL(self):
            return self.getToken(MRSParser.VENDOR_SYMBOL, 0)

        def MRS_SYMBOL(self):
            return self.getToken(MRSParser.MRS_SYMBOL, 0)

        def MYSQL_SYMBOL(self):
            return self.getToken(MRSParser.MYSQL_SYMBOL, 0)

        def USERS_SYMBOL(self):
            return self.getToken(MRSParser.USERS_SYMBOL, 0)

        def ALLOW_SYMBOL(self):
            return self.getToken(MRSParser.ALLOW_SYMBOL, 0)

        def REGISTER_SYMBOL(self):
            return self.getToken(MRSParser.REGISTER_SYMBOL, 0)

        def CLASS_SYMBOL(self):
            return self.getToken(MRSParser.CLASS_SYMBOL, 0)

        def DEVELOPMENT_SYMBOL(self):
            return self.getToken(MRSParser.DEVELOPMENT_SYMBOL, 0)

        def SCRIPTS_SYMBOL(self):
            return self.getToken(MRSParser.SCRIPTS_SYMBOL, 0)

        def MAPPING_SYMBOL(self):
            return self.getToken(MRSParser.MAPPING_SYMBOL, 0)

        def TYPESCRIPT_SYMBOL(self):
            return self.getToken(MRSParser.TYPESCRIPT_SYMBOL, 0)

        def ROLES_SYMBOL(self):
            return self.getToken(MRSParser.ROLES_SYMBOL, 0)

        def EXTENDS_SYMBOL(self):
            return self.getToken(MRSParser.EXTENDS_SYMBOL, 0)

        def OBJECT_SYMBOL(self):
            return self.getToken(MRSParser.OBJECT_SYMBOL, 0)

        def HIERARCHY_SYMBOL(self):
            return self.getToken(MRSParser.HIERARCHY_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_graphQlAllowedKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlAllowedKeyword" ):
                listener.enterGraphQlAllowedKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlAllowedKeyword" ):
                listener.exitGraphQlAllowedKeyword(self)




    def graphQlAllowedKeyword(self):

        localctx = MRSParser.GraphQlAllowedKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_graphQlAllowedKeyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -2) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 144115188075855845) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairKey" ):
                listener.enterGraphQlPairKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairKey" ):
                listener.exitGraphQlPairKey(self)




    def graphQlPairKey(self):

        localctx = MRSParser.GraphQlPairKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_graphQlPairKey)
        try:
            self.state = 1648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1645
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [189, 191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1646
                self.identifier()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1647
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlPairValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlAllowedKeyword(self):
            return self.getTypedRuleContext(MRSParser.GraphQlAllowedKeywordContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlPairValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlPairValue" ):
                listener.enterGraphQlPairValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlPairValue" ):
                listener.exitGraphQlPairValue(self)




    def graphQlPairValue(self):

        localctx = MRSParser.GraphQlPairValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_graphQlPairValue)
        try:
            self.state = 1652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189, 191]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1650
                self.qualifiedIdentifier()
                pass
            elif token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1651
                self.graphQlAllowedKeyword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlReduceToValue" ):
                listener.enterGraphQlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlReduceToValue" ):
                listener.exitGraphQlReduceToValue(self)




    def graphQlReduceToValue(self):

        localctx = MRSParser.GraphQlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_graphQlReduceToValue)
        try:
            self.state = 1656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [189, 191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlDatatypeValue" ):
                listener.enterGraphQlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlDatatypeValue" ):
                listener.exitGraphQlDatatypeValue(self)




    def graphQlDatatypeValue(self):

        localctx = MRSParser.GraphQlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_graphQlDatatypeValue)
        try:
            self.state = 1660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [189, 191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1659
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphQlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphQlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphQlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphQlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphQlValue" ):
                listener.enterGraphQlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphQlValue" ):
                listener.exitGraphQlValue(self)




    def graphQlValue(self):

        localctx = MRSParser.GraphQlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_graphQlValue)
        try:
            self.state = 1664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [189, 191]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1662
                self.qualifiedIdentifier()
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1663
                self.graphQlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1670
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            _la = self._input.LA(1)
            if not(_la==189 or _la==191):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1676
            self.identifier()
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==165:
                self.state = 1677
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 1678
                self.identifier()
                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 1685
            self.identifierList()
            self.state = 1686
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            self.identifier()
            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 1689
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.identifier()
            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 1693
                self.dotIdentifier()
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==164:
                    self.state = 1694
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1699
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 1700
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





