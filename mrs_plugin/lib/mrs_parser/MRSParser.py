# Copyright (c) 2023, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,144,962,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,1,0,1,0,4,0,187,8,0,11,0,12,0,188,1,0,5,0,192,8,0,10,0,12,0,195,
        9,0,3,0,197,8,0,1,0,3,0,200,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,3,1,230,8,1,1,2,1,2,1,3,1,3,3,3,236,8,3,1,4,1,4,
        1,4,1,5,1,5,1,5,1,6,1,6,3,6,246,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,9,1,9,3,9,259,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,
        268,8,10,1,11,1,11,1,11,4,11,273,8,11,11,11,12,11,274,1,12,1,12,
        1,12,3,12,280,8,12,1,13,1,13,1,13,3,13,285,8,13,1,13,1,13,1,13,1,
        13,3,13,291,8,13,1,14,1,14,1,14,1,14,4,14,297,8,14,11,14,12,14,298,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,310,8,15,1,16,
        1,16,1,16,1,16,1,16,5,16,317,8,16,10,16,12,16,320,9,16,1,17,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,21,3,21,340,8,21,1,22,1,22,1,22,3,22,345,8,22,1,22,1,
        22,1,22,3,22,350,8,22,1,22,1,22,3,22,354,8,22,1,22,3,22,357,8,22,
        1,22,1,22,1,22,3,22,362,8,22,1,23,1,23,1,23,1,23,1,23,4,23,369,8,
        23,11,23,12,23,370,1,24,1,24,1,24,3,24,376,8,24,1,24,1,24,3,24,380,
        8,24,1,24,3,24,383,8,24,1,24,3,24,386,8,24,1,24,1,24,1,24,1,24,3,
        24,392,8,24,1,24,1,24,1,24,3,24,397,8,24,1,24,1,24,1,24,3,24,402,
        8,24,1,24,3,24,405,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        4,25,415,8,25,11,25,12,25,416,1,26,1,26,1,26,1,26,3,26,423,8,26,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,435,8,29,
        1,29,1,29,1,29,1,29,1,29,3,29,442,8,29,1,29,1,29,1,29,3,29,447,8,
        29,1,29,1,29,1,29,1,29,1,29,5,29,454,8,29,10,29,12,29,457,9,29,1,
        30,1,30,1,30,1,30,4,30,463,8,30,11,30,12,30,464,1,31,1,31,1,31,1,
        31,1,32,1,32,1,32,3,32,474,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
        32,482,8,32,1,32,1,32,3,32,486,8,32,1,32,3,32,489,8,32,1,33,1,33,
        1,34,1,34,1,34,1,34,4,34,497,8,34,11,34,12,34,498,1,35,1,35,1,35,
        1,35,1,35,1,35,1,35,1,35,3,35,509,8,35,1,35,3,35,512,8,35,1,36,1,
        36,1,36,1,36,3,36,518,8,36,1,36,1,36,3,36,522,8,36,1,36,3,36,525,
        8,36,1,36,1,36,1,36,1,36,3,36,531,8,36,1,36,1,36,3,36,535,8,36,1,
        36,3,36,538,8,36,1,37,1,37,1,37,3,37,543,8,37,1,37,3,37,546,8,37,
        1,37,3,37,549,8,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,557,8,37,1,
        37,1,37,3,37,561,8,37,1,37,3,37,564,8,37,1,37,1,37,1,37,3,37,569,
        8,37,1,37,3,37,572,8,37,3,37,574,8,37,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,3,38,584,8,38,1,38,1,38,3,38,588,8,38,1,38,3,38,591,
        8,38,1,38,1,38,1,38,1,38,3,38,597,8,38,3,38,599,8,38,1,38,5,38,602,
        8,38,10,38,12,38,605,9,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
        1,40,1,40,1,40,3,40,618,8,40,1,40,3,40,621,8,40,1,41,1,41,1,41,3,
        41,626,8,41,1,41,3,41,629,8,41,1,41,3,41,632,8,41,1,41,1,41,1,41,
        1,41,3,41,638,8,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,646,8,42,1,
        43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,655,8,43,1,44,1,44,1,44,1,
        44,1,45,1,45,1,45,3,45,664,8,45,1,46,1,46,1,46,3,46,669,8,46,1,46,
        1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,682,8,48,
        1,48,3,48,685,8,48,1,49,1,49,1,49,3,49,690,8,49,1,49,3,49,693,8,
        49,1,49,3,49,696,8,49,1,49,1,49,1,49,3,49,701,8,49,1,50,1,50,1,50,
        1,50,1,50,3,50,708,8,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,716,8,
        51,1,52,1,52,1,52,1,52,1,52,3,52,723,8,52,1,53,1,53,1,53,1,53,1,
        53,3,53,730,8,53,1,53,1,53,3,53,734,8,53,1,53,3,53,737,8,53,1,54,
        1,54,1,54,1,54,3,54,743,8,54,1,54,3,54,746,8,54,1,54,3,54,749,8,
        54,1,54,1,54,1,54,1,54,3,54,755,8,54,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,3,55,764,8,55,1,56,3,56,767,8,56,1,56,1,56,1,57,3,57,772,
        8,57,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,
        1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,72,5,72,807,8,72,10,72,12,72,
        810,9,72,1,73,1,73,1,73,1,73,1,74,1,74,3,74,818,8,74,1,75,1,75,1,
        75,3,75,823,8,75,3,75,825,8,75,1,76,1,76,1,76,1,77,1,77,1,77,5,77,
        833,8,77,10,77,12,77,836,9,77,3,77,838,8,77,1,78,1,78,1,78,3,78,
        843,8,78,1,79,1,79,1,79,1,79,3,79,849,8,79,1,80,1,80,1,81,1,81,1,
        81,1,81,5,81,857,8,81,10,81,12,81,860,9,81,1,81,1,81,1,81,1,81,3,
        81,866,8,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,5,83,876,8,83,
        10,83,12,83,879,9,83,3,83,881,8,83,1,83,1,83,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,3,84,894,8,84,1,85,1,85,1,85,1,85,5,85,
        900,8,85,10,85,12,85,903,9,85,1,85,1,85,1,85,1,85,3,85,909,8,85,
        1,86,4,86,912,8,86,11,86,12,86,913,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,3,87,938,8,87,1,87,3,87,941,8,87,1,88,1,88,1,88,3,
        88,946,8,88,1,89,1,89,1,89,3,89,951,8,89,1,90,1,90,1,90,3,90,956,
        8,90,1,91,1,91,3,91,960,8,91,1,91,0,0,92,0,2,4,6,8,10,12,14,16,18,
        20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
        64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
        106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
        138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
        170,172,174,176,178,180,182,0,8,1,0,30,31,2,0,56,56,60,61,1,0,14,
        15,1,0,13,14,2,0,133,133,135,135,1,0,136,137,2,0,136,136,141,141,
        2,0,72,72,79,85,1057,0,196,1,0,0,0,2,229,1,0,0,0,4,231,1,0,0,0,6,
        235,1,0,0,0,8,237,1,0,0,0,10,240,1,0,0,0,12,243,1,0,0,0,14,249,1,
        0,0,0,16,254,1,0,0,0,18,258,1,0,0,0,20,263,1,0,0,0,22,272,1,0,0,
        0,24,276,1,0,0,0,26,281,1,0,0,0,28,296,1,0,0,0,30,300,1,0,0,0,32,
        311,1,0,0,0,34,321,1,0,0,0,36,324,1,0,0,0,38,327,1,0,0,0,40,330,
        1,0,0,0,42,334,1,0,0,0,44,341,1,0,0,0,46,368,1,0,0,0,48,372,1,0,
        0,0,50,414,1,0,0,0,52,418,1,0,0,0,54,424,1,0,0,0,56,427,1,0,0,0,
        58,431,1,0,0,0,60,462,1,0,0,0,62,466,1,0,0,0,64,470,1,0,0,0,66,490,
        1,0,0,0,68,496,1,0,0,0,70,500,1,0,0,0,72,513,1,0,0,0,74,539,1,0,
        0,0,76,575,1,0,0,0,78,606,1,0,0,0,80,611,1,0,0,0,82,622,1,0,0,0,
        84,639,1,0,0,0,86,647,1,0,0,0,88,656,1,0,0,0,90,663,1,0,0,0,92,665,
        1,0,0,0,94,672,1,0,0,0,96,676,1,0,0,0,98,686,1,0,0,0,100,702,1,0,
        0,0,102,709,1,0,0,0,104,717,1,0,0,0,106,724,1,0,0,0,108,738,1,0,
        0,0,110,756,1,0,0,0,112,766,1,0,0,0,114,771,1,0,0,0,116,775,1,0,
        0,0,118,777,1,0,0,0,120,779,1,0,0,0,122,781,1,0,0,0,124,783,1,0,
        0,0,126,785,1,0,0,0,128,787,1,0,0,0,130,789,1,0,0,0,132,791,1,0,
        0,0,134,793,1,0,0,0,136,795,1,0,0,0,138,797,1,0,0,0,140,799,1,0,
        0,0,142,801,1,0,0,0,144,803,1,0,0,0,146,811,1,0,0,0,148,815,1,0,
        0,0,150,819,1,0,0,0,152,826,1,0,0,0,154,837,1,0,0,0,156,839,1,0,
        0,0,158,844,1,0,0,0,160,850,1,0,0,0,162,865,1,0,0,0,164,867,1,0,
        0,0,166,871,1,0,0,0,168,893,1,0,0,0,170,908,1,0,0,0,172,911,1,0,
        0,0,174,915,1,0,0,0,176,945,1,0,0,0,178,950,1,0,0,0,180,955,1,0,
        0,0,182,959,1,0,0,0,184,193,3,2,1,0,185,187,5,110,0,0,186,185,1,
        0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,
        0,0,0,190,192,3,2,1,0,191,186,1,0,0,0,192,195,1,0,0,0,193,191,1,
        0,0,0,193,194,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,196,184,1,
        0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,5,110,0,0,199,198,
        1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,5,0,0,1,202,1,1,
        0,0,0,203,230,3,20,10,0,204,230,3,26,13,0,205,230,3,44,22,0,206,
        230,3,48,24,0,207,230,3,58,29,0,208,230,3,64,32,0,209,230,3,70,35,
        0,210,230,3,72,36,0,211,230,3,74,37,0,212,230,3,76,38,0,213,230,
        3,78,39,0,214,230,3,80,40,0,215,230,3,82,41,0,216,230,3,84,42,0,
        217,230,3,86,43,0,218,230,3,88,44,0,219,230,3,92,46,0,220,230,3,
        94,47,0,221,230,3,96,48,0,222,230,3,98,49,0,223,230,3,100,50,0,224,
        230,3,102,51,0,225,230,3,104,52,0,226,230,3,106,53,0,227,230,3,108,
        54,0,228,230,3,110,55,0,229,203,1,0,0,0,229,204,1,0,0,0,229,205,
        1,0,0,0,229,206,1,0,0,0,229,207,1,0,0,0,229,208,1,0,0,0,229,209,
        1,0,0,0,229,210,1,0,0,0,229,211,1,0,0,0,229,212,1,0,0,0,229,213,
        1,0,0,0,229,214,1,0,0,0,229,215,1,0,0,0,229,216,1,0,0,0,229,217,
        1,0,0,0,229,218,1,0,0,0,229,219,1,0,0,0,229,220,1,0,0,0,229,221,
        1,0,0,0,229,222,1,0,0,0,229,223,1,0,0,0,229,224,1,0,0,0,229,225,
        1,0,0,0,229,226,1,0,0,0,229,227,1,0,0,0,229,228,1,0,0,0,230,3,1,
        0,0,0,231,232,7,0,0,0,232,5,1,0,0,0,233,236,3,160,80,0,234,236,5,
        42,0,0,235,233,1,0,0,0,235,234,1,0,0,0,236,7,1,0,0,0,237,238,5,45,
        0,0,238,239,3,168,84,0,239,9,1,0,0,0,240,241,5,36,0,0,241,242,3,
        160,80,0,242,11,1,0,0,0,243,245,5,37,0,0,244,246,5,48,0,0,245,244,
        1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,50,0,0,248,13,
        1,0,0,0,249,250,5,51,0,0,250,251,5,52,0,0,251,252,5,53,0,0,252,253,
        3,16,8,0,253,15,1,0,0,0,254,255,5,128,0,0,255,17,1,0,0,0,256,257,
        5,11,0,0,257,259,3,112,56,0,258,256,1,0,0,0,258,259,1,0,0,0,259,
        260,1,0,0,0,260,261,5,17,0,0,261,262,3,118,59,0,262,19,1,0,0,0,263,
        264,5,1,0,0,264,265,5,7,0,0,265,267,5,8,0,0,266,268,3,22,11,0,267,
        266,1,0,0,0,267,268,1,0,0,0,268,21,1,0,0,0,269,273,3,4,2,0,270,273,
        3,8,4,0,271,273,3,24,12,0,272,269,1,0,0,0,272,270,1,0,0,0,272,271,
        1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,23,1,
        0,0,0,276,279,5,62,0,0,277,278,5,46,0,0,278,280,5,47,0,0,279,277,
        1,0,0,0,279,280,1,0,0,0,280,25,1,0,0,0,281,284,5,2,0,0,282,283,5,
        3,0,0,283,285,5,4,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,286,1,
        0,0,0,286,287,5,7,0,0,287,288,5,11,0,0,288,290,3,112,56,0,289,291,
        3,28,14,0,290,289,1,0,0,0,290,291,1,0,0,0,291,27,1,0,0,0,292,297,
        3,4,2,0,293,297,3,32,16,0,294,297,3,8,4,0,295,297,3,10,5,0,296,292,
        1,0,0,0,296,293,1,0,0,0,296,294,1,0,0,0,296,295,1,0,0,0,297,298,
        1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,29,1,0,0,0,300,309,5,
        32,0,0,301,310,5,33,0,0,302,310,5,34,0,0,303,304,5,33,0,0,304,305,
        5,109,0,0,305,310,5,34,0,0,306,307,5,34,0,0,307,308,5,109,0,0,308,
        310,5,33,0,0,309,301,1,0,0,0,309,302,1,0,0,0,309,303,1,0,0,0,309,
        306,1,0,0,0,310,31,1,0,0,0,311,318,5,37,0,0,312,317,3,34,17,0,313,
        317,3,36,18,0,314,317,3,38,19,0,315,317,3,40,20,0,316,312,1,0,0,
        0,316,313,1,0,0,0,316,314,1,0,0,0,316,315,1,0,0,0,317,320,1,0,0,
        0,318,316,1,0,0,0,318,319,1,0,0,0,319,33,1,0,0,0,320,318,1,0,0,0,
        321,322,5,39,0,0,322,323,3,6,3,0,323,35,1,0,0,0,324,325,5,40,0,0,
        325,326,3,6,3,0,326,37,1,0,0,0,327,328,5,41,0,0,328,329,3,6,3,0,
        329,39,1,0,0,0,330,331,5,53,0,0,331,332,5,54,0,0,332,333,3,6,3,0,
        333,41,1,0,0,0,334,335,5,43,0,0,335,336,5,44,0,0,336,339,5,17,0,
        0,337,340,3,116,58,0,338,340,5,42,0,0,339,337,1,0,0,0,339,338,1,
        0,0,0,340,43,1,0,0,0,341,344,5,2,0,0,342,343,5,3,0,0,343,345,5,4,
        0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,347,5,7,
        0,0,347,349,5,17,0,0,348,350,3,118,59,0,349,348,1,0,0,0,349,350,
        1,0,0,0,350,356,1,0,0,0,351,353,5,13,0,0,352,354,5,11,0,0,353,352,
        1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,357,3,112,56,0,356,351,
        1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,359,5,14,0,0,359,361,
        3,116,58,0,360,362,3,46,23,0,361,360,1,0,0,0,361,362,1,0,0,0,362,
        45,1,0,0,0,363,369,3,4,2,0,364,369,3,12,6,0,365,369,3,14,7,0,366,
        369,3,8,4,0,367,369,3,10,5,0,368,363,1,0,0,0,368,364,1,0,0,0,368,
        365,1,0,0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,
        368,1,0,0,0,370,371,1,0,0,0,371,47,1,0,0,0,372,375,5,2,0,0,373,374,
        5,3,0,0,374,376,5,4,0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,377,
        1,0,0,0,377,379,5,7,0,0,378,380,5,19,0,0,379,378,1,0,0,0,379,380,
        1,0,0,0,380,382,1,0,0,0,381,383,5,18,0,0,382,381,1,0,0,0,382,383,
        1,0,0,0,383,385,1,0,0,0,384,386,5,20,0,0,385,384,1,0,0,0,385,386,
        1,0,0,0,386,387,1,0,0,0,387,388,5,22,0,0,388,391,3,124,62,0,389,
        390,5,13,0,0,390,392,3,18,9,0,391,389,1,0,0,0,391,392,1,0,0,0,392,
        393,1,0,0,0,393,394,5,14,0,0,394,396,3,148,74,0,395,397,3,50,25,
        0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,399,5,29,0,
        0,399,401,3,128,64,0,400,402,3,172,86,0,401,400,1,0,0,0,401,402,
        1,0,0,0,402,404,1,0,0,0,403,405,3,170,85,0,404,403,1,0,0,0,404,405,
        1,0,0,0,405,49,1,0,0,0,406,415,3,4,2,0,407,415,3,12,6,0,408,415,
        3,14,7,0,409,415,3,8,4,0,410,415,3,10,5,0,411,415,3,52,26,0,412,
        415,3,54,27,0,413,415,3,56,28,0,414,406,1,0,0,0,414,407,1,0,0,0,
        414,408,1,0,0,0,414,409,1,0,0,0,414,410,1,0,0,0,414,411,1,0,0,0,
        414,412,1,0,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,
        416,417,1,0,0,0,417,51,1,0,0,0,418,419,5,56,0,0,419,422,5,57,0,0,
        420,423,3,160,80,0,421,423,5,58,0,0,422,420,1,0,0,0,422,421,1,0,
        0,0,423,53,1,0,0,0,424,425,5,59,0,0,425,426,7,1,0,0,426,55,1,0,0,
        0,427,428,5,37,0,0,428,429,5,24,0,0,429,430,3,148,74,0,430,57,1,
        0,0,0,431,434,5,2,0,0,432,433,5,3,0,0,433,435,5,4,0,0,434,432,1,
        0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,5,7,0,0,437,438,5,
        24,0,0,438,441,3,134,67,0,439,440,5,13,0,0,440,442,3,18,9,0,441,
        439,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,444,5,14,0,0,444,
        446,3,148,74,0,445,447,3,60,30,0,446,445,1,0,0,0,446,447,1,0,0,0,
        447,448,1,0,0,0,448,449,5,29,0,0,449,450,3,128,64,0,450,451,5,25,
        0,0,451,455,3,170,85,0,452,454,3,62,31,0,453,452,1,0,0,0,454,457,
        1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,59,1,0,0,0,457,455,1,
        0,0,0,458,463,3,4,2,0,459,463,3,12,6,0,460,463,3,8,4,0,461,463,3,
        10,5,0,462,458,1,0,0,0,462,459,1,0,0,0,462,460,1,0,0,0,462,461,1,
        0,0,0,463,464,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,61,1,0,
        0,0,466,467,5,26,0,0,467,468,3,130,65,0,468,469,3,170,85,0,469,63,
        1,0,0,0,470,473,5,2,0,0,471,472,5,3,0,0,472,474,5,4,0,0,473,471,
        1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,476,5,7,0,0,476,477,
        5,54,0,0,477,478,5,66,0,0,478,481,3,138,69,0,479,480,5,13,0,0,480,
        482,3,18,9,0,481,479,1,0,0,0,481,482,1,0,0,0,482,485,1,0,0,0,483,
        484,5,14,0,0,484,486,3,66,33,0,485,483,1,0,0,0,485,486,1,0,0,0,486,
        488,1,0,0,0,487,489,3,68,34,0,488,487,1,0,0,0,488,489,1,0,0,0,489,
        65,1,0,0,0,490,491,3,160,80,0,491,67,1,0,0,0,492,497,3,4,2,0,493,
        497,3,12,6,0,494,497,3,8,4,0,495,497,3,10,5,0,496,492,1,0,0,0,496,
        493,1,0,0,0,496,494,1,0,0,0,496,495,1,0,0,0,497,498,1,0,0,0,498,
        496,1,0,0,0,498,499,1,0,0,0,499,69,1,0,0,0,500,501,5,5,0,0,501,502,
        5,7,0,0,502,503,5,11,0,0,503,508,3,112,56,0,504,505,5,12,0,0,505,
        506,5,38,0,0,506,507,5,39,0,0,507,509,3,114,57,0,508,504,1,0,0,0,
        508,509,1,0,0,0,509,511,1,0,0,0,510,512,3,28,14,0,511,510,1,0,0,
        0,511,512,1,0,0,0,512,71,1,0,0,0,513,514,5,5,0,0,514,515,5,7,0,0,
        515,517,5,17,0,0,516,518,3,118,59,0,517,516,1,0,0,0,517,518,1,0,
        0,0,518,524,1,0,0,0,519,521,5,13,0,0,520,522,5,11,0,0,521,520,1,
        0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,525,3,112,56,0,524,519,
        1,0,0,0,524,525,1,0,0,0,525,530,1,0,0,0,526,527,5,12,0,0,527,528,
        5,38,0,0,528,529,5,39,0,0,529,531,3,120,60,0,530,526,1,0,0,0,530,
        531,1,0,0,0,531,534,1,0,0,0,532,533,5,14,0,0,533,535,3,116,58,0,
        534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,538,3,46,23,
        0,537,536,1,0,0,0,537,538,1,0,0,0,538,73,1,0,0,0,539,540,5,5,0,0,
        540,542,5,7,0,0,541,543,5,19,0,0,542,541,1,0,0,0,542,543,1,0,0,0,
        543,545,1,0,0,0,544,546,5,18,0,0,545,544,1,0,0,0,545,546,1,0,0,0,
        546,548,1,0,0,0,547,549,5,20,0,0,548,547,1,0,0,0,548,549,1,0,0,0,
        549,550,1,0,0,0,550,551,5,22,0,0,551,556,3,124,62,0,552,553,5,12,
        0,0,553,554,5,38,0,0,554,555,5,39,0,0,555,557,3,126,63,0,556,552,
        1,0,0,0,556,557,1,0,0,0,557,560,1,0,0,0,558,559,5,13,0,0,559,561,
        3,18,9,0,560,558,1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,564,
        3,50,25,0,563,562,1,0,0,0,563,564,1,0,0,0,564,573,1,0,0,0,565,566,
        5,29,0,0,566,568,3,128,64,0,567,569,3,172,86,0,568,567,1,0,0,0,568,
        569,1,0,0,0,569,571,1,0,0,0,570,572,3,170,85,0,571,570,1,0,0,0,571,
        572,1,0,0,0,572,574,1,0,0,0,573,565,1,0,0,0,573,574,1,0,0,0,574,
        75,1,0,0,0,575,576,5,5,0,0,576,577,5,7,0,0,577,578,5,24,0,0,578,
        583,3,134,67,0,579,580,5,12,0,0,580,581,5,38,0,0,581,582,5,39,0,
        0,582,584,3,136,68,0,583,579,1,0,0,0,583,584,1,0,0,0,584,587,1,0,
        0,0,585,586,5,13,0,0,586,588,3,18,9,0,587,585,1,0,0,0,587,588,1,
        0,0,0,588,590,1,0,0,0,589,591,3,60,30,0,590,589,1,0,0,0,590,591,
        1,0,0,0,591,598,1,0,0,0,592,593,5,29,0,0,593,596,3,128,64,0,594,
        595,5,25,0,0,595,597,3,170,85,0,596,594,1,0,0,0,596,597,1,0,0,0,
        597,599,1,0,0,0,598,592,1,0,0,0,598,599,1,0,0,0,599,603,1,0,0,0,
        600,602,3,62,31,0,601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,
        0,603,604,1,0,0,0,604,77,1,0,0,0,605,603,1,0,0,0,606,607,5,27,0,
        0,607,608,5,7,0,0,608,609,5,11,0,0,609,610,3,112,56,0,610,79,1,0,
        0,0,611,612,5,27,0,0,612,613,5,7,0,0,613,614,5,17,0,0,614,620,3,
        118,59,0,615,617,5,14,0,0,616,618,5,11,0,0,617,616,1,0,0,0,617,618,
        1,0,0,0,618,619,1,0,0,0,619,621,3,112,56,0,620,615,1,0,0,0,620,621,
        1,0,0,0,621,81,1,0,0,0,622,623,5,27,0,0,623,625,5,7,0,0,624,626,
        5,19,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,628,1,0,0,0,627,629,
        5,18,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,632,
        5,20,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,634,
        5,22,0,0,634,637,3,124,62,0,635,636,5,14,0,0,636,638,3,18,9,0,637,
        635,1,0,0,0,637,638,1,0,0,0,638,83,1,0,0,0,639,640,5,27,0,0,640,
        641,5,7,0,0,641,642,5,24,0,0,642,645,3,134,67,0,643,644,5,14,0,0,
        644,646,3,18,9,0,645,643,1,0,0,0,645,646,1,0,0,0,646,85,1,0,0,0,
        647,648,5,27,0,0,648,649,5,7,0,0,649,650,5,54,0,0,650,651,5,66,0,
        0,651,654,3,138,69,0,652,653,5,14,0,0,653,655,3,18,9,0,654,652,1,
        0,0,0,654,655,1,0,0,0,655,87,1,0,0,0,656,657,5,28,0,0,657,658,5,
        7,0,0,658,659,3,90,45,0,659,89,1,0,0,0,660,661,5,11,0,0,661,664,
        3,112,56,0,662,664,3,18,9,0,663,660,1,0,0,0,663,662,1,0,0,0,664,
        91,1,0,0,0,665,666,5,6,0,0,666,668,5,7,0,0,667,669,5,8,0,0,668,667,
        1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,0,670,671,5,9,0,0,671,93,1,
        0,0,0,672,673,5,6,0,0,673,674,5,7,0,0,674,675,5,10,0,0,675,95,1,
        0,0,0,676,677,5,6,0,0,677,678,5,7,0,0,678,684,5,16,0,0,679,681,7,
        2,0,0,680,682,5,11,0,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,1,
        0,0,0,683,685,3,112,56,0,684,679,1,0,0,0,684,685,1,0,0,0,685,97,
        1,0,0,0,686,687,5,6,0,0,687,689,5,7,0,0,688,690,5,19,0,0,689,688,
        1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,693,5,18,0,0,692,691,
        1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,696,5,20,0,0,695,694,
        1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,697,700,5,21,0,0,698,699,
        7,2,0,0,699,701,3,18,9,0,700,698,1,0,0,0,700,701,1,0,0,0,701,99,
        1,0,0,0,702,703,5,6,0,0,703,704,5,7,0,0,704,707,5,23,0,0,705,706,
        7,2,0,0,706,708,3,18,9,0,707,705,1,0,0,0,707,708,1,0,0,0,708,101,
        1,0,0,0,709,710,5,6,0,0,710,711,5,7,0,0,711,712,5,54,0,0,712,715,
        5,67,0,0,713,714,7,2,0,0,714,716,3,18,9,0,715,713,1,0,0,0,715,716,
        1,0,0,0,716,103,1,0,0,0,717,718,5,6,0,0,718,719,5,2,0,0,719,720,
        5,7,0,0,720,722,5,11,0,0,721,723,3,112,56,0,722,721,1,0,0,0,722,
        723,1,0,0,0,723,105,1,0,0,0,724,725,5,6,0,0,725,726,5,2,0,0,726,
        727,5,7,0,0,727,729,5,17,0,0,728,730,3,118,59,0,729,728,1,0,0,0,
        729,730,1,0,0,0,730,736,1,0,0,0,731,733,7,2,0,0,732,734,5,11,0,0,
        733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,737,3,112,56,
        0,736,731,1,0,0,0,736,737,1,0,0,0,737,107,1,0,0,0,738,739,5,6,0,
        0,739,740,5,2,0,0,740,742,5,7,0,0,741,743,5,19,0,0,742,741,1,0,0,
        0,742,743,1,0,0,0,743,745,1,0,0,0,744,746,5,18,0,0,745,744,1,0,0,
        0,745,746,1,0,0,0,746,748,1,0,0,0,747,749,5,20,0,0,748,747,1,0,0,
        0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,5,22,0,0,751,754,3,124,
        62,0,752,753,7,3,0,0,753,755,3,18,9,0,754,752,1,0,0,0,754,755,1,
        0,0,0,755,109,1,0,0,0,756,757,5,6,0,0,757,758,5,2,0,0,758,759,5,
        7,0,0,759,760,5,24,0,0,760,763,3,134,67,0,761,762,7,3,0,0,762,764,
        3,18,9,0,763,761,1,0,0,0,763,764,1,0,0,0,764,111,1,0,0,0,765,767,
        3,156,78,0,766,765,1,0,0,0,766,767,1,0,0,0,767,768,1,0,0,0,768,769,
        3,158,79,0,769,113,1,0,0,0,770,772,3,156,78,0,771,770,1,0,0,0,771,
        772,1,0,0,0,772,773,1,0,0,0,773,774,3,158,79,0,774,115,1,0,0,0,775,
        776,3,142,71,0,776,117,1,0,0,0,777,778,3,158,79,0,778,119,1,0,0,
        0,779,780,3,158,79,0,780,121,1,0,0,0,781,782,3,142,71,0,782,123,
        1,0,0,0,783,784,3,158,79,0,784,125,1,0,0,0,785,786,3,158,79,0,786,
        127,1,0,0,0,787,788,3,142,71,0,788,129,1,0,0,0,789,790,3,142,71,
        0,790,131,1,0,0,0,791,792,3,142,71,0,792,133,1,0,0,0,793,794,3,158,
        79,0,794,135,1,0,0,0,795,796,3,158,79,0,796,137,1,0,0,0,797,798,
        3,158,79,0,798,139,1,0,0,0,799,800,7,4,0,0,800,141,1,0,0,0,801,802,
        3,140,70,0,802,143,1,0,0,0,803,808,3,142,71,0,804,805,5,109,0,0,
        805,807,3,142,71,0,806,804,1,0,0,0,807,810,1,0,0,0,808,806,1,0,0,
        0,808,809,1,0,0,0,809,145,1,0,0,0,810,808,1,0,0,0,811,812,5,112,
        0,0,812,813,3,144,72,0,813,814,5,113,0,0,814,147,1,0,0,0,815,817,
        3,142,71,0,816,818,3,152,76,0,817,816,1,0,0,0,817,818,1,0,0,0,818,
        149,1,0,0,0,819,824,3,142,71,0,820,822,3,152,76,0,821,823,3,152,
        76,0,822,821,1,0,0,0,822,823,1,0,0,0,823,825,1,0,0,0,824,820,1,0,
        0,0,824,825,1,0,0,0,825,151,1,0,0,0,826,827,5,108,0,0,827,828,3,
        142,71,0,828,153,1,0,0,0,829,838,3,150,75,0,830,834,3,142,71,0,831,
        833,3,152,76,0,832,831,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,
        835,1,0,0,0,835,838,1,0,0,0,836,834,1,0,0,0,837,829,1,0,0,0,837,
        830,1,0,0,0,838,155,1,0,0,0,839,842,3,154,77,0,840,841,5,111,0,0,
        841,843,5,128,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,157,1,0,0,
        0,844,845,5,97,0,0,845,848,3,154,77,0,846,847,5,97,0,0,847,849,3,
        154,77,0,848,846,1,0,0,0,848,849,1,0,0,0,849,159,1,0,0,0,850,851,
        7,5,0,0,851,161,1,0,0,0,852,853,5,114,0,0,853,858,3,164,82,0,854,
        855,5,109,0,0,855,857,3,164,82,0,856,854,1,0,0,0,857,860,1,0,0,0,
        858,856,1,0,0,0,858,859,1,0,0,0,859,861,1,0,0,0,860,858,1,0,0,0,
        861,862,5,115,0,0,862,866,1,0,0,0,863,864,5,114,0,0,864,866,5,115,
        0,0,865,852,1,0,0,0,865,863,1,0,0,0,866,163,1,0,0,0,867,868,7,6,
        0,0,868,869,5,111,0,0,869,870,3,168,84,0,870,165,1,0,0,0,871,880,
        5,117,0,0,872,877,3,168,84,0,873,874,5,109,0,0,874,876,3,168,84,
        0,875,873,1,0,0,0,876,879,1,0,0,0,877,875,1,0,0,0,877,878,1,0,0,
        0,878,881,1,0,0,0,879,877,1,0,0,0,880,872,1,0,0,0,880,881,1,0,0,
        0,881,882,1,0,0,0,882,883,5,118,0,0,883,167,1,0,0,0,884,894,5,141,
        0,0,885,894,5,136,0,0,886,894,5,142,0,0,887,894,5,128,0,0,888,894,
        3,162,81,0,889,894,3,166,83,0,890,894,5,64,0,0,891,894,5,65,0,0,
        892,894,5,63,0,0,893,884,1,0,0,0,893,885,1,0,0,0,893,886,1,0,0,0,
        893,887,1,0,0,0,893,888,1,0,0,0,893,889,1,0,0,0,893,890,1,0,0,0,
        893,891,1,0,0,0,893,892,1,0,0,0,894,169,1,0,0,0,895,896,5,114,0,
        0,896,901,3,174,87,0,897,898,5,109,0,0,898,900,3,174,87,0,899,897,
        1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,0,901,902,1,0,0,0,902,904,
        1,0,0,0,903,901,1,0,0,0,904,905,5,115,0,0,905,909,1,0,0,0,906,907,
        5,114,0,0,907,909,5,115,0,0,908,895,1,0,0,0,908,906,1,0,0,0,909,
        171,1,0,0,0,910,912,7,7,0,0,911,910,1,0,0,0,912,913,1,0,0,0,913,
        911,1,0,0,0,913,914,1,0,0,0,914,173,1,0,0,0,915,916,3,176,88,0,916,
        917,5,111,0,0,917,937,3,148,74,0,918,938,5,69,0,0,919,938,5,70,0,
        0,920,938,5,68,0,0,921,938,5,71,0,0,922,938,5,73,0,0,923,938,5,74,
        0,0,924,938,5,75,0,0,925,938,5,76,0,0,926,927,5,77,0,0,927,928,5,
        112,0,0,928,929,3,178,89,0,929,930,5,113,0,0,930,938,1,0,0,0,931,
        932,5,78,0,0,932,933,5,112,0,0,933,934,3,180,90,0,934,935,5,113,
        0,0,935,938,1,0,0,0,936,938,3,172,86,0,937,918,1,0,0,0,937,919,1,
        0,0,0,937,920,1,0,0,0,937,921,1,0,0,0,937,922,1,0,0,0,937,923,1,
        0,0,0,937,924,1,0,0,0,937,925,1,0,0,0,937,926,1,0,0,0,937,931,1,
        0,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,1,0,0,0,939,941,3,
        170,85,0,940,939,1,0,0,0,940,941,1,0,0,0,941,175,1,0,0,0,942,946,
        5,141,0,0,943,946,5,136,0,0,944,946,3,142,71,0,945,942,1,0,0,0,945,
        943,1,0,0,0,945,944,1,0,0,0,946,177,1,0,0,0,947,951,5,141,0,0,948,
        951,5,136,0,0,949,951,3,142,71,0,950,947,1,0,0,0,950,948,1,0,0,0,
        950,949,1,0,0,0,951,179,1,0,0,0,952,956,5,141,0,0,953,956,5,136,
        0,0,954,956,3,142,71,0,955,952,1,0,0,0,955,953,1,0,0,0,955,954,1,
        0,0,0,956,181,1,0,0,0,957,960,3,148,74,0,958,960,3,170,85,0,959,
        957,1,0,0,0,959,958,1,0,0,0,960,183,1,0,0,0,124,188,193,196,199,
        229,235,245,258,267,272,274,279,284,290,296,298,309,316,318,339,
        344,349,353,356,361,368,370,375,379,382,385,391,396,401,404,414,
        416,422,434,441,446,455,462,464,473,481,485,488,496,498,508,511,
        517,521,524,530,534,537,542,545,548,556,560,563,568,571,573,583,
        587,590,596,598,603,617,620,625,628,631,637,645,654,663,668,681,
        684,689,692,695,700,707,715,722,729,733,736,742,745,748,754,763,
        766,771,808,817,822,824,834,837,842,848,858,865,877,880,893,901,
        908,913,937,940,945,950,955,959
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRSParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'='", "':='", "'<=>'", "'>='", 
                     "'>'", "'<='", "'<'", "'!='", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'!'", "'~'", "'<<'", "'>>'", "'&&'", 
                     "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", "':'", 
                     "'('", "')'", "'{'", "'}'", "'_'", "'['", "']'", "'->'", 
                     "'->>'", "'@'", "<INVALID>", "'@@'", "'\\N'", "'?'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "CONFIGURE_SYMBOL", "CREATE_SYMBOL", 
                      "OR_SYMBOL", "REPLACE_SYMBOL", "ALTER_SYMBOL", "SHOW_SYMBOL", 
                      "REST_SYMBOL", "METADATA_SYMBOL", "STATUS_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "SCHEMAS_SYMBOL", 
                      "SCHEMA_SYMBOL", "JSON_SYMBOL", "RELATIONAL_SYMBOL", 
                      "DUALITY_SYMBOL", "VIEWS_SYMBOL", "VIEW_SYMBOL", "PROCEDURES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PARAMETERS_SYMBOL", "RESULT_SYMBOL", 
                      "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", "ENABLED_SYMBOL", 
                      "DISABLED_SYMBOL", "PROTOCOL_SYMBOL", "HTTP_SYMBOL", 
                      "HTTPS_SYMBOL", "FILTER_SYMBOL", "COMMENTS_SYMBOL", 
                      "AUTHENTICATION_SYMBOL", "REQUEST_SYMBOL", "PATH_SYMBOL", 
                      "REDIRECTION_SYMBOL", "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", 
                      "USER_SYMBOL", "MANAGEMENT_SYMBOL", "OPTIONS_SYMBOL", 
                      "IF_SYMBOL", "AVAILABLE_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "REQUIRED_SYMBOL", "ITEMS_SYMBOL", "PER_SYMBOL", "PAGE_SYMBOL", 
                      "CONTENT_SYMBOL", "HOST_SYMBOL", "MEDIA_SYMBOL", "TYPE_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FORMAT_SYMBOL", "FEED_SYMBOL", 
                      "ITEM_SYMBOL", "UPDATE_SYMBOL", "NULL_SYMBOL", "TRUE_SYMBOL", 
                      "FALSE_SYMBOL", "SET_SYMBOL", "SETS_SYMBOL", "AT_INOUT_SYMBOL", 
                      "AT_IN_SYMBOL", "AT_OUT_SYMBOL", "AT_NOCHECK_SYMBOL", 
                      "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", 
                      "AT_ROWOWNERSHIP_SYMBOL", "AT_UNNEST_SYMBOL", "AT_REDUCETO_SYMBOL", 
                      "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", "AT_NOSELECT_SYMBOL", 
                      "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", "AT_UPDATE_SYMBOL", 
                      "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "OPEN_SQUARE_SYMBOL", "CLOSE_SQUARE_SYMBOL", 
                      "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "JSON_STRING", 
                      "JSON_NUMBER", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_comments = 5
    RULE_authenticationRequired = 6
    RULE_itemsPerPage = 7
    RULE_itemsPerPageNumber = 8
    RULE_serviceSchemaSelector = 9
    RULE_configureRestMetadataStatement = 10
    RULE_restMetadataOptions = 11
    RULE_updateIfAvailable = 12
    RULE_createRestServiceStatement = 13
    RULE_restServiceOptions = 14
    RULE_restProtocol = 15
    RULE_restAuthentication = 16
    RULE_authPath = 17
    RULE_authRedirection = 18
    RULE_authValidation = 19
    RULE_authPageContent = 20
    RULE_userManagementSchema = 21
    RULE_createRestSchemaStatement = 22
    RULE_restSchemaOptions = 23
    RULE_createRestViewStatement = 24
    RULE_restDualityViewOptions = 25
    RULE_restViewMediaType = 26
    RULE_restViewFormat = 27
    RULE_restViewAuthenticationProcedure = 28
    RULE_createRestProcedureStatement = 29
    RULE_restProcedureOptions = 30
    RULE_restProcedureResult = 31
    RULE_createRestContentSetStatement = 32
    RULE_directoryFilePath = 33
    RULE_restContentSetOptions = 34
    RULE_alterRestServiceStatement = 35
    RULE_alterRestSchemaStatement = 36
    RULE_alterRestViewStatement = 37
    RULE_alterRestProcedureStatement = 38
    RULE_dropRestServiceStatement = 39
    RULE_dropRestSchemaStatement = 40
    RULE_dropRestDualityViewStatement = 41
    RULE_dropRestProcedureStatement = 42
    RULE_dropRestContentSetStatement = 43
    RULE_useStatement = 44
    RULE_serviceAndSchemaRequestPaths = 45
    RULE_showRestMetadataStatusStatement = 46
    RULE_showRestServicesStatement = 47
    RULE_showRestSchemasStatement = 48
    RULE_showRestViewsStatement = 49
    RULE_showRestProceduresStatement = 50
    RULE_showRestContentSetsStatement = 51
    RULE_showCreateRestServiceStatement = 52
    RULE_showCreateRestSchemaStatement = 53
    RULE_showCreateRestViewStatement = 54
    RULE_showCreateRestProcedureStatement = 55
    RULE_serviceRequestPath = 56
    RULE_newServiceRequestPath = 57
    RULE_schemaName = 58
    RULE_schemaRequestPath = 59
    RULE_newSchemaRequestPath = 60
    RULE_viewName = 61
    RULE_viewRequestPath = 62
    RULE_newViewRequestPath = 63
    RULE_restObjectName = 64
    RULE_restResultName = 65
    RULE_procedureName = 66
    RULE_procedureRequestPath = 67
    RULE_newProcedureRequestPath = 68
    RULE_contentSetRequestPath = 69
    RULE_pureIdentifier = 70
    RULE_identifier = 71
    RULE_identifierList = 72
    RULE_identifierListWithParentheses = 73
    RULE_qualifiedIdentifier = 74
    RULE_simpleIdentifier = 75
    RULE_dotIdentifier = 76
    RULE_dottedIdentifier = 77
    RULE_hostAndPortIdentifier = 78
    RULE_requestPathIdentifier = 79
    RULE_quotedText = 80
    RULE_jsonObj = 81
    RULE_jsonPair = 82
    RULE_jsonArr = 83
    RULE_jsonValue = 84
    RULE_graphGlObj = 85
    RULE_graphGlCrudOptions = 86
    RULE_graphGlPair = 87
    RULE_graphKeyValue = 88
    RULE_graphGlReduceToValue = 89
    RULE_graphGlDatatypeValue = 90
    RULE_graphGlValue = 91

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "restProtocol", "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restDualityViewOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureOptions", "restProcedureResult", "createRestContentSetStatement", 
                   "directoryFilePath", "restContentSetOptions", "alterRestServiceStatement", 
                   "alterRestSchemaStatement", "alterRestViewStatement", 
                   "alterRestProcedureStatement", "dropRestServiceStatement", 
                   "dropRestSchemaStatement", "dropRestDualityViewStatement", 
                   "dropRestProcedureStatement", "dropRestContentSetStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showRestContentSetsStatement", "showCreateRestServiceStatement", 
                   "showCreateRestSchemaStatement", "showCreateRestViewStatement", 
                   "showCreateRestProcedureStatement", "serviceRequestPath", 
                   "newServiceRequestPath", "schemaName", "schemaRequestPath", 
                   "newSchemaRequestPath", "viewName", "viewRequestPath", 
                   "newViewRequestPath", "restObjectName", "restResultName", 
                   "procedureName", "procedureRequestPath", "newProcedureRequestPath", 
                   "contentSetRequestPath", "pureIdentifier", "identifier", 
                   "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
                   "simpleIdentifier", "dotIdentifier", "dottedIdentifier", 
                   "hostAndPortIdentifier", "requestPathIdentifier", "quotedText", 
                   "jsonObj", "jsonPair", "jsonArr", "jsonValue", "graphGlObj", 
                   "graphGlCrudOptions", "graphGlPair", "graphKeyValue", 
                   "graphGlReduceToValue", "graphGlDatatypeValue", "graphGlValue" ]

    EOF = Token.EOF
    CONFIGURE_SYMBOL=1
    CREATE_SYMBOL=2
    OR_SYMBOL=3
    REPLACE_SYMBOL=4
    ALTER_SYMBOL=5
    SHOW_SYMBOL=6
    REST_SYMBOL=7
    METADATA_SYMBOL=8
    STATUS_SYMBOL=9
    SERVICES_SYMBOL=10
    SERVICE_SYMBOL=11
    NEW_SYMBOL=12
    ON_SYMBOL=13
    FROM_SYMBOL=14
    IN_SYMBOL=15
    SCHEMAS_SYMBOL=16
    SCHEMA_SYMBOL=17
    JSON_SYMBOL=18
    RELATIONAL_SYMBOL=19
    DUALITY_SYMBOL=20
    VIEWS_SYMBOL=21
    VIEW_SYMBOL=22
    PROCEDURES_SYMBOL=23
    PROCEDURE_SYMBOL=24
    PARAMETERS_SYMBOL=25
    RESULT_SYMBOL=26
    DROP_SYMBOL=27
    USE_SYMBOL=28
    AS_SYMBOL=29
    ENABLED_SYMBOL=30
    DISABLED_SYMBOL=31
    PROTOCOL_SYMBOL=32
    HTTP_SYMBOL=33
    HTTPS_SYMBOL=34
    FILTER_SYMBOL=35
    COMMENTS_SYMBOL=36
    AUTHENTICATION_SYMBOL=37
    REQUEST_SYMBOL=38
    PATH_SYMBOL=39
    REDIRECTION_SYMBOL=40
    VALIDATION_SYMBOL=41
    DEFAULT_SYMBOL=42
    USER_SYMBOL=43
    MANAGEMENT_SYMBOL=44
    OPTIONS_SYMBOL=45
    IF_SYMBOL=46
    AVAILABLE_SYMBOL=47
    NOT_SYMBOL=48
    EXISTS_SYMBOL=49
    REQUIRED_SYMBOL=50
    ITEMS_SYMBOL=51
    PER_SYMBOL=52
    PAGE_SYMBOL=53
    CONTENT_SYMBOL=54
    HOST_SYMBOL=55
    MEDIA_SYMBOL=56
    TYPE_SYMBOL=57
    AUTODETECT_SYMBOL=58
    FORMAT_SYMBOL=59
    FEED_SYMBOL=60
    ITEM_SYMBOL=61
    UPDATE_SYMBOL=62
    NULL_SYMBOL=63
    TRUE_SYMBOL=64
    FALSE_SYMBOL=65
    SET_SYMBOL=66
    SETS_SYMBOL=67
    AT_INOUT_SYMBOL=68
    AT_IN_SYMBOL=69
    AT_OUT_SYMBOL=70
    AT_NOCHECK_SYMBOL=71
    AT_NOUPDATE_SYMBOL=72
    AT_SORTABLE_SYMBOL=73
    AT_NOFILTERING_SYMBOL=74
    AT_ROWOWNERSHIP_SYMBOL=75
    AT_UNNEST_SYMBOL=76
    AT_REDUCETO_SYMBOL=77
    AT_DATATYPE_SYMBOL=78
    AT_SELECT_SYMBOL=79
    AT_NOSELECT_SYMBOL=80
    AT_INSERT_SYMBOL=81
    AT_NOINSERT_SYMBOL=82
    AT_UPDATE_SYMBOL=83
    AT_DELETE_SYMBOL=84
    AT_NODELETE_SYMBOL=85
    EQUAL_OPERATOR=86
    ASSIGN_OPERATOR=87
    NULL_SAFE_EQUAL_OPERATOR=88
    GREATER_OR_EQUAL_OPERATOR=89
    GREATER_THAN_OPERATOR=90
    LESS_OR_EQUAL_OPERATOR=91
    LESS_THAN_OPERATOR=92
    NOT_EQUAL_OPERATOR=93
    PLUS_OPERATOR=94
    MINUS_OPERATOR=95
    MULT_OPERATOR=96
    DIV_OPERATOR=97
    MOD_OPERATOR=98
    LOGICAL_NOT_OPERATOR=99
    BITWISE_NOT_OPERATOR=100
    SHIFT_LEFT_OPERATOR=101
    SHIFT_RIGHT_OPERATOR=102
    LOGICAL_AND_OPERATOR=103
    BITWISE_AND_OPERATOR=104
    BITWISE_XOR_OPERATOR=105
    LOGICAL_OR_OPERATOR=106
    BITWISE_OR_OPERATOR=107
    DOT_SYMBOL=108
    COMMA_SYMBOL=109
    SEMICOLON_SYMBOL=110
    COLON_SYMBOL=111
    OPEN_PAR_SYMBOL=112
    CLOSE_PAR_SYMBOL=113
    OPEN_CURLY_SYMBOL=114
    CLOSE_CURLY_SYMBOL=115
    UNDERLINE_SYMBOL=116
    OPEN_SQUARE_SYMBOL=117
    CLOSE_SQUARE_SYMBOL=118
    JSON_SEPARATOR_SYMBOL=119
    JSON_UNQUOTED_SEPARATOR_SYMBOL=120
    AT_SIGN_SYMBOL=121
    AT_TEXT_SUFFIX=122
    AT_AT_SIGN_SYMBOL=123
    NULL2_SYMBOL=124
    PARAM_MARKER=125
    HEX_NUMBER=126
    BIN_NUMBER=127
    INT_NUMBER=128
    DECIMAL_NUMBER=129
    FLOAT_NUMBER=130
    WHITESPACE=131
    INVALID_INPUT=132
    IDENTIFIER=133
    NCHAR_TEXT=134
    BACK_TICK_QUOTED_ID=135
    DOUBLE_QUOTED_TEXT=136
    SINGLE_QUOTED_TEXT=137
    BLOCK_COMMENT=138
    POUND_COMMENT=139
    DASHDASH_COMMENT=140
    JSON_STRING=141
    JSON_NUMBER=142
    WS=143
    NOT_EQUAL2_OPERATOR=144

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 402653286) != 0):
                self.state = 184
                self.mrsStatement()
                self.state = 193
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 186 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 185
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 188 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==110):
                                break

                        self.state = 190
                        self.mrsStatement() 
                    self.state = 195
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)



            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==110:
                self.state = 198
                self.match(MRSParser.SEMICOLON_SYMBOL)


            self.state = 201
            self.match(MRSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def createRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestContentSetStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def dropRestContentSetStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestContentSetStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showRestContentSetsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestContentSetsStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 229
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 203
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 205
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 207
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 208
                self.createRestContentSetStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 209
                self.alterRestServiceStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 210
                self.alterRestSchemaStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 211
                self.alterRestViewStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 212
                self.alterRestProcedureStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 213
                self.dropRestServiceStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 214
                self.dropRestSchemaStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 215
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 216
                self.dropRestProcedureStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 217
                self.dropRestContentSetStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 218
                self.useStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 219
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 220
                self.showRestServicesStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 221
                self.showRestSchemasStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 222
                self.showRestViewsStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 223
                self.showRestProceduresStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 224
                self.showRestContentSetsStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 225
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 226
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 227
                self.showCreateRestViewStatement()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 228
                self.showCreateRestProcedureStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            _la = self._input.LA(1)
            if not(_la==30 or _la==31):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136, 137]:
                self.state = 233
                self.quotedText()
                pass
            elif token in [42]:
                self.state = 234
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 238
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 241
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 244
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 247
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 250
            self.match(MRSParser.PER_SYMBOL)
            self.state = 251
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 252
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 256
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 257
                self.serviceRequestPath()


            self.state = 260
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 261
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 264
            self.match(MRSParser.REST_SYMBOL)
            self.state = 265
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721206020702208) != 0):
                self.state = 266
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 272
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 269
                    self.enabledDisabled()
                    pass
                elif token in [45]:
                    self.state = 270
                    self.jsonOptions()
                    pass
                elif token in [62]:
                    self.state = 271
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 274 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721206020702208) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 277
                self.match(MRSParser.IF_SYMBOL)
                self.state = 278
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 282
                self.match(MRSParser.OR_SYMBOL)
                self.state = 283
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 286
            self.match(MRSParser.REST_SYMBOL)
            self.state = 287
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 288
            self.serviceRequestPath()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 289
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 296
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 292
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 293
                    self.restAuthentication()
                    pass
                elif token in [45]:
                    self.state = 294
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 295
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 298 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 301
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 302
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 303
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 304
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 305
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 306
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 307
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 308
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9011047545438208) != 0):
                self.state = 316
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39]:
                    self.state = 312
                    self.authPath()
                    pass
                elif token in [40]:
                    self.state = 313
                    self.authRedirection()
                    pass
                elif token in [41]:
                    self.state = 314
                    self.authValidation()
                    pass
                elif token in [53]:
                    self.state = 315
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 322
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 325
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 328
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 331
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 332
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(MRSParser.USER_SYMBOL)
            self.state = 335
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 336
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 339
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133, 135]:
                self.state = 337
                self.schemaName()
                pass
            elif token in [42]:
                self.state = 338
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 342
                self.match(MRSParser.OR_SYMBOL)
                self.state = 343
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 346
            self.match(MRSParser.REST_SYMBOL)
            self.state = 347
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 348
                self.schemaRequestPath()


            self.state = 356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 351
                self.match(MRSParser.ON_SYMBOL)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 352
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 355
                self.serviceRequestPath()


            self.state = 358
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 359
            self.schemaName()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0):
                self.state = 360
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 368
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 363
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 364
                    self.authenticationRequired()
                    pass
                elif token in [51]:
                    self.state = 365
                    self.itemsPerPage()
                    pass
                elif token in [45]:
                    self.state = 366
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 367
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 370 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restDualityViewOptions(self):
            return self.getTypedRuleContext(MRSParser.RestDualityViewOptionsContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 373
                self.match(MRSParser.OR_SYMBOL)
                self.state = 374
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 377
            self.match(MRSParser.REST_SYMBOL)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 378
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 381
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 384
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 387
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 388
            self.viewRequestPath()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 389
                self.match(MRSParser.ON_SYMBOL)
                self.state = 390
                self.serviceSchemaSelector()


            self.state = 393
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 394
            self.qualifiedIdentifier()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 395
                self.restDualityViewOptions()


            self.state = 398
            self.match(MRSParser.AS_SYMBOL)
            self.state = 399
            self.restObjectName()
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0):
                self.state = 400
                self.graphGlCrudOptions()


            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 403
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestDualityViewOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restDualityViewOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestDualityViewOptions" ):
                listener.enterRestDualityViewOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestDualityViewOptions" ):
                listener.exitRestDualityViewOptions(self)




    def restDualityViewOptions(self):

        localctx = MRSParser.RestDualityViewOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restDualityViewOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 407
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 408
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 409
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 410
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 411
                    self.restViewMediaType()
                    pass

                elif la_ == 7:
                    self.state = 412
                    self.restViewFormat()
                    pass

                elif la_ == 8:
                    self.state = 413
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 419
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136, 137]:
                self.state = 420
                self.quotedText()
                pass
            elif token in [58]:
                self.state = 421
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 425
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 3530822107858468864) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 428
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 429
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restProcedureOptions(self):
            return self.getTypedRuleContext(MRSParser.RestProcedureOptionsContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 432
                self.match(MRSParser.OR_SYMBOL)
                self.state = 433
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 436
            self.match(MRSParser.REST_SYMBOL)
            self.state = 437
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 438
            self.procedureRequestPath()
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 439
                self.match(MRSParser.ON_SYMBOL)
                self.state = 440
                self.serviceSchemaSelector()


            self.state = 443
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 444
            self.qualifiedIdentifier()
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 445
                self.restProcedureOptions()


            self.state = 448
            self.match(MRSParser.AS_SYMBOL)
            self.state = 449
            self.restObjectName()
            self.state = 450
            self.match(MRSParser.PARAMETERS_SYMBOL)
            self.state = 451
            self.graphGlObj()
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 452
                self.restProcedureResult()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureOptions" ):
                listener.enterRestProcedureOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureOptions" ):
                listener.exitRestProcedureOptions(self)




    def restProcedureOptions(self):

        localctx = MRSParser.RestProcedureOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restProcedureOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 462
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 458
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 459
                    self.authenticationRequired()
                    pass
                elif token in [45]:
                    self.state = 460
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 461
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 464 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_restProcedureResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 467
            self.restResultName()
            self.state = 468
            self.graphGlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def directoryFilePath(self):
            return self.getTypedRuleContext(MRSParser.DirectoryFilePathContext,0)


        def restContentSetOptions(self):
            return self.getTypedRuleContext(MRSParser.RestContentSetOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestContentSetStatement" ):
                listener.enterCreateRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestContentSetStatement" ):
                listener.exitCreateRestContentSetStatement(self)




    def createRestContentSetStatement(self):

        localctx = MRSParser.CreateRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_createRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 471
                self.match(MRSParser.OR_SYMBOL)
                self.state = 472
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 475
            self.match(MRSParser.REST_SYMBOL)
            self.state = 476
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 477
            self.match(MRSParser.SET_SYMBOL)
            self.state = 478
            self.contentSetRequestPath()
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 479
                self.match(MRSParser.ON_SYMBOL)
                self.state = 480
                self.serviceSchemaSelector()


            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 483
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 484
                self.directoryFilePath()


            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 487
                self.restContentSetOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryFilePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_directoryFilePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectoryFilePath" ):
                listener.enterDirectoryFilePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectoryFilePath" ):
                listener.exitDirectoryFilePath(self)




    def directoryFilePath(self):

        localctx = MRSParser.DirectoryFilePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_directoryFilePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestContentSetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restContentSetOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestContentSetOptions" ):
                listener.enterRestContentSetOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestContentSetOptions" ):
                listener.exitRestContentSetOptions(self)




    def restContentSetOptions(self):

        localctx = MRSParser.RestContentSetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_restContentSetOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 496
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30, 31]:
                    self.state = 492
                    self.enabledDisabled()
                    pass
                elif token in [37]:
                    self.state = 493
                    self.authenticationRequired()
                    pass
                elif token in [45]:
                    self.state = 494
                    self.jsonOptions()
                    pass
                elif token in [36]:
                    self.state = 495
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 498 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 501
            self.match(MRSParser.REST_SYMBOL)
            self.state = 502
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 503
            self.serviceRequestPath()
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 504
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 505
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 506
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 507
                self.newServiceRequestPath()


            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 510
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 514
            self.match(MRSParser.REST_SYMBOL)
            self.state = 515
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 516
                self.schemaRequestPath()


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 519
                self.match(MRSParser.ON_SYMBOL)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 520
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 523
                self.serviceRequestPath()


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 526
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 527
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 528
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 529
                self.newSchemaRequestPath()


            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 532
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 533
                self.schemaName()


            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2287193565429760) != 0):
                self.state = 536
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restDualityViewOptions(self):
            return self.getTypedRuleContext(MRSParser.RestDualityViewOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 540
            self.match(MRSParser.REST_SYMBOL)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 541
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 544
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 547
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 550
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 551
            self.viewRequestPath()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 552
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 553
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 554
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 555
                self.newViewRequestPath()


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 558
                self.match(MRSParser.ON_SYMBOL)
                self.state = 559
                self.serviceSchemaSelector()


            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 650805539906781184) != 0):
                self.state = 562
                self.restDualityViewOptions()


            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 565
                self.match(MRSParser.AS_SYMBOL)
                self.state = 566
                self.restObjectName()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0):
                    self.state = 567
                    self.graphGlCrudOptions()


                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 570
                    self.graphGlObj()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restProcedureOptions(self):
            return self.getTypedRuleContext(MRSParser.RestProcedureOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 576
            self.match(MRSParser.REST_SYMBOL)
            self.state = 577
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 578
            self.procedureRequestPath()
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 579
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 580
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 581
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 582
                self.newProcedureRequestPath()


            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 585
                self.match(MRSParser.ON_SYMBOL)
                self.state = 586
                self.serviceSchemaSelector()


            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 35393751744512) != 0):
                self.state = 589
                self.restProcedureOptions()


            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==29:
                self.state = 592
                self.match(MRSParser.AS_SYMBOL)
                self.state = 593
                self.restObjectName()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 594
                    self.match(MRSParser.PARAMETERS_SYMBOL)
                    self.state = 595
                    self.graphGlObj()




            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26:
                self.state = 600
                self.restProcedureResult()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 607
            self.match(MRSParser.REST_SYMBOL)
            self.state = 608
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 609
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 612
            self.match(MRSParser.REST_SYMBOL)
            self.state = 613
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 614
            self.schemaRequestPath()
            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 615
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 616
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 619
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 623
            self.match(MRSParser.REST_SYMBOL)
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 624
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 627
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 630
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 633
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 634
            self.viewRequestPath()
            self.state = 637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 635
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 636
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 640
            self.match(MRSParser.REST_SYMBOL)
            self.state = 641
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 642
            self.procedureRequestPath()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 643
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 644
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestContentSetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SET_SYMBOL(self):
            return self.getToken(MRSParser.SET_SYMBOL, 0)

        def contentSetRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ContentSetRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestContentSetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestContentSetStatement" ):
                listener.enterDropRestContentSetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestContentSetStatement" ):
                listener.exitDropRestContentSetStatement(self)




    def dropRestContentSetStatement(self):

        localctx = MRSParser.DropRestContentSetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dropRestContentSetStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 648
            self.match(MRSParser.REST_SYMBOL)
            self.state = 649
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 650
            self.match(MRSParser.SET_SYMBOL)
            self.state = 651
            self.contentSetRequestPath()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 652
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 653
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(MRSParser.USE_SYMBOL)
            self.state = 657
            self.match(MRSParser.REST_SYMBOL)
            self.state = 658
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_serviceAndSchemaRequestPaths)
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 661
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 662
                self.serviceSchemaSelector()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 666
            self.match(MRSParser.REST_SYMBOL)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 667
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 670
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 673
            self.match(MRSParser.REST_SYMBOL)
            self.state = 674
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMAS_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMAS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 677
            self.match(MRSParser.REST_SYMBOL)
            self.state = 678
            self.match(MRSParser.SCHEMAS_SYMBOL)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 679
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 680
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 683
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 687
            self.match(MRSParser.REST_SYMBOL)
            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 688
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 691
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 694
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 697
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 698
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 699
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 703
            self.match(MRSParser.REST_SYMBOL)
            self.state = 704
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 705
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 706
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestContentSetsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def SETS_SYMBOL(self):
            return self.getToken(MRSParser.SETS_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestContentSetsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestContentSetsStatement" ):
                listener.enterShowRestContentSetsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestContentSetsStatement" ):
                listener.exitShowRestContentSetsStatement(self)




    def showRestContentSetsStatement(self):

        localctx = MRSParser.ShowRestContentSetsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_showRestContentSetsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 710
            self.match(MRSParser.REST_SYMBOL)
            self.state = 711
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 712
            self.match(MRSParser.SETS_SYMBOL)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 713
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 714
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 718
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 719
            self.match(MRSParser.REST_SYMBOL)
            self.state = 720
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 343597383681) != 0):
                self.state = 721
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 725
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 726
            self.match(MRSParser.REST_SYMBOL)
            self.state = 727
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 728
                self.schemaRequestPath()


            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14 or _la==15:
                self.state = 731
                _la = self._input.LA(1)
                if not(_la==14 or _la==15):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 732
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 735
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 739
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 740
            self.match(MRSParser.REST_SYMBOL)
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 741
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 744
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 747
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 750
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 751
            self.viewRequestPath()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==14:
                self.state = 752
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 753
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 757
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 758
            self.match(MRSParser.REST_SYMBOL)
            self.state = 759
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 760
            self.procedureRequestPath()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==14:
                self.state = 761
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 762
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==135:
                self.state = 765
                self.hostAndPortIdentifier()


            self.state = 768
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==135:
                self.state = 770
                self.hostAndPortIdentifier()


            self.state = 773
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContentSetRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_contentSetRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContentSetRequestPath" ):
                listener.enterContentSetRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContentSetRequestPath" ):
                listener.exitContentSetRequestPath(self)




    def contentSetRequestPath(self):

        localctx = MRSParser.ContentSetRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_contentSetRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            _la = self._input.LA(1)
            if not(_la==133 or _la==135):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.identifier()
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==109:
                self.state = 804
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 805
                self.identifier()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 812
            self.identifierList()
            self.state = 813
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.identifier()
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 816
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.identifier()
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 820
                self.dotIdentifier()
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 821
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 827
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 837
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self.identifier()
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 831
                    self.dotIdentifier()
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.dottedIdentifier()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 840
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 841
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(MRSParser.DIV_OPERATOR)
            self.state = 845
            self.dottedIdentifier()
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 846
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 847
                self.dottedIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            _la = self._input.LA(1)
            if not(_la==136 or _la==137):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 853
                self.jsonPair()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 854
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 855
                    self.jsonPair()
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 861
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 864
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_jsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            _la = self._input.LA(1)
            if not(_la==136 or _la==141):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 868
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 869
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_SQUARE_SYMBOL, 0)

        def CLOSE_SQUARE_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_SQUARE_SYMBOL, 0)

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(MRSParser.OPEN_SQUARE_SYMBOL)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & 20266198323167239) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & 24833) != 0):
                self.state = 872
                self.jsonValue()
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 873
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 874
                    self.jsonValue()
                    self.state = 879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 882
            self.match(MRSParser.CLOSE_SQUARE_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def JSON_NUMBER(self):
            return self.getToken(MRSParser.JSON_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def TRUE_SYMBOL(self):
            return self.getToken(MRSParser.TRUE_SYMBOL, 0)

        def FALSE_SYMBOL(self):
            return self.getToken(MRSParser.FALSE_SYMBOL, 0)

        def NULL_SYMBOL(self):
            return self.getToken(MRSParser.NULL_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_jsonValue)
        try:
            self.state = 893
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.match(MRSParser.JSON_NUMBER)
                pass
            elif token in [128]:
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 5)
                self.state = 888
                self.jsonObj()
                pass
            elif token in [117]:
                self.enterOuterAlt(localctx, 6)
                self.state = 889
                self.jsonArr()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 7)
                self.state = 890
                self.match(MRSParser.TRUE_SYMBOL)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 8)
                self.state = 891
                self.match(MRSParser.FALSE_SYMBOL)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 9)
                self.state = 892
                self.match(MRSParser.NULL_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphGlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphGlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphGlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlObj" ):
                listener.enterGraphGlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlObj" ):
                listener.exitGraphGlObj(self)




    def graphGlObj(self):

        localctx = MRSParser.GraphGlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_graphGlObj)
        self._la = 0 # Token type
        try:
            self.state = 908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 896
                self.graphGlPair()
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 897
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 898
                    self.graphGlPair()
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 904
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 907
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SELECT_SYMBOL, i)

        def AT_NOSELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOSELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOSELECT_SYMBOL, i)

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlCrudOptions" ):
                listener.enterGraphGlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlCrudOptions" ):
                listener.exitGraphGlCrudOptions(self)




    def graphGlCrudOptions(self):

        localctx = MRSParser.GraphGlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_graphGlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 910
                _la = self._input.LA(1)
                if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 913 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphKeyValue(self):
            return self.getTypedRuleContext(MRSParser.GraphKeyValueContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_REDUCETO_SYMBOL(self):
            return self.getToken(MRSParser.AT_REDUCETO_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphGlReduceToValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlReduceToValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def graphGlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlDatatypeValueContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlPair" ):
                listener.enterGraphGlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlPair" ):
                listener.exitGraphGlPair(self)




    def graphGlPair(self):

        localctx = MRSParser.GraphGlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_graphGlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.graphKeyValue()
            self.state = 916
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 917
            self.qualifiedIdentifier()
            self.state = 937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.state = 918
                self.match(MRSParser.AT_IN_SYMBOL)
                pass
            elif token in [70]:
                self.state = 919
                self.match(MRSParser.AT_OUT_SYMBOL)
                pass
            elif token in [68]:
                self.state = 920
                self.match(MRSParser.AT_INOUT_SYMBOL)
                pass
            elif token in [71]:
                self.state = 921
                self.match(MRSParser.AT_NOCHECK_SYMBOL)
                pass
            elif token in [73]:
                self.state = 922
                self.match(MRSParser.AT_SORTABLE_SYMBOL)
                pass
            elif token in [74]:
                self.state = 923
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)
                pass
            elif token in [75]:
                self.state = 924
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
                pass
            elif token in [76]:
                self.state = 925
                self.match(MRSParser.AT_UNNEST_SYMBOL)
                pass
            elif token in [77]:
                self.state = 926
                self.match(MRSParser.AT_REDUCETO_SYMBOL)
                self.state = 927
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 928
                self.graphGlReduceToValue()
                self.state = 929
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [78]:
                self.state = 931
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 932
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 933
                self.graphGlDatatypeValue()
                self.state = 934
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [72, 79, 80, 81, 82, 83, 84, 85]:
                self.state = 936
                self.graphGlCrudOptions()
                pass
            elif token in [109, 114, 115]:
                pass
            else:
                pass
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 939
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphKeyValue" ):
                listener.enterGraphKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphKeyValue" ):
                listener.exitGraphKeyValue(self)




    def graphKeyValue(self):

        localctx = MRSParser.GraphKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_graphKeyValue)
        try:
            self.state = 945
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [133, 135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 944
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlReduceToValue" ):
                listener.enterGraphGlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlReduceToValue" ):
                listener.exitGraphGlReduceToValue(self)




    def graphGlReduceToValue(self):

        localctx = MRSParser.GraphGlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_graphGlReduceToValue)
        try:
            self.state = 950
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [133, 135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 949
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlDatatypeValue" ):
                listener.enterGraphGlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlDatatypeValue" ):
                listener.exitGraphGlDatatypeValue(self)




    def graphGlDatatypeValue(self):

        localctx = MRSParser.GraphGlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_graphGlDatatypeValue)
        try:
            self.state = 955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 952
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [136]:
                self.enterOuterAlt(localctx, 2)
                self.state = 953
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [133, 135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlValue" ):
                listener.enterGraphGlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlValue" ):
                listener.exitGraphGlValue(self)




    def graphGlValue(self):

        localctx = MRSParser.GraphGlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_graphGlValue)
        try:
            self.state = 959
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133, 135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 957
                self.qualifiedIdentifier()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self.graphGlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





