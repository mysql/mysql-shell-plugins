# Copyright (c) 2023, Oracle and/or its affiliates.
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,142,884,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,
        0,1,0,1,0,4,0,174,8,0,11,0,12,0,175,1,0,5,0,179,8,0,10,0,12,0,182,
        9,0,1,0,1,0,3,0,186,8,0,1,0,3,0,189,8,0,3,0,191,8,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,3,1,216,8,1,1,2,1,2,1,3,1,3,3,3,222,8,3,1,4,1,4,
        1,4,1,5,1,5,1,5,1,6,1,6,3,6,232,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,9,1,9,1,9,3,9,246,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        3,10,255,8,10,1,11,1,11,1,11,4,11,260,8,11,11,11,12,11,261,1,12,
        1,12,1,12,3,12,267,8,12,1,13,1,13,1,13,3,13,272,8,13,1,13,1,13,1,
        13,1,13,3,13,278,8,13,1,14,1,14,1,14,1,14,4,14,284,8,14,11,14,12,
        14,285,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,297,8,15,
        1,16,1,16,1,16,1,16,1,16,5,16,304,8,16,10,16,12,16,307,9,16,1,17,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,3,21,327,8,21,1,22,1,22,1,22,3,22,332,8,22,1,
        22,1,22,1,22,3,22,337,8,22,1,22,1,22,3,22,341,8,22,1,22,3,22,344,
        8,22,1,22,1,22,1,22,3,22,349,8,22,1,23,1,23,1,23,1,23,1,23,4,23,
        356,8,23,11,23,12,23,357,1,24,1,24,1,24,3,24,363,8,24,1,24,1,24,
        3,24,367,8,24,1,24,3,24,370,8,24,1,24,3,24,373,8,24,1,24,1,24,1,
        24,3,24,378,8,24,1,24,1,24,1,24,3,24,383,8,24,1,24,1,24,1,24,3,24,
        388,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,
        400,8,25,11,25,12,25,401,1,26,1,26,1,26,1,26,3,26,408,8,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,3,29,420,8,29,1,29,
        1,29,1,29,1,29,3,29,426,8,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        5,29,435,8,29,10,29,12,29,438,9,29,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,3,31,452,8,31,1,31,3,31,455,8,31,1,
        32,1,32,1,32,1,32,3,32,461,8,32,1,32,1,32,3,32,465,8,32,1,32,3,32,
        468,8,32,1,32,1,32,1,32,1,32,3,32,474,8,32,1,32,1,32,3,32,478,8,
        32,1,32,3,32,481,8,32,1,33,1,33,1,33,3,33,486,8,33,1,33,3,33,489,
        8,33,1,33,3,33,492,8,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,500,8,
        33,1,33,3,33,503,8,33,1,33,3,33,506,8,33,1,33,1,33,1,33,3,33,511,
        8,33,1,33,3,33,514,8,33,3,33,516,8,33,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,3,34,526,8,34,1,34,3,34,529,8,34,1,34,1,34,1,34,1,34,
        3,34,535,8,34,3,34,537,8,34,1,34,5,34,540,8,34,10,34,12,34,543,9,
        34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,556,
        8,36,1,36,3,36,559,8,36,1,37,1,37,1,37,3,37,564,8,37,1,37,3,37,567,
        8,37,1,37,3,37,570,8,37,1,37,1,37,1,37,3,37,575,8,37,1,38,1,38,1,
        38,1,38,1,38,3,38,582,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,3,40,592,8,40,1,40,1,40,3,40,596,8,40,1,41,1,41,1,41,3,41,601,
        8,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,
        614,8,43,1,43,3,43,617,8,43,1,44,1,44,1,44,3,44,622,8,44,1,44,3,
        44,625,8,44,1,44,3,44,628,8,44,1,44,1,44,1,44,3,44,633,8,44,1,45,
        1,45,1,45,1,45,1,45,3,45,640,8,45,1,46,1,46,1,46,1,46,1,46,3,46,
        647,8,46,1,47,1,47,1,47,1,47,1,47,3,47,654,8,47,1,47,1,47,3,47,658,
        8,47,1,47,3,47,661,8,47,1,48,1,48,1,48,1,48,3,48,667,8,48,1,48,3,
        48,670,8,48,1,48,3,48,673,8,48,1,48,1,48,1,48,3,48,678,8,48,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,686,8,49,1,50,3,50,689,8,50,1,50,1,
        50,1,51,3,51,694,8,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,
        55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,
        61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,5,65,727,8,65,10,
        65,12,65,730,9,65,1,66,1,66,1,66,1,66,1,67,1,67,3,67,738,8,67,1,
        68,1,68,1,68,3,68,743,8,68,3,68,745,8,68,1,69,1,69,1,69,1,70,1,70,
        1,70,5,70,753,8,70,10,70,12,70,756,9,70,3,70,758,8,70,1,71,1,71,
        1,71,3,71,763,8,71,1,72,1,72,1,72,1,72,3,72,769,8,72,1,73,1,73,1,
        74,1,74,1,74,1,74,5,74,777,8,74,10,74,12,74,780,9,74,1,74,1,74,1,
        74,1,74,3,74,786,8,74,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,5,
        76,796,8,76,10,76,12,76,799,9,76,1,76,1,76,1,76,1,76,3,76,805,8,
        76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,816,8,77,1,
        78,1,78,1,78,1,78,5,78,822,8,78,10,78,12,78,825,9,78,1,78,1,78,1,
        78,1,78,3,78,831,8,78,1,79,4,79,834,8,79,11,79,12,79,835,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,860,8,80,1,80,3,80,863,
        8,80,1,81,1,81,1,81,3,81,868,8,81,1,82,1,82,1,82,3,82,873,8,82,1,
        83,1,83,1,83,3,83,878,8,83,1,84,1,84,3,84,882,8,84,1,84,0,0,85,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,0,7,1,0,35,36,2,0,61,61,65,66,1,0,19,20,
        2,0,131,131,133,133,1,0,134,135,2,0,134,134,139,139,2,0,72,72,79,
        85,968,0,190,1,0,0,0,2,215,1,0,0,0,4,217,1,0,0,0,6,221,1,0,0,0,8,
        223,1,0,0,0,10,226,1,0,0,0,12,229,1,0,0,0,14,235,1,0,0,0,16,240,
        1,0,0,0,18,242,1,0,0,0,20,250,1,0,0,0,22,259,1,0,0,0,24,263,1,0,
        0,0,26,268,1,0,0,0,28,283,1,0,0,0,30,287,1,0,0,0,32,298,1,0,0,0,
        34,308,1,0,0,0,36,311,1,0,0,0,38,314,1,0,0,0,40,317,1,0,0,0,42,321,
        1,0,0,0,44,328,1,0,0,0,46,355,1,0,0,0,48,359,1,0,0,0,50,399,1,0,
        0,0,52,403,1,0,0,0,54,409,1,0,0,0,56,412,1,0,0,0,58,416,1,0,0,0,
        60,439,1,0,0,0,62,443,1,0,0,0,64,456,1,0,0,0,66,482,1,0,0,0,68,517,
        1,0,0,0,70,544,1,0,0,0,72,549,1,0,0,0,74,560,1,0,0,0,76,576,1,0,
        0,0,78,583,1,0,0,0,80,595,1,0,0,0,82,597,1,0,0,0,84,604,1,0,0,0,
        86,608,1,0,0,0,88,618,1,0,0,0,90,634,1,0,0,0,92,641,1,0,0,0,94,648,
        1,0,0,0,96,662,1,0,0,0,98,679,1,0,0,0,100,688,1,0,0,0,102,693,1,
        0,0,0,104,697,1,0,0,0,106,699,1,0,0,0,108,701,1,0,0,0,110,703,1,
        0,0,0,112,705,1,0,0,0,114,707,1,0,0,0,116,709,1,0,0,0,118,711,1,
        0,0,0,120,713,1,0,0,0,122,715,1,0,0,0,124,717,1,0,0,0,126,719,1,
        0,0,0,128,721,1,0,0,0,130,723,1,0,0,0,132,731,1,0,0,0,134,735,1,
        0,0,0,136,739,1,0,0,0,138,746,1,0,0,0,140,757,1,0,0,0,142,759,1,
        0,0,0,144,764,1,0,0,0,146,770,1,0,0,0,148,785,1,0,0,0,150,787,1,
        0,0,0,152,804,1,0,0,0,154,815,1,0,0,0,156,830,1,0,0,0,158,833,1,
        0,0,0,160,837,1,0,0,0,162,867,1,0,0,0,164,872,1,0,0,0,166,877,1,
        0,0,0,168,881,1,0,0,0,170,191,5,0,0,1,171,180,3,2,1,0,172,174,5,
        110,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,176,
        1,0,0,0,176,177,1,0,0,0,177,179,3,2,1,0,178,173,1,0,0,0,179,182,
        1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,188,1,0,0,0,182,180,
        1,0,0,0,183,185,5,110,0,0,184,186,5,0,0,1,185,184,1,0,0,0,185,186,
        1,0,0,0,186,189,1,0,0,0,187,189,5,0,0,1,188,183,1,0,0,0,188,187,
        1,0,0,0,189,191,1,0,0,0,190,170,1,0,0,0,190,171,1,0,0,0,191,1,1,
        0,0,0,192,216,3,20,10,0,193,216,3,26,13,0,194,216,3,44,22,0,195,
        216,3,48,24,0,196,216,3,58,29,0,197,216,3,62,31,0,198,216,3,64,32,
        0,199,216,3,66,33,0,200,216,3,68,34,0,201,216,3,70,35,0,202,216,
        3,72,36,0,203,216,3,74,37,0,204,216,3,76,38,0,205,216,3,78,39,0,
        206,216,3,82,41,0,207,216,3,84,42,0,208,216,3,86,43,0,209,216,3,
        88,44,0,210,216,3,90,45,0,211,216,3,92,46,0,212,216,3,94,47,0,213,
        216,3,96,48,0,214,216,3,98,49,0,215,192,1,0,0,0,215,193,1,0,0,0,
        215,194,1,0,0,0,215,195,1,0,0,0,215,196,1,0,0,0,215,197,1,0,0,0,
        215,198,1,0,0,0,215,199,1,0,0,0,215,200,1,0,0,0,215,201,1,0,0,0,
        215,202,1,0,0,0,215,203,1,0,0,0,215,204,1,0,0,0,215,205,1,0,0,0,
        215,206,1,0,0,0,215,207,1,0,0,0,215,208,1,0,0,0,215,209,1,0,0,0,
        215,210,1,0,0,0,215,211,1,0,0,0,215,212,1,0,0,0,215,213,1,0,0,0,
        215,214,1,0,0,0,216,3,1,0,0,0,217,218,7,0,0,0,218,5,1,0,0,0,219,
        222,3,146,73,0,220,222,5,47,0,0,221,219,1,0,0,0,221,220,1,0,0,0,
        222,7,1,0,0,0,223,224,5,50,0,0,224,225,3,154,77,0,225,9,1,0,0,0,
        226,227,5,41,0,0,227,228,3,146,73,0,228,11,1,0,0,0,229,231,5,42,
        0,0,230,232,5,53,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,
        0,0,233,234,5,55,0,0,234,13,1,0,0,0,235,236,5,56,0,0,236,237,5,57,
        0,0,237,238,5,58,0,0,238,239,3,16,8,0,239,15,1,0,0,0,240,241,5,126,
        0,0,241,17,1,0,0,0,242,245,5,18,0,0,243,244,5,16,0,0,244,246,3,100,
        50,0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,5,22,
        0,0,248,249,3,106,53,0,249,19,1,0,0,0,250,251,5,6,0,0,251,252,5,
        12,0,0,252,254,5,13,0,0,253,255,3,22,11,0,254,253,1,0,0,0,254,255,
        1,0,0,0,255,21,1,0,0,0,256,260,3,4,2,0,257,260,3,8,4,0,258,260,3,
        24,12,0,259,256,1,0,0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,261,
        1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,23,1,0,0,0,263,266,5,
        67,0,0,264,265,5,51,0,0,265,267,5,52,0,0,266,264,1,0,0,0,266,267,
        1,0,0,0,267,25,1,0,0,0,268,271,5,7,0,0,269,270,5,8,0,0,270,272,5,
        9,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,274,5,
        12,0,0,274,275,5,16,0,0,275,277,3,100,50,0,276,278,3,28,14,0,277,
        276,1,0,0,0,277,278,1,0,0,0,278,27,1,0,0,0,279,284,3,4,2,0,280,284,
        3,32,16,0,281,284,3,8,4,0,282,284,3,10,5,0,283,279,1,0,0,0,283,280,
        1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,
        1,0,0,0,285,286,1,0,0,0,286,29,1,0,0,0,287,296,5,37,0,0,288,297,
        5,38,0,0,289,297,5,39,0,0,290,291,5,38,0,0,291,292,5,109,0,0,292,
        297,5,39,0,0,293,294,5,39,0,0,294,295,5,109,0,0,295,297,5,38,0,0,
        296,288,1,0,0,0,296,289,1,0,0,0,296,290,1,0,0,0,296,293,1,0,0,0,
        297,31,1,0,0,0,298,305,5,42,0,0,299,304,3,34,17,0,300,304,3,36,18,
        0,301,304,3,38,19,0,302,304,3,40,20,0,303,299,1,0,0,0,303,300,1,
        0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,1,
        0,0,0,305,306,1,0,0,0,306,33,1,0,0,0,307,305,1,0,0,0,308,309,5,44,
        0,0,309,310,3,6,3,0,310,35,1,0,0,0,311,312,5,45,0,0,312,313,3,6,
        3,0,313,37,1,0,0,0,314,315,5,46,0,0,315,316,3,6,3,0,316,39,1,0,0,
        0,317,318,5,58,0,0,318,319,5,59,0,0,319,320,3,6,3,0,320,41,1,0,0,
        0,321,322,5,48,0,0,322,323,5,49,0,0,323,326,5,22,0,0,324,327,3,104,
        52,0,325,327,5,47,0,0,326,324,1,0,0,0,326,325,1,0,0,0,327,43,1,0,
        0,0,328,331,5,7,0,0,329,330,5,8,0,0,330,332,5,9,0,0,331,329,1,0,
        0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,5,12,0,0,334,336,5,22,
        0,0,335,337,3,106,53,0,336,335,1,0,0,0,336,337,1,0,0,0,337,343,1,
        0,0,0,338,340,5,18,0,0,339,341,5,16,0,0,340,339,1,0,0,0,340,341,
        1,0,0,0,341,342,1,0,0,0,342,344,3,100,50,0,343,338,1,0,0,0,343,344,
        1,0,0,0,344,345,1,0,0,0,345,346,5,19,0,0,346,348,3,104,52,0,347,
        349,3,46,23,0,348,347,1,0,0,0,348,349,1,0,0,0,349,45,1,0,0,0,350,
        356,3,4,2,0,351,356,3,12,6,0,352,356,3,14,7,0,353,356,3,8,4,0,354,
        356,3,10,5,0,355,350,1,0,0,0,355,351,1,0,0,0,355,352,1,0,0,0,355,
        353,1,0,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,
        358,1,0,0,0,358,47,1,0,0,0,359,362,5,7,0,0,360,361,5,8,0,0,361,363,
        5,9,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,366,
        5,12,0,0,365,367,5,24,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,369,
        1,0,0,0,368,370,5,23,0,0,369,368,1,0,0,0,369,370,1,0,0,0,370,372,
        1,0,0,0,371,373,5,25,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,
        1,0,0,0,374,375,5,27,0,0,375,377,3,112,56,0,376,378,3,18,9,0,377,
        376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,5,19,0,0,380,
        382,3,134,67,0,381,383,3,50,25,0,382,381,1,0,0,0,382,383,1,0,0,0,
        383,384,1,0,0,0,384,385,5,34,0,0,385,387,3,116,58,0,386,388,3,158,
        79,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,390,3,156,
        78,0,390,49,1,0,0,0,391,400,3,4,2,0,392,400,3,12,6,0,393,400,3,14,
        7,0,394,400,3,8,4,0,395,400,3,10,5,0,396,400,3,52,26,0,397,400,3,
        54,27,0,398,400,3,56,28,0,399,391,1,0,0,0,399,392,1,0,0,0,399,393,
        1,0,0,0,399,394,1,0,0,0,399,395,1,0,0,0,399,396,1,0,0,0,399,397,
        1,0,0,0,399,398,1,0,0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,
        1,0,0,0,402,51,1,0,0,0,403,404,5,61,0,0,404,407,5,62,0,0,405,408,
        3,146,73,0,406,408,5,63,0,0,407,405,1,0,0,0,407,406,1,0,0,0,408,
        53,1,0,0,0,409,410,5,64,0,0,410,411,7,1,0,0,411,55,1,0,0,0,412,413,
        5,42,0,0,413,414,5,29,0,0,414,415,3,134,67,0,415,57,1,0,0,0,416,
        419,5,7,0,0,417,418,5,8,0,0,418,420,5,9,0,0,419,417,1,0,0,0,419,
        420,1,0,0,0,420,421,1,0,0,0,421,422,5,12,0,0,422,423,5,29,0,0,423,
        425,3,122,61,0,424,426,3,18,9,0,425,424,1,0,0,0,425,426,1,0,0,0,
        426,427,1,0,0,0,427,428,5,19,0,0,428,429,3,134,67,0,429,430,5,34,
        0,0,430,431,3,116,58,0,431,432,5,30,0,0,432,436,3,156,78,0,433,435,
        3,60,30,0,434,433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,
        1,0,0,0,437,59,1,0,0,0,438,436,1,0,0,0,439,440,5,31,0,0,440,441,
        3,118,59,0,441,442,3,156,78,0,442,61,1,0,0,0,443,444,5,10,0,0,444,
        445,5,12,0,0,445,446,5,16,0,0,446,451,3,100,50,0,447,448,5,17,0,
        0,448,449,5,43,0,0,449,450,5,44,0,0,450,452,3,102,51,0,451,447,1,
        0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,455,3,28,14,0,454,453,
        1,0,0,0,454,455,1,0,0,0,455,63,1,0,0,0,456,457,5,10,0,0,457,458,
        5,12,0,0,458,460,5,22,0,0,459,461,3,106,53,0,460,459,1,0,0,0,460,
        461,1,0,0,0,461,467,1,0,0,0,462,464,5,18,0,0,463,465,5,16,0,0,464,
        463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,468,3,100,50,0,467,
        462,1,0,0,0,467,468,1,0,0,0,468,473,1,0,0,0,469,470,5,17,0,0,470,
        471,5,43,0,0,471,472,5,44,0,0,472,474,3,108,54,0,473,469,1,0,0,0,
        473,474,1,0,0,0,474,477,1,0,0,0,475,476,5,19,0,0,476,478,3,104,52,
        0,477,475,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,481,3,46,23,
        0,480,479,1,0,0,0,480,481,1,0,0,0,481,65,1,0,0,0,482,483,5,10,0,
        0,483,485,5,12,0,0,484,486,5,24,0,0,485,484,1,0,0,0,485,486,1,0,
        0,0,486,488,1,0,0,0,487,489,5,23,0,0,488,487,1,0,0,0,488,489,1,0,
        0,0,489,491,1,0,0,0,490,492,5,25,0,0,491,490,1,0,0,0,491,492,1,0,
        0,0,492,493,1,0,0,0,493,494,5,27,0,0,494,499,3,112,56,0,495,496,
        5,17,0,0,496,497,5,43,0,0,497,498,5,44,0,0,498,500,3,114,57,0,499,
        495,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,503,3,18,9,0,502,
        501,1,0,0,0,502,503,1,0,0,0,503,505,1,0,0,0,504,506,3,50,25,0,505,
        504,1,0,0,0,505,506,1,0,0,0,506,515,1,0,0,0,507,508,5,34,0,0,508,
        510,3,116,58,0,509,511,3,158,79,0,510,509,1,0,0,0,510,511,1,0,0,
        0,511,513,1,0,0,0,512,514,3,156,78,0,513,512,1,0,0,0,513,514,1,0,
        0,0,514,516,1,0,0,0,515,507,1,0,0,0,515,516,1,0,0,0,516,67,1,0,0,
        0,517,518,5,10,0,0,518,519,5,12,0,0,519,520,5,29,0,0,520,525,3,122,
        61,0,521,522,5,17,0,0,522,523,5,43,0,0,523,524,5,44,0,0,524,526,
        3,124,62,0,525,521,1,0,0,0,525,526,1,0,0,0,526,528,1,0,0,0,527,529,
        3,18,9,0,528,527,1,0,0,0,528,529,1,0,0,0,529,536,1,0,0,0,530,531,
        5,34,0,0,531,534,3,116,58,0,532,533,5,30,0,0,533,535,3,156,78,0,
        534,532,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,530,1,0,0,0,
        536,537,1,0,0,0,537,541,1,0,0,0,538,540,3,60,30,0,539,538,1,0,0,
        0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,69,1,0,0,0,
        543,541,1,0,0,0,544,545,5,32,0,0,545,546,5,12,0,0,546,547,5,16,0,
        0,547,548,3,100,50,0,548,71,1,0,0,0,549,550,5,32,0,0,550,551,5,12,
        0,0,551,552,5,22,0,0,552,558,3,106,53,0,553,555,5,18,0,0,554,556,
        5,16,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,559,
        3,100,50,0,558,553,1,0,0,0,558,559,1,0,0,0,559,73,1,0,0,0,560,561,
        5,32,0,0,561,563,5,12,0,0,562,564,5,24,0,0,563,562,1,0,0,0,563,564,
        1,0,0,0,564,566,1,0,0,0,565,567,5,23,0,0,566,565,1,0,0,0,566,567,
        1,0,0,0,567,569,1,0,0,0,568,570,5,25,0,0,569,568,1,0,0,0,569,570,
        1,0,0,0,570,571,1,0,0,0,571,572,5,27,0,0,572,574,3,112,56,0,573,
        575,3,18,9,0,574,573,1,0,0,0,574,575,1,0,0,0,575,75,1,0,0,0,576,
        577,5,32,0,0,577,578,5,12,0,0,578,579,5,29,0,0,579,581,3,122,61,
        0,580,582,3,18,9,0,581,580,1,0,0,0,581,582,1,0,0,0,582,77,1,0,0,
        0,583,584,5,33,0,0,584,585,5,12,0,0,585,586,3,80,40,0,586,79,1,0,
        0,0,587,588,5,16,0,0,588,596,3,100,50,0,589,590,5,16,0,0,590,592,
        3,100,50,0,591,589,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,
        5,22,0,0,594,596,3,106,53,0,595,587,1,0,0,0,595,591,1,0,0,0,596,
        81,1,0,0,0,597,598,5,11,0,0,598,600,5,12,0,0,599,601,5,13,0,0,600,
        599,1,0,0,0,600,601,1,0,0,0,601,602,1,0,0,0,602,603,5,14,0,0,603,
        83,1,0,0,0,604,605,5,11,0,0,605,606,5,12,0,0,606,607,5,15,0,0,607,
        85,1,0,0,0,608,609,5,11,0,0,609,610,5,12,0,0,610,616,5,21,0,0,611,
        613,7,2,0,0,612,614,5,16,0,0,613,612,1,0,0,0,613,614,1,0,0,0,614,
        615,1,0,0,0,615,617,3,100,50,0,616,611,1,0,0,0,616,617,1,0,0,0,617,
        87,1,0,0,0,618,619,5,11,0,0,619,621,5,12,0,0,620,622,5,24,0,0,621,
        620,1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,5,23,0,0,624,
        623,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,628,5,25,0,0,627,
        626,1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,632,5,26,0,0,630,
        631,7,2,0,0,631,633,3,80,40,0,632,630,1,0,0,0,632,633,1,0,0,0,633,
        89,1,0,0,0,634,635,5,11,0,0,635,636,5,12,0,0,636,639,5,28,0,0,637,
        638,7,2,0,0,638,640,3,80,40,0,639,637,1,0,0,0,639,640,1,0,0,0,640,
        91,1,0,0,0,641,642,5,11,0,0,642,643,5,7,0,0,643,644,5,12,0,0,644,
        646,5,16,0,0,645,647,3,100,50,0,646,645,1,0,0,0,646,647,1,0,0,0,
        647,93,1,0,0,0,648,649,5,11,0,0,649,650,5,7,0,0,650,651,5,12,0,0,
        651,653,5,22,0,0,652,654,3,106,53,0,653,652,1,0,0,0,653,654,1,0,
        0,0,654,660,1,0,0,0,655,657,7,2,0,0,656,658,5,16,0,0,657,656,1,0,
        0,0,657,658,1,0,0,0,658,659,1,0,0,0,659,661,3,100,50,0,660,655,1,
        0,0,0,660,661,1,0,0,0,661,95,1,0,0,0,662,663,5,11,0,0,663,664,5,
        7,0,0,664,666,5,12,0,0,665,667,5,24,0,0,666,665,1,0,0,0,666,667,
        1,0,0,0,667,669,1,0,0,0,668,670,5,23,0,0,669,668,1,0,0,0,669,670,
        1,0,0,0,670,672,1,0,0,0,671,673,5,25,0,0,672,671,1,0,0,0,672,673,
        1,0,0,0,673,674,1,0,0,0,674,675,5,27,0,0,675,677,3,112,56,0,676,
        678,3,18,9,0,677,676,1,0,0,0,677,678,1,0,0,0,678,97,1,0,0,0,679,
        680,5,11,0,0,680,681,5,7,0,0,681,682,5,12,0,0,682,683,5,29,0,0,683,
        685,3,122,61,0,684,686,3,18,9,0,685,684,1,0,0,0,685,686,1,0,0,0,
        686,99,1,0,0,0,687,689,3,142,71,0,688,687,1,0,0,0,688,689,1,0,0,
        0,689,690,1,0,0,0,690,691,3,144,72,0,691,101,1,0,0,0,692,694,3,142,
        71,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,695,696,3,144,
        72,0,696,103,1,0,0,0,697,698,3,128,64,0,698,105,1,0,0,0,699,700,
        3,144,72,0,700,107,1,0,0,0,701,702,3,144,72,0,702,109,1,0,0,0,703,
        704,3,128,64,0,704,111,1,0,0,0,705,706,3,144,72,0,706,113,1,0,0,
        0,707,708,3,144,72,0,708,115,1,0,0,0,709,710,3,128,64,0,710,117,
        1,0,0,0,711,712,3,128,64,0,712,119,1,0,0,0,713,714,3,128,64,0,714,
        121,1,0,0,0,715,716,3,144,72,0,716,123,1,0,0,0,717,718,3,144,72,
        0,718,125,1,0,0,0,719,720,7,3,0,0,720,127,1,0,0,0,721,722,3,126,
        63,0,722,129,1,0,0,0,723,728,3,128,64,0,724,725,5,109,0,0,725,727,
        3,128,64,0,726,724,1,0,0,0,727,730,1,0,0,0,728,726,1,0,0,0,728,729,
        1,0,0,0,729,131,1,0,0,0,730,728,1,0,0,0,731,732,5,112,0,0,732,733,
        3,130,65,0,733,734,5,113,0,0,734,133,1,0,0,0,735,737,3,128,64,0,
        736,738,3,138,69,0,737,736,1,0,0,0,737,738,1,0,0,0,738,135,1,0,0,
        0,739,744,3,128,64,0,740,742,3,138,69,0,741,743,3,138,69,0,742,741,
        1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,740,1,0,0,0,744,745,
        1,0,0,0,745,137,1,0,0,0,746,747,5,108,0,0,747,748,3,128,64,0,748,
        139,1,0,0,0,749,758,3,136,68,0,750,754,3,128,64,0,751,753,3,138,
        69,0,752,751,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,
        0,0,755,758,1,0,0,0,756,754,1,0,0,0,757,749,1,0,0,0,757,750,1,0,
        0,0,758,141,1,0,0,0,759,762,3,140,70,0,760,761,5,111,0,0,761,763,
        5,126,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,143,1,0,0,0,764,765,
        5,97,0,0,765,768,3,140,70,0,766,767,5,97,0,0,767,769,3,140,70,0,
        768,766,1,0,0,0,768,769,1,0,0,0,769,145,1,0,0,0,770,771,7,4,0,0,
        771,147,1,0,0,0,772,773,5,114,0,0,773,778,3,150,75,0,774,775,5,109,
        0,0,775,777,3,150,75,0,776,774,1,0,0,0,777,780,1,0,0,0,778,776,1,
        0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,778,1,0,0,0,781,782,5,
        115,0,0,782,786,1,0,0,0,783,784,5,114,0,0,784,786,5,115,0,0,785,
        772,1,0,0,0,785,783,1,0,0,0,786,149,1,0,0,0,787,788,7,5,0,0,788,
        789,5,111,0,0,789,790,3,154,77,0,790,151,1,0,0,0,791,792,5,1,0,0,
        792,797,3,154,77,0,793,794,5,109,0,0,794,796,3,154,77,0,795,793,
        1,0,0,0,796,799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,800,
        1,0,0,0,799,797,1,0,0,0,800,801,5,2,0,0,801,805,1,0,0,0,802,803,
        5,1,0,0,803,805,5,2,0,0,804,791,1,0,0,0,804,802,1,0,0,0,805,153,
        1,0,0,0,806,816,5,139,0,0,807,816,5,134,0,0,808,816,5,140,0,0,809,
        816,5,126,0,0,810,816,3,148,74,0,811,816,3,152,76,0,812,816,5,3,
        0,0,813,816,5,4,0,0,814,816,5,5,0,0,815,806,1,0,0,0,815,807,1,0,
        0,0,815,808,1,0,0,0,815,809,1,0,0,0,815,810,1,0,0,0,815,811,1,0,
        0,0,815,812,1,0,0,0,815,813,1,0,0,0,815,814,1,0,0,0,816,155,1,0,
        0,0,817,818,5,114,0,0,818,823,3,160,80,0,819,820,5,109,0,0,820,822,
        3,160,80,0,821,819,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,824,
        1,0,0,0,824,826,1,0,0,0,825,823,1,0,0,0,826,827,5,115,0,0,827,831,
        1,0,0,0,828,829,5,114,0,0,829,831,5,115,0,0,830,817,1,0,0,0,830,
        828,1,0,0,0,831,157,1,0,0,0,832,834,7,6,0,0,833,832,1,0,0,0,834,
        835,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,0,836,159,1,0,0,0,837,
        838,3,162,81,0,838,839,5,111,0,0,839,859,3,134,67,0,840,860,5,69,
        0,0,841,860,5,70,0,0,842,860,5,68,0,0,843,860,5,71,0,0,844,860,5,
        73,0,0,845,860,5,74,0,0,846,860,5,75,0,0,847,860,5,76,0,0,848,849,
        5,77,0,0,849,850,5,112,0,0,850,851,3,164,82,0,851,852,5,113,0,0,
        852,860,1,0,0,0,853,854,5,78,0,0,854,855,5,112,0,0,855,856,3,166,
        83,0,856,857,5,113,0,0,857,860,1,0,0,0,858,860,3,158,79,0,859,840,
        1,0,0,0,859,841,1,0,0,0,859,842,1,0,0,0,859,843,1,0,0,0,859,844,
        1,0,0,0,859,845,1,0,0,0,859,846,1,0,0,0,859,847,1,0,0,0,859,848,
        1,0,0,0,859,853,1,0,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,862,
        1,0,0,0,861,863,3,156,78,0,862,861,1,0,0,0,862,863,1,0,0,0,863,161,
        1,0,0,0,864,868,5,139,0,0,865,868,5,134,0,0,866,868,3,128,64,0,867,
        864,1,0,0,0,867,865,1,0,0,0,867,866,1,0,0,0,868,163,1,0,0,0,869,
        873,5,139,0,0,870,873,5,134,0,0,871,873,3,128,64,0,872,869,1,0,0,
        0,872,870,1,0,0,0,872,871,1,0,0,0,873,165,1,0,0,0,874,878,5,139,
        0,0,875,878,5,134,0,0,876,878,3,128,64,0,877,874,1,0,0,0,877,875,
        1,0,0,0,877,876,1,0,0,0,878,167,1,0,0,0,879,882,3,134,67,0,880,882,
        3,156,78,0,881,879,1,0,0,0,881,880,1,0,0,0,882,169,1,0,0,0,113,175,
        180,185,188,190,215,221,231,245,254,259,261,266,271,277,283,285,
        296,303,305,326,331,336,340,343,348,355,357,362,366,369,372,377,
        382,387,399,401,407,419,425,436,451,454,460,464,467,473,477,480,
        485,488,491,499,502,505,510,513,515,525,528,534,536,541,555,558,
        563,566,569,574,581,591,595,600,613,616,621,624,627,632,639,646,
        653,657,660,666,669,672,677,685,688,693,728,737,742,744,754,757,
        762,768,778,785,797,804,815,823,830,835,859,862,867,872,877,881
    ]

class MRSParser ( Parser ):

    grammarFileName = "MRS.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'['", "']'", "'true'", "'false'", "'null'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'='", "':='", "'<=>'", "'>='", "'>'", "'<='", "'<'", 
                     "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
                     "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", 
                     "'.'", "','", "';'", "':'", "'('", "')'", "'{'", "'}'", 
                     "'_'", "'->'", "'->>'", "'@'", "<INVALID>", "'@@'", 
                     "'\\N'", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<>'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "CONFIGURE_SYMBOL", "CREATE_SYMBOL", 
                      "OR_SYMBOL", "REPLACE_SYMBOL", "ALTER_SYMBOL", "SHOW_SYMBOL", 
                      "REST_SYMBOL", "METADATA_SYMBOL", "STATUS_SYMBOL", 
                      "SERVICES_SYMBOL", "SERVICE_SYMBOL", "NEW_SYMBOL", 
                      "ON_SYMBOL", "FROM_SYMBOL", "IN_SYMBOL", "SCHEMAS_SYMBOL", 
                      "SCHEMA_SYMBOL", "JSON_SYMBOL", "RELATIONAL_SYMBOL", 
                      "DUALITY_SYMBOL", "VIEWS_SYMBOL", "VIEW_SYMBOL", "PROCEDURES_SYMBOL", 
                      "PROCEDURE_SYMBOL", "PARAMETERS_SYMBOL", "RESULT_SYMBOL", 
                      "DROP_SYMBOL", "USE_SYMBOL", "AS_SYMBOL", "ENABLED_SYMBOL", 
                      "DISABLED_SYMBOL", "PROTOCOL_SYMBOL", "HTTP_SYMBOL", 
                      "HTTPS_SYMBOL", "FILTER_SYMBOL", "COMMENTS_SYMBOL", 
                      "AUTHENTICATION_SYMBOL", "REQUEST_SYMBOL", "PATH_SYMBOL", 
                      "REDIRECTION_SYMBOL", "VALIDATION_SYMBOL", "DEFAULT_SYMBOL", 
                      "USER_SYMBOL", "MANAGEMENT_SYMBOL", "OPTIONS_SYMBOL", 
                      "IF_SYMBOL", "AVAILABLE_SYMBOL", "NOT_SYMBOL", "EXISTS_SYMBOL", 
                      "REQUIRED_SYMBOL", "ITEMS_SYMBOL", "PER_SYMBOL", "PAGE_SYMBOL", 
                      "CONTENT_SYMBOL", "HOST_SYMBOL", "MEDIA_SYMBOL", "TYPE_SYMBOL", 
                      "AUTODETECT_SYMBOL", "FORMAT_SYMBOL", "FEED_SYMBOL", 
                      "ITEM_SYMBOL", "UPDATE_SYMBOL", "AT_INOUT_SYMBOL", 
                      "AT_IN_SYMBOL", "AT_OUT_SYMBOL", "AT_NOCHECK_SYMBOL", 
                      "AT_NOUPDATE_SYMBOL", "AT_SORTABLE_SYMBOL", "AT_NOFILTERING_SYMBOL", 
                      "AT_ROWOWNERSHIP_SYMBOL", "AT_UNNEST_SYMBOL", "AT_REDUCETO_SYMBOL", 
                      "AT_DATATYPE_SYMBOL", "AT_SELECT_SYMBOL", "AT_NOSELECT_SYMBOL", 
                      "AT_INSERT_SYMBOL", "AT_NOINSERT_SYMBOL", "AT_UPDATE_SYMBOL", 
                      "AT_DELETE_SYMBOL", "AT_NODELETE_SYMBOL", "EQUAL_OPERATOR", 
                      "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", 
                      "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR", 
                      "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", 
                      "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", 
                      "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                      "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", 
                      "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                      "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                      "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                      "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                      "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", 
                      "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", 
                      "NULL2_SYMBOL", "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                      "INT_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                      "INVALID_INPUT", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
                      "DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "BLOCK_COMMENT", 
                      "POUND_COMMENT", "DASHDASH_COMMENT", "JSON_STRING", 
                      "JSON_NUMBER", "WS", "NOT_EQUAL2_OPERATOR" ]

    RULE_mrsScript = 0
    RULE_mrsStatement = 1
    RULE_enabledDisabled = 2
    RULE_quotedTextOrDefault = 3
    RULE_jsonOptions = 4
    RULE_comments = 5
    RULE_authenticationRequired = 6
    RULE_itemsPerPage = 7
    RULE_itemsPerPageNumber = 8
    RULE_serviceSchemaSelector = 9
    RULE_configureRestMetadataStatement = 10
    RULE_restMetadataOptions = 11
    RULE_updateIfAvailable = 12
    RULE_createRestServiceStatement = 13
    RULE_restServiceOptions = 14
    RULE_restProtocol = 15
    RULE_restAuthentication = 16
    RULE_authPath = 17
    RULE_authRedirection = 18
    RULE_authValidation = 19
    RULE_authPageContent = 20
    RULE_userManagementSchema = 21
    RULE_createRestSchemaStatement = 22
    RULE_restSchemaOptions = 23
    RULE_createRestViewStatement = 24
    RULE_restDualityViewOptions = 25
    RULE_restViewMediaType = 26
    RULE_restViewFormat = 27
    RULE_restViewAuthenticationProcedure = 28
    RULE_createRestProcedureStatement = 29
    RULE_restProcedureResult = 30
    RULE_alterRestServiceStatement = 31
    RULE_alterRestSchemaStatement = 32
    RULE_alterRestViewStatement = 33
    RULE_alterRestProcedureStatement = 34
    RULE_dropRestServiceStatement = 35
    RULE_dropRestSchemaStatement = 36
    RULE_dropRestDualityViewStatement = 37
    RULE_dropRestProcedureStatement = 38
    RULE_useStatement = 39
    RULE_serviceAndSchemaRequestPaths = 40
    RULE_showRestMetadataStatusStatement = 41
    RULE_showRestServicesStatement = 42
    RULE_showRestSchemasStatement = 43
    RULE_showRestViewsStatement = 44
    RULE_showRestProceduresStatement = 45
    RULE_showCreateRestServiceStatement = 46
    RULE_showCreateRestSchemaStatement = 47
    RULE_showCreateRestViewStatement = 48
    RULE_showCreateRestProcedureStatement = 49
    RULE_serviceRequestPath = 50
    RULE_newServiceRequestPath = 51
    RULE_schemaName = 52
    RULE_schemaRequestPath = 53
    RULE_newSchemaRequestPath = 54
    RULE_viewName = 55
    RULE_viewRequestPath = 56
    RULE_newViewRequestPath = 57
    RULE_restObjectName = 58
    RULE_restResultName = 59
    RULE_procedureName = 60
    RULE_procedureRequestPath = 61
    RULE_newProcedureRequestPath = 62
    RULE_pureIdentifier = 63
    RULE_identifier = 64
    RULE_identifierList = 65
    RULE_identifierListWithParentheses = 66
    RULE_qualifiedIdentifier = 67
    RULE_simpleIdentifier = 68
    RULE_dotIdentifier = 69
    RULE_dottedIdentifier = 70
    RULE_hostAndPortIdentifier = 71
    RULE_requestPathIdentifier = 72
    RULE_quotedText = 73
    RULE_jsonObj = 74
    RULE_jsonPair = 75
    RULE_jsonArr = 76
    RULE_jsonValue = 77
    RULE_graphGlObj = 78
    RULE_graphGlCrudOptions = 79
    RULE_graphGlPair = 80
    RULE_graphKeyValue = 81
    RULE_graphGlReduceToValue = 82
    RULE_graphGlDatatypeValue = 83
    RULE_graphGlValue = 84

    ruleNames =  [ "mrsScript", "mrsStatement", "enabledDisabled", "quotedTextOrDefault", 
                   "jsonOptions", "comments", "authenticationRequired", 
                   "itemsPerPage", "itemsPerPageNumber", "serviceSchemaSelector", 
                   "configureRestMetadataStatement", "restMetadataOptions", 
                   "updateIfAvailable", "createRestServiceStatement", "restServiceOptions", 
                   "restProtocol", "restAuthentication", "authPath", "authRedirection", 
                   "authValidation", "authPageContent", "userManagementSchema", 
                   "createRestSchemaStatement", "restSchemaOptions", "createRestViewStatement", 
                   "restDualityViewOptions", "restViewMediaType", "restViewFormat", 
                   "restViewAuthenticationProcedure", "createRestProcedureStatement", 
                   "restProcedureResult", "alterRestServiceStatement", "alterRestSchemaStatement", 
                   "alterRestViewStatement", "alterRestProcedureStatement", 
                   "dropRestServiceStatement", "dropRestSchemaStatement", 
                   "dropRestDualityViewStatement", "dropRestProcedureStatement", 
                   "useStatement", "serviceAndSchemaRequestPaths", "showRestMetadataStatusStatement", 
                   "showRestServicesStatement", "showRestSchemasStatement", 
                   "showRestViewsStatement", "showRestProceduresStatement", 
                   "showCreateRestServiceStatement", "showCreateRestSchemaStatement", 
                   "showCreateRestViewStatement", "showCreateRestProcedureStatement", 
                   "serviceRequestPath", "newServiceRequestPath", "schemaName", 
                   "schemaRequestPath", "newSchemaRequestPath", "viewName", 
                   "viewRequestPath", "newViewRequestPath", "restObjectName", 
                   "restResultName", "procedureName", "procedureRequestPath", 
                   "newProcedureRequestPath", "pureIdentifier", "identifier", 
                   "identifierList", "identifierListWithParentheses", "qualifiedIdentifier", 
                   "simpleIdentifier", "dotIdentifier", "dottedIdentifier", 
                   "hostAndPortIdentifier", "requestPathIdentifier", "quotedText", 
                   "jsonObj", "jsonPair", "jsonArr", "jsonValue", "graphGlObj", 
                   "graphGlCrudOptions", "graphGlPair", "graphKeyValue", 
                   "graphGlReduceToValue", "graphGlDatatypeValue", "graphGlValue" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    CONFIGURE_SYMBOL=6
    CREATE_SYMBOL=7
    OR_SYMBOL=8
    REPLACE_SYMBOL=9
    ALTER_SYMBOL=10
    SHOW_SYMBOL=11
    REST_SYMBOL=12
    METADATA_SYMBOL=13
    STATUS_SYMBOL=14
    SERVICES_SYMBOL=15
    SERVICE_SYMBOL=16
    NEW_SYMBOL=17
    ON_SYMBOL=18
    FROM_SYMBOL=19
    IN_SYMBOL=20
    SCHEMAS_SYMBOL=21
    SCHEMA_SYMBOL=22
    JSON_SYMBOL=23
    RELATIONAL_SYMBOL=24
    DUALITY_SYMBOL=25
    VIEWS_SYMBOL=26
    VIEW_SYMBOL=27
    PROCEDURES_SYMBOL=28
    PROCEDURE_SYMBOL=29
    PARAMETERS_SYMBOL=30
    RESULT_SYMBOL=31
    DROP_SYMBOL=32
    USE_SYMBOL=33
    AS_SYMBOL=34
    ENABLED_SYMBOL=35
    DISABLED_SYMBOL=36
    PROTOCOL_SYMBOL=37
    HTTP_SYMBOL=38
    HTTPS_SYMBOL=39
    FILTER_SYMBOL=40
    COMMENTS_SYMBOL=41
    AUTHENTICATION_SYMBOL=42
    REQUEST_SYMBOL=43
    PATH_SYMBOL=44
    REDIRECTION_SYMBOL=45
    VALIDATION_SYMBOL=46
    DEFAULT_SYMBOL=47
    USER_SYMBOL=48
    MANAGEMENT_SYMBOL=49
    OPTIONS_SYMBOL=50
    IF_SYMBOL=51
    AVAILABLE_SYMBOL=52
    NOT_SYMBOL=53
    EXISTS_SYMBOL=54
    REQUIRED_SYMBOL=55
    ITEMS_SYMBOL=56
    PER_SYMBOL=57
    PAGE_SYMBOL=58
    CONTENT_SYMBOL=59
    HOST_SYMBOL=60
    MEDIA_SYMBOL=61
    TYPE_SYMBOL=62
    AUTODETECT_SYMBOL=63
    FORMAT_SYMBOL=64
    FEED_SYMBOL=65
    ITEM_SYMBOL=66
    UPDATE_SYMBOL=67
    AT_INOUT_SYMBOL=68
    AT_IN_SYMBOL=69
    AT_OUT_SYMBOL=70
    AT_NOCHECK_SYMBOL=71
    AT_NOUPDATE_SYMBOL=72
    AT_SORTABLE_SYMBOL=73
    AT_NOFILTERING_SYMBOL=74
    AT_ROWOWNERSHIP_SYMBOL=75
    AT_UNNEST_SYMBOL=76
    AT_REDUCETO_SYMBOL=77
    AT_DATATYPE_SYMBOL=78
    AT_SELECT_SYMBOL=79
    AT_NOSELECT_SYMBOL=80
    AT_INSERT_SYMBOL=81
    AT_NOINSERT_SYMBOL=82
    AT_UPDATE_SYMBOL=83
    AT_DELETE_SYMBOL=84
    AT_NODELETE_SYMBOL=85
    EQUAL_OPERATOR=86
    ASSIGN_OPERATOR=87
    NULL_SAFE_EQUAL_OPERATOR=88
    GREATER_OR_EQUAL_OPERATOR=89
    GREATER_THAN_OPERATOR=90
    LESS_OR_EQUAL_OPERATOR=91
    LESS_THAN_OPERATOR=92
    NOT_EQUAL_OPERATOR=93
    PLUS_OPERATOR=94
    MINUS_OPERATOR=95
    MULT_OPERATOR=96
    DIV_OPERATOR=97
    MOD_OPERATOR=98
    LOGICAL_NOT_OPERATOR=99
    BITWISE_NOT_OPERATOR=100
    SHIFT_LEFT_OPERATOR=101
    SHIFT_RIGHT_OPERATOR=102
    LOGICAL_AND_OPERATOR=103
    BITWISE_AND_OPERATOR=104
    BITWISE_XOR_OPERATOR=105
    LOGICAL_OR_OPERATOR=106
    BITWISE_OR_OPERATOR=107
    DOT_SYMBOL=108
    COMMA_SYMBOL=109
    SEMICOLON_SYMBOL=110
    COLON_SYMBOL=111
    OPEN_PAR_SYMBOL=112
    CLOSE_PAR_SYMBOL=113
    OPEN_CURLY_SYMBOL=114
    CLOSE_CURLY_SYMBOL=115
    UNDERLINE_SYMBOL=116
    JSON_SEPARATOR_SYMBOL=117
    JSON_UNQUOTED_SEPARATOR_SYMBOL=118
    AT_SIGN_SYMBOL=119
    AT_TEXT_SUFFIX=120
    AT_AT_SIGN_SYMBOL=121
    NULL2_SYMBOL=122
    PARAM_MARKER=123
    HEX_NUMBER=124
    BIN_NUMBER=125
    INT_NUMBER=126
    DECIMAL_NUMBER=127
    FLOAT_NUMBER=128
    WHITESPACE=129
    INVALID_INPUT=130
    IDENTIFIER=131
    NCHAR_TEXT=132
    BACK_TICK_QUOTED_ID=133
    DOUBLE_QUOTED_TEXT=134
    SINGLE_QUOTED_TEXT=135
    BLOCK_COMMENT=136
    POUND_COMMENT=137
    DASHDASH_COMMENT=138
    JSON_STRING=139
    JSON_NUMBER=140
    WS=141
    NOT_EQUAL2_OPERATOR=142

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class MrsScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MRSParser.EOF, 0)

        def mrsStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.MrsStatementContext)
            else:
                return self.getTypedRuleContext(MRSParser.MrsStatementContext,i)


        def SEMICOLON_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.SEMICOLON_SYMBOL)
            else:
                return self.getToken(MRSParser.SEMICOLON_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_mrsScript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsScript" ):
                listener.enterMrsScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsScript" ):
                listener.exitMrsScript(self)




    def mrsScript(self):

        localctx = MRSParser.MrsScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_mrsScript)
        self._la = 0 # Token type
        try:
            self.state = 190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [-1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.match(MRSParser.EOF)
                pass
            elif token in [6, 7, 10, 11, 32, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self.mrsStatement()
                self.state = 180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 173 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 172
                            self.match(MRSParser.SEMICOLON_SYMBOL)
                            self.state = 175 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==110):
                                break

                        self.state = 177
                        self.mrsStatement() 
                    self.state = 182
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                self.state = 188
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [110]:
                    self.state = 183
                    self.match(MRSParser.SEMICOLON_SYMBOL)
                    self.state = 185
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 184
                        self.match(MRSParser.EOF)


                    pass
                elif token in [-1]:
                    self.state = 187
                    self.match(MRSParser.EOF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MrsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def configureRestMetadataStatement(self):
            return self.getTypedRuleContext(MRSParser.ConfigureRestMetadataStatementContext,0)


        def createRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestServiceStatementContext,0)


        def createRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestSchemaStatementContext,0)


        def createRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestViewStatementContext,0)


        def createRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.CreateRestProcedureStatementContext,0)


        def alterRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestServiceStatementContext,0)


        def alterRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestSchemaStatementContext,0)


        def alterRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestViewStatementContext,0)


        def alterRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.AlterRestProcedureStatementContext,0)


        def dropRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestServiceStatementContext,0)


        def dropRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestSchemaStatementContext,0)


        def dropRestDualityViewStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestDualityViewStatementContext,0)


        def dropRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.DropRestProcedureStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MRSParser.UseStatementContext,0)


        def showRestMetadataStatusStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestMetadataStatusStatementContext,0)


        def showRestServicesStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestServicesStatementContext,0)


        def showRestSchemasStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestSchemasStatementContext,0)


        def showRestViewsStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestViewsStatementContext,0)


        def showRestProceduresStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowRestProceduresStatementContext,0)


        def showCreateRestServiceStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestServiceStatementContext,0)


        def showCreateRestSchemaStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestSchemaStatementContext,0)


        def showCreateRestViewStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestViewStatementContext,0)


        def showCreateRestProcedureStatement(self):
            return self.getTypedRuleContext(MRSParser.ShowCreateRestProcedureStatementContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_mrsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMrsStatement" ):
                listener.enterMrsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMrsStatement" ):
                listener.exitMrsStatement(self)




    def mrsStatement(self):

        localctx = MRSParser.MrsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_mrsStatement)
        try:
            self.state = 215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.configureRestMetadataStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.createRestServiceStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 194
                self.createRestSchemaStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 195
                self.createRestViewStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 196
                self.createRestProcedureStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 197
                self.alterRestServiceStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 198
                self.alterRestSchemaStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 199
                self.alterRestViewStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 200
                self.alterRestProcedureStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 201
                self.dropRestServiceStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 202
                self.dropRestSchemaStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 203
                self.dropRestDualityViewStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 204
                self.dropRestProcedureStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 205
                self.useStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 206
                self.showRestMetadataStatusStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 207
                self.showRestServicesStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 208
                self.showRestSchemasStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 209
                self.showRestViewsStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 210
                self.showRestProceduresStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 211
                self.showCreateRestServiceStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 212
                self.showCreateRestSchemaStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 213
                self.showCreateRestViewStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 214
                self.showCreateRestProcedureStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnabledDisabledContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLED_SYMBOL(self):
            return self.getToken(MRSParser.ENABLED_SYMBOL, 0)

        def DISABLED_SYMBOL(self):
            return self.getToken(MRSParser.DISABLED_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_enabledDisabled

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnabledDisabled" ):
                listener.enterEnabledDisabled(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnabledDisabled" ):
                listener.exitEnabledDisabled(self)




    def enabledDisabled(self):

        localctx = MRSParser.EnabledDisabledContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_enabledDisabled)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            _la = self._input.LA(1)
            if not(_la==35 or _la==36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedTextOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedTextOrDefault" ):
                listener.enterQuotedTextOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedTextOrDefault" ):
                listener.exitQuotedTextOrDefault(self)




    def quotedTextOrDefault(self):

        localctx = MRSParser.QuotedTextOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_quotedTextOrDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134, 135]:
                self.state = 219
                self.quotedText()
                pass
            elif token in [47]:
                self.state = 220
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTIONS_SYMBOL(self):
            return self.getToken(MRSParser.OPTIONS_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOptions" ):
                listener.enterJsonOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOptions" ):
                listener.exitJsonOptions(self)




    def jsonOptions(self):

        localctx = MRSParser.JsonOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_jsonOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(MRSParser.OPTIONS_SYMBOL)
            self.state = 224
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENTS_SYMBOL(self):
            return self.getToken(MRSParser.COMMENTS_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = MRSParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(MRSParser.COMMENTS_SYMBOL)
            self.state = 227
            self.quotedText()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRequiredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def REQUIRED_SYMBOL(self):
            return self.getToken(MRSParser.REQUIRED_SYMBOL, 0)

        def NOT_SYMBOL(self):
            return self.getToken(MRSParser.NOT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_authenticationRequired

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthenticationRequired" ):
                listener.enterAuthenticationRequired(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthenticationRequired" ):
                listener.exitAuthenticationRequired(self)




    def authenticationRequired(self):

        localctx = MRSParser.AuthenticationRequiredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_authenticationRequired)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 230
                self.match(MRSParser.NOT_SYMBOL)


            self.state = 233
            self.match(MRSParser.REQUIRED_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITEMS_SYMBOL(self):
            return self.getToken(MRSParser.ITEMS_SYMBOL, 0)

        def PER_SYMBOL(self):
            return self.getToken(MRSParser.PER_SYMBOL, 0)

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def itemsPerPageNumber(self):
            return self.getTypedRuleContext(MRSParser.ItemsPerPageNumberContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPage" ):
                listener.enterItemsPerPage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPage" ):
                listener.exitItemsPerPage(self)




    def itemsPerPage(self):

        localctx = MRSParser.ItemsPerPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_itemsPerPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(MRSParser.ITEMS_SYMBOL)
            self.state = 236
            self.match(MRSParser.PER_SYMBOL)
            self.state = 237
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 238
            self.itemsPerPageNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ItemsPerPageNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_itemsPerPageNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItemsPerPageNumber" ):
                listener.enterItemsPerPageNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItemsPerPageNumber" ):
                listener.exitItemsPerPageNumber(self)




    def itemsPerPageNumber(self):

        localctx = MRSParser.ItemsPerPageNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_itemsPerPageNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(MRSParser.INT_NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceSchemaSelectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceSchemaSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceSchemaSelector" ):
                listener.enterServiceSchemaSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceSchemaSelector" ):
                listener.exitServiceSchemaSelector(self)




    def serviceSchemaSelector(self):

        localctx = MRSParser.ServiceSchemaSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_serviceSchemaSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(MRSParser.ON_SYMBOL)
            self.state = 245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 243
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 244
                self.serviceRequestPath()


            self.state = 247
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 248
            self.schemaRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConfigureRestMetadataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURE_SYMBOL(self):
            return self.getToken(MRSParser.CONFIGURE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def restMetadataOptions(self):
            return self.getTypedRuleContext(MRSParser.RestMetadataOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_configureRestMetadataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConfigureRestMetadataStatement" ):
                listener.enterConfigureRestMetadataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConfigureRestMetadataStatement" ):
                listener.exitConfigureRestMetadataStatement(self)




    def configureRestMetadataStatement(self):

        localctx = MRSParser.ConfigureRestMetadataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_configureRestMetadataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(MRSParser.CONFIGURE_SYMBOL)
            self.state = 251
            self.match(MRSParser.REST_SYMBOL)
            self.state = 252
            self.match(MRSParser.METADATA_SYMBOL)
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 4295000067) != 0):
                self.state = 253
                self.restMetadataOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestMetadataOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def updateIfAvailable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.UpdateIfAvailableContext)
            else:
                return self.getTypedRuleContext(MRSParser.UpdateIfAvailableContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restMetadataOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestMetadataOptions" ):
                listener.enterRestMetadataOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestMetadataOptions" ):
                listener.exitRestMetadataOptions(self)




    def restMetadataOptions(self):

        localctx = MRSParser.RestMetadataOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_restMetadataOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35, 36]:
                    self.state = 256
                    self.enabledDisabled()
                    pass
                elif token in [50]:
                    self.state = 257
                    self.jsonOptions()
                    pass
                elif token in [67]:
                    self.state = 258
                    self.updateIfAvailable()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 261 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 4295000067) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateIfAvailableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_SYMBOL(self):
            return self.getToken(MRSParser.UPDATE_SYMBOL, 0)

        def IF_SYMBOL(self):
            return self.getToken(MRSParser.IF_SYMBOL, 0)

        def AVAILABLE_SYMBOL(self):
            return self.getToken(MRSParser.AVAILABLE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_updateIfAvailable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateIfAvailable" ):
                listener.enterUpdateIfAvailable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateIfAvailable" ):
                listener.exitUpdateIfAvailable(self)




    def updateIfAvailable(self):

        localctx = MRSParser.UpdateIfAvailableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_updateIfAvailable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(MRSParser.UPDATE_SYMBOL)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 264
                self.match(MRSParser.IF_SYMBOL)
                self.state = 265
                self.match(MRSParser.AVAILABLE_SYMBOL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestServiceStatement" ):
                listener.enterCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestServiceStatement" ):
                listener.exitCreateRestServiceStatement(self)




    def createRestServiceStatement(self):

        localctx = MRSParser.CreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 269
                self.match(MRSParser.OR_SYMBOL)
                self.state = 270
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 273
            self.match(MRSParser.REST_SYMBOL)
            self.state = 274
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 275
            self.serviceRequestPath()
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1132600055824384) != 0):
                self.state = 276
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestServiceOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def restAuthentication(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestAuthenticationContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestAuthenticationContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restServiceOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestServiceOptions" ):
                listener.enterRestServiceOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestServiceOptions" ):
                listener.exitRestServiceOptions(self)




    def restServiceOptions(self):

        localctx = MRSParser.RestServiceOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_restServiceOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 283
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35, 36]:
                    self.state = 279
                    self.enabledDisabled()
                    pass
                elif token in [42]:
                    self.state = 280
                    self.restAuthentication()
                    pass
                elif token in [50]:
                    self.state = 281
                    self.jsonOptions()
                    pass
                elif token in [41]:
                    self.state = 282
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 285 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1132600055824384) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProtocolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROTOCOL_SYMBOL(self):
            return self.getToken(MRSParser.PROTOCOL_SYMBOL, 0)

        def HTTP_SYMBOL(self):
            return self.getToken(MRSParser.HTTP_SYMBOL, 0)

        def HTTPS_SYMBOL(self):
            return self.getToken(MRSParser.HTTPS_SYMBOL, 0)

        def COMMA_SYMBOL(self):
            return self.getToken(MRSParser.COMMA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restProtocol

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProtocol" ):
                listener.enterRestProtocol(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProtocol" ):
                listener.exitRestProtocol(self)




    def restProtocol(self):

        localctx = MRSParser.RestProtocolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_restProtocol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(MRSParser.PROTOCOL_SYMBOL)
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 288
                self.match(MRSParser.HTTP_SYMBOL)
                pass

            elif la_ == 2:
                self.state = 289
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 3:
                self.state = 290
                self.match(MRSParser.HTTP_SYMBOL)
                self.state = 291
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 292
                self.match(MRSParser.HTTPS_SYMBOL)
                pass

            elif la_ == 4:
                self.state = 293
                self.match(MRSParser.HTTPS_SYMBOL)
                self.state = 294
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 295
                self.match(MRSParser.HTTP_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestAuthenticationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def authPath(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPathContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPathContext,i)


        def authRedirection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthRedirectionContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthRedirectionContext,i)


        def authValidation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthValidationContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthValidationContext,i)


        def authPageContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthPageContentContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthPageContentContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restAuthentication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestAuthentication" ):
                listener.enterRestAuthentication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestAuthentication" ):
                listener.exitRestAuthentication(self)




    def restAuthentication(self):

        localctx = MRSParser.RestAuthenticationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_restAuthentication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 288353521454022656) != 0):
                self.state = 303
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [44]:
                    self.state = 299
                    self.authPath()
                    pass
                elif token in [45]:
                    self.state = 300
                    self.authRedirection()
                    pass
                elif token in [46]:
                    self.state = 301
                    self.authValidation()
                    pass
                elif token in [58]:
                    self.state = 302
                    self.authPageContent()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPath" ):
                listener.enterAuthPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPath" ):
                listener.exitAuthPath(self)




    def authPath(self):

        localctx = MRSParser.AuthPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_authPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(MRSParser.PATH_SYMBOL)
            self.state = 309
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthRedirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REDIRECTION_SYMBOL(self):
            return self.getToken(MRSParser.REDIRECTION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authRedirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthRedirection" ):
                listener.enterAuthRedirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthRedirection" ):
                listener.exitAuthRedirection(self)




    def authRedirection(self):

        localctx = MRSParser.AuthRedirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_authRedirection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(MRSParser.REDIRECTION_SYMBOL)
            self.state = 312
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthValidationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALIDATION_SYMBOL(self):
            return self.getToken(MRSParser.VALIDATION_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authValidation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthValidation" ):
                listener.enterAuthValidation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthValidation" ):
                listener.exitAuthValidation(self)




    def authValidation(self):

        localctx = MRSParser.AuthValidationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_authValidation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(MRSParser.VALIDATION_SYMBOL)
            self.state = 315
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPageContentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAGE_SYMBOL(self):
            return self.getToken(MRSParser.PAGE_SYMBOL, 0)

        def CONTENT_SYMBOL(self):
            return self.getToken(MRSParser.CONTENT_SYMBOL, 0)

        def quotedTextOrDefault(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextOrDefaultContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_authPageContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPageContent" ):
                listener.enterAuthPageContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPageContent" ):
                listener.exitAuthPageContent(self)




    def authPageContent(self):

        localctx = MRSParser.AuthPageContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_authPageContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(MRSParser.PAGE_SYMBOL)
            self.state = 318
            self.match(MRSParser.CONTENT_SYMBOL)
            self.state = 319
            self.quotedTextOrDefault()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserManagementSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_SYMBOL(self):
            return self.getToken(MRSParser.USER_SYMBOL, 0)

        def MANAGEMENT_SYMBOL(self):
            return self.getToken(MRSParser.MANAGEMENT_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def DEFAULT_SYMBOL(self):
            return self.getToken(MRSParser.DEFAULT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_userManagementSchema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserManagementSchema" ):
                listener.enterUserManagementSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserManagementSchema" ):
                listener.exitUserManagementSchema(self)




    def userManagementSchema(self):

        localctx = MRSParser.UserManagementSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_userManagementSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(MRSParser.USER_SYMBOL)
            self.state = 322
            self.match(MRSParser.MANAGEMENT_SYMBOL)
            self.state = 323
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131, 133]:
                self.state = 324
                self.schemaName()
                pass
            elif token in [47]:
                self.state = 325
                self.match(MRSParser.DEFAULT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_createRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestSchemaStatement" ):
                listener.enterCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestSchemaStatement" ):
                listener.exitCreateRestSchemaStatement(self)




    def createRestSchemaStatement(self):

        localctx = MRSParser.CreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 328
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 329
                self.match(MRSParser.OR_SYMBOL)
                self.state = 330
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 333
            self.match(MRSParser.REST_SYMBOL)
            self.state = 334
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 335
                self.schemaRequestPath()


            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 338
                self.match(MRSParser.ON_SYMBOL)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 339
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 342
                self.serviceRequestPath()


            self.state = 345
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 346
            self.schemaName()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 73190194093752320) != 0):
                self.state = 347
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestSchemaOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restSchemaOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestSchemaOptions" ):
                listener.enterRestSchemaOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestSchemaOptions" ):
                listener.exitRestSchemaOptions(self)




    def restSchemaOptions(self):

        localctx = MRSParser.RestSchemaOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_restSchemaOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 355
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [35, 36]:
                    self.state = 350
                    self.enabledDisabled()
                    pass
                elif token in [42]:
                    self.state = 351
                    self.authenticationRequired()
                    pass
                elif token in [56]:
                    self.state = 352
                    self.itemsPerPage()
                    pass
                elif token in [50]:
                    self.state = 353
                    self.jsonOptions()
                    pass
                elif token in [41]:
                    self.state = 354
                    self.comments()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 357 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 73190194093752320) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restDualityViewOptions(self):
            return self.getTypedRuleContext(MRSParser.RestDualityViewOptionsContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestViewStatement" ):
                listener.enterCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestViewStatement" ):
                listener.exitCreateRestViewStatement(self)




    def createRestViewStatement(self):

        localctx = MRSParser.CreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 360
                self.match(MRSParser.OR_SYMBOL)
                self.state = 361
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 364
            self.match(MRSParser.REST_SYMBOL)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 365
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 368
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 371
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 374
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 375
            self.viewRequestPath()
            self.state = 377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 376
                self.serviceSchemaSelector()


            self.state = 379
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 380
            self.qualifiedIdentifier()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 606109891) != 0):
                self.state = 381
                self.restDualityViewOptions()


            self.state = 384
            self.match(MRSParser.AS_SYMBOL)
            self.state = 385
            self.restObjectName()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0):
                self.state = 386
                self.graphGlCrudOptions()


            self.state = 389
            self.graphGlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestDualityViewOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enabledDisabled(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.EnabledDisabledContext)
            else:
                return self.getTypedRuleContext(MRSParser.EnabledDisabledContext,i)


        def authenticationRequired(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.AuthenticationRequiredContext)
            else:
                return self.getTypedRuleContext(MRSParser.AuthenticationRequiredContext,i)


        def itemsPerPage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.ItemsPerPageContext)
            else:
                return self.getTypedRuleContext(MRSParser.ItemsPerPageContext,i)


        def jsonOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonOptionsContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonOptionsContext,i)


        def comments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.CommentsContext)
            else:
                return self.getTypedRuleContext(MRSParser.CommentsContext,i)


        def restViewMediaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewMediaTypeContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewMediaTypeContext,i)


        def restViewFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewFormatContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewFormatContext,i)


        def restViewAuthenticationProcedure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestViewAuthenticationProcedureContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestViewAuthenticationProcedureContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_restDualityViewOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestDualityViewOptions" ):
                listener.enterRestDualityViewOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestDualityViewOptions" ):
                listener.exitRestDualityViewOptions(self)




    def restDualityViewOptions(self):

        localctx = MRSParser.RestDualityViewOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_restDualityViewOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 399
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 391
                    self.enabledDisabled()
                    pass

                elif la_ == 2:
                    self.state = 392
                    self.authenticationRequired()
                    pass

                elif la_ == 3:
                    self.state = 393
                    self.itemsPerPage()
                    pass

                elif la_ == 4:
                    self.state = 394
                    self.jsonOptions()
                    pass

                elif la_ == 5:
                    self.state = 395
                    self.comments()
                    pass

                elif la_ == 6:
                    self.state = 396
                    self.restViewMediaType()
                    pass

                elif la_ == 7:
                    self.state = 397
                    self.restViewFormat()
                    pass

                elif la_ == 8:
                    self.state = 398
                    self.restViewAuthenticationProcedure()
                    pass


                self.state = 401 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 606109891) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewMediaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def TYPE_SYMBOL(self):
            return self.getToken(MRSParser.TYPE_SYMBOL, 0)

        def quotedText(self):
            return self.getTypedRuleContext(MRSParser.QuotedTextContext,0)


        def AUTODETECT_SYMBOL(self):
            return self.getToken(MRSParser.AUTODETECT_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewMediaType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewMediaType" ):
                listener.enterRestViewMediaType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewMediaType" ):
                listener.exitRestViewMediaType(self)




    def restViewMediaType(self):

        localctx = MRSParser.RestViewMediaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restViewMediaType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(MRSParser.MEDIA_SYMBOL)
            self.state = 404
            self.match(MRSParser.TYPE_SYMBOL)
            self.state = 407
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134, 135]:
                self.state = 405
                self.quotedText()
                pass
            elif token in [63]:
                self.state = 406
                self.match(MRSParser.AUTODETECT_SYMBOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT_SYMBOL(self):
            return self.getToken(MRSParser.FORMAT_SYMBOL, 0)

        def FEED_SYMBOL(self):
            return self.getToken(MRSParser.FEED_SYMBOL, 0)

        def ITEM_SYMBOL(self):
            return self.getToken(MRSParser.ITEM_SYMBOL, 0)

        def MEDIA_SYMBOL(self):
            return self.getToken(MRSParser.MEDIA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_restViewFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewFormat" ):
                listener.enterRestViewFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewFormat" ):
                listener.exitRestViewFormat(self)




    def restViewFormat(self):

        localctx = MRSParser.RestViewFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_restViewFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(MRSParser.FORMAT_SYMBOL)
            self.state = 410
            _la = self._input.LA(1)
            if not(((((_la - 61)) & ~0x3f) == 0 and ((1 << (_la - 61)) & 49) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestViewAuthenticationProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTHENTICATION_SYMBOL(self):
            return self.getToken(MRSParser.AUTHENTICATION_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restViewAuthenticationProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestViewAuthenticationProcedure" ):
                listener.enterRestViewAuthenticationProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestViewAuthenticationProcedure" ):
                listener.exitRestViewAuthenticationProcedure(self)




    def restViewAuthenticationProcedure(self):

        localctx = MRSParser.RestViewAuthenticationProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restViewAuthenticationProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(MRSParser.AUTHENTICATION_SYMBOL)
            self.state = 413
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 414
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def OR_SYMBOL(self):
            return self.getToken(MRSParser.OR_SYMBOL, 0)

        def REPLACE_SYMBOL(self):
            return self.getToken(MRSParser.REPLACE_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_createRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRestProcedureStatement" ):
                listener.enterCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRestProcedureStatement" ):
                listener.exitCreateRestProcedureStatement(self)




    def createRestProcedureStatement(self):

        localctx = MRSParser.CreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 417
                self.match(MRSParser.OR_SYMBOL)
                self.state = 418
                self.match(MRSParser.REPLACE_SYMBOL)


            self.state = 421
            self.match(MRSParser.REST_SYMBOL)
            self.state = 422
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 423
            self.procedureRequestPath()
            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 424
                self.serviceSchemaSelector()


            self.state = 427
            self.match(MRSParser.FROM_SYMBOL)
            self.state = 428
            self.qualifiedIdentifier()
            self.state = 429
            self.match(MRSParser.AS_SYMBOL)
            self.state = 430
            self.restObjectName()
            self.state = 431
            self.match(MRSParser.PARAMETERS_SYMBOL)
            self.state = 432
            self.graphGlObj()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==31:
                self.state = 433
                self.restProcedureResult()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestProcedureResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESULT_SYMBOL(self):
            return self.getToken(MRSParser.RESULT_SYMBOL, 0)

        def restResultName(self):
            return self.getTypedRuleContext(MRSParser.RestResultNameContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restProcedureResult

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestProcedureResult" ):
                listener.enterRestProcedureResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestProcedureResult" ):
                listener.exitRestProcedureResult(self)




    def restProcedureResult(self):

        localctx = MRSParser.RestProcedureResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_restProcedureResult)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.match(MRSParser.RESULT_SYMBOL)
            self.state = 440
            self.restResultName()
            self.state = 441
            self.graphGlObj()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newServiceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewServiceRequestPathContext,0)


        def restServiceOptions(self):
            return self.getTypedRuleContext(MRSParser.RestServiceOptionsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestServiceStatement" ):
                listener.enterAlterRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestServiceStatement" ):
                listener.exitAlterRestServiceStatement(self)




    def alterRestServiceStatement(self):

        localctx = MRSParser.AlterRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alterRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 444
            self.match(MRSParser.REST_SYMBOL)
            self.state = 445
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 446
            self.serviceRequestPath()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 447
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 448
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 449
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 450
                self.newServiceRequestPath()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1132600055824384) != 0):
                self.state = 453
                self.restServiceOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newSchemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewSchemaRequestPathContext,0)


        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def schemaName(self):
            return self.getTypedRuleContext(MRSParser.SchemaNameContext,0)


        def restSchemaOptions(self):
            return self.getTypedRuleContext(MRSParser.RestSchemaOptionsContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_alterRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestSchemaStatement" ):
                listener.enterAlterRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestSchemaStatement" ):
                listener.exitAlterRestSchemaStatement(self)




    def alterRestSchemaStatement(self):

        localctx = MRSParser.AlterRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alterRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 457
            self.match(MRSParser.REST_SYMBOL)
            self.state = 458
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 459
                self.schemaRequestPath()


            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 462
                self.match(MRSParser.ON_SYMBOL)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 463
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 466
                self.serviceRequestPath()


            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 469
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 470
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 471
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 472
                self.newSchemaRequestPath()


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 475
                self.match(MRSParser.FROM_SYMBOL)
                self.state = 476
                self.schemaName()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 73190194093752320) != 0):
                self.state = 479
                self.restSchemaOptions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newViewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewViewRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def restDualityViewOptions(self):
            return self.getTypedRuleContext(MRSParser.RestDualityViewOptionsContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestViewStatement" ):
                listener.enterAlterRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestViewStatement" ):
                listener.exitAlterRestViewStatement(self)




    def alterRestViewStatement(self):

        localctx = MRSParser.AlterRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_alterRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 483
            self.match(MRSParser.REST_SYMBOL)
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 484
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 487
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 490
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 493
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 494
            self.viewRequestPath()
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 495
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 496
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 497
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 498
                self.newViewRequestPath()


            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 501
                self.serviceSchemaSelector()


            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & 606109891) != 0):
                self.state = 504
                self.restDualityViewOptions()


            self.state = 515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 507
                self.match(MRSParser.AS_SYMBOL)
                self.state = 508
                self.restObjectName()
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0):
                    self.state = 509
                    self.graphGlCrudOptions()


                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==114:
                    self.state = 512
                    self.graphGlObj()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER_SYMBOL(self):
            return self.getToken(MRSParser.ALTER_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def NEW_SYMBOL(self):
            return self.getToken(MRSParser.NEW_SYMBOL, 0)

        def REQUEST_SYMBOL(self):
            return self.getToken(MRSParser.REQUEST_SYMBOL, 0)

        def PATH_SYMBOL(self):
            return self.getToken(MRSParser.PATH_SYMBOL, 0)

        def newProcedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.NewProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def AS_SYMBOL(self):
            return self.getToken(MRSParser.AS_SYMBOL, 0)

        def restObjectName(self):
            return self.getTypedRuleContext(MRSParser.RestObjectNameContext,0)


        def restProcedureResult(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.RestProcedureResultContext)
            else:
                return self.getTypedRuleContext(MRSParser.RestProcedureResultContext,i)


        def PARAMETERS_SYMBOL(self):
            return self.getToken(MRSParser.PARAMETERS_SYMBOL, 0)

        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_alterRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRestProcedureStatement" ):
                listener.enterAlterRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRestProcedureStatement" ):
                listener.exitAlterRestProcedureStatement(self)




    def alterRestProcedureStatement(self):

        localctx = MRSParser.AlterRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alterRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(MRSParser.ALTER_SYMBOL)
            self.state = 518
            self.match(MRSParser.REST_SYMBOL)
            self.state = 519
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 520
            self.procedureRequestPath()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 521
                self.match(MRSParser.NEW_SYMBOL)
                self.state = 522
                self.match(MRSParser.REQUEST_SYMBOL)
                self.state = 523
                self.match(MRSParser.PATH_SYMBOL)
                self.state = 524
                self.newProcedureRequestPath()


            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 527
                self.serviceSchemaSelector()


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 530
                self.match(MRSParser.AS_SYMBOL)
                self.state = 531
                self.restObjectName()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 532
                    self.match(MRSParser.PARAMETERS_SYMBOL)
                    self.state = 533
                    self.graphGlObj()




            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==31:
                self.state = 538
                self.restProcedureResult()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestServiceStatement" ):
                listener.enterDropRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestServiceStatement" ):
                listener.exitDropRestServiceStatement(self)




    def dropRestServiceStatement(self):

        localctx = MRSParser.DropRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dropRestServiceStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 545
            self.match(MRSParser.REST_SYMBOL)
            self.state = 546
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 547
            self.serviceRequestPath()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def ON_SYMBOL(self):
            return self.getToken(MRSParser.ON_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_dropRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestSchemaStatement" ):
                listener.enterDropRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestSchemaStatement" ):
                listener.exitDropRestSchemaStatement(self)




    def dropRestSchemaStatement(self):

        localctx = MRSParser.DropRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_dropRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 550
            self.match(MRSParser.REST_SYMBOL)
            self.state = 551
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 552
            self.schemaRequestPath()
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 553
                self.match(MRSParser.ON_SYMBOL)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 554
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 557
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestDualityViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestDualityViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestDualityViewStatement" ):
                listener.enterDropRestDualityViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestDualityViewStatement" ):
                listener.exitDropRestDualityViewStatement(self)




    def dropRestDualityViewStatement(self):

        localctx = MRSParser.DropRestDualityViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_dropRestDualityViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 561
            self.match(MRSParser.REST_SYMBOL)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 562
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 565
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 568
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 571
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 572
            self.viewRequestPath()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 573
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP_SYMBOL(self):
            return self.getToken(MRSParser.DROP_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dropRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRestProcedureStatement" ):
                listener.enterDropRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRestProcedureStatement" ):
                listener.exitDropRestProcedureStatement(self)




    def dropRestProcedureStatement(self):

        localctx = MRSParser.DropRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_dropRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(MRSParser.DROP_SYMBOL)
            self.state = 577
            self.match(MRSParser.REST_SYMBOL)
            self.state = 578
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 579
            self.procedureRequestPath()
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 580
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE_SYMBOL(self):
            return self.getToken(MRSParser.USE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MRSParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(MRSParser.USE_SYMBOL)
            self.state = 584
            self.match(MRSParser.REST_SYMBOL)
            self.state = 585
            self.serviceAndSchemaRequestPaths()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceAndSchemaRequestPathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceAndSchemaRequestPaths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceAndSchemaRequestPaths" ):
                listener.enterServiceAndSchemaRequestPaths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceAndSchemaRequestPaths" ):
                listener.exitServiceAndSchemaRequestPaths(self)




    def serviceAndSchemaRequestPaths(self):

        localctx = MRSParser.ServiceAndSchemaRequestPathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_serviceAndSchemaRequestPaths)
        self._la = 0 # Token type
        try:
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.match(MRSParser.SERVICE_SYMBOL)
                self.state = 588
                self.serviceRequestPath()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 589
                    self.match(MRSParser.SERVICE_SYMBOL)
                    self.state = 590
                    self.serviceRequestPath()


                self.state = 593
                self.match(MRSParser.SCHEMA_SYMBOL)
                self.state = 594
                self.schemaRequestPath()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestMetadataStatusStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def STATUS_SYMBOL(self):
            return self.getToken(MRSParser.STATUS_SYMBOL, 0)

        def METADATA_SYMBOL(self):
            return self.getToken(MRSParser.METADATA_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestMetadataStatusStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestMetadataStatusStatement" ):
                listener.enterShowRestMetadataStatusStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestMetadataStatusStatement" ):
                listener.exitShowRestMetadataStatusStatement(self)




    def showRestMetadataStatusStatement(self):

        localctx = MRSParser.ShowRestMetadataStatusStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_showRestMetadataStatusStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 598
            self.match(MRSParser.REST_SYMBOL)
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 599
                self.match(MRSParser.METADATA_SYMBOL)


            self.state = 602
            self.match(MRSParser.STATUS_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestServicesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICES_SYMBOL(self):
            return self.getToken(MRSParser.SERVICES_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestServicesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestServicesStatement" ):
                listener.enterShowRestServicesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestServicesStatement" ):
                listener.exitShowRestServicesStatement(self)




    def showRestServicesStatement(self):

        localctx = MRSParser.ShowRestServicesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_showRestServicesStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 605
            self.match(MRSParser.REST_SYMBOL)
            self.state = 606
            self.match(MRSParser.SERVICES_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestSchemasStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMAS_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMAS_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestSchemasStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestSchemasStatement" ):
                listener.enterShowRestSchemasStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestSchemasStatement" ):
                listener.exitShowRestSchemasStatement(self)




    def showRestSchemasStatement(self):

        localctx = MRSParser.ShowRestSchemasStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_showRestSchemasStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 609
            self.match(MRSParser.REST_SYMBOL)
            self.state = 610
            self.match(MRSParser.SCHEMAS_SYMBOL)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19 or _la==20:
                self.state = 611
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 612
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 615
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestViewsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEWS_SYMBOL(self):
            return self.getToken(MRSParser.VIEWS_SYMBOL, 0)

        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestViewsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestViewsStatement" ):
                listener.enterShowRestViewsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestViewsStatement" ):
                listener.exitShowRestViewsStatement(self)




    def showRestViewsStatement(self):

        localctx = MRSParser.ShowRestViewsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_showRestViewsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 619
            self.match(MRSParser.REST_SYMBOL)
            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 620
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 623
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 626
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 629
            self.match(MRSParser.VIEWS_SYMBOL)
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19 or _la==20:
                self.state = 630
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 631
                self.serviceAndSchemaRequestPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowRestProceduresStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURES_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURES_SYMBOL, 0)

        def serviceAndSchemaRequestPaths(self):
            return self.getTypedRuleContext(MRSParser.ServiceAndSchemaRequestPathsContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showRestProceduresStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRestProceduresStatement" ):
                listener.enterShowRestProceduresStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRestProceduresStatement" ):
                listener.exitShowRestProceduresStatement(self)




    def showRestProceduresStatement(self):

        localctx = MRSParser.ShowRestProceduresStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_showRestProceduresStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 635
            self.match(MRSParser.REST_SYMBOL)
            self.state = 636
            self.match(MRSParser.PROCEDURES_SYMBOL)
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19 or _la==20:
                self.state = 637
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 638
                self.serviceAndSchemaRequestPaths()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestServiceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestServiceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestServiceStatement" ):
                listener.enterShowCreateRestServiceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestServiceStatement" ):
                listener.exitShowCreateRestServiceStatement(self)




    def showCreateRestServiceStatement(self):

        localctx = MRSParser.ShowCreateRestServiceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_showCreateRestServiceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 642
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 643
            self.match(MRSParser.REST_SYMBOL)
            self.state = 644
            self.match(MRSParser.SERVICE_SYMBOL)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 85899345921) != 0):
                self.state = 645
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestSchemaStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def SCHEMA_SYMBOL(self):
            return self.getToken(MRSParser.SCHEMA_SYMBOL, 0)

        def schemaRequestPath(self):
            return self.getTypedRuleContext(MRSParser.SchemaRequestPathContext,0)


        def serviceRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ServiceRequestPathContext,0)


        def IN_SYMBOL(self):
            return self.getToken(MRSParser.IN_SYMBOL, 0)

        def FROM_SYMBOL(self):
            return self.getToken(MRSParser.FROM_SYMBOL, 0)

        def SERVICE_SYMBOL(self):
            return self.getToken(MRSParser.SERVICE_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestSchemaStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestSchemaStatement" ):
                listener.enterShowCreateRestSchemaStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestSchemaStatement" ):
                listener.exitShowCreateRestSchemaStatement(self)




    def showCreateRestSchemaStatement(self):

        localctx = MRSParser.ShowCreateRestSchemaStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_showCreateRestSchemaStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 649
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 650
            self.match(MRSParser.REST_SYMBOL)
            self.state = 651
            self.match(MRSParser.SCHEMA_SYMBOL)
            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 652
                self.schemaRequestPath()


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19 or _la==20:
                self.state = 655
                _la = self._input.LA(1)
                if not(_la==19 or _la==20):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 656
                    self.match(MRSParser.SERVICE_SYMBOL)


                self.state = 659
                self.serviceRequestPath()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestViewStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def VIEW_SYMBOL(self):
            return self.getToken(MRSParser.VIEW_SYMBOL, 0)

        def viewRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ViewRequestPathContext,0)


        def RELATIONAL_SYMBOL(self):
            return self.getToken(MRSParser.RELATIONAL_SYMBOL, 0)

        def JSON_SYMBOL(self):
            return self.getToken(MRSParser.JSON_SYMBOL, 0)

        def DUALITY_SYMBOL(self):
            return self.getToken(MRSParser.DUALITY_SYMBOL, 0)

        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestViewStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestViewStatement" ):
                listener.enterShowCreateRestViewStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestViewStatement" ):
                listener.exitShowCreateRestViewStatement(self)




    def showCreateRestViewStatement(self):

        localctx = MRSParser.ShowCreateRestViewStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_showCreateRestViewStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 663
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 664
            self.match(MRSParser.REST_SYMBOL)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 665
                self.match(MRSParser.RELATIONAL_SYMBOL)


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 668
                self.match(MRSParser.JSON_SYMBOL)


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 671
                self.match(MRSParser.DUALITY_SYMBOL)


            self.state = 674
            self.match(MRSParser.VIEW_SYMBOL)
            self.state = 675
            self.viewRequestPath()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 676
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCreateRestProcedureStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW_SYMBOL(self):
            return self.getToken(MRSParser.SHOW_SYMBOL, 0)

        def CREATE_SYMBOL(self):
            return self.getToken(MRSParser.CREATE_SYMBOL, 0)

        def REST_SYMBOL(self):
            return self.getToken(MRSParser.REST_SYMBOL, 0)

        def PROCEDURE_SYMBOL(self):
            return self.getToken(MRSParser.PROCEDURE_SYMBOL, 0)

        def procedureRequestPath(self):
            return self.getTypedRuleContext(MRSParser.ProcedureRequestPathContext,0)


        def serviceSchemaSelector(self):
            return self.getTypedRuleContext(MRSParser.ServiceSchemaSelectorContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_showCreateRestProcedureStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateRestProcedureStatement" ):
                listener.enterShowCreateRestProcedureStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateRestProcedureStatement" ):
                listener.exitShowCreateRestProcedureStatement(self)




    def showCreateRestProcedureStatement(self):

        localctx = MRSParser.ShowCreateRestProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_showCreateRestProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(MRSParser.SHOW_SYMBOL)
            self.state = 680
            self.match(MRSParser.CREATE_SYMBOL)
            self.state = 681
            self.match(MRSParser.REST_SYMBOL)
            self.state = 682
            self.match(MRSParser.PROCEDURE_SYMBOL)
            self.state = 683
            self.procedureRequestPath()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 684
                self.serviceSchemaSelector()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_serviceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceRequestPath" ):
                listener.enterServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceRequestPath" ):
                listener.exitServiceRequestPath(self)




    def serviceRequestPath(self):

        localctx = MRSParser.ServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_serviceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131 or _la==133:
                self.state = 687
                self.hostAndPortIdentifier()


            self.state = 690
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewServiceRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def hostAndPortIdentifier(self):
            return self.getTypedRuleContext(MRSParser.HostAndPortIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newServiceRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewServiceRequestPath" ):
                listener.enterNewServiceRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewServiceRequestPath" ):
                listener.exitNewServiceRequestPath(self)




    def newServiceRequestPath(self):

        localctx = MRSParser.NewServiceRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_newServiceRequestPath)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131 or _la==133:
                self.state = 692
                self.hostAndPortIdentifier()


            self.state = 695
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaName" ):
                listener.enterSchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaName" ):
                listener.exitSchemaName(self)




    def schemaName(self):

        localctx = MRSParser.SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_schemaName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_schemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchemaRequestPath" ):
                listener.enterSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchemaRequestPath" ):
                listener.exitSchemaRequestPath(self)




    def schemaRequestPath(self):

        localctx = MRSParser.SchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_schemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewSchemaRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newSchemaRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewSchemaRequestPath" ):
                listener.enterNewSchemaRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewSchemaRequestPath" ):
                listener.exitNewSchemaRequestPath(self)




    def newSchemaRequestPath(self):

        localctx = MRSParser.NewSchemaRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_newSchemaRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewName" ):
                listener.enterViewName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewName" ):
                listener.exitViewName(self)




    def viewName(self):

        localctx = MRSParser.ViewNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_viewName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_viewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterViewRequestPath" ):
                listener.enterViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitViewRequestPath" ):
                listener.exitViewRequestPath(self)




    def viewRequestPath(self):

        localctx = MRSParser.ViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_viewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewViewRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newViewRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewViewRequestPath" ):
                listener.enterNewViewRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewViewRequestPath" ):
                listener.exitNewViewRequestPath(self)




    def newViewRequestPath(self):

        localctx = MRSParser.NewViewRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_newViewRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestObjectNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restObjectName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestObjectName" ):
                listener.enterRestObjectName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestObjectName" ):
                listener.exitRestObjectName(self)




    def restObjectName(self):

        localctx = MRSParser.RestObjectNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_restObjectName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RestResultNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_restResultName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestResultName" ):
                listener.enterRestResultName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestResultName" ):
                listener.exitRestResultName(self)




    def restResultName(self):

        localctx = MRSParser.RestResultNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_restResultName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureName" ):
                listener.enterProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureName" ):
                listener.exitProcedureName(self)




    def procedureName(self):

        localctx = MRSParser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_procedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_procedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureRequestPath" ):
                listener.enterProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureRequestPath" ):
                listener.exitProcedureRequestPath(self)




    def procedureRequestPath(self):

        localctx = MRSParser.ProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_procedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewProcedureRequestPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def requestPathIdentifier(self):
            return self.getTypedRuleContext(MRSParser.RequestPathIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_newProcedureRequestPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewProcedureRequestPath" ):
                listener.enterNewProcedureRequestPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewProcedureRequestPath" ):
                listener.exitNewProcedureRequestPath(self)




    def newProcedureRequestPath(self):

        localctx = MRSParser.NewProcedureRequestPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_newProcedureRequestPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.requestPathIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PureIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(MRSParser.IDENTIFIER, 0)

        def BACK_TICK_QUOTED_ID(self):
            return self.getToken(MRSParser.BACK_TICK_QUOTED_ID, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_pureIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPureIdentifier" ):
                listener.enterPureIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPureIdentifier" ):
                listener.exitPureIdentifier(self)




    def pureIdentifier(self):

        localctx = MRSParser.PureIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_pureIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            _la = self._input.LA(1)
            if not(_la==131 or _la==133):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pureIdentifier(self):
            return self.getTypedRuleContext(MRSParser.PureIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = MRSParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.pureIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.IdentifierContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = MRSParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.identifier()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==109:
                self.state = 724
                self.match(MRSParser.COMMA_SYMBOL)
                self.state = 725
                self.identifier()
                self.state = 730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListWithParenthesesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def identifierList(self):
            return self.getTypedRuleContext(MRSParser.IdentifierListContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_identifierListWithParentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierListWithParentheses" ):
                listener.enterIdentifierListWithParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierListWithParentheses" ):
                listener.exitIdentifierListWithParentheses(self)




    def identifierListWithParentheses(self):

        localctx = MRSParser.IdentifierListWithParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_identifierListWithParentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(MRSParser.OPEN_PAR_SYMBOL)
            self.state = 732
            self.identifierList()
            self.state = 733
            self.match(MRSParser.CLOSE_PAR_SYMBOL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DotIdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)




    def qualifiedIdentifier(self):

        localctx = MRSParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.identifier()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 736
                self.dotIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)




    def simpleIdentifier(self):

        localctx = MRSParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.identifier()
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 740
                self.dotIdentifier()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==108:
                    self.state = 741
                    self.dotIdentifier()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_SYMBOL(self):
            return self.getToken(MRSParser.DOT_SYMBOL, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_dotIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotIdentifier" ):
                listener.enterDotIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotIdentifier" ):
                listener.exitDotIdentifier(self)




    def dotIdentifier(self):

        localctx = MRSParser.DotIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dotIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(MRSParser.DOT_SYMBOL)
            self.state = 747
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(MRSParser.SimpleIdentifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def dotIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DotIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DotIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_dottedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedIdentifier" ):
                listener.enterDottedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedIdentifier" ):
                listener.exitDottedIdentifier(self)




    def dottedIdentifier(self):

        localctx = MRSParser.DottedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dottedIdentifier)
        self._la = 0 # Token type
        try:
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.simpleIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.identifier()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==108:
                    self.state = 751
                    self.dotIdentifier()
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostAndPortIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dottedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_hostAndPortIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHostAndPortIdentifier" ):
                listener.enterHostAndPortIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHostAndPortIdentifier" ):
                listener.exitHostAndPortIdentifier(self)




    def hostAndPortIdentifier(self):

        localctx = MRSParser.HostAndPortIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_hostAndPortIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.dottedIdentifier()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 760
                self.match(MRSParser.COLON_SYMBOL)
                self.state = 761
                self.match(MRSParser.INT_NUMBER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequestPathIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV_OPERATOR(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.DIV_OPERATOR)
            else:
                return self.getToken(MRSParser.DIV_OPERATOR, i)

        def dottedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.DottedIdentifierContext)
            else:
                return self.getTypedRuleContext(MRSParser.DottedIdentifierContext,i)


        def getRuleIndex(self):
            return MRSParser.RULE_requestPathIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequestPathIdentifier" ):
                listener.enterRequestPathIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequestPathIdentifier" ):
                listener.exitRequestPathIdentifier(self)




    def requestPathIdentifier(self):

        localctx = MRSParser.RequestPathIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_requestPathIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(MRSParser.DIV_OPERATOR)
            self.state = 765
            self.dottedIdentifier()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==97:
                self.state = 766
                self.match(MRSParser.DIV_OPERATOR)
                self.state = 767
                self.dottedIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedTextContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def SINGLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.SINGLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_quotedText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedText" ):
                listener.enterQuotedText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedText" ):
                listener.exitQuotedText(self)




    def quotedText(self):

        localctx = MRSParser.QuotedTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_quotedText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            _la = self._input.LA(1)
            if not(_la==134 or _la==135):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def jsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObj" ):
                listener.enterJsonObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObj" ):
                listener.exitJsonObj(self)




    def jsonObj(self):

        localctx = MRSParser.JsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_jsonObj)
        self._la = 0 # Token type
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 773
                self.jsonPair()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 774
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 775
                    self.jsonPair()
                    self.state = 780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 781
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 783
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 784
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def jsonValue(self):
            return self.getTypedRuleContext(MRSParser.JsonValueContext,0)


        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonPair" ):
                listener.enterJsonPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonPair" ):
                listener.exitJsonPair(self)




    def jsonPair(self):

        localctx = MRSParser.JsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_jsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            _la = self._input.LA(1)
            if not(_la==134 or _la==139):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 788
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 789
            self.jsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonArrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.JsonValueContext)
            else:
                return self.getTypedRuleContext(MRSParser.JsonValueContext,i)


        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_jsonArr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonArr" ):
                listener.enterJsonArr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonArr" ):
                listener.exitJsonArr(self)




    def jsonArr(self):

        localctx = MRSParser.JsonArrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_jsonArr)
        self._la = 0 # Token type
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.match(MRSParser.T__0)
                self.state = 792
                self.jsonValue()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 793
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 794
                    self.jsonValue()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 800
                self.match(MRSParser.T__1)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(MRSParser.T__0)
                self.state = 803
                self.match(MRSParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def JSON_NUMBER(self):
            return self.getToken(MRSParser.JSON_NUMBER, 0)

        def INT_NUMBER(self):
            return self.getToken(MRSParser.INT_NUMBER, 0)

        def jsonObj(self):
            return self.getTypedRuleContext(MRSParser.JsonObjContext,0)


        def jsonArr(self):
            return self.getTypedRuleContext(MRSParser.JsonArrContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_jsonValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValue" ):
                listener.enterJsonValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValue" ):
                listener.exitJsonValue(self)




    def jsonValue(self):

        localctx = MRSParser.JsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_jsonValue)
        try:
            self.state = 815
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 3)
                self.state = 808
                self.match(MRSParser.JSON_NUMBER)
                pass
            elif token in [126]:
                self.enterOuterAlt(localctx, 4)
                self.state = 809
                self.match(MRSParser.INT_NUMBER)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.jsonObj()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 811
                self.jsonArr()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 7)
                self.state = 812
                self.match(MRSParser.T__2)
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 8)
                self.state = 813
                self.match(MRSParser.T__3)
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 9)
                self.state = 814
                self.match(MRSParser.T__4)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_CURLY_SYMBOL, 0)

        def graphGlPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MRSParser.GraphGlPairContext)
            else:
                return self.getTypedRuleContext(MRSParser.GraphGlPairContext,i)


        def CLOSE_CURLY_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_CURLY_SYMBOL, 0)

        def COMMA_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.COMMA_SYMBOL)
            else:
                return self.getToken(MRSParser.COMMA_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlObj

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlObj" ):
                listener.enterGraphGlObj(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlObj" ):
                listener.exitGraphGlObj(self)




    def graphGlObj(self):

        localctx = MRSParser.GraphGlObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_graphGlObj)
        self._la = 0 # Token type
        try:
            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 817
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 818
                self.graphGlPair()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==109:
                    self.state = 819
                    self.match(MRSParser.COMMA_SYMBOL)
                    self.state = 820
                    self.graphGlPair()
                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 826
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.match(MRSParser.OPEN_CURLY_SYMBOL)
                self.state = 829
                self.match(MRSParser.CLOSE_CURLY_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlCrudOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_SELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_SELECT_SYMBOL, i)

        def AT_NOSELECT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOSELECT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOSELECT_SYMBOL, i)

        def AT_INSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_INSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_INSERT_SYMBOL, i)

        def AT_NOINSERT_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOINSERT_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOINSERT_SYMBOL, i)

        def AT_UPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_UPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_UPDATE_SYMBOL, i)

        def AT_NOUPDATE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NOUPDATE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NOUPDATE_SYMBOL, i)

        def AT_DELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_DELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_DELETE_SYMBOL, i)

        def AT_NODELETE_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MRSParser.AT_NODELETE_SYMBOL)
            else:
                return self.getToken(MRSParser.AT_NODELETE_SYMBOL, i)

        def getRuleIndex(self):
            return MRSParser.RULE_graphGlCrudOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlCrudOptions" ):
                listener.enterGraphGlCrudOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlCrudOptions" ):
                listener.exitGraphGlCrudOptions(self)




    def graphGlCrudOptions(self):

        localctx = MRSParser.GraphGlCrudOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_graphGlCrudOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 832
                _la = self._input.LA(1)
                if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 835 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 16257) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def graphKeyValue(self):
            return self.getTypedRuleContext(MRSParser.GraphKeyValueContext,0)


        def COLON_SYMBOL(self):
            return self.getToken(MRSParser.COLON_SYMBOL, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def AT_IN_SYMBOL(self):
            return self.getToken(MRSParser.AT_IN_SYMBOL, 0)

        def AT_OUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_OUT_SYMBOL, 0)

        def AT_INOUT_SYMBOL(self):
            return self.getToken(MRSParser.AT_INOUT_SYMBOL, 0)

        def AT_NOCHECK_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOCHECK_SYMBOL, 0)

        def AT_SORTABLE_SYMBOL(self):
            return self.getToken(MRSParser.AT_SORTABLE_SYMBOL, 0)

        def AT_NOFILTERING_SYMBOL(self):
            return self.getToken(MRSParser.AT_NOFILTERING_SYMBOL, 0)

        def AT_ROWOWNERSHIP_SYMBOL(self):
            return self.getToken(MRSParser.AT_ROWOWNERSHIP_SYMBOL, 0)

        def AT_UNNEST_SYMBOL(self):
            return self.getToken(MRSParser.AT_UNNEST_SYMBOL, 0)

        def AT_REDUCETO_SYMBOL(self):
            return self.getToken(MRSParser.AT_REDUCETO_SYMBOL, 0)

        def OPEN_PAR_SYMBOL(self):
            return self.getToken(MRSParser.OPEN_PAR_SYMBOL, 0)

        def graphGlReduceToValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlReduceToValueContext,0)


        def CLOSE_PAR_SYMBOL(self):
            return self.getToken(MRSParser.CLOSE_PAR_SYMBOL, 0)

        def AT_DATATYPE_SYMBOL(self):
            return self.getToken(MRSParser.AT_DATATYPE_SYMBOL, 0)

        def graphGlDatatypeValue(self):
            return self.getTypedRuleContext(MRSParser.GraphGlDatatypeValueContext,0)


        def graphGlCrudOptions(self):
            return self.getTypedRuleContext(MRSParser.GraphGlCrudOptionsContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlPair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlPair" ):
                listener.enterGraphGlPair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlPair" ):
                listener.exitGraphGlPair(self)




    def graphGlPair(self):

        localctx = MRSParser.GraphGlPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_graphGlPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.graphKeyValue()
            self.state = 838
            self.match(MRSParser.COLON_SYMBOL)
            self.state = 839
            self.qualifiedIdentifier()
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.state = 840
                self.match(MRSParser.AT_IN_SYMBOL)
                pass
            elif token in [70]:
                self.state = 841
                self.match(MRSParser.AT_OUT_SYMBOL)
                pass
            elif token in [68]:
                self.state = 842
                self.match(MRSParser.AT_INOUT_SYMBOL)
                pass
            elif token in [71]:
                self.state = 843
                self.match(MRSParser.AT_NOCHECK_SYMBOL)
                pass
            elif token in [73]:
                self.state = 844
                self.match(MRSParser.AT_SORTABLE_SYMBOL)
                pass
            elif token in [74]:
                self.state = 845
                self.match(MRSParser.AT_NOFILTERING_SYMBOL)
                pass
            elif token in [75]:
                self.state = 846
                self.match(MRSParser.AT_ROWOWNERSHIP_SYMBOL)
                pass
            elif token in [76]:
                self.state = 847
                self.match(MRSParser.AT_UNNEST_SYMBOL)
                pass
            elif token in [77]:
                self.state = 848
                self.match(MRSParser.AT_REDUCETO_SYMBOL)
                self.state = 849
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 850
                self.graphGlReduceToValue()
                self.state = 851
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [78]:
                self.state = 853
                self.match(MRSParser.AT_DATATYPE_SYMBOL)
                self.state = 854
                self.match(MRSParser.OPEN_PAR_SYMBOL)
                self.state = 855
                self.graphGlDatatypeValue()
                self.state = 856
                self.match(MRSParser.CLOSE_PAR_SYMBOL)
                pass
            elif token in [72, 79, 80, 81, 82, 83, 84, 85]:
                self.state = 858
                self.graphGlCrudOptions()
                pass
            elif token in [109, 114, 115]:
                pass
            else:
                pass
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114:
                self.state = 861
                self.graphGlObj()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphKeyValue" ):
                listener.enterGraphKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphKeyValue" ):
                listener.exitGraphKeyValue(self)




    def graphKeyValue(self):

        localctx = MRSParser.GraphKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_graphKeyValue)
        try:
            self.state = 867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [131, 133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlReduceToValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlReduceToValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlReduceToValue" ):
                listener.enterGraphGlReduceToValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlReduceToValue" ):
                listener.exitGraphGlReduceToValue(self)




    def graphGlReduceToValue(self):

        localctx = MRSParser.GraphGlReduceToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_graphGlReduceToValue)
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [131, 133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlDatatypeValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_STRING(self):
            return self.getToken(MRSParser.JSON_STRING, 0)

        def DOUBLE_QUOTED_TEXT(self):
            return self.getToken(MRSParser.DOUBLE_QUOTED_TEXT, 0)

        def identifier(self):
            return self.getTypedRuleContext(MRSParser.IdentifierContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlDatatypeValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlDatatypeValue" ):
                listener.enterGraphGlDatatypeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlDatatypeValue" ):
                listener.exitGraphGlDatatypeValue(self)




    def graphGlDatatypeValue(self):

        localctx = MRSParser.GraphGlDatatypeValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_graphGlDatatypeValue)
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(MRSParser.JSON_STRING)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(MRSParser.DOUBLE_QUOTED_TEXT)
                pass
            elif token in [131, 133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 876
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GraphGlValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(MRSParser.QualifiedIdentifierContext,0)


        def graphGlObj(self):
            return self.getTypedRuleContext(MRSParser.GraphGlObjContext,0)


        def getRuleIndex(self):
            return MRSParser.RULE_graphGlValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGraphGlValue" ):
                listener.enterGraphGlValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGraphGlValue" ):
                listener.exitGraphGlValue(self)




    def graphGlValue(self):

        localctx = MRSParser.GraphGlValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_graphGlValue)
        try:
            self.state = 881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [131, 133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 879
                self.qualifiedIdentifier()
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self.graphGlObj()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





