# Copyright (c) 2024, 2025, Oracle and/or its affiliates.

import asyncio
from dataclasses import asdict, dataclass
from typing import (
    Generic,
    Literal,
    NotRequired,
    Optional,
    Sequence,
    TypeAlias,
    TypedDict,
    Unpack,
    cast,
)
# --- importLoopStart
from .mrs_base_classes import (
    # --- importAuthenticateOnlyStart
    Authenticating,
    # --- importAuthenticateOnlyEnd
    # --- importCreateOnlyStart
    MrsBaseObjectCreate,
    # --- importCreateOnlyEnd
    # --- importReadOnlyStart
    FindFirstOptions,
    FindOptions,
    FindUniqueOptions,
    MrsBaseObjectQuery,
    MrsDocumentList,
    MrsDocumentListLastPage,
    # --- importReadOnlyEnd
    # --- importUpdateOnlyStart
    _MrsDocumentUpdateMixin,
    MrsBaseObjectUpdate,
    # --- importUpdateOnlyEnd
    # --- importDeleteOnlyStart
    _MrsDocumentDeleteMixin,
    DeleteOptions,
    MrsBaseObjectDelete,
    # --- importDeleteOnlyEnd
    # --- importFunctionCallOnlyStart
    MrsBaseObjectFunctionCall,
    # --- importFunctionCallOnlyEnd
    # --- importProcedureCallOnlyStart
    MrsProcedureResultSet,
    MrsBaseObjectProcedureCall,
    IMrsProcedureResponse,
    # --- importProcedureCallOnlyEnd
    # --- importTaskRunOnlyStart
    MrsBaseTaskStartFunction,
    MrsBaseTaskStartProcedure,
    MrsBaseTaskCallFunction,
    MrsBaseTaskCallProcedure,
    MrsTask,
    IMrsTaskStartOptions,
    IMrsTaskCallOptions,
    merge_task_options,
    # --- importTaskRunOnlyEnd
    Filterable,
    HighOrderOperator,
    IMrsResourceDetails,
    MrsBaseObject,
    MrsBaseSchema,
    MrsService,
    Order,
    MrsDocument,
    MrsDocumentNotFoundError,
    UndefinedDataClassField,
    # --- importRequiredDatatypesOnlyStart
    # --- importRequiredDatatypesOnlyEnd
)
# --- importLoopEnd


# --- schemaLoopStart
# --- objectLoopStart
${obj_interfaces}
class ${obj_class_name}DatabaseObject(MrsBaseObject):

    def __init__(self, schema: "${schema_class_name}", request_path: str) -> None:
        super().__init__(schema=schema, request_path=request_path)

    # --- crudFunctionCallOnlyStart
    async def call(self, **parameters: Unpack[I${obj_param_interface}]) -> ${obj_function_result_datatype}:
        request = MrsBaseObjectFunctionCall[I${obj_param_interface}, ${obj_function_result_datatype}](
            schema=self._schema,
            request_path=self._request_path,
            parameters=parameters,
            result_type_hint_struct={"result": ${obj_function_result_datatype}},
        )
        return await request.submit()
    # --- crudFunctionCallOnlyEnd

    # --- crudProcedureCallOnlyStart
    async def call(
        self,
        **parameters: Unpack[I${obj_param_interface}]
    ) -> IMrsProcedureResponse[
            I${obj_param_interface}Out,
            ${obj_meta_interface},
        ]:
        request = MrsBaseObjectProcedureCall[
            I${obj_param_interface},
            I${obj_param_interface}Out,
            ${obj_meta_interface},
        ](
            schema=self._schema,
            request_path=self._request_path,
            parameters=parameters,
            result_type_hint_struct={
                "out_parameters": I${obj_param_interface}Out,
                "result_sets": ${obj_procedure_result_set_datatype}
            }
        )
        return await request.submit()
    # --- crudProcedureCallOnlyEnd

    # --- crudFunctionTaskRunOnlyStart
    async def start(
        self,
        *args: IMrsTaskStartOptions,
        **parameters: Unpack[I${obj_param_interface}]
    ) -> MrsTask[${obj_function_result_datatype}]:
        request = MrsBaseTaskStartFunction[I${obj_param_interface}, ${obj_function_result_datatype}](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(IMrsTaskStartOptions, merge_task_options(args)),
            parameters=parameters,
            result_type_hint_struct={"result": ${obj_function_result_datatype}},
        )
        return await request.submit()

    async def call(
        self,
        *args: IMrsTaskCallOptions,
        **parameters: Unpack[I${obj_param_interface}]
    ) -> ${obj_function_result_datatype}:
        request = MrsBaseTaskCallFunction[I${obj_param_interface}, ${obj_function_result_datatype}](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(IMrsTaskCallOptions, merge_task_options(args)),
            parameters=parameters,
            result_type_hint_struct={"result": ${obj_function_result_datatype}}
        )
        return await request.submit()
    # --- crudFunctionTaskRunOnlyEnd

    # --- crudProcedureTaskRunOnlyStart
    async def start(
        self,
        *args: IMrsTaskStartOptions,
        **parameters: Unpack[I${obj_param_interface}]
    ) -> MrsTask[IMrsProcedureResponse[
            I${obj_param_interface}Out,
            ${obj_meta_interface},
        ]]:
        request = MrsBaseTaskStartProcedure[
            I${obj_param_interface},
            I${obj_param_interface}Out,
            ${obj_meta_interface},
        ](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(IMrsTaskStartOptions, merge_task_options(args)),
            parameters=parameters,
            result_type_hint_struct={
                "out_parameters": I${obj_param_interface}Out,
                "result_sets": ${obj_procedure_result_set_datatype}
            }
        )
        return await request.submit()

    async def call(
        self,
        *args: IMrsTaskCallOptions,
        **parameters: Unpack[I${obj_param_interface}]
    ) -> IMrsProcedureResponse[
            I${obj_param_interface}Out,
            ${obj_meta_interface},
        ]:
        request = MrsBaseTaskCallProcedure[
            I${obj_param_interface},
            I${obj_param_interface}Out,
            ${obj_meta_interface},
        ](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(IMrsTaskCallOptions, merge_task_options(args)),
            parameters=parameters,
            result_type_hint_struct={
                "out_parameters": I${obj_param_interface}Out,
                "result_sets": ${obj_procedure_result_set_datatype}
            }
        )
        return await request.submit()
    # --- crudProcedureTaskRunOnlyEnd

    # --- crudCreateOnlyStart
    async def create(self, data: INew${obj_class_name}) -> I${obj_class_name}:
        request = MrsBaseObjectCreate[
            INew${obj_class_name}, I${obj_class_name}Details
        ](schema=self._schema, request_path=self._request_path, data=data)
        rest_document = await request.submit()
        return I${obj_class_name}(
            schema=self._schema, data=cast(I${obj_class_name}Data, rest_document)
        )

    async def create_many(
        self, data: Sequence[INew${obj_class_name}]
    ) -> list[I${obj_class_name}]:
        return [
            await coro
            for coro in asyncio.as_completed((self.create(item) for item in data))
        ]
    # --- crudCreateOnlyEnd

    # --- crudReadOnlyStart
    async def find_first(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindFirstOptions[
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) -> Optional[I${obj_class_name}]:
        request = MrsBaseObjectQuery[
            I${obj_class_name}Data, I${obj_class_name}Details
        ](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(FindFirstOptions, options),
        )
        rest_document = cast(I${obj_class_name}Data, await request.fetch_one())

        if rest_document is not None:
            return I${obj_class_name}(schema=self._schema, data=rest_document)

        return None

    async def find_first_or_throw(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindFirstOptions[
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) -> I${obj_class_name}:
        data_obj = await self.find_first(**options)
        if data_obj is None:
            raise MrsDocumentNotFoundError
        return data_obj

    # --- crudReadUniqueOnlyStart
    async def find_unique(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindUniqueOptions[
                I${obj_class_name}UniqueFilterable,
                I${obj_class_name}Selectable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
            ]
        ],
    ) -> Optional[I${obj_class_name}]:
        return await self.find_first(**cast(FindFirstOptions, options))

    async def find_unique_or_throw(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindUniqueOptions[
                I${obj_class_name}UniqueFilterable,
                I${obj_class_name}Selectable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
            ]
        ],
    ) -> I${obj_class_name}:
        data_obj = await self.find_unique(**options)
        if data_obj is None:
            raise MrsDocumentNotFoundError
        return data_obj
    # --- crudReadUniqueOnlyEnd

    async def find(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindOptions[
                I${obj_class_name}Data,
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) ->(
        MrsDocumentList[I${obj_class_name}, I${obj_class_name}Data, I${obj_class_name}Details]
        | MrsDocumentListLastPage[I${obj_class_name}, I${obj_class_name}Data, I${obj_class_name}Details]
    ):
        request = MrsBaseObjectQuery[
            I${obj_class_name}Data, I${obj_class_name}Details
        ](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(FindOptions, options),
        )
        response = await request.submit()
        page = [
            I${obj_class_name}(
                schema=self._schema, data=cast(I${obj_class_name}Data, item)
            )
            for item in response["items"]
        ]

        if response["has_more"]:
            skip = options.get("skip", 0) + response["count"]
            return MrsDocumentList[I${obj_class_name}, I${obj_class_name}Data, I${obj_class_name}Details](
                datacls=I${obj_class_name},
                schema=self._schema,
                request_path=self._request_path,
                options=cast(FindOptions, {**options, **{"skip": skip}}),
                iterable=page,
            )

        return MrsDocumentListLastPage[I${obj_class_name}, I${obj_class_name}Data, I${obj_class_name}Details](
            datacls=I${obj_class_name},
            schema=self._schema,
            request_path=self._request_path,
            options=cast(FindOptions, options),
            iterable=page,
        )
    # --- crudReadOnlyEnd

    # --- crudUpdateOnlyStart
    async def update(self, data: IUpdate${obj_class_name}) -> I${obj_class_name}:
        # Primary key name is guaranteed to be a string because when it
        # isn't, `update` and `update_many` aren't generated by the SDK.
        prk_name = cast(str, I${obj_class_name}.get_primary_key_name())
        rest_document_id = data.get(prk_name, -1)

        request = MrsBaseObjectUpdate[
            I${obj_class_name}, I${obj_class_name}Details
        ](
            schema=self._schema,
            request_path=self._request_path + f"/{rest_document_id}",
            data=I${obj_class_name}(
                schema=self._schema, data=cast(I${obj_class_name}Data, data)
            ),
        )
        rest_document = await request.submit()

        return I${obj_class_name}(
            schema=self._schema, data=cast(I${obj_class_name}Data, rest_document)
        )

    async def update_many(
        self, data: Sequence[IUpdate${obj_class_name}]
    ) -> list[I${obj_class_name}]:
        return [
            await coro
            for coro in asyncio.as_completed((self.update(item) for item in data))
        ]
    # --- crudUpdateOnlyEnd

    # --- crudDeleteUniqueOnlyStart
    async def delete(
        self,
        **options: Unpack[DeleteOptions[I${obj_class_name}UniqueFilterable]],
    ) -> bool:
        return bool(await self.delete_many(**cast(DeleteOptions, options)))
    # --- crudDeleteUniqueOnlyEnd

    # --- crudDeleteOnlyStart
    async def delete_many(
        self,
        **options: Unpack[DeleteOptions[I${obj_class_name}Filterable[I${obj_class_name}Filterable]]],
    ) -> int:
        request = MrsBaseObjectDelete[I${obj_class_name}Filterable[I${obj_class_name}Filterable]](
            schema=self._schema,
            request_path=self._request_path,
            options=options,
        )

        response = await request.submit()

        return response.get("items_deleted", 0)
    # --- crudDeleteOnlyEnd
# --- objectLoopEnd


class ${schema_class_name}(MrsBaseSchema):

    def __init__(self, service: MrsService, request_path: str) -> None:
        super().__init__(service=service, request_path=f"{request_path}${schema_request_path}")
        # --- objectLoopStart
        self.${obj_name} = ${obj_class_name}DatabaseObject(
            schema=self,
            request_path=f"{self._request_path}${obj_request_path}",
        )
        # --- objectLoopEnd
# --- schemaLoopEnd


class ${service_class_name}(
    # --- serviceAuthenticateStart
    Authenticating,
    # --- serviceAuthenticateEnd
    MrsService,
):

    def __init__(self, base_url: str = "${service_url}", verify_tls_cert: bool | str = True) -> None:
        super().__init__(
            service_url=base_url,
            verify_tls_cert=verify_tls_cert
        )
        # --- schemaLoopStart
        self.${schema_name} = ${schema_class_name}(service=self, request_path=self._service_url)
        # --- schemaLoopEnd
