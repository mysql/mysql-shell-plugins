# Copyright (c) 2024, Oracle and/or its affiliates.

import asyncio
from dataclasses import asdict, dataclass
from typing import (
    Generic,
    Literal,
    NotRequired,
    Optional,
    Sequence,
    TypeAlias,
    TypedDict,
    Unpack,
    cast,
)
# --- importLoopStart
from .mrs_base_classes import (
    # --- importAuthenticateOnlyStart
    AuthenticateOptions,
    AuthAppNotFoundError,
    MrsAuthenticate,
    # --- importAuthenticateOnlyEnd
    # --- importCreateOnlyStart
    MrsBaseObjectCreate,
    # --- importCreateOnlyEnd
    # --- importReadOnlyStart
    FindAllOptions,
    FindFirstOptions,
    FindManyOptions,
    FindUniqueOptions,
    MrsBaseObjectQuery,
    # --- importReadOnlyEnd
    # --- importUpdateOnlyStart
    MrsBaseObjectUpdate,
    # --- importUpdateOnlyEnd
    # --- importDeleteOnlyStart
    DeleteOptions,
    MrsBaseObjectDelete,
    # --- importDeleteOnlyEnd
    # --- importReadFunctionOnlyStart
    MrsBaseObjectFunctionCall,
    # --- importReadFunctionOnlyEnd
    Filterable,
    HighOrderOperator,
    IMrsResourceDetails,
    MrsBaseObject,
    MrsBaseSchema,
    MrsBaseService,
    Order,
    Record,
    RecordNotFoundError,
    UndefinedDataClassField,
    UndefinedField,
    MrsJSONDataEncoder,
    # --- importRequiredDatatypesOnlyStart
    # --- importRequiredDatatypesOnlyEnd
)
# --- importLoopEnd


${service_level_constants}
${service_level_type_definitions}
# --- schemaLoopStart
# --- objectLoopStart
${obj_interfaces}
class ${obj_class_name}DatabaseObject(MrsBaseObject):

    def __init__(self, schema: "${schema_class_name}", request_path: str) -> None:
        super().__init__(schema=schema, request_path=request_path)

    # --- crudReadFunctionOnlyStart
    async def __call__(self, **parameters: Unpack[I${obj_param_interface}]) -> ${obj_function_result_datatype}:
        request = MrsBaseObjectFunctionCall[I${obj_param_interface}, ${obj_function_result_datatype}](
            schema=self._schema,
            request_path=self._request_path,
            parameters=parameters
        )
        return await request.submit()
    # --- crudReadFunctionOnlyEnd

    # --- crudCreateOnlyStart
    async def create(self, data: I${obj_class_name}DataCreate) -> I${obj_class_name}:
        request = MrsBaseObjectCreate[I${obj_class_name}DataCreate, I${obj_class_name}Details](
            schema=self._schema,
            request_path=self._request_path,
            data=data
        )
        record = await request.submit()
        return I${obj_class_name}(
            schema=self._schema,
            data=cast(I${obj_class_name}Data, record)
        )

    async def create_many(self, data: Sequence[I${obj_class_name}DataCreate]) -> list[I${obj_class_name}]:
        return [
            await coro
            for coro in asyncio.as_completed((self.create(item) for item in data))
        ]
    # --- crudCreateOnlyEnd

    # --- crudReadOnlyStart
    async def find_first(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindFirstOptions[
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) -> Optional[I${obj_class_name}]:
        request = MrsBaseObjectQuery[I${obj_class_name}Data, I${obj_class_name}Details](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(FindFirstOptions, options),
        )
        record = cast(I${obj_class_name}Data, await request.fetch_one())

        if record is not None:
            return I${obj_class_name}(schema=self._schema, data=record)

        return None

    async def find_first_or_throw(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindFirstOptions[
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) -> I${obj_class_name}:
        data_obj = await self.find_first(**options)
        if data_obj is None:
            raise RecordNotFoundError
        return data_obj

    # --- crudReadUniqueOnlyStart
    async def find_unique(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindUniqueOptions[
                I${obj_class_name}UniqueFilterable, I${obj_class_name}Selectable, I${obj_class_name}Field, I${obj_class_name}NestedField
            ]
        ],
    ) -> Optional[I${obj_class_name}]:
        return await self.find_first(**cast(FindFirstOptions, options))

    async def find_unique_or_throw(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindUniqueOptions[
                I${obj_class_name}UniqueFilterable, I${obj_class_name}Selectable, I${obj_class_name}Field, I${obj_class_name}NestedField
            ]
        ],
    ) -> I${obj_class_name}:
        data_obj = await self.find_unique(**options)
        if data_obj is None:
            raise RecordNotFoundError
        return data_obj
    # --- crudReadUniqueOnlyEnd

    async def find_many(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindManyOptions[
                I${obj_class_name}Data,
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) -> list[I${obj_class_name}]:
        request = MrsBaseObjectQuery[I${obj_class_name}Data, I${obj_class_name}Details](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(FindManyOptions, options)
        )
        iterator = options.get("iterator", True)

        if not self._has_more and iterator:
            self._has_more = True
            return []

        response = await request.fetch()

        if iterator:
            self._has_more = response["has_more"]

        return [
            I${obj_class_name}(
                schema=self._schema,
                data=cast(I${obj_class_name}Data, item)
            )
            for item in response["items"]
        ]

    async def find_all(
        self,
        **options: Unpack[  # type: ignore[misc]
            FindAllOptions[
                I${obj_class_name}Data,
                I${obj_class_name}Filterable[I${obj_class_name}Filterable],
                I${obj_class_name}Selectable,
                I${obj_class_name}Sortable,
                I${obj_class_name}Field,
                I${obj_class_name}NestedField,
                I${obj_class_name}Cursors,
            ]
        ],
    ) -> list[I${obj_class_name}]:
        request = MrsBaseObjectQuery[I${obj_class_name}Data, I${obj_class_name}Details](
            schema=self._schema,
            request_path=self._request_path,
            options=cast(FindAllOptions, options)
        )
        progress = options.get("progress")

        if progress is None:
            response = await request.fetch_all()
        else:
            response = await request.fetch_all(progress=progress)

        return [
            I${obj_class_name}(
                schema=self._schema, data=cast(I${obj_class_name}Data, item)
            )
            for item in response["items"]
        ]
    # --- crudReadOnlyEnd

    # --- crudUpdateOnlyStart
    async def update(self, data: I${obj_class_name}DataUpdate) -> I${obj_class_name}:
        # Primary key name is guaranteed to be a string because when it
        # isn't, `update` and `update_many` aren't generated by the SDK.
        prk_name = cast(str, I${obj_class_name}.get_primary_key_name())
        record_id = data.get(prk_name, -1)

        request = MrsBaseObjectUpdate[I${obj_class_name}, I${obj_class_name}Details](
            schema=self._schema,
            request_path=self._request_path + f"/{record_id}",
            data=I${obj_class_name}(
                schema=self._schema, data=cast(I${obj_class_name}Data, data)
            ),
        )
        record = await request.submit()

        return I${obj_class_name}(
            schema=self._schema, data=cast(I${obj_class_name}Data, record)
        )

    async def update_many(self, data: Sequence[I${obj_class_name}DataUpdate]) -> list[I${obj_class_name}]:
        return [
            await coro
            for coro in asyncio.as_completed((self.update(item) for item in data))
        ]
    # --- crudUpdateOnlyEnd

    # --- crudDeleteUniqueOnlyStart
    async def delete(
        self,
        **options: Unpack[DeleteOptions[I${obj_class_name}UniqueFilterable]],
    ) -> bool:
        return bool(
            await self.delete_many(
                **cast(DeleteOptions, options)
            )
        )
    # --- crudDeleteUniqueOnlyEnd

    # --- crudDeleteOnlyStart
    async def delete_many(
        self,
        **options: Unpack[DeleteOptions[I${obj_class_name}Filterable]],
    ) -> int:
        request = MrsBaseObjectDelete[I${obj_class_name}Filterable](
            schema=self._schema,
            request_path=self._request_path,
            options=options,
        )

        response = await request.submit()

        return response.get("items_deleted", 0)
    # --- crudDeleteOnlyEnd
# --- objectLoopEnd


class ${schema_class_name}(MrsBaseSchema):

    def __init__(self, service: MrsBaseService, request_path: str) -> None:
        super().__init__(service=service, request_path=f"{request_path}${schema_request_path}")
        # --- objectLoopStart
        self.${obj_name} = ${obj_class_name}DatabaseObject(
            schema=self,
            request_path=f"{self._request_path}/{MrsJSONDataEncoder.snake_to_camel('${obj_name}')}"
        )
        # --- objectLoopEnd
# --- schemaLoopEnd


class ${service_class_name}(MrsBaseService):

    def __init__(self) -> None:
        super().__init__(
            service_url="${service_url}",
            auth_path="/authentication/login",
        )
        # --- schemaLoopStart
        self.${schema_name} = ${schema_class_name}(service=self, request_path=self._service_url)
        # --- schemaLoopEnd

    # --- serviceAuthenticateStart
    async def authenticate(
        self, **options: Unpack[AuthenticateOptions[I${service_class_name}AuthApp]]
    ) -> None:
        app_name = options["app_name"]

        if app_name is None:
            raise AuthAppNotFoundError()

        vendor_ids = [
            app.get("vendor_id") for app in AUTH_APPS if app.get("name") == app_name
        ]

        request = MrsAuthenticate[I${service_class_name}AuthApp](
            request_path=f"{self._service_url}{self._auth_path}",
            vendor_id=vendor_ids[0],
            **options,
        )

        response = await request.submit()
        self._session["access_token"] = response["access_token"]
    # --- serviceAuthenticateEnd
