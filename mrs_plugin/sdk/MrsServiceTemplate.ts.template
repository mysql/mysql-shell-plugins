/* Copyright (c) 2023, Oracle and/or its affiliates. */

/* eslint-disable max-len */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable max-classes-per-file */
/* eslint-disable padding-line-between-statements */
/* eslint-disable no-underscore-dangle */
/* eslint-disable padded-blocks */
/* eslint-disable no-trailing-spaces */
/* eslint-disable @typescript-eslint/lines-between-class-members */
/* eslint-disable @typescript-eslint/promise-function-async */
/* eslint-disable no-multiple-empty-lines */
/* eslint-disable @typescript-eslint/no-unused-vars */

// --- importLoopStart
import {
    Geometry,
    GeometryCollection,
    IMrsBaseObject,
    IMrsFetchData,
    JsonValue,
    LineString,
    MaybeNull,
    MrsBaseService,
    MrsBaseSchema,
    MultiLineString,
    MultiPoint,
    MultiPolygon,
    Point,
    Polygon,
    // --- importReadOnlyStart
    IFindFirstOptions,
    IFindManyOptions,
    IFindUniqueOptions,
    IMrsResultList,
    MrsBaseObjectQuery,
    NotFoundError,
    // --- importReadOnlyEnd
    // --- importCreateOnlyStart
    ICreateOptions,
    MrsBaseObjectCreate,
    // --- importCreateOnlyEnd
    // --- importUpdateProcedureOnlyStart
    IMrsProcedureResult,
    IMrsProcedureResultList,
    MrsBaseObjectCall,
    // --- importUpdateProcedureOnlyEnd
    // --- importReadFunctionOnlyStart
    MrsBaseObjectFunctionCall,
    // --- importReadFunctionOnlyEnd
    // --- importUpdateOnlyStart
    IUpdateOptions,
    MrsBaseObjectUpdate,
    // --- importUpdateOnlyEnd
    // --- importDeleteOnlyStart
    IMrsDeleteResult,
    IDeleteOptions,
    MrsBaseObjectDelete,
    // --- importDeleteOnlyEnd
} from "./MrsBaseClasses";

// --- MySQL Shell for VS Code Extension Remove --- Begin
export type { IMrsAuthUser, IMrsAuthStatus } from "./MrsBaseClasses";
// --- MySQL Shell for VS Code Extension Remove --- End

// --- importLoopEnd

// --- schemaLoopStart
/* -----------------------------------------------------------------------------
 * MRS Schema ${schema_request_path}
 */

export class ${schema_class_name}ObjectRequest {
    public constructor(
        public schema: ${schema_class_name}) {
    }
}

// --- objectLoopStart
/*
 * MRS Object - ${obj_full_request_path} (${obj_type})
 */

export class ${obj_class_name}Request extends ${schema_class_name}ObjectRequest {

    static readonly #schemaRequestPath = "${schema_request_path}";
    static readonly #requestPath = "${obj_request_path}";

    public rest = {
        // --- crudCreateOnlyStart
        post: (${obj_name}: I${obj_class_name}): MrsBaseObjectCreate<I${obj_class_name}> => {
            return new MrsBaseObjectCreate<I${obj_class_name}>(this.schema, ${obj_class_name}Request.#requestPath, ${obj_name});
        },
        // --- crudCreateOnlyEnd
        // --- crudReadOnlyStart
        get: <K extends keyof I${obj_class_name}>(
            ...args: K[]): MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params> => {
            return new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params>(
                this.schema, ${obj_class_name}Request.#requestPath, args);
        },
        // --- crudReadOnlyEnd
        // --- crudUpdateProcedureOnlyStart
        put: (
            ${obj_name}Params: I${obj_param_interface},
        ): MrsBaseObjectCall<${obj_meta_interface}, I${obj_param_interface}> => {
            return new MrsBaseObjectCall<${obj_meta_interface}, I${obj_param_interface}>(
                this.schema, ${obj_class_name}Request.#requestPath, ${obj_name}Params);
        },
        // --- crudUpdateProcedureOnlyEnd
        // --- crudReadFunctionOnlyStart
        get: (
            ${obj_name}Params: I${obj_param_interface},
        ): MrsBaseObjectFunctionCall<${obj_function_result_datatype}, I${obj_param_interface}> => {
            return new MrsBaseObjectFunctionCall<${obj_function_result_datatype}, I${obj_param_interface}>(
                this.schema, ${obj_class_name}Request.#requestPath, ${obj_name}Params);
        },
        // --- crudReadFunctionOnlyEnd
        // --- crudUpdateOnlyStart
        put: (
            ${obj_name}: I${obj_class_name},
            key?: string[]): MrsBaseObjectUpdate<I${obj_class_name}> => {
            return new MrsBaseObjectUpdate<I${obj_class_name}>(
                this.schema, ${obj_class_name}Request.#requestPath, ${obj_name}, key !== undefined ? key : [${obj_string_pk_list}]);
        },
        // --- crudUpdateOnlyEnd
        // --- crudDeleteOnlyStart
        delete: (): MrsBaseObjectDelete<I${obj_class_name}Params> => {
            return new MrsBaseObjectDelete<I${obj_class_name}Params>(this.schema, ${obj_class_name}Request.#requestPath);
        },
        // --- crudDeleteOnlyEnd
    };


    // --- crudCreateOnlyStart
    public create = async (args: ICreateOptions<I${obj_class_name}>): Promise<I${obj_class_name}> => {
        const response = await this.rest.post(args.data).fetch();

        return response;
    };

    public createMany = async (args: ICreateOptions<I${obj_class_name}[]>): Promise<I${obj_class_name}[]> => {
        const result: I${obj_class_name}[] = [];

        for (const item of args.data) {
            const response = await this.create({ data: item });

            result.push(response);
        }

        return result;
    };
    // --- crudCreateOnlyEnd

    // --- crudReadOnlyStart
    public findMany = async (args?: IFindManyOptions<I${obj_class_name}, I${obj_class_name}Params>): Promise<IMrsResultList<I${obj_class_name}>> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params>(
            this.schema, ${obj_class_name}Request.#requestPath, args?.select)
            .where(args?.where).orderBy(args?.orderBy).limit(args?.take).offset(args?.skip);
        let response;
        if (args?.fetchAll !== undefined && typeof args?.fetchAll === "boolean" && args?.fetchAll) {
            response = await request.fetchAll();
        } else if (args?.fetchAll !== undefined && typeof args?.fetchAll !== "boolean") {
            response = await request.fetchAll(args?.fetchAll?.pageSize, args?.fetchAll?.progress);
        } else {
            response = await request.fetch();
        }
        return response;
    };

    public findFirst = async (args?: IFindFirstOptions<I${obj_class_name}, I${obj_class_name}Params>): Promise<I${obj_class_name} | undefined> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params>(
            this.schema, ${obj_class_name}Request.#requestPath, args?.select);
        const response = await request.where(args?.where).orderBy(args?.orderBy).limit(1).offset(args?.skip).fetchOne();

        return response;
    };
    // --- crudReadOnlyEnd
    // --- crudReadUniqueOnlyStart
    public findUnique = async (args?: IFindUniqueOptions<I${obj_class_name}, I${obj_class_name}UniqueParams>): Promise<I${obj_class_name} | undefined> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}UniqueParams>(
            this.schema, ${obj_class_name}Request.#requestPath, args?.select);
        const response = await request.where(args?.where).fetchOne();

        return response;
    };
    public findUniqueOrThrow = async (args?: IFindUniqueOptions<I${obj_class_name}, I${obj_class_name}UniqueParams>): Promise<I${obj_class_name}> => {
        const response = await this.findUnique(args);

        if (response === undefined) {
            throw new NotFoundError(`Record not found.`);
        }

        return response;
    };
    // --- crudReadUniqueOnlyEnd

    // --- crudUpdateOnlyStart
    public update = async (args: IUpdateOptions<I${obj_class_name}, I${obj_class_name}Params, [${obj_quoted_pk_list}], { batch: false }>): Promise<I${obj_class_name}> => {
        const response = await this.rest.put(args.data, [${obj_string_args_where_pk_list}])
            .fetch();

        return response;
    };

    public updateMany = async (args: IUpdateOptions<I${obj_class_name}, I${obj_class_name}Params, [${obj_quoted_pk_list}], { batch: true }>): Promise<I${obj_class_name}[]> => {
        const result: I${obj_class_name}[] = [];

        for (const { ${obj_pk_list} } of args.where) {
            const response = await this.update({ ...args, where: { ${obj_pk_list} } });

            result.push(response);
        }

        return result;
    };
    // --- crudUpdateOnlyEnd
    // --- crudUpdateProcedureOnlyStart
    public call = (
        ${obj_name}Params: I${obj_param_interface},
    ): Promise<IMrsProcedureResultList<${obj_meta_interface}>> => {
        return this.rest.put(${obj_name}Params).fetch();
    };
    // --- crudUpdateProcedureOnlyEnd

    // --- crudReadFunctionOnlyStart
    public call = (
        ${obj_name}Params: I${obj_param_interface},
    ): Promise<${obj_function_result_datatype}> => {
        return this.rest.get(${obj_name}Params).fetch();
    };
    // --- crudReadFunctionOnlyEnd

    // --- crudDeleteOnlyStart
    public delete = async (args: IDeleteOptions<I${obj_class_name}Params>): Promise<IMrsDeleteResult> => {
        const response = await this.rest.delete().where(args.where).fetch();

        return response;
    };

    public deleteMany = async (args: IDeleteOptions<I${obj_class_name}Params>): Promise<IMrsDeleteResult> => {
        const response = await this.delete(args);

        return response;
    };
    // --- crudDeleteOnlyEnd

// --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditDbObject("${obj_id}");
    }
// --- MySQL Shell for VS Code Extension Only --- End
}

${obj_interfaces}

// --- objectLoopEnd

export class ${schema_class_name} extends MrsBaseSchema {
    // --- objectLoopStart
    #${obj_name}?: ${obj_class_name}Request;
    // --- objectLoopEnd

    // --- objectLoopStart
    public get ${obj_name}(): ${obj_class_name}Request { if (this.#${obj_name} === undefined) { this.#${obj_name} = new ${obj_class_name}Request(this); } return this.#${obj_name}; }
    // --- objectLoopEnd
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditSchema("${schema_id}");
    };
    // --- MySQL Shell for VS Code Extension Only --- End
}

// --- schemaLoopEnd

/* =============================================================================
 * MRS Service ${service_url}
 */

export class ${service_class_name} extends MrsBaseService {
    // --- schemaLoopStart
    #${schema_name}?: ${schema_class_name};
    // --- schemaLoopEnd

    public constructor() {
        super("${service_url}", "${service_auth_path}");
    }

    // --- schemaLoopStart
    public get ${schema_name}(): ${schema_class_name} { if (this.#${schema_name} === undefined) { this.#${schema_name} = new ${schema_class_name}(this, "${schema_request_path}"); } return this.#${schema_name}; }
    // --- schemaLoopEnd
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditService("${service_id}");
    };

    public exportSdk = (): void => {
        mrsExportServiceSdk("${service_id}");
    };

    public static url = (serviceUrl: string): void => {
        mrsSetServiceUrl(serviceUrl);
    };

    public get url(): string {
        return this.serviceUrl;
    };

    public set url(serviceUrl: string) {
        this.serviceUrl = serviceUrl;
        this.session = new MrsBaseSession(this.serviceUrl, this.authPath, this.defaultTimeout);
        ${service_class_name}.url(serviceUrl);
    };

    public static authenticate = (username?: string, authApp = "MRS"): void => {
        mrsAuthenticate("${service_url}", "${service_auth_path}", authApp, username);
    };

    public authenticate = (username?: string, authApp = "MRS"): void => {
        ${service_class_name}.authenticate(username, authApp);
    };

    public setAsCurrent = () => {
        mrsSetCurrentService("${service_id}");
    };
    // --- MySQL Shell for VS Code Extension Only --- End
}

// --- MySQL Shell for VS Code Extension Only --- Begin
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const ${service_name} = new ${service_class_name}();
// --- MySQL Shell for VS Code Extension Only --- End
