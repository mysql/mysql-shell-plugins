/* Copyright (c) 2023, 2025, Oracle and/or its affiliates. */

/* eslint-disable max-len */
/* eslint-disable max-classes-per-file */
/* eslint-disable no-multiple-empty-lines */

// --- importLoopStart
import {
    MrsBaseService,
    MrsBaseSchema,
    MrsBaseObject,
    // --- importRequiredDatatypesOnlyStart
    // --- importRequiredDatatypesOnlyEnd
    // --- importAuthenticateOnlyStart
    IMrsLoginResult,
    IAuthenticateOptions,
    // --- importAuthenticateOnlyEnd
    // --- importReadOnlyStart
    IFindAllOptions,
    IFindFirstOptions,
    IFindManyOptions,
    IFindUniqueOptions,
    MrsBaseObjectQuery,
    NotFoundError,
    // --- importReadOnlyEnd
    // --- importCreateOnlyStart
    ICreateOptions,
    MrsBaseObjectCreate,
    // --- importCreateOnlyEnd
    // --- importProcedureCallOnlyStart
    IMrsProcedureResult,
    MrsBaseObjectProcedureCall,
    // --- importProcedureCallOnlyEnd
    // --- importFunctionCallOnlyStart
    MrsBaseObjectFunctionCall,
    // --- importFunctionCallOnlyEnd
    // --- importUpdateOnlyStart
    IUpdateOptions,
    MrsBaseObjectUpdate,
    // --- importUpdateOnlyEnd
    // --- importDeleteOnlyStart
    IMrsDeleteResult,
    IDeleteOptions,
    MrsBaseObjectDelete,
    // --- importDeleteOnlyEnd
} from "./MrsBaseClasses";

// --- MySQL Shell for VS Code Extension Remove --- Begin
export type { IMrsAuthUser, IMrsAuthStatus } from "./MrsBaseClasses";
// --- MySQL Shell for VS Code Extension Remove --- End

// --- importLoopEnd
// --- schemaLoopStart
// --- objectLoopStart
/*
 * MRS Object - ${obj_full_request_path} (${obj_type})
 */
class ${obj_class_name}Object extends MrsBaseObject {
    // --- crudReadOnlyStart
    #hasMore = true;
    // --- crudReadOnlyEnd
    // --- crudCreateOnlyStart
    public create = async (args: ICreateOptions<INew${obj_class_name}>): Promise<I${obj_class_name}> => {
        const request = new MrsBaseObjectCreate<INew${obj_class_name}, I${obj_class_name}>(this.schema, this.requestPath, args);
        const response = await request.fetch();

        return response;
    };

    public createMany = async (args: ICreateOptions<INew${obj_class_name}[]>): Promise<I${obj_class_name}[]> => {
        const result: I${obj_class_name}[] = [];

        for (const item of args.data) {
            const response = await this.create({ data: item });

            result.push(response);
        }

        return result;
    };
    // --- crudCreateOnlyEnd

    // --- crudReadOnlyStart
    public findAll = async (args?: IFindAllOptions<I${obj_class_name}, I${obj_class_name}Filterable, I${obj_class_name}Cursors>): Promise<I${obj_class_name}[]> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Filterable>(
            this.schema, this.requestPath, { ...args, take: 25 });
        const response = await request.fetchAll(args?.progress);

        return response.items;
    };

    public findMany = async ({ iterator = true, ...args }: IFindManyOptions<I${obj_class_name}, I${obj_class_name}Filterable, I${obj_class_name}Cursors>): Promise<I${obj_class_name}[]> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Filterable, I${obj_class_name}Cursors>(
            this.schema, this.requestPath, args);

        if (!this.#hasMore && iterator) {
            this.#hasMore = true;

            return [];
        }

        const response = await request.fetch();

        if (iterator) {
            this.#hasMore = response.hasMore;
        }

        return response.items;
    };

    public findFirst = async (args?: IFindFirstOptions<I${obj_class_name}, I${obj_class_name}Filterable, I${obj_class_name}Cursors>): Promise<I${obj_class_name} | undefined> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Filterable>(
            this.schema, this.requestPath, { ...args, take: 1 });
        const response = await request.fetchOne();

        return response;
    };
    // --- crudReadOnlyEnd

    // --- crudReadUniqueOnlyStart
    public findUnique = async (args?: IFindUniqueOptions<I${obj_class_name}, I${obj_class_name}UniqueFilterable>): Promise<I${obj_class_name} | undefined> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}UniqueFilterable>(
            this.schema, this.requestPath, { ...args, take: 1 });
        const response = await request.fetchOne();

        return response;
    };

    public findUniqueOrThrow = async (args?: IFindUniqueOptions<I${obj_class_name}, I${obj_class_name}UniqueFilterable>): Promise<I${obj_class_name}> => {
        const response = await this.findUnique(args);

        if (response === undefined) {
            throw new NotFoundError(`Record not found.`);
        }

        return response;
    };
    // --- crudReadUniqueOnlyEnd

    // --- crudUpdateOnlyStart
    public update = async (args: IUpdateOptions<IUpdate${obj_class_name}>): Promise<I${obj_class_name}> => {
        const request = new MrsBaseObjectUpdate<IUpdate${obj_class_name}, [${obj_quoted_pk_list}], I${obj_class_name}>(
            this.schema, this.requestPath, args, [${obj_quoted_pk_list}]);
        const response = await request.fetch();

        return response;
    };

    public updateMany = async (args: IUpdateOptions<IUpdate${obj_class_name}[]>): Promise<I${obj_class_name}[]> => {
        const result: I${obj_class_name}[] = [];

        for (const item of args.data) {
            const response = await this.update({ data: item });

            result.push(response);
        }

        return result;
    };
    // --- crudUpdateOnlyEnd

    // --- crudDeleteUniqueOnlyStart
    public delete = async (args: IDeleteOptions<I${obj_class_name}UniqueFilterable, { many: false }>): Promise<IMrsDeleteResult> => {
        return this.deleteMany(args as IDeleteOptions<I${obj_class_name}Filterable>);
    };
    // --- crudDeleteUniqueOnlyEnd

    // --- crudDeleteOnlyStart
    public deleteMany = async (args: IDeleteOptions<I${obj_class_name}Filterable>): Promise<IMrsDeleteResult> => {
        const request = new MrsBaseObjectDelete<I${obj_class_name}Filterable>(this.schema, this.requestPath, args);
        const response = await request.fetch();

        return response;
    };
    // --- crudDeleteOnlyEnd

    // --- crudProcedureCallOnlyStart
    public call = async (${obj_name}Params?: I${obj_param_interface}): Promise<IMrsProcedureResult<I${obj_param_interface}Out, ${obj_meta_interface}>> => {
        const request = new MrsBaseObjectProcedureCall<I${obj_param_interface}, I${obj_param_interface}Out, ${obj_meta_interface}>(
            this.schema, this.requestPath, ${obj_name}Params);
        const response = await request.fetch();

        return response;
    };
    // --- crudProcedureCallOnlyEnd
    // --- crudFunctionCallOnlyStart
    public call = async (${obj_name}Params?: I${obj_param_interface}): Promise<${obj_function_result_datatype}> => {
        const request = new MrsBaseObjectFunctionCall<I${obj_param_interface}, ${obj_function_result_datatype}>(
            this.schema, this.requestPath, ${obj_name}Params);
        const response = await request.fetch();

        return response.result;
    };
    // --- crudFunctionCallOnlyEnd

// --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditDbObject("${obj_id}");
    }
// --- MySQL Shell for VS Code Extension Only --- End
}

${obj_interfaces}
// --- objectLoopEnd
class ${schema_class_name} extends MrsBaseSchema {
    // --- objectLoopStart
    #${obj_name}?: ${obj_class_name}Object;
    // --- objectLoopEnd

    // --- objectLoopStart
    public get ${obj_name}(): ${obj_class_name}Object {
        if (this.#${obj_name} === undefined) {
            this.#${obj_name} = new ${obj_class_name}Object(this, "${obj_request_path}");
        }

        return this.#${obj_name};
    }
    // --- objectLoopEnd
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditSchema("${schema_id}");
    };
    // --- MySQL Shell for VS Code Extension Only --- End
}

// --- schemaLoopEnd

/* =============================================================================
 * MRS Service ${service_url}
 */
export class ${service_class_name} extends MrsBaseService {
    // --- schemaLoopStart
    #${schema_name}?: ${schema_class_name};
    // --- schemaLoopEnd

    public constructor(baseUrl: string = "${service_url}") {
        super(baseUrl, "${service_auth_path}");
    }

    // --- schemaLoopStart
    public get ${schema_name}(): ${schema_class_name} {
        if (this.#${schema_name} === undefined) {
            this.#${schema_name} = new ${schema_class_name}(this, "${schema_request_path}");
        }

        return this.#${schema_name};
    }
    // --- schemaLoopEnd
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditService("${service_id}");
    };

    public exportSdk = (): void => {
        mrsExportServiceSdk("${service_id}");
    };

    public addContentSet = (directory?: string): void => {
        mrsAddContentSet("${service_id}", directory);
    };

    public static url = (serviceUrl: string): void => {
        mrsSetServiceUrl(serviceUrl);
    };

    public get url(): string {
        return this.serviceUrl;
    };

    public set url(serviceUrl: string) {
        this.serviceUrl = serviceUrl;
        this.session = new MrsBaseSession(this.serviceUrl, this.authPath, this.defaultTimeout);
        ${service_class_name}.url(serviceUrl);
    };

    public static authenticate = ({ username, app }: Partial<IAuthenticateOptions>): Promise<IMrsLoginResult> => {
        mrsAuthenticate("${service_url}", "${service_auth_path}", app, username);
    };

    public setAsCurrent = () => {
        mrsSetCurrentService("${service_id}");
    };
    // --- MySQL Shell for VS Code Extension Only --- End

    // --- serviceAuthenticateStart
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public async authenticate(options?: Partial<Omit<IAuthenticateOptions, "password" | "vendor">>): Promise<IMrsLoginResult>;
    // --- MySQL Shell for VS Code Extension Only --- End
    public async authenticate(options: IAuthenticateOptions): Promise<IMrsLoginResult> {
        const { username, password, app, vendor } = options ?? {};
        // --- MySQL Shell for VS Code Extension Only --- Begin
        if (typeof ${service_class_name}.authenticate === "function") {
            return ${service_class_name}.authenticate({ username, app, vendor });
        }
        // --- MySQL Shell for VS Code Extension Only --- End

        return super.authenticate({ username, password, app, vendor });
    }
    // --- serviceAuthenticateEnd
}

// --- MySQL Shell for VS Code Extension Only --- Begin
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const ${service_name} = new ${service_class_name}();
// --- MySQL Shell for VS Code Extension Only --- End
