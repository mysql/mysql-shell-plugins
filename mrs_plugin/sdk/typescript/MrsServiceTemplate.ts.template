/* Copyright (c) 2023, 2024, Oracle and/or its affiliates. */

/* eslint-disable max-len */
/* eslint-disable max-classes-per-file */

// --- importLoopStart
import {
    IMrsFetchData,
    IMrsResourceData,
    MrsBaseService,
    MrsBaseSchema,
    // --- importRequiredDatatypesOnlyStart
    // --- importRequiredDatatypesOnlyEnd
    // --- importReadOnlyStart
    IFindAllOptions,
    IFindFirstOptions,
    IFindManyOptions,
    IFindUniqueOptions,
    MrsBaseObjectQuery,
    NotFoundError,
    // --- importReadOnlyEnd
    // --- importCreateOnlyStart
    ICreateOptions,
    MrsBaseObjectCreate,
    // --- importCreateOnlyEnd
    // --- importUpdateProcedureOnlyStart
    IMrsProcedureResult,
    IMrsProcedureResultList,
    MrsBaseObjectProcedureCall,
    // --- importUpdateProcedureOnlyEnd
    // --- importReadFunctionOnlyStart
    MrsBaseObjectFunctionCall,
    // --- importReadFunctionOnlyEnd
    // --- importUpdateOnlyStart
    IUpdateOptions,
    MrsBaseObjectUpdate,
    // --- importUpdateOnlyEnd
    // --- importDeleteOnlyStart
    IMrsDeleteResult,
    IDeleteOptions,
    MrsBaseObjectDelete,
    // --- importDeleteOnlyEnd
} from "./MrsBaseClasses";

// --- MySQL Shell for VS Code Extension Remove --- Begin
export type { IMrsAuthUser, IMrsAuthStatus } from "./MrsBaseClasses";
// --- MySQL Shell for VS Code Extension Remove --- End

// --- importLoopEnd

// --- schemaLoopStart
/* -----------------------------------------------------------------------------
 * MRS Schema ${schema_request_path}
 */

export class ${schema_class_name}ObjectRequest {
    public constructor(
        public schema: ${schema_class_name}) {
    }
}

// --- objectLoopStart
/*
 * MRS Object - ${obj_full_request_path} (${obj_type})
 */

export class ${obj_class_name}Request extends ${schema_class_name}ObjectRequest {

    static readonly #schemaRequestPath = "${schema_request_path}";
    static readonly #requestPath = "${obj_request_path}";

    #hasMore = true;

    // --- crudCreateOnlyStart
    public create = async (args: ICreateOptions<I${obj_class_name}>): Promise<I${obj_class_name}> => {
        const request = new MrsBaseObjectCreate<I${obj_class_name}>(this.schema, ${obj_class_name}Request.#requestPath, args);
        const response = await request.fetch();

        return response;
    };

    public createMany = async (args: ICreateOptions<I${obj_class_name}[]>): Promise<I${obj_class_name}[]> => {
        const result: I${obj_class_name}[] = [];

        for (const item of args.data) {
            const response = await this.create({ data: item });

            result.push(response);
        }

        return result;
    };
    // --- crudCreateOnlyEnd
    // --- crudReadOnlyStart
    public findAll = async (args?: IFindAllOptions<I${obj_class_name}, I${obj_class_name}Params, I${obj_class_name}Cursors>): Promise<I${obj_class_name}[]> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params>(
            this.schema, ${obj_class_name}Request.#requestPath, { ...args, take: 25 });
        const response = await request.fetchAll(args?.progress);

        return response.items;
    };

    public findMany = async ({ iterator = true, ...args }: IFindManyOptions<I${obj_class_name}, I${obj_class_name}Params, I${obj_class_name}Cursors>): Promise<I${obj_class_name}[]> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params, I${obj_class_name}Cursors>(
            this.schema, ${obj_class_name}Request.#requestPath, args);

        if (!this.#hasMore && iterator) {
            this.#hasMore = true;

            return [];
        }

        const response = await request.fetch();

        if (iterator) {
            this.#hasMore = response.hasMore;
        }

        return response.items;
    };

    public findFirst = async (args?: IFindFirstOptions<I${obj_class_name}, I${obj_class_name}Params, I${obj_class_name}Cursors>): Promise<I${obj_class_name} | undefined> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}Params>(
            this.schema, ${obj_class_name}Request.#requestPath, { ...args, take: 1 });
        const response = await request.fetchOne();

        return response;
    };
    // --- crudReadOnlyEnd

    // --- crudReadUniqueOnlyStart
    public findUnique = async (args?: IFindUniqueOptions<I${obj_class_name}, I${obj_class_name}UniqueParams>): Promise<I${obj_class_name} | undefined> => {
        const request = new MrsBaseObjectQuery<I${obj_class_name}, I${obj_class_name}UniqueParams>(
            this.schema, ${obj_class_name}Request.#requestPath, { ...args, take: 1 });
        const response = await request.fetchOne();

        return response;
    };

    public findUniqueOrThrow = async (args?: IFindUniqueOptions<I${obj_class_name}, I${obj_class_name}UniqueParams>): Promise<I${obj_class_name}> => {
        const response = await this.findUnique(args);

        if (response === undefined) {
            throw new NotFoundError(`Record not found.`);
        }

        return response;
    };
    // --- crudReadUniqueOnlyEnd

    // --- crudUpdateOnlyStart
    public update = async (args: IUpdateOptions<I${obj_class_name}, I${obj_class_name}Params, [${obj_quoted_pk_list}], { batch: false }>): Promise<I${obj_class_name}> => {
        const request = new MrsBaseObjectUpdate<I${obj_class_name}, I${obj_class_name}Params, [${obj_quoted_pk_list}]>(
            this.schema, ${obj_class_name}Request.#requestPath, args);
        const response = await request.fetch();

        return response;
    };

    public updateMany = async (args: IUpdateOptions<I${obj_class_name}[], I${obj_class_name}Params, [${obj_quoted_pk_list}], { batch: true }>): Promise<I${obj_class_name}[]> => {
        const result: I${obj_class_name}[] = [];

        for (let i = 0; i < args.where.length; ++i) {
            const response = await this.update({ where: args.where[i], data: args.data[i] });

            result.push(response);
        }

        return result;
    };
    // --- crudUpdateOnlyEnd
    // --- crudUpdateProcedureOnlyStart
    public call = async (${obj_name}Params: I${obj_param_interface}): Promise<IMrsProcedureResultList<${obj_meta_interface}>> => {
        const request = new MrsBaseObjectProcedureCall<${obj_meta_interface}, I${obj_param_interface}>(
            this.schema, ${obj_class_name}Request.#requestPath, ${obj_name}Params);
        const response = await request.fetch();

        return response;
    };
    // --- crudUpdateProcedureOnlyEnd
    // --- crudReadFunctionOnlyStart
    public call = async (${obj_name}Params: I${obj_param_interface}): Promise<${obj_function_result_datatype}> => {
        const request = new MrsBaseObjectFunctionCall<${obj_function_result_datatype}, I${obj_param_interface}>(
            this.schema, ${obj_class_name}Request.#requestPath, ${obj_name}Params);
        const response = await request.fetch();

        return response;
    };
    // --- crudReadFunctionOnlyEnd

    // --- crudDeleteUniqueOnlyStart
    public delete = async (args: IDeleteOptions<I${obj_class_name}UniqueParams, { many: false }>): Promise<IMrsDeleteResult> => {
        return this.deleteMany(args as IDeleteOptions<I${obj_class_name}Params>);
    };
    // --- crudDeleteUniqueOnlyEnd

    // --- crudDeleteOnlyStart
    public deleteMany = async (args: IDeleteOptions<I${obj_class_name}Params>): Promise<IMrsDeleteResult> => {
        const request = new MrsBaseObjectDelete<I${obj_class_name}Params>(this.schema, ${obj_class_name}Request.#requestPath, args);
        const response = await request.fetch();

        return response;
    };
    // --- crudDeleteOnlyEnd

// --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditDbObject("${obj_id}");
    }
// --- MySQL Shell for VS Code Extension Only --- End
}

${obj_interfaces}
// --- objectLoopEnd
export class ${schema_class_name} extends MrsBaseSchema {
    // --- objectLoopStart
    #${obj_name}?: ${obj_class_name}Request;
    // --- objectLoopEnd

    // --- objectLoopStart
    public get ${obj_name}(): ${obj_class_name}Request {
        if (this.#${obj_name} === undefined) {
            this.#${obj_name} = new ${obj_class_name}Request(this);
        }

        return this.#${obj_name};
    }
    // --- objectLoopEnd
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditSchema("${schema_id}");
    };
    // --- MySQL Shell for VS Code Extension Only --- End
}

// --- schemaLoopEnd

/* =============================================================================
 * MRS Service ${service_url}
 */

export class ${service_class_name} extends MrsBaseService {
    // --- schemaLoopStart
    #${schema_name}?: ${schema_class_name};
    // --- schemaLoopEnd

    public constructor() {
        super("${service_url}", "${service_auth_path}");
    }

    // --- schemaLoopStart
    public get ${schema_name}(): ${schema_class_name} {
        if (this.#${schema_name} === undefined) {
            this.#${schema_name} = new ${schema_class_name}(this, "${schema_request_path}");
        }

        return this.#${schema_name};
    }
    // --- schemaLoopEnd
    // --- MySQL Shell for VS Code Extension Only --- Begin
    public edit = (): void => {
        mrsEditService("${service_id}");
    };

    public exportSdk = (): void => {
        mrsExportServiceSdk("${service_id}");
    };

    public addContentSet = (directory?: string): void => {
        mrsAddContentSet("${service_id}", directory);
    };

    public static url = (serviceUrl: string): void => {
        mrsSetServiceUrl(serviceUrl);
    };

    public get url(): string {
        return this.serviceUrl;
    };

    public set url(serviceUrl: string) {
        this.serviceUrl = serviceUrl;
        this.session = new MrsBaseSession(this.serviceUrl, this.authPath, this.defaultTimeout);
        ${service_class_name}.url(serviceUrl);
    };

    public static authenticate = (username?: string, authApp = "MRS"): void => {
        mrsAuthenticate("${service_url}", "${service_auth_path}", authApp, username);
    };

    public authenticate = (username?: string, authApp = "MRS"): void => {
        ${service_class_name}.authenticate(username, authApp);
    };

    public setAsCurrent = () => {
        mrsSetCurrentService("${service_id}");
    };
    // --- MySQL Shell for VS Code Extension Only --- End
}

// --- MySQL Shell for VS Code Extension Only --- Begin
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const ${service_name} = new ${service_class_name}();
// --- MySQL Shell for VS Code Extension Only --- End
