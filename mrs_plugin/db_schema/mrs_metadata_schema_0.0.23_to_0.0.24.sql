-- Copyright (c) 2022, Oracle and/or its affiliates.
--
-- MySQL Script generated by MySQL Workbench
-- Wed Apr 21 12:56:32 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`service`
-- -----------------------------------------------------
ALTER TABLE `mysql_rest_service_metadata`.`service`
    ADD COLUMN `options` JSON NULL,
    ADD COLUMN `auth_path` VARCHAR(255) NOT NULL DEFAULT '/authentication' COMMENT 'The path used for authentication. The following sub-paths will be made available for <service_path>/<auth_path>:  /login /status /logout /completed',
    ADD COLUMN `auth_completed_url` VARCHAR(255) NULL COMMENT 'The authentication workflow will redirect to this URL after successful- or failed login. If this field is not set, the workflow will redirect to <service_path>/<auth_path>/completed if the <service_path>/<auth_path>/login?onCompletionRedirect parameter has not been set.',
    ADD COLUMN `auth_completed_url_validation` VARCHAR(512) NULL COMMENT 'A regular expression to validate the <service_path>/<auth_path>/login?onCompletionRedirect parameter. If set, this allows to limit the possible URLs an application can specify for this parameter.',
    ADD COLUMN `auth_completed_page_content` TEXT NULL COMMENT 'If set, this content replaces the default content of the /completed page.';

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`db_schema`
-- -----------------------------------------------------
ALTER TABLE `mysql_rest_service_metadata`.`db_schema`
    ADD COLUMN `options` JSON NULL;

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`db_object`
-- -----------------------------------------------------
ALTER TABLE `mysql_rest_service_metadata`.`db_object`
    ADD COLUMN `options` JSON NULL,
    RENAME COLUMN `crud_operation` TO `crud_operations`;

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`parameter`
-- -----------------------------------------------------
ALTER TABLE `mysql_rest_service_metadata`.`parameter`
    DROP COLUMN `crud_operations`,
    ADD COLUMN `position` INT NOT NULL,
    ADD COLUMN `mode` ENUM("IN", "OUT", "INOUT") NULL;

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_privilege`
-- -----------------------------------------------------
ALTER TABLE `mysql_rest_service_metadata`.`auth_privilege`
    RENAME COLUMN `crud_operation` TO `crud_operations`;

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_app`
-- -----------------------------------------------------
ALTER TABLE `mysql_rest_service_metadata`.`auth_app`
    ADD UNIQUE INDEX `unique_name_per_service` (`service_id` ASC, `name` ASC) VISIBLE;

-- -----------------------------------------------------
-- Trigger `mysql_rest_service_metadata`.`db_schema_*`
-- -----------------------------------------------------
DROP TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_INSERT_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_UPDATE_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_DELETE_AUDIT_LOG`;
DELIMITER $$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `db_schema` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_schema", 
        "INSERT", 
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "items_per_page", NEW.items_per_page,
            "comments", NEW.comments,
            "options", NEW.options),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `db_schema` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_schema", 
        "UPDATE", 
        JSON_OBJECT(
            "id", OLD.id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "items_per_page", OLD.items_per_page,
            "comments", OLD.comments,
            "options", OLD.options),
        JSON_OBJECT(
            "id", NEW.id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "items_per_page", NEW.items_per_page,
            "comments", NEW.comments,
            "options", NEW.options),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `db_schema` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_schema", 
        "DELETE", 
        JSON_OBJECT(
            "id", OLD.id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "items_per_page", OLD.items_per_page,
            "comments", OLD.comments,
            "options", OLD.options),
        NULL,
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- Trigger `mysql_rest_service_metadata`.`db_object_*`
-- -----------------------------------------------------
DROP TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_INSERT_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_UPDATE_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_DELETE_AUDIT_LOG`;
DELIMITER $$


CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `db_object` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object", 
        "INSERT", 
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "db_schema_id", NEW.db_schema_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "enabled", NEW.enabled,
            "object_type", NEW.object_type,
            "crud_operations", NEW.crud_operations,
            "format", NEW.format,
            "items_per_page", NEW.items_per_page,
            "media_type", NEW.media_type,
            "auto_detect_media_type", NEW.auto_detect_media_type,
            "requires_auth", NEW.requires_auth,
            "auth_stored_procedure", NEW.auth_stored_procedure,
            "row_user_ownership_enforced", NEW.row_user_ownership_enforced,
            "row_user_ownership_column", NEW.row_user_ownership_column,
            "comments", NEW.comments,
            "options", NEW.options),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `db_object` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object", 
        "UPDATE", 
        JSON_OBJECT(
            "id", OLD.id,
            "db_schema_id", OLD.db_schema_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "enabled", OLD.enabled,
            "object_type", OLD.object_type,
            "crud_operations", OLD.crud_operations,
            "format", OLD.format,
            "items_per_page", OLD.items_per_page,
            "media_type", OLD.media_type,
            "auto_detect_media_type", OLD.auto_detect_media_type,
            "requires_auth", OLD.requires_auth,
            "auth_stored_procedure", OLD.auth_stored_procedure,
            "row_user_ownership_enforced", OLD.row_user_ownership_enforced,
            "row_user_ownership_column", OLD.row_user_ownership_column,
            "comments", OLD.comments,
            "options", OLD.options),
        JSON_OBJECT(
            "id", NEW.id,
            "db_schema_id", NEW.db_schema_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "enabled", NEW.enabled,
            "object_type", NEW.object_type,
            "crud_operations", NEW.crud_operations,
            "format", NEW.format,
            "items_per_page", NEW.items_per_page,
            "media_type", NEW.media_type,
            "auto_detect_media_type", NEW.auto_detect_media_type,
            "requires_auth", NEW.requires_auth,
            "auth_stored_procedure", NEW.auth_stored_procedure,
            "row_user_ownership_enforced", NEW.row_user_ownership_enforced,
            "row_user_ownership_column", NEW.row_user_ownership_column,
            "comments", NEW.comments,
            "options", NEW.options),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `db_object` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object", 
        "DELETE", 
        JSON_OBJECT(
            "id", OLD.id,
            "db_schema_id", OLD.db_schema_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "enabled", OLD.enabled,
            "object_type", OLD.object_type,
            "crud_operations", OLD.crud_operations,
            "format", OLD.format,
            "items_per_page", OLD.items_per_page,
            "media_type", OLD.media_type,
            "auto_detect_media_type", OLD.auto_detect_media_type,
            "requires_auth", OLD.requires_auth,
            "auth_stored_procedure", OLD.auth_stored_procedure,
            "row_user_ownership_enforced", OLD.row_user_ownership_enforced,
            "row_user_ownership_column", OLD.row_user_ownership_column,
            "comments", OLD.comments,
            "options", OLD.options),
        NULL,
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

DELIMITER ;


-- -----------------------------------------------------
-- Trigger `mysql_rest_service_metadata`.`service_*`
-- -----------------------------------------------------
DROP TRIGGER `mysql_rest_service_metadata`.`service_AFTER_INSERT_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`service_AFTER_UPDATE_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`service_AFTER_DELETE_AUDIT_LOG`;
DELIMITER $$

CREATE TRIGGER `mysql_rest_service_metadata`.`service_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `service` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "service", 
        "INSERT", 
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "url_host_id", NEW.url_host_id,
            "url_context_root", NEW.url_context_root,
            "url_protocol", NEW.url_protocol,
            "enabled", NEW.enabled,
            "is_default", NEW.is_default,
            "comments", NEW.comments,
            "options", NEW.options,
            "auth_path", NEW.auth_path,
            "auth_completed_url", NEW.auth_completed_url,
            "auth_completed_url_validation", NEW.auth_completed_url_validation),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`service_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `service` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "service", 
        "UPDATE", 
        JSON_OBJECT(
            "id", OLD.id,
            "url_host_id", OLD.url_host_id,
            "url_context_root", OLD.url_context_root,
            "url_protocol", OLD.url_protocol,
            "enabled", OLD.enabled,
            "is_default", OLD.is_default,
            "comments", OLD.comments,
            "options", OLD.options,
            "auth_path", OLD.auth_path,
            "auth_completed_url", OLD.auth_completed_url,
            "auth_completed_url_validation", OLD.auth_completed_url_validation),
        JSON_OBJECT(
            "id", NEW.id,
            "url_host_id", NEW.url_host_id,
            "url_context_root", NEW.url_context_root,
            "url_protocol", NEW.url_protocol,
            "enabled", NEW.enabled,
            "is_default", NEW.is_default,
            "comments", NEW.comments,
            "options", NEW.options,
            "auth_path", NEW.auth_path,
            "auth_completed_url", NEW.auth_completed_url,
            "auth_completed_url_validation", NEW.auth_completed_url_validation),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`service_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `service` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "service", 
        "DELETE", 
        JSON_OBJECT(
            "id", OLD.id,
            "url_host_id", OLD.url_host_id,
            "url_context_root", OLD.url_context_root,
            "url_protocol", OLD.url_protocol,
            "enabled", OLD.enabled,
            "is_default", OLD.is_default,
            "comments", OLD.comments,
            "options", OLD.options,
            "auth_path", OLD.auth_path,
            "auth_completed_url", OLD.auth_completed_url,
            "auth_completed_url_validation", OLD.auth_completed_url_validation),
        NULL,
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- Trigger `mysql_rest_service_metadata`.`auth_app_*`
-- -----------------------------------------------------
DROP TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_INSERT_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_UPDATE_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_DELETE_AUDIT_LOG`;
DELIMITER $$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_app` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_app", 
        "INSERT", 
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "auth_vendor_id", NEW.auth_vendor_id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "description", NEW.description,
            "url", NEW.url,
            "url_direct_auth", NEW.url_direct_auth,
            "access_token", NEW.access_token,
            "app_id", NEW.app_id,
            "enabled", NEW.enabled,
            "use_built_in_authorization", NEW.use_built_in_authorization,
            "limit_to_registered_users", NEW.limit_to_registered_users,
            "default_auth_role_id", NEW.default_auth_role_id),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_app` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_app", 
        "UPDATE", 
        JSON_OBJECT(
            "id", OLD.id,
            "auth_vendor_id", OLD.auth_vendor_id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "description", OLD.description,
            "url", OLD.url,
            "url_direct_auth", OLD.url_direct_auth,
            "access_token", OLD.access_token,
            "app_id", OLD.app_id,
            "enabled", OLD.enabled,
            "use_built_in_authorization", OLD.use_built_in_authorization,
            "limit_to_registered_users", OLD.limit_to_registered_users,
            "default_auth_role_id", OLD.default_auth_role_id),
        JSON_OBJECT(
            "id", NEW.id,
            "auth_vendor_id", NEW.auth_vendor_id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "description", NEW.description,
            "url", NEW.url,
            "url_direct_auth", NEW.url_direct_auth,
            "access_token", NEW.access_token,
            "app_id", NEW.app_id,
            "enabled", NEW.enabled,
            "use_built_in_authorization", NEW.use_built_in_authorization,
            "limit_to_registered_users", NEW.limit_to_registered_users,
            "default_auth_role_id", NEW.default_auth_role_id),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_app` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_app", 
        "DELETE", 
        JSON_OBJECT(
            "id", OLD.id,
            "auth_vendor_id", OLD.auth_vendor_id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "description", OLD.description,
            "url", OLD.url,
            "url_direct_auth", OLD.url_direct_auth,
            "access_token", OLD.access_token,
            "app_id", OLD.app_id,
            "enabled", OLD.enabled,
            "use_built_in_authorization", OLD.use_built_in_authorization,
            "limit_to_registered_users", OLD.limit_to_registered_users,
            "default_auth_role_id", OLD.default_auth_role_id),
        NULL,
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- Trigger `mysql_rest_service_metadata`.`parameter_*`
-- -----------------------------------------------------
DROP TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_INSERT_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_UPDATE_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_DELETE_AUDIT_LOG`;
DELIMITER $$

CREATE TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `parameter` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "parameter", 
        "INSERT", 
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "db_object_id", NEW.db_object_id,
            "position", NEW.position,
            "name", NEW.name,
            "bind_column_name", NEW.bind_column_name,
            "param_datatype", NEW.param_datatype,
            "mode", NEW.mode,
            "comments", NEW.comments),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `parameter` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "parameter", 
        "UPDATE", 
        JSON_OBJECT(
            "id", OLD.id,
            "db_object_id", OLD.db_object_id,
            "position", OLD.position,
            "name", OLD.name,
            "bind_column_name", OLD.bind_column_name,
            "param_datatype", OLD.param_datatype,
            "mode", OLD.mode,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "db_object_id", NEW.db_object_id,
            "position", NEW.position,
            "name", NEW.name,
            "bind_column_name", NEW.bind_column_name,
            "param_datatype", NEW.param_datatype,
            "mode", NEW.mode,
            "comments", NEW.comments),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `parameter` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "parameter", 
        "DELETE", 
        JSON_OBJECT(
            "id", OLD.id,
            "db_object_id", OLD.db_object_id,
            "position", OLD.position,
            "name", OLD.name,
            "bind_column_name", OLD.bind_column_name,
            "param_datatype", OLD.param_datatype,
            "mode", OLD.mode,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

DELIMITER ;

-- -----------------------------------------------------
-- Trigger `mysql_rest_service_metadata`.`auth_privilege_*`
-- -----------------------------------------------------
DROP TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_INSERT_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_UPDATE_AUDIT_LOG`;
DROP TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_DELETE_AUDIT_LOG`;
DELIMITER $$


CREATE TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_privilege` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_privilege", 
        "INSERT", 
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "auth_role_id", NEW.auth_role_id,
            "crud_operations", NEW.crud_operations,
            "service_id", NEW.service_id,
            "db_schema_id", NEW.db_schema_id,
            "db_object_id", NEW.db_object_id),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_privilege` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_privilege", 
        "UPDATE", 
        JSON_OBJECT(
            "id", OLD.id,
            "auth_role_id", OLD.auth_role_id,
            "crud_operations", OLD.crud_operations,
            "service_id", OLD.service_id,
            "db_schema_id", OLD.db_schema_id,
            "db_object_id", OLD.db_object_id),
        JSON_OBJECT(
            "id", NEW.id,
            "auth_role_id", NEW.auth_role_id,
            "crud_operations", NEW.crud_operations,
            "service_id", NEW.service_id,
            "db_schema_id", NEW.db_schema_id,
            "db_object_id", NEW.db_object_id),
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_privilege` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_privilege", 
        "DELETE", 
        JSON_OBJECT(
            "id", OLD.id,
            "auth_role_id", OLD.auth_role_id,
            "crud_operations", OLD.crud_operations,
            "service_id", OLD.service_id,
            "db_schema_id", OLD.db_schema_id,
            "db_object_id", OLD.db_object_id),
        NULL,
        CURRENT_USER(), 
        CURRENT_TIMESTAMP
    );
END$$


DELIMITER ;

-- -----------------------------------------------------
-- View `mysql_rest_service_metadata`.`schema_version`
-- -----------------------------------------------------
USE `mysql_rest_service_metadata`;
CREATE  OR REPLACE SQL SECURITY INVOKER VIEW schema_version (major, minor, patch) AS SELECT 0, 0, 24;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
