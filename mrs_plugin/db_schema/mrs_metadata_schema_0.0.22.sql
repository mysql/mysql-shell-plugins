-- Copyright (c) 2022, Oracle and/or its affiliates.
--
-- MySQL Script generated by MySQL Workbench
-- Wed Feb 23 13:25:12 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mysql_rest_service_metadata
-- -----------------------------------------------------
-- Holds metadata information for the MySQL REST Service.

-- -----------------------------------------------------
-- Schema mysql_rest_service_metadata
--
-- Holds metadata information for the MySQL REST Service.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mysql_rest_service_metadata` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ;
USE `mysql_rest_service_metadata` ;

-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`url_host`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`url_host` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL DEFAULT '' COMMENT 'Specifies the host name of the MRS as represented in the request URLs. Example: example.com',
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`service`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`service` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `url_host_id` INT UNSIGNED NOT NULL,
  `url_context_root` VARCHAR(255) NOT NULL DEFAULT '/mrs' COMMENT 'Specifies context root of the MRS as represented in the request URLs, default being /mrs. URL Example: https://www.example.com/mrs',
  `url_protocol` SET('HTTP', 'HTTPS') NOT NULL DEFAULT 'HTTP',
  `enabled` TINYINT NOT NULL DEFAULT 1,
  `is_default` TINYINT NOT NULL DEFAULT 0,
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_service_url_host1_idx` (`url_host_id` ASC) VISIBLE,
  CONSTRAINT `fk_service_url_host1`
    FOREIGN KEY (`url_host_id`)
    REFERENCES `mysql_rest_service_metadata`.`url_host` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`db_schema`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`db_schema` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `service_id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `request_path` VARCHAR(255) NOT NULL,
  `requires_auth` TINYINT NOT NULL DEFAULT 0,
  `enabled` TINYINT NOT NULL DEFAULT 1,
  `items_per_page` INT NULL DEFAULT 25,
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_db_schema_service1_idx` (`service_id` ASC) VISIBLE,
  CONSTRAINT `fk_db_schema_service1`
    FOREIGN KEY (`service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`db_object`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`db_object` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `db_schema_id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `request_path` VARCHAR(255) NOT NULL,
  `enabled` TINYINT NOT NULL DEFAULT 1,
  `object_type` ENUM('TABLE', 'VIEW', 'PROCEDURE') NOT NULL,
  `crud_operation` SET('CREATE', 'READ', 'UPDATE', 'DELETE') NOT NULL DEFAULT '',
  `format` ENUM('FEED', 'ITEM', 'MEDIA') NOT NULL DEFAULT 'FEED' COMMENT 'The HTTP request method for this handler. \'feed\' executes the source query and returns the result set in JSON representation, \'item\' returns a single row instead, \'media\' turns the result set into a binary representation with accompanying HTTP Content-Type header.',
  `items_per_page` INT NULL,
  `media_type` VARCHAR(45) NULL,
  `auto_detect_media_type` TINYINT NOT NULL DEFAULT 0,
  `requires_auth` TINYINT NOT NULL DEFAULT 0,
  `auth_stored_procedure` VARCHAR(255) NULL DEFAULT 0 COMMENT 'Specifies the STORE PROCEDURE that should be called to identify if the given user is allowed to perform the given CRUD operation. The SP has to be in the same schema as the schema object and it has to accept the following parameters: (user_id, schema, object, crud_operation).  It returns true or false.',
  `row_user_ownership_enforced` TINYINT NOT NULL DEFAULT 0 COMMENT 'Specifies if row level security is enforced on this object.',
  `row_user_ownership_column` VARCHAR(255) NULL COMMENT 'Defines the column used for row user ownership checks',
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_db_objects_db_schema1_idx` (`db_schema_id` ASC) INVISIBLE,
  CONSTRAINT `fk_db_objects_db_schema1`
    FOREIGN KEY (`db_schema_id`)
    REFERENCES `mysql_rest_service_metadata`.`db_schema` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`parameter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`parameter` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `db_object_id` INT UNSIGNED NOT NULL,
  `crud_operation` SET('CREATE', 'READ', 'UPDATE', 'DELETE') NOT NULL DEFAULT '',
  `name` VARCHAR(255) NOT NULL COMMENT 'The name of the parameter',
  `bind_column_name` VARCHAR(255) NOT NULL COMMENT 'The column to map when the parameter is given, similar to an alias for the column.',
  `param_datatype` ENUM('STRING', 'INT', 'DOUBLE', 'BOOLEAN', 'LONG', 'TIMESTAMP') NOT NULL COMMENT 'The type of the parameter',
  `comments` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_parameter_db_object1_idx` (`db_object_id` ASC) VISIBLE,
  CONSTRAINT `fk_parameter_db_object1`
    FOREIGN KEY (`db_object_id`)
    REFERENCES `mysql_rest_service_metadata`.`db_object` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_vendor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`auth_vendor` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(65) NOT NULL,
  `validation_url` VARCHAR(255) NULL COMMENT 'URL used to validate the access_token provided by the client. Example: https://graph.facebook.com/debug_token?input_token=%access_token%&access_token=%app_access_token%',
  `enabled` TINYINT NOT NULL DEFAULT 1,
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`auth_role` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `derived_from_role_id` INT UNSIGNED NULL,
  `specific_to_service_id` INT UNSIGNED NULL,
  `caption` VARCHAR(150) NULL,
  `description` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_priv_role_priv_role1_idx` (`derived_from_role_id` ASC) VISIBLE,
  INDEX `fk_auth_role_service1_idx` (`specific_to_service_id` ASC) VISIBLE,
  CONSTRAINT `fk_priv_role_priv_role1`
    FOREIGN KEY (`derived_from_role_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_auth_role_service1`
    FOREIGN KEY (`specific_to_service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_app`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`auth_app` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `auth_vendor_id` INT UNSIGNED NOT NULL,
  `service_id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(45) NULL,
  `description` VARCHAR(512) NULL,
  `url` VARCHAR(255) NULL,
  `url_direct_auth` VARCHAR(255) NULL,
  `access_token` VARCHAR(1024) NULL COMMENT 'The app access token to validate the user login.',
  `app_id` VARCHAR(1024) NULL,
  `enabled` TINYINT NULL,
  `use_built_in_authorization` TINYINT NOT NULL DEFAULT 1,
  `limit_to_registered_users` TINYINT NOT NULL DEFAULT 1,
  `default_auth_role_id` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_auth_app_auth_vendor1_idx` (`auth_vendor_id` ASC) VISIBLE,
  INDEX `fk_auth_app_service1_idx` (`service_id` ASC) VISIBLE,
  INDEX `fk_auth_app_auth_role1_idx` (`default_auth_role_id` ASC) VISIBLE,
  CONSTRAINT `fk_auth_app_auth_vendor1`
    FOREIGN KEY (`auth_vendor_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_vendor` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_auth_app_service1`
    FOREIGN KEY (`service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_auth_app_auth_role1`
    FOREIGN KEY (`default_auth_role_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`auth_user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `auth_app_id` INT UNSIGNED NOT NULL,
  `name` VARCHAR(225) NULL,
  `email` VARCHAR(255) NULL,
  `vendor_user_id` VARCHAR(255) NULL,
  `login_permitted` TINYINT NOT NULL DEFAULT 0,
  `mapped_user_id` VARCHAR(255) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_auth_user_auth_app1_idx` (`auth_app_id` ASC) VISIBLE,
  CONSTRAINT `fk_auth_user_auth_app1`
    FOREIGN KEY (`auth_app_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_app` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`config` (
  `id` TINYINT NOT NULL DEFAULT 1,
  `service_enabled` TINYINT NULL,
  `data` JSON NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`redirect`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`redirect` (
  `id` INT NOT NULL,
  `pattern` VARCHAR(1024) NULL,
  `target` VARCHAR(512) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`url_host_alias`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`url_host_alias` (
  `id` INT UNSIGNED NOT NULL,
  `url_host_id` INT UNSIGNED NOT NULL,
  `alias` VARCHAR(255) NOT NULL COMMENT 'Specifies additional aliases for the given host, e.g. www.example.com',
  PRIMARY KEY (`id`),
  INDEX `fk_url_host_alias_url_host1_idx` (`url_host_id` ASC) VISIBLE,
  CONSTRAINT `fk_url_host_alias_url_host1`
    FOREIGN KEY (`url_host_id`)
    REFERENCES `mysql_rest_service_metadata`.`url_host` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`content_set`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`content_set` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `service_id` INT UNSIGNED NOT NULL,
  `request_path` VARCHAR(255) NOT NULL,
  `requires_auth` TINYINT NOT NULL DEFAULT 0,
  `enabled` TINYINT NOT NULL DEFAULT 0,
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_static_content_version_service1_idx` (`service_id` ASC) VISIBLE,
  CONSTRAINT `fk_static_content_version_service1`
    FOREIGN KEY (`service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`content_file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`content_file` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `content_set_id` INT UNSIGNED NOT NULL,
  `request_path` VARCHAR(255) NOT NULL DEFAULT '/',
  `requires_auth` TINYINT NOT NULL DEFAULT 0,
  `enabled` TINYINT NOT NULL DEFAULT 1,
  `content` LONGBLOB NOT NULL,
  `size` BIGINT GENERATED ALWAYS AS (LENGTH(content)) STORED,
  PRIMARY KEY (`id`),
  INDEX `fk_content_content_set1_idx` (`content_set_id` ASC) VISIBLE,
  CONSTRAINT `fk_content_content_set1`
    FOREIGN KEY (`content_set_id`)
    REFERENCES `mysql_rest_service_metadata`.`content_set` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`audit_log`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`audit_log` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `table_name` VARCHAR(255) NOT NULL,
  `dml_type` ENUM('INSERT', 'UPDATE', 'DELETE') NOT NULL,
  `old_row_data` JSON NULL,
  `new_row_data` JSON NULL,
  `changed_by` VARCHAR(255) NOT NULL,
  `changed_at` TIMESTAMP NOT NULL,
  `old_row_id` INT GENERATED ALWAYS AS (coalesce(json_extract(`old_row_data`,_utf8mb4'$.id'),json_extract(`old_row_data`,_utf8mb4'$.db_object_id'))),
  `new_row_id` INT GENERATED ALWAYS AS (coalesce(json_extract(`new_row_data`,_utf8mb4'$.id'),json_extract(`new_row_data`,_utf8mb4'$.db_object_id'))),
  PRIMARY KEY (`id`),
  INDEX `idx_table_name` (`table_name` ASC) VISIBLE,
  INDEX `idx_changed_at` (`changed_at` ASC) VISIBLE,
  INDEX `idx_changed_by` (`changed_by` ASC) VISIBLE,
  INDEX `idx_new_row_id` (`new_row_id` ASC) VISIBLE,
  INDEX `idx_old_row_id` (`old_row_id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_has_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_has_role` (
  `auth_user_id` INT UNSIGNED NOT NULL,
  `auth_role_id` INT UNSIGNED NOT NULL,
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`auth_user_id`, `auth_role_id`),
  INDEX `fk_auth_user_has_privilege_role_privilege_role1_idx` (`auth_role_id` ASC) VISIBLE,
  INDEX `fk_auth_user_has_privilege_role_auth_user1_idx` (`auth_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_auth_user_has_privilege_role_auth_user1`
    FOREIGN KEY (`auth_user_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_auth_user_has_privilege_role_privilege_role1`
    FOREIGN KEY (`auth_role_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_hierarchy_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_hierarchy_type` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `caption` VARCHAR(150) NULL,
  `description` VARCHAR(512) NULL,
  `specific_to_service_id` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_hierarchy_type_service1_idx` (`specific_to_service_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_hierarchy_type_service1`
    FOREIGN KEY (`specific_to_service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_hierarchy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_hierarchy` (
  `auth_user_id` INT UNSIGNED NOT NULL,
  `reporting_user_id` INT UNSIGNED NOT NULL,
  `user_hierarchy_type_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`auth_user_id`, `reporting_user_id`, `user_hierarchy_type_id`),
  INDEX `fk_user_hierarchy_auth_user2_idx` (`reporting_user_id` ASC) VISIBLE,
  INDEX `fk_user_hierarchy_hierarchy_type1_idx` (`user_hierarchy_type_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_hierarchy_auth_user1`
    FOREIGN KEY (`auth_user_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_hierarchy_auth_user2`
    FOREIGN KEY (`reporting_user_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_hierarchy_hierarchy_type1`
    FOREIGN KEY (`user_hierarchy_type_id`)
    REFERENCES `mysql_rest_service_metadata`.`user_hierarchy_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`auth_privilege`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`auth_privilege` (
  `id` INT UNSIGNED NOT NULL,
  `auth_role_id` INT UNSIGNED NOT NULL,
  `crud_operation` SET('CREATE', 'READ', 'UPDATE', 'DELETE') NOT NULL DEFAULT '',
  `service_id` INT UNSIGNED NULL,
  `db_schema_id` INT UNSIGNED NULL,
  `db_object_id` INT UNSIGNED NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_priv_on_schema_db_schema1_idx` (`db_schema_id` ASC) VISIBLE,
  INDEX `fk_priv_on_schema_service1_idx` (`service_id` ASC) VISIBLE,
  INDEX `fk_priv_on_schema_db_object1_idx` (`db_object_id` ASC) VISIBLE,
  CONSTRAINT `fk_priv_on_schema_auth_role1`
    FOREIGN KEY (`auth_role_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_priv_on_schema_db_schema1`
    FOREIGN KEY (`db_schema_id`)
    REFERENCES `mysql_rest_service_metadata`.`db_schema` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_priv_on_schema_service1`
    FOREIGN KEY (`service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_priv_on_schema_db_object1`
    FOREIGN KEY (`db_object_id`)
    REFERENCES `mysql_rest_service_metadata`.`db_object` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_group` (
  `id` INT UNSIGNED NOT NULL,
  `specific_to_service_id` INT UNSIGNED NULL,
  `caption` VARCHAR(45) NULL,
  `description` VARCHAR(512) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_user_group_service1_idx` (`specific_to_service_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_group_service1`
    FOREIGN KEY (`specific_to_service_id`)
    REFERENCES `mysql_rest_service_metadata`.`service` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_group_has_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_group_has_role` (
  `user_group_id` INT UNSIGNED NOT NULL,
  `auth_role_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_group_id`, `auth_role_id`),
  INDEX `fk_user_group_has_auth_role_auth_role1_idx` (`auth_role_id` ASC) VISIBLE,
  INDEX `fk_user_group_has_auth_role_user_group1_idx` (`user_group_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_group_has_auth_role_user_group1`
    FOREIGN KEY (`user_group_id`)
    REFERENCES `mysql_rest_service_metadata`.`user_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_group_has_auth_role_auth_role1`
    FOREIGN KEY (`auth_role_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_has_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_has_group` (
  `auth_user_id` INT UNSIGNED NOT NULL,
  `user_group_id` INT UNSIGNED NOT NULL,
  `comments` VARCHAR(512) NULL,
  PRIMARY KEY (`auth_user_id`, `user_group_id`),
  INDEX `fk_auth_user_has_user_group_user_group1_idx` (`user_group_id` ASC) VISIBLE,
  INDEX `fk_auth_user_has_user_group_auth_user1_idx` (`auth_user_id` ASC) VISIBLE,
  CONSTRAINT `fk_auth_user_has_user_group_auth_user1`
    FOREIGN KEY (`auth_user_id`)
    REFERENCES `mysql_rest_service_metadata`.`auth_user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_auth_user_has_user_group_user_group1`
    FOREIGN KEY (`user_group_id`)
    REFERENCES `mysql_rest_service_metadata`.`user_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`group_hierarchy_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`group_hierarchy_type` (
  `id` INT UNSIGNED NOT NULL,
  `caption` VARCHAR(150) NULL,
  `description` VARCHAR(512) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`user_group_hierarchy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`user_group_hierarchy` (
  `user_group_id` INT UNSIGNED NOT NULL,
  `sub_group_id` INT UNSIGNED NOT NULL,
  `group_hierarchy_type_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_group_id`, `sub_group_id`, `group_hierarchy_type_id`),
  INDEX `fk_user_group_has_user_group_user_group2_idx` (`sub_group_id` ASC) VISIBLE,
  INDEX `fk_user_group_has_user_group_user_group1_idx` (`user_group_id` ASC) VISIBLE,
  INDEX `fk_user_group_hierarchy_group_hierarchy_type1_idx` (`group_hierarchy_type_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_group_has_user_group_user_group1`
    FOREIGN KEY (`user_group_id`)
    REFERENCES `mysql_rest_service_metadata`.`user_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_group_has_user_group_user_group2`
    FOREIGN KEY (`sub_group_id`)
    REFERENCES `mysql_rest_service_metadata`.`user_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_group_hierarchy_group_hierarchy_type1`
    FOREIGN KEY (`group_hierarchy_type_id`)
    REFERENCES `mysql_rest_service_metadata`.`group_hierarchy_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mysql_rest_service_metadata`.`db_object_row_group_security`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mysql_rest_service_metadata`.`db_object_row_group_security` (
  `db_object_id` INT UNSIGNED NOT NULL,
  `group_hierarchy_type_id` INT UNSIGNED NOT NULL,
  `row_group_ownership_column` VARCHAR(255) NOT NULL,
  `use_highest_group_level` TINYINT NOT NULL DEFAULT 0,
  INDEX `fk_table1_db_object1_idx` (`db_object_id` ASC) VISIBLE,
  INDEX `fk_db_object_row_security_group_hierarchy_type1_idx` (`group_hierarchy_type_id` ASC) VISIBLE,
  PRIMARY KEY (`db_object_id`, `group_hierarchy_type_id`),
  CONSTRAINT `fk_table1_db_object1`
    FOREIGN KEY (`db_object_id`)
    REFERENCES `mysql_rest_service_metadata`.`db_object` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_db_object_row_security_group_hierarchy_type1`
    FOREIGN KEY (`group_hierarchy_type_id`)
    REFERENCES `mysql_rest_service_metadata`.`group_hierarchy_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mysql_rest_service_metadata` ;

-- -----------------------------------------------------
-- View `mysql_rest_service_metadata`.`schema_version`
-- -----------------------------------------------------
USE `mysql_rest_service_metadata`;
CREATE  OR REPLACE SQL SECURITY INVOKER VIEW schema_version (major, minor, patch) AS SELECT 0, 0, 22;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mysql_rest_service_metadata`.`auth_vendor`
-- -----------------------------------------------------
START TRANSACTION;
USE `mysql_rest_service_metadata`;
INSERT INTO `mysql_rest_service_metadata`.`auth_vendor` (`id`, `name`, `validation_url`, `enabled`, `comments`) VALUES (1, 'MySQL Basic', NULL, 1, 'Provides basic authentication via MySQL Server accounts.');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mysql_rest_service_metadata`.`auth_role`
-- -----------------------------------------------------
START TRANSACTION;
USE `mysql_rest_service_metadata`;
INSERT INTO `mysql_rest_service_metadata`.`auth_role` (`id`, `derived_from_role_id`, `specific_to_service_id`, `caption`, `description`) VALUES (1, NULL, NULL, 'Administrator', 'Full access to all db_objects');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mysql_rest_service_metadata`.`config`
-- -----------------------------------------------------
START TRANSACTION;
USE `mysql_rest_service_metadata`;
INSERT INTO `mysql_rest_service_metadata`.`config` (`id`, `service_enabled`, `data`) VALUES (1, 1, '{}');

COMMIT;


-- -----------------------------------------------------
-- Data for table `mysql_rest_service_metadata`.`user_hierarchy_type`
-- -----------------------------------------------------
START TRANSACTION;
USE `mysql_rest_service_metadata`;
INSERT INTO `mysql_rest_service_metadata`.`user_hierarchy_type` (`id`, `caption`, `description`, `specific_to_service_id`) VALUES (1, 'Direct Report', 'And employee directly reporting to the user', NULL);
INSERT INTO `mysql_rest_service_metadata`.`user_hierarchy_type` (`id`, `caption`, `description`, `specific_to_service_id`) VALUES (2, 'Dotted Line Report', 'And employee reporting to the user via a dotted line relationship', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `mysql_rest_service_metadata`.`auth_privilege`
-- -----------------------------------------------------
START TRANSACTION;
USE `mysql_rest_service_metadata`;
INSERT INTO `mysql_rest_service_metadata`.`auth_privilege` (`id`, `auth_role_id`, `crud_operation`, `service_id`, `db_schema_id`, `db_object_id`) VALUES (1, 1, 'CREATE,READ,UPDATE,DELETE', NULL, NULL, NULL);

COMMIT;

-- -----------------------------------------------------
-- Create roles for the MySQL RDS Service
--
-- The mrs_service_admin ROLE allows to fully manage the mrs services
-- The mrs_schema_admin ROLE allows to manage the database schemas assigned to mrs services
-- The mrs_provider_metadata ROLE is used by the MySQL Router to read the mrs metadata and make inserts into the auth_user table
-- The mrs_provider_data_access ROLE is used by the MySQL Router to read the actual schema data that is exposed via REST

CREATE ROLE IF NOT EXISTS 'mrs_service_admin', 'mrs_schema_admin', 'mrs_provider_metadata', 'mrs_provider_data_access';

-- `mysql_rest_service_metadata`.`schema_version`
GRANT SELECT ON `mysql_rest_service_metadata`.`schema_version`
	TO 'mrs_service_admin', 'mrs_schema_admin', 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`audit_log`
GRANT SELECT ON `mysql_rest_service_metadata`.`audit_log`
	TO 'mrs_service_admin', 'mrs_schema_admin', 'mrs_provider_metadata';

-- -----------------------------------------------------
-- Config

-- `mysql_rest_service_metadata`.`config`
GRANT SELECT, UPDATE
	ON `mysql_rest_service_metadata`.`config`
    TO 'mrs_service_admin', 'mrs_schema_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`config`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`redirect`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`redirect`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`redirect`
	TO 'mrs_schema_admin', 'mrs_provider_metadata';

-- -----------------------------------------------------
-- Service

-- `mysql_rest_service_metadata`.`url_host`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`url_host`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`url_host`
	TO 'mrs_schema_admin', 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`url_host_alias`
GRANT SELECT, INSERT, DELETE
	ON `mysql_rest_service_metadata`.`url_host_alias`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`url_host_alias`
	TO 'mrs_schema_admin', 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`service`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`service`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`service`
	TO 'mrs_schema_admin', 'mrs_provider_metadata';

-- -----------------------------------------------------
-- Schema Objects

-- `mysql_rest_service_metadata`.`db_schema`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`db_schema`
    TO 'mrs_service_admin', 'mrs_schema_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`db_schema`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`db_object`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`db_object`
	TO 'mrs_service_admin', 'mrs_schema_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`db_object`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`db_object_row_group_security`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`db_object_row_group_security`
	TO 'mrs_service_admin', 'mrs_schema_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`db_object_row_group_security`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`parameter`
GRANT SELECT, INSERT, UPDATE, DELETE
	ON `mysql_rest_service_metadata`.`parameter`
    TO 'mrs_service_admin', 'mrs_schema_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`parameter`
	TO 'mrs_provider_metadata';

-- -----------------------------------------------------
-- Static Content

-- `mysql_rest_service_metadata`.`content_set`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`content_set`
	TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`content_set`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`content_file`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`content_file`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`content_file`
	TO 'mrs_provider_metadata';

-- -----------------------------------------------------
-- User Authentication

-- `mysql_rest_service_metadata`.`auth_app`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`auth_app`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`auth_app`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`auth_vendor`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`auth_vendor`
    TO 'mrs_service_admin';
GRANT SELECT ON `mysql_rest_service_metadata`.`auth_vendor`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`auth_user`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`auth_user`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`auth_user`
	TO 'mrs_provider_metadata';

-- -----------------------------------------------------
-- User Hierarchy

-- `mysql_rest_service_metadata`.`user_hierarchy`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_hierarchy`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_hierarchy`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`user_hierarchy_type`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_hierarchy`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_hierarchy`
	TO 'mrs_provider_metadata';

-- -----------------------------------------------------
-- User Roles

-- `mysql_rest_service_metadata`.`user_has_role`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_has_role`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_has_role`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`auth_role`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`auth_role`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`auth_role`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`auth_privilege`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`auth_privilege`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`auth_privilege`
	TO 'mrs_provider_metadata';

-- -----------------------------------------------------
-- User Group Management

-- `mysql_rest_service_metadata`.`user_has_group`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_has_group`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_has_group`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`user_group`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_group`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_group`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`user_group_has_role`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_group_has_role`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_group_has_role`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`group_hierarchy_type`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`group_hierarchy_type`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`group_hierarchy_type`
	TO 'mrs_provider_metadata';

-- `mysql_rest_service_metadata`.`user_group_hierarchy`
GRANT SELECT, INSERT, UPDATE, DELETE
    ON `mysql_rest_service_metadata`.`user_group_hierarchy`
    TO 'mrs_service_admin';
GRANT SELECT, INSERT ON `mysql_rest_service_metadata`.`user_group_hierarchy`
	TO 'mrs_provider_metadata';

-- -----------------------------------------------------
-- Additional SQL

-- Ensure only one row in `mysql_rest_service_metadata`.`config`
ALTER TABLE `mysql_rest_service_metadata`.`config`
	ADD CONSTRAINT Config_OnlyOneRow CHECK (id = 1);

-- -----------------------------------------------------
-- Create audit_log triggers
--

DELIMITER $$
CREATE TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `parameter` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "parameter",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "db_object_id", NEW.db_object_id,
            "crud_operation", NEW.crud_operation,
            "name", NEW.name,
            "bind_column_name", NEW.bind_column_name,
            "param_datatype", NEW.param_datatype,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `parameter` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "parameter",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "db_object_id", OLD.db_object_id,
            "crud_operation", OLD.crud_operation,
            "name", OLD.name,
            "bind_column_name", OLD.bind_column_name,
            "param_datatype", OLD.param_datatype,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "db_object_id", NEW.db_object_id,
            "crud_operation", NEW.crud_operation,
            "name", NEW.name,
            "bind_column_name", NEW.bind_column_name,
            "param_datatype", NEW.param_datatype,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`parameter_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `parameter` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "parameter",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "db_object_id", OLD.db_object_id,
            "crud_operation", OLD.crud_operation,
            "name", OLD.name,
            "bind_column_name", OLD.bind_column_name,
            "param_datatype", OLD.param_datatype,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `db_schema` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_schema",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "items_per_page", NEW.items_per_page,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `db_schema` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_schema",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "items_per_page", OLD.items_per_page,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "items_per_page", NEW.items_per_page,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_schema_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `db_schema` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_schema",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "items_per_page", OLD.items_per_page,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`service_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `service` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "service",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "url_host_id", NEW.url_host_id,
            "url_context_root", NEW.url_context_root,
            "url_protocol", NEW.url_protocol,
            "enabled", NEW.enabled,
            "is_default", NEW.is_default,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`service_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `service` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "service",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "url_host_id", OLD.url_host_id,
            "url_context_root", OLD.url_context_root,
            "url_protocol", OLD.url_protocol,
            "enabled", OLD.enabled,
            "is_default", OLD.is_default,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "url_host_id", NEW.url_host_id,
            "url_context_root", NEW.url_context_root,
            "url_protocol", NEW.url_protocol,
            "enabled", NEW.enabled,
            "is_default", NEW.is_default,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`service_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `service` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "service",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "url_host_id", OLD.url_host_id,
            "url_context_root", OLD.url_context_root,
            "url_protocol", OLD.url_protocol,
            "enabled", OLD.enabled,
            "is_default", OLD.is_default,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `db_object` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "db_schema_id", NEW.db_schema_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "enabled", NEW.enabled,
            "object_type", NEW.object_type,
            "crud_operation", NEW.crud_operation,
            "format", NEW.format,
            "items_per_page", NEW.items_per_page,
            "media_type", NEW.media_type,
            "auto_detect_media_type", NEW.auto_detect_media_type,
            "requires_auth", NEW.requires_auth,
            "auth_stored_procedure", NEW.auth_stored_procedure,
            "row_user_ownership_enforced", NEW.row_user_ownership_enforced,
            "row_user_ownership_column", NEW.row_user_ownership_column,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `db_object` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "db_schema_id", OLD.db_schema_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "enabled", OLD.enabled,
            "object_type", OLD.object_type,
            "crud_operation", OLD.crud_operation,
            "format", OLD.format,
            "items_per_page", OLD.items_per_page,
            "media_type", OLD.media_type,
            "auto_detect_media_type", OLD.auto_detect_media_type,
            "requires_auth", OLD.requires_auth,
            "auth_stored_procedure", OLD.auth_stored_procedure,
            "row_user_ownership_enforced", OLD.row_user_ownership_enforced,
            "row_user_ownership_column", OLD.row_user_ownership_column,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "db_schema_id", NEW.db_schema_id,
            "name", NEW.name,
            "request_path", NEW.request_path,
            "enabled", NEW.enabled,
            "object_type", NEW.object_type,
            "crud_operation", NEW.crud_operation,
            "format", NEW.format,
            "items_per_page", NEW.items_per_page,
            "media_type", NEW.media_type,
            "auto_detect_media_type", NEW.auto_detect_media_type,
            "requires_auth", NEW.requires_auth,
            "auth_stored_procedure", NEW.auth_stored_procedure,
            "row_user_ownership_enforced", NEW.row_user_ownership_enforced,
            "row_user_ownership_column", NEW.row_user_ownership_column,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `db_object` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "db_schema_id", OLD.db_schema_id,
            "name", OLD.name,
            "request_path", OLD.request_path,
            "enabled", OLD.enabled,
            "object_type", OLD.object_type,
            "crud_operation", OLD.crud_operation,
            "format", OLD.format,
            "items_per_page", OLD.items_per_page,
            "media_type", OLD.media_type,
            "auto_detect_media_type", OLD.auto_detect_media_type,
            "requires_auth", OLD.requires_auth,
            "auth_stored_procedure", OLD.auth_stored_procedure,
            "row_user_ownership_enforced", OLD.row_user_ownership_enforced,
            "row_user_ownership_column", OLD.row_user_ownership_column,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_user_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_user` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_user",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "auth_app_id", NEW.auth_app_id,
            "name", NEW.name,
            "email", NEW.email,
            "vendor_user_id", NEW.vendor_user_id,
            "login_permitted", NEW.login_permitted,
            "mapped_user_id", NEW.mapped_user_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_user_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_user` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_user",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "auth_app_id", OLD.auth_app_id,
            "name", OLD.name,
            "email", OLD.email,
            "vendor_user_id", OLD.vendor_user_id,
            "login_permitted", OLD.login_permitted,
            "mapped_user_id", OLD.mapped_user_id),
        JSON_OBJECT(
            "id", NEW.id,
            "auth_app_id", NEW.auth_app_id,
            "name", NEW.name,
            "email", NEW.email,
            "vendor_user_id", NEW.vendor_user_id,
            "login_permitted", NEW.login_permitted,
            "mapped_user_id", NEW.mapped_user_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_user_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_user` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_user",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "auth_app_id", OLD.auth_app_id,
            "name", OLD.name,
            "email", OLD.email,
            "vendor_user_id", OLD.vendor_user_id,
            "login_permitted", OLD.login_permitted,
            "mapped_user_id", OLD.mapped_user_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_vendor_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_vendor` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_vendor",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "name", NEW.name,
            "validation_url", NEW.validation_url,
            "enabled", NEW.enabled,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_vendor_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_vendor` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_vendor",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "name", OLD.name,
            "validation_url", OLD.validation_url,
            "enabled", OLD.enabled,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "name", NEW.name,
            "validation_url", NEW.validation_url,
            "enabled", NEW.enabled,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_vendor_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_vendor` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_vendor",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "name", OLD.name,
            "validation_url", OLD.validation_url,
            "enabled", OLD.enabled,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_app` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_app",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "auth_vendor_id", NEW.auth_vendor_id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "description", NEW.description,
            "url", NEW.url,
            "url_direct_auth", NEW.url_direct_auth,
            "access_token", NEW.access_token,
            "app_id", NEW.app_id,
            "enabled", NEW.enabled,
            "use_built_in_authorization", NEW.use_built_in_authorization,
            "limit_to_registered_users", NEW.limit_to_registered_users,
            "default_auth_role_id", NEW.default_auth_role_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_app` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_app",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "auth_vendor_id", OLD.auth_vendor_id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "description", OLD.description,
            "url", OLD.url,
            "url_direct_auth", OLD.url_direct_auth,
            "access_token", OLD.access_token,
            "app_id", OLD.app_id,
            "enabled", OLD.enabled,
            "use_built_in_authorization", OLD.use_built_in_authorization,
            "limit_to_registered_users", OLD.limit_to_registered_users,
            "default_auth_role_id", OLD.default_auth_role_id),
        JSON_OBJECT(
            "id", NEW.id,
            "auth_vendor_id", NEW.auth_vendor_id,
            "service_id", NEW.service_id,
            "name", NEW.name,
            "description", NEW.description,
            "url", NEW.url,
            "url_direct_auth", NEW.url_direct_auth,
            "access_token", NEW.access_token,
            "app_id", NEW.app_id,
            "enabled", NEW.enabled,
            "use_built_in_authorization", NEW.use_built_in_authorization,
            "limit_to_registered_users", NEW.limit_to_registered_users,
            "default_auth_role_id", NEW.default_auth_role_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_app_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_app` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_app",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "auth_vendor_id", OLD.auth_vendor_id,
            "service_id", OLD.service_id,
            "name", OLD.name,
            "description", OLD.description,
            "url", OLD.url,
            "url_direct_auth", OLD.url_direct_auth,
            "access_token", OLD.access_token,
            "app_id", OLD.app_id,
            "enabled", OLD.enabled,
            "use_built_in_authorization", OLD.use_built_in_authorization,
            "limit_to_registered_users", OLD.limit_to_registered_users,
            "default_auth_role_id", OLD.default_auth_role_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`config_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `config` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "config",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "service_enabled", NEW.service_enabled,
            "data", NEW.data),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`config_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `config` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "config",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "service_enabled", OLD.service_enabled,
            "data", OLD.data),
        JSON_OBJECT(
            "id", NEW.id,
            "service_enabled", NEW.service_enabled,
            "data", NEW.data),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`config_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `config` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "config",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "service_enabled", OLD.service_enabled,
            "data", OLD.data),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`redirect_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `redirect` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "redirect",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "pattern", NEW.pattern,
            "target", NEW.target),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`redirect_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `redirect` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "redirect",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "pattern", OLD.pattern,
            "target", OLD.target),
        JSON_OBJECT(
            "id", NEW.id,
            "pattern", NEW.pattern,
            "target", NEW.target),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`redirect_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `redirect` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "redirect",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "pattern", OLD.pattern,
            "target", OLD.target),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`url_host_alias_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `url_host_alias` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "url_host_alias",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "url_host_id", NEW.url_host_id,
            "alias", NEW.alias),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`url_host_alias_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `url_host_alias` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "url_host_alias",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "url_host_id", OLD.url_host_id,
            "alias", OLD.alias),
        JSON_OBJECT(
            "id", NEW.id,
            "url_host_id", NEW.url_host_id,
            "alias", NEW.alias),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`url_host_alias_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `url_host_alias` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "url_host_alias",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "url_host_id", OLD.url_host_id,
            "alias", OLD.alias),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`url_host_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `url_host` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "url_host",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "name", NEW.name,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`url_host_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `url_host` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "url_host",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "name", OLD.name,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "name", NEW.name,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`url_host_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `url_host` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "url_host",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "name", OLD.name,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`content_file_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `content_file` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "content_file",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "content_set_id", NEW.content_set_id,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "size", NEW.size),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`content_file_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `content_file` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "content_file",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "content_set_id", OLD.content_set_id,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "size", OLD.size),
        JSON_OBJECT(
            "id", NEW.id,
            "content_set_id", NEW.content_set_id,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "size", NEW.size),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`content_file_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `content_file` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "content_file",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "content_set_id", OLD.content_set_id,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "size", OLD.size),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`content_set_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `content_set` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "content_set",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "service_id", NEW.service_id,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`content_set_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `content_set` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "content_set",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "service_id", OLD.service_id,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "comments", OLD.comments),
        JSON_OBJECT(
            "id", NEW.id,
            "service_id", NEW.service_id,
            "request_path", NEW.request_path,
            "requires_auth", NEW.requires_auth,
            "enabled", NEW.enabled,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`content_set_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `content_set` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "content_set",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "service_id", OLD.service_id,
            "request_path", OLD.request_path,
            "requires_auth", OLD.requires_auth,
            "enabled", OLD.enabled,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_role_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_role",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "derived_from_role_id", NEW.derived_from_role_id,
            "specific_to_service_id", NEW.specific_to_service_id,
            "caption", NEW.caption,
            "description", NEW.description),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_role_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_role",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "derived_from_role_id", OLD.derived_from_role_id,
            "specific_to_service_id", OLD.specific_to_service_id,
            "caption", OLD.caption,
            "description", OLD.description),
        JSON_OBJECT(
            "id", NEW.id,
            "derived_from_role_id", NEW.derived_from_role_id,
            "specific_to_service_id", NEW.specific_to_service_id,
            "caption", NEW.caption,
            "description", NEW.description),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_role_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_role",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "derived_from_role_id", OLD.derived_from_role_id,
            "specific_to_service_id", OLD.specific_to_service_id,
            "caption", OLD.caption,
            "description", OLD.description),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_has_role_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_has_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_has_role",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "auth_user_id", NEW.auth_user_id,
            "auth_role_id", NEW.auth_role_id,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_has_role_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_has_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_has_role",
        "UPDATE",
        JSON_OBJECT(
            "auth_user_id", OLD.auth_user_id,
            "auth_role_id", OLD.auth_role_id,
            "comments", OLD.comments),
        JSON_OBJECT(
            "auth_user_id", NEW.auth_user_id,
            "auth_role_id", NEW.auth_role_id,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_has_role_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_has_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_has_role",
        "DELETE",
        JSON_OBJECT(
            "auth_user_id", OLD.auth_user_id,
            "auth_role_id", OLD.auth_role_id,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_hierarchy_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_hierarchy` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_hierarchy",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "auth_user_id", NEW.auth_user_id,
            "reporting_user_id", NEW.reporting_user_id,
            "user_hierarchy_type_id", NEW.user_hierarchy_type_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_hierarchy_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_hierarchy` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_hierarchy",
        "UPDATE",
        JSON_OBJECT(
            "auth_user_id", OLD.auth_user_id,
            "reporting_user_id", OLD.reporting_user_id,
            "user_hierarchy_type_id", OLD.user_hierarchy_type_id),
        JSON_OBJECT(
            "auth_user_id", NEW.auth_user_id,
            "reporting_user_id", NEW.reporting_user_id,
            "user_hierarchy_type_id", NEW.user_hierarchy_type_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_hierarchy_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_hierarchy` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_hierarchy",
        "DELETE",
        JSON_OBJECT(
            "auth_user_id", OLD.auth_user_id,
            "reporting_user_id", OLD.reporting_user_id,
            "user_hierarchy_type_id", OLD.user_hierarchy_type_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_hierarchy_type_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_hierarchy_type` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_hierarchy_type",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "caption", NEW.caption,
            "description", NEW.description,
            "specific_to_service_id", NEW.specific_to_service_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_hierarchy_type_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_hierarchy_type` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_hierarchy_type",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "caption", OLD.caption,
            "description", OLD.description,
            "specific_to_service_id", OLD.specific_to_service_id),
        JSON_OBJECT(
            "id", NEW.id,
            "caption", NEW.caption,
            "description", NEW.description,
            "specific_to_service_id", NEW.specific_to_service_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_hierarchy_type_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_hierarchy_type` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_hierarchy_type",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "caption", OLD.caption,
            "description", OLD.description,
            "specific_to_service_id", OLD.specific_to_service_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `auth_privilege` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_privilege",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "auth_role_id", NEW.auth_role_id,
            "crud_operation", NEW.crud_operation,
            "service_id", NEW.service_id,
            "db_schema_id", NEW.db_schema_id,
            "db_object_id", NEW.db_object_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `auth_privilege` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_privilege",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "auth_role_id", OLD.auth_role_id,
            "crud_operation", OLD.crud_operation,
            "service_id", OLD.service_id,
            "db_schema_id", OLD.db_schema_id,
            "db_object_id", OLD.db_object_id),
        JSON_OBJECT(
            "id", NEW.id,
            "auth_role_id", NEW.auth_role_id,
            "crud_operation", NEW.crud_operation,
            "service_id", NEW.service_id,
            "db_schema_id", NEW.db_schema_id,
            "db_object_id", NEW.db_object_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`auth_privilege_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `auth_privilege` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "auth_privilege",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "auth_role_id", OLD.auth_role_id,
            "crud_operation", OLD.crud_operation,
            "service_id", OLD.service_id,
            "db_schema_id", OLD.db_schema_id,
            "db_object_id", OLD.db_object_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_group` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "specific_to_service_id", NEW.specific_to_service_id,
            "caption", NEW.caption,
            "description", NEW.description),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_group` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "specific_to_service_id", OLD.specific_to_service_id,
            "caption", OLD.caption,
            "description", OLD.description),
        JSON_OBJECT(
            "id", NEW.id,
            "specific_to_service_id", NEW.specific_to_service_id,
            "caption", NEW.caption,
            "description", NEW.description),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_group` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "specific_to_service_id", OLD.specific_to_service_id,
            "caption", OLD.caption,
            "description", OLD.description),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_has_role_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_group_has_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group_has_role",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "user_group_id", NEW.user_group_id,
            "auth_role_id", NEW.auth_role_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_has_role_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_group_has_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group_has_role",
        "UPDATE",
        JSON_OBJECT(
            "user_group_id", OLD.user_group_id,
            "auth_role_id", OLD.auth_role_id),
        JSON_OBJECT(
            "user_group_id", NEW.user_group_id,
            "auth_role_id", NEW.auth_role_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_has_role_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_group_has_role` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group_has_role",
        "DELETE",
        JSON_OBJECT(
            "user_group_id", OLD.user_group_id,
            "auth_role_id", OLD.auth_role_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_has_group_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_has_group` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_has_group",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "auth_user_id", NEW.auth_user_id,
            "user_group_id", NEW.user_group_id,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_has_group_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_has_group` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_has_group",
        "UPDATE",
        JSON_OBJECT(
            "auth_user_id", OLD.auth_user_id,
            "user_group_id", OLD.user_group_id,
            "comments", OLD.comments),
        JSON_OBJECT(
            "auth_user_id", NEW.auth_user_id,
            "user_group_id", NEW.user_group_id,
            "comments", NEW.comments),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_has_group_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_has_group` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_has_group",
        "DELETE",
        JSON_OBJECT(
            "auth_user_id", OLD.auth_user_id,
            "user_group_id", OLD.user_group_id,
            "comments", OLD.comments),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`group_hierarchy_type_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `group_hierarchy_type` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "group_hierarchy_type",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "id", NEW.id,
            "caption", NEW.caption,
            "description", NEW.description),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`group_hierarchy_type_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `group_hierarchy_type` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "group_hierarchy_type",
        "UPDATE",
        JSON_OBJECT(
            "id", OLD.id,
            "caption", OLD.caption,
            "description", OLD.description),
        JSON_OBJECT(
            "id", NEW.id,
            "caption", NEW.caption,
            "description", NEW.description),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`group_hierarchy_type_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `group_hierarchy_type` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "group_hierarchy_type",
        "DELETE",
        JSON_OBJECT(
            "id", OLD.id,
            "caption", OLD.caption,
            "description", OLD.description),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_hierarchy_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `user_group_hierarchy` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group_hierarchy",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "user_group_id", NEW.user_group_id,
            "sub_group_id", NEW.sub_group_id,
            "group_hierarchy_type_id", NEW.group_hierarchy_type_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_hierarchy_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `user_group_hierarchy` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group_hierarchy",
        "UPDATE",
        JSON_OBJECT(
            "user_group_id", OLD.user_group_id,
            "sub_group_id", OLD.sub_group_id,
            "group_hierarchy_type_id", OLD.group_hierarchy_type_id),
        JSON_OBJECT(
            "user_group_id", NEW.user_group_id,
            "sub_group_id", NEW.sub_group_id,
            "group_hierarchy_type_id", NEW.group_hierarchy_type_id),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`user_group_hierarchy_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `user_group_hierarchy` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "user_group_hierarchy",
        "DELETE",
        JSON_OBJECT(
            "user_group_id", OLD.user_group_id,
            "sub_group_id", OLD.sub_group_id,
            "group_hierarchy_type_id", OLD.group_hierarchy_type_id),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_row_group_security_AFTER_INSERT_AUDIT_LOG` AFTER INSERT ON `db_object_row_group_security` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object_row_group_security",
        "INSERT",
        NULL,
        JSON_OBJECT(
            "db_object_id", NEW.db_object_id,
            "group_hierarchy_type_id", NEW.group_hierarchy_type_id,
            "row_group_ownership_column", NEW.row_group_ownership_column,
            "use_highest_group_level", NEW.use_highest_group_level),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_row_group_security_AFTER_UPDATE_AUDIT_LOG` AFTER UPDATE ON `db_object_row_group_security` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object_row_group_security",
        "UPDATE",
        JSON_OBJECT(
            "db_object_id", OLD.db_object_id,
            "group_hierarchy_type_id", OLD.group_hierarchy_type_id,
            "row_group_ownership_column", OLD.row_group_ownership_column,
            "use_highest_group_level", OLD.use_highest_group_level),
        JSON_OBJECT(
            "db_object_id", NEW.db_object_id,
            "group_hierarchy_type_id", NEW.group_hierarchy_type_id,
            "row_group_ownership_column", NEW.row_group_ownership_column,
            "use_highest_group_level", NEW.use_highest_group_level),
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

CREATE TRIGGER `mysql_rest_service_metadata`.`db_object_row_group_security_AFTER_DELETE_AUDIT_LOG` AFTER DELETE ON `db_object_row_group_security` FOR EACH ROW
BEGIN
	INSERT INTO `mysql_rest_service_metadata`.`audit_log` (
		table_name, dml_type, old_row_data, new_row_data, changed_by, changed_at)
	VALUES (
        "db_object_row_group_security",
        "DELETE",
        JSON_OBJECT(
            "db_object_id", OLD.db_object_id,
            "group_hierarchy_type_id", OLD.group_hierarchy_type_id,
            "row_group_ownership_column", OLD.row_group_ownership_column,
            "use_highest_group_level", OLD.use_highest_group_level),
        NULL,
        CURRENT_USER(),
        CURRENT_TIMESTAMP
    );
END$$

DELIMITER ;
