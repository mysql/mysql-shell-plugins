-- Copyright (c) 2022, Oracle and/or its affiliates.
--
-- MySQL Script generated by MySQL Workbench
-- Wed Oct 19 17:28:32 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mrs_notes
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mrs_notes` ;

-- -----------------------------------------------------
-- Schema mrs_notes
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mrs_notes` DEFAULT CHARACTER SET utf8 ;
USE `mrs_notes` ;

-- -----------------------------------------------------
-- Table `mrs_notes`.`note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mrs_notes`.`note` ;

CREATE TABLE IF NOT EXISTS `mrs_notes`.`note` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `created_by` VARCHAR(255) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `create_date` DATETIME NOT NULL DEFAULT now(),
  `last_update` DATETIME NOT NULL DEFAULT now(),
  `pinned` TINYINT(1) NOT NULL DEFAULT 0,
  `locked_down` TINYINT(1) NOT NULL DEFAULT 0,
  `content` VARCHAR(2000) NULL,
  PRIMARY KEY (`id`),
  INDEX `created_by` (`created_by` ASC) VISIBLE,
  INDEX `last_update` (`last_update` ASC) VISIBLE,
  INDEX `create_date` (`create_date` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mrs_notes`.`user_has_note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mrs_notes`.`user_has_note` ;

CREATE TABLE IF NOT EXISTS `mrs_notes`.`user_has_note` (
  `note_id` INT UNSIGNED NOT NULL,
  `user_id` VARCHAR(255) NOT NULL,
  `view_only` TINYINT(1) NOT NULL DEFAULT 0,
  `can_share` TINYINT(1) NOT NULL DEFAULT 0,
  `invitation_key` CHAR(64) NULL,
  `invitation_accepted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`note_id`, `user_id`),
  INDEX `user_id` (`user_id` ASC) VISIBLE,
  INDEX `invitation_key` (`invitation_key` ASC) VISIBLE,
  CONSTRAINT `fk_note_user`
    FOREIGN KEY (`note_id`)
    REFERENCES `mrs_notes`.`note` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mrs_notes`.`audit_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mrs_notes`.`audit_log` ;

CREATE TABLE IF NOT EXISTS `mrs_notes`.`audit_log` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `table_name` VARCHAR(255) NOT NULL,
  `dml_type` ENUM('INSERT','UPDATE','DELETE') NOT NULL,
  `old_row_data` JSON NULL,
  `new_row_data` JSON NULL,
  `changed_by` VARCHAR(255) NOT NULL,
  `changed_at` TIMESTAMP NOT NULL,
  `old_row_id` INT GENERATED ALWAYS AS (old_row_data->"$.id"),
  `new_row_id` INT GENERATED ALWAYS AS (new_row_data->"$.id"),
  PRIMARY KEY (`id`),
  INDEX `idx_table_name` (`table_name` ASC) VISIBLE,
  INDEX `idx_changed_at` (`changed_at` ASC) VISIBLE,
  INDEX `idx_changed_by` (`changed_by` ASC) VISIBLE,
  INDEX `idx_new_row_id` (`new_row_id` ASC) VISIBLE,
  INDEX `idx_old_row_id` (`old_row_id` ASC) VISIBLE)
ENGINE = InnoDB;

USE `mrs_notes` ;

-- -----------------------------------------------------
-- procedure note_share
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`note_share`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE note_share(
	IN noteId INT, IN userId VARCHAR(65), IN viewOnly BOOLEAN, IN canShare BOOLEAN)
BEGIN
	DECLARE invitationKey CHAR(64);

    IF (0 = (SELECT can_share FROM user_has_note WHERE note_id = noteId AND user_id=userId)) THEN
		SELECT "Sharing this note with others is prohibited." as message;
	ELSE
		SET invitationKey = sha2(rand(), 256);
		
		INSERT INTO user_has_note (note_id, user_id, view_only, can_share, invitation_key)
		VALUES (noteId, userId, viewOnly, canShare, invitationKey);
		
		SELECT invitationKey;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure note_accept_share
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`note_accept_share`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE note_accept_share(
	IN userId VARCHAR(65), IN invitationKey CHAR(64))
BEGIN
	DECLARE noteId INT UNSIGNED;
    
    IF (0 = (SELECT COUNT(*) FROM user_has_note WHERE invitation_key = invitationKey AND user_id=userId)) THEN
		SELECT "No corresponding note found." as message;
	ELSE
		UPDATE user_has_note SET invitation_accepted = 1 
		WHERE note_id=noteId AND user_id=userId;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure note_add
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`note_add`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE note_add(
	IN userId VARCHAR(65), IN title VARCHAR(255), IN pinned BOOLEAN, IN lockedDown BOOLEAN, IN content VARCHAR(2000))
BEGIN
	DECLARE noteId INT UNSIGNED;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @p1 = MESSAGE_TEXT;
        SELECT concat("Failed to create a new note. Error: ", @p1) as message;
        ROLLBACK;
    END;

	START TRANSACTION;
    
	INSERT INTO note (created_by, title, pinned, locked_down, content)
    VALUES (userId, title, pinned, lockedDown, content);
    
    SET noteId = LAST_INSERT_ID();
    
	INSERT INTO user_has_note (note_id, user_id, view_only, can_share, invitation_accepted)
    VALUES (noteId, userId, 0, 1, 1);
    
    SELECT noteId;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mrs_notes`.`notes_editable`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`notes_editable` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW `notes_editable` AS 
	SELECT n.*, u.user_id, u.view_only
    FROM note n 
		JOIN user_has_note u ON u.note_id=n.id 
	WHERE view_only=0 AND invitation_accepted=1;

-- -----------------------------------------------------
-- View `mrs_notes`.`notes_all`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`notes_all` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW `notes_all` AS 
	SELECT n.*, u.user_id, u.view_only
    FROM note n 
		JOIN user_has_note u ON u.note_id=n.id 
	WHERE invitation_accepted=1;

-- -----------------------------------------------------
-- View `mrs_notes`.`schema_version`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`schema_version` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW schema_version (major, minor, patch) AS SELECT 0, 0, 2;

-- -----------------------------------------------------
-- View `mrs_notes`.`notes_served`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`notes_served` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW `notes_served` AS
	SELECT max(id) as notes_served FROM note;
USE `mrs_notes`;

DELIMITER $$

USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`note_BEFORE_UPDATE` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`note_BEFORE_UPDATE` BEFORE UPDATE ON `note` FOR EACH ROW
BEGIN
	SET new.last_update = NOW();
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
