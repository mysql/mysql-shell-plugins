-- MySQL Script generated by MySQL Workbench
-- Mon Feb  6 20:19:25 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mrs_notes
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mrs_notes` ;

-- -----------------------------------------------------
-- Schema mrs_notes
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mrs_notes` DEFAULT CHARACTER SET utf8 ;
USE `mrs_notes` ;

-- -----------------------------------------------------
-- Table `mrs_notes`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mrs_notes`.`user` ;

CREATE TABLE IF NOT EXISTS `mrs_notes`.`user` (
  `id` BINARY(16) NOT NULL,
  `nickname` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mrs_notes`.`note`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mrs_notes`.`note` ;

CREATE TABLE IF NOT EXISTS `mrs_notes`.`note` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `userId` BINARY(16) NOT NULL,
  `title` VARCHAR(255) NOT NULL,
  `createDate` DATETIME NOT NULL DEFAULT now(),
  `lastUpdate` DATETIME NOT NULL DEFAULT now(),
  `pinned` TINYINT(1) NOT NULL DEFAULT 0,
  `lockedDown` TINYINT(1) NOT NULL DEFAULT 0,
  `shared` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'The shared column is automatically updated by AFTER INSERT / DELETE triggers on userHasNote.',
  `content` VARCHAR(2000) NULL,
  `tags` JSON NULL,
  PRIMARY KEY (`id`),
  INDEX `created_by` (`userId` ASC) VISIBLE,
  INDEX `last_update` (`lastUpdate` ASC) VISIBLE,
  INDEX `create_date` (`createDate` ASC) VISIBLE,
  FULLTEXT INDEX `content_ft` (`content`) VISIBLE,
  CONSTRAINT `fk_note_user1`
    FOREIGN KEY (`userId`)
    REFERENCES `mrs_notes`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mrs_notes`.`userHasNote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mrs_notes`.`userHasNote` ;

CREATE TABLE IF NOT EXISTS `mrs_notes`.`userHasNote` (
  `noteId` INT UNSIGNED NOT NULL,
  `userId` BINARY(16) NOT NULL,
  `viewOnly` TINYINT(1) NOT NULL DEFAULT 0,
  `canShare` TINYINT(1) NOT NULL DEFAULT 0,
  `invitationKey` CHAR(64) NULL,
  `invitationAccepted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`noteId`, `userId`),
  INDEX `user_id` (`userId` ASC) VISIBLE,
  INDEX `invitation_key` (`invitationKey` ASC) VISIBLE,
  CONSTRAINT `fk_note`
    FOREIGN KEY (`noteId`)
    REFERENCES `mrs_notes`.`note` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_userHasNote_user1`
    FOREIGN KEY (`userId`)
    REFERENCES `mrs_notes`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mrs_notes` ;

-- -----------------------------------------------------
-- procedure noteShare
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`noteShare`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE `noteShare`(
	IN userId BINARY(16), IN noteId INT, IN email VARCHAR(255), IN viewOnly BOOLEAN, IN canShare BOOLEAN)
BEGIN
	DECLARE invitationKey CHAR(64);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @p1 = MESSAGE_TEXT;
        SELECT concat("Failed to share the note. Error: ", @p1) as message;
    END;
    
    SELECT id INTO @shareWithUserId FROM `user` AS u WHERE u.email = email;
    
	IF (@shareWithUserId IS NULL) THEN
		SELECT "Unable to find a user with this email address." as message;
    ELSEIF (0 = (SELECT u.canShare FROM `userHasNote` AS u WHERE u.noteId = noteId AND u.userId = userId)) THEN
		SELECT "Sharing this note with others is prohibited." as message;
    ELSEIF (1 = (SELECT COUNT(*) FROM `userHasNote` AS u WHERE u.noteId = noteId AND u.userId = @shareWithUserId)) THEN
        SELECT "The note has already been shared with this user." as message;
	ELSE
		SET invitationKey = sha2(rand(), 256);
		
		INSERT INTO `userHasNote` (noteId, userId, viewOnly, canShare, invitationKey)
		VALUES (noteId, @shareWithUserId, viewOnly, canShare, invitationKey);
		
		SELECT invitationKey;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure noteAcceptShare
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`noteAcceptShare`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE `noteAcceptShare`(
	IN userId BINARY(16), IN invitationKey CHAR(64))
BEGIN
    IF (0 = (SELECT COUNT(*) FROM userHasNote AS u WHERE u.invitationKey = invitationKey AND u.userId = userId)) THEN
		SELECT "No corresponding note found." as message;
	ELSE
		UPDATE userHasNote AS u SET u.invitationAccepted = 1 
		WHERE u.invitationKey = invitationKey AND u.userId = userId;
        
        SELECT "Shared note accepted." as success;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure noteUpdate
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`noteUpdate`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE `noteUpdate`(
	IN noteId INT, IN userId BINARY(16), IN title VARCHAR(255), IN pinned BOOLEAN, IN lockedDown BOOLEAN, IN content VARCHAR(2000), tags JSON)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @p1 = MESSAGE_TEXT;
        SELECT concat("Failed to update a note. Error: ", @p1) as message;
        ROLLBACK;
    END;

    IF (0 = (
		SELECT COUNT(*) FROM mrs_notes.note AS n 
			JOIN mrs_notes.userHasNote u ON u.noteId=n.id 
        WHERE n.id = noteId AND n.userId = userId AND u.invitationAccepted=1
	)) THEN
		SELECT "No corresponding note found or no privilege to update it." as message;
	ELSE
		UPDATE note AS n SET n.title = title, n.pinned = pinned, 
			n.lockedDown = lockedDown, n.content = content, n.tags = tags
		WHERE n.id = noteId;
        SELECT "Note updated." as success;
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure noteDelete
-- -----------------------------------------------------

USE `mrs_notes`;
DROP procedure IF EXISTS `mrs_notes`.`noteDelete`;

DELIMITER $$
USE `mrs_notes`$$
CREATE PROCEDURE `noteDelete`(
	IN noteId INT, IN userId BINARY(16))
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1 @p1 = MESSAGE_TEXT;
        SELECT concat("Failed to delete a note. Error: ", @p1) as message;
        ROLLBACK;
    END;

    IF (0 = (
		SELECT COUNT(*) FROM mrs_notes.note AS n 
			JOIN mrs_notes.userHasNote u ON u.noteId=n.id 
        WHERE n.id = noteId AND n.userId = userId AND u.invitationAccepted=1
	)) THEN
		SELECT "No corresponding note found or no privilege to delete it." as message;
	ELSE
		DELETE FROM note AS n WHERE n.id = noteId;
    END IF;
    
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mrs_notes`.`notesAll`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`notesAll` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW `mrs_notes`.`notesAll` AS 
	SELECT n.id, n.title, n.createDate, n.lastUpdate, n.pinned, n.lockedDown, n.shared,
		n.content, n.tags, u.userId, u.viewOnly, (n.userId = u.userId) AS ownNote,
        LTRIM(REGEXP_REPLACE(REGEXP_REPLACE(SUBSTRING(n.content, LENGTH(n.title) + 1, 45), 
            "[^[[:alnum:]]]", " "), "[[:space:]]+", " ", 1, 0, "m")) AS contentBeginning
    FROM `mrs_notes`.`userHasNote` u
		JOIN `mrs_notes`.`note` n ON u.noteId = n.id 
	WHERE u.invitationAccepted = 1;

-- -----------------------------------------------------
-- View `mrs_notes`.`schemaVersion`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`schemaVersion` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW schemaVersion (major, minor, patch) AS SELECT 0, 0, 4;

-- -----------------------------------------------------
-- View `mrs_notes`.`notesServed`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mrs_notes`.`notesServed` ;
USE `mrs_notes`;
CREATE  OR REPLACE VIEW `notesServed` AS
	SELECT max(id) as notesServed FROM note;
USE `mrs_notes`;

DELIMITER $$

USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`note_BEFORE_INSERT` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`note_BEFORE_INSERT` BEFORE INSERT ON `note` FOR EACH ROW
BEGIN
	SET @userNoteCount := (SELECT COUNT(*) FROM `note` AS n WHERE n.userId = new.userId);
    
    IF @userNoteCount > 5 THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = "The limit of 5 notes was reached.";
    END IF;
END$$


USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`note_AFTER_INSERT` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`note_AFTER_INSERT` AFTER INSERT ON `note` FOR EACH ROW
BEGIN
	INSERT INTO `mrs_notes`.`userHasNote` (
		noteId, userId, viewOnly, canShare, invitationAccepted)
	VALUES (
		NEW.id, NEW.userId, 0, 1, 1
    );
END$$


USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`note_BEFORE_UPDATE` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`note_BEFORE_UPDATE` BEFORE UPDATE ON `note` FOR EACH ROW
BEGIN
	SET new.lastUpdate = NOW();
END$$


USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`note_BEFORE_DELETE` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`note_BEFORE_DELETE` BEFORE DELETE ON `note` FOR EACH ROW
BEGIN
	DELETE FROM `mrs_notes`.`userHasNote` WHERE noteId = OLD.id;
END$$


USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`userHasNote_AFTER_INSERT` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`userHasNote_AFTER_INSERT` AFTER INSERT ON `userHasNote` FOR EACH ROW
BEGIN
	IF ((SELECT COUNT(*) FROM `mrs_notes`.`userHasNote` WHERE noteId = NEW.noteId) > 1) THEN
		UPDATE `mrs_notes`.`note` SET shared = 1 WHERE id = NEW.noteId;
	END IF;
END$$


USE `mrs_notes`$$
DROP TRIGGER IF EXISTS `mrs_notes`.`userHasNote_AFTER_DELETE` $$
USE `mrs_notes`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mrs_notes`.`userHasNote_AFTER_DELETE` AFTER DELETE ON `userHasNote` FOR EACH ROW
BEGIN
	IF ((SELECT COUNT(*) FROM `mrs_notes`.`userHasNote` WHERE noteId = OLD.noteId) = 1) THEN
		UPDATE `mrs_notes`.`note` SET shared = 0 WHERE id = OLD.noteId;
	END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Copyright (c) 2022, 2023, Oracle and/or its affiliates.
