# Copyright (c) 2025, Oracle and/or its affiliates. All rights reserved.

# This OCI DevOps build specification file [1] generates a Software Bill of Materials (SBOM) of the repository.
# The file is needed to run checks for third-party vulnerabilities and business approval according to Oracleâ€™s GitHub policies.
# [1] https://docs.oracle.com/en-us/iaas/Content/devops/using/build_specs.htm

version: 0.1
component: build
timeoutInSeconds: 1000
shell: bash

env:
  variables:
    PYTHON_CMD: "python3"
    CDXGEN_DEBUG_MODE: "debug"

steps:
  - type: Command
    name: "Download CycloneDx-cli executable and install dependencies"
    command: |
      wget https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.24.2/cyclonedx-linux-x64
      yum install -y libicu
  - type: Command
    name: "Download the version 10.10.0 of cdxgen globally"
    command: |
      npm install -g @cyclonedx/cdxgen@10.10.0
  - type: Command
    name: "Workaround to let cdxgen run on nodejs 16"
    command: |
      # cdxgen relies on a fourth-party dependency that cannot be executed in a Node.js environment running version 16
      # (as installed on the build runner instance)
      # This is a workaround to ensure cdxgen functions correctly, even in an older Node.js environment.
      cd /node/node-v16.14.2-linux-x64/lib/node_modules/@cyclonedx/cdxgen && \
      npm install cheerio@v1.0.0-rc.12
  - type: Command
    name: "Generate SBOM for mds_plugin"
    command: |
      # Search the test or dev requirements files, so that test and dev py packages can be excluded in the generated SBOM
      plugin=mds_plugin && \
      # Get the version
      version=$(cat VERSION | cut -d'=' -f2) && \
      ( cd $plugin && \
      files=$(find . -type f -regex ".*\(test.*requirements\|requirements.*test\|dev.*requirements\|requirements.*dev\).*\.txt") && \
      if [ -n "$files" ]; then \
        cdxgen -t python -o artifactSBOM.json --spec-version 1.4 \
        --exclude "*{requirements,dev,test}*{requirements,dev,test}*.txt" --project-name $plugin --project-version $id --no-recurse
      else \
         cdxgen -t python -o artifactSBOM.json --spec-version 1.4 --project-name $plugin --project-version $id --no-recurse
      fi ) \
  - type: Command
    name: "Generate SBOM for msm_plugin"
    command: |
      # Search the test or dev requirements files, so that test and dev py packages can be excluded in the generated SBOM
      plugin=msm_plugin && \
      # Get the version
      version=$(cat VERSION | cut -d'=' -f2) && \
      ( cd $plugin && \
      files=$(find . -type f -regex ".*\(test.*requirements\|requirements.*test\|dev.*requirements\|requirements.*dev\).*\.txt") && \
      if [ -n "$files" ]; then \
        cdxgen -t python -o artifactSBOM.json --spec-version 1.4 \
        --exclude "*{requirements,dev,test}*{requirements,dev,test}*.txt" --project-name $plugin --project-version $id --no-recurse
      else \
         cdxgen -t python -o artifactSBOM.json --spec-version 1.4 --project-name $plugin --project-version $id --no-recurse
      fi ) \
  - type: Command
    name: "Generate SBOM for mrs_plugin"
    command: |
      # Search the test or dev requirements files, so that test and dev py packages can be excluded in the generated SBOM
      plugin=mrs_plugin && \
      # Get the version
      version=$(cat VERSION | cut -d'=' -f2) && \
      ( cd $plugin && \
      files=$(find . -type f -regex ".*\(test.*requirements\|requirements.*test\|dev.*requirements\|requirements.*dev\).*\.txt") && \
      if [ -n "$files" ]; then \
        cdxgen -t python -o artifactSBOM.json --spec-version 1.4 \
        --exclude "*{requirements,dev,test}*{requirements,dev,test}*.txt" --project-name $plugin --project-version $id --no-recurse
      else \
         cdxgen -t python -o artifactSBOM.json --spec-version 1.4 --project-name $plugin --project-version $id --no-recurse
      fi ) \
  - type: Command
    name: "Generate SBOM for gui_plugin backend"
    command: |
      # Search the test or dev requirements files, so that test and dev py packages can be excluded in the generated SBOM
      plugin=gui_plugin && \
      # Get the version
      version=$(cat VERSION | cut -d'=' -f2) && \
      ( cd gui/backend && \
      files=$(find . -type f -regex ".*\(test.*requirements\|requirements.*test\|dev.*requirements\|requirements.*dev\).*\.txt") && \
      if [ -n "$files" ]; then \
        cdxgen -t python -o artifactSBOM.json --spec-version 1.4 \
        --exclude "*{requirements,dev,test}*{requirements,dev,test}*.txt" --project-name $plugin --project-version $id --no-recurse
      else \
         cdxgen -t python -o artifactSBOM.json --spec-version 1.4 --project-name $plugin --project-version $id --no-recurse
      fi ) \
  - type: Command
    name: "Run cyclonedx-node-npm package for the GUI Frontend"
    command: |
      # Install dependencies & cyclonedx-node-npm package
      ( cd gui/frontend && \
      npm install && npm install --save-dev @cyclonedx/cyclonedx-npm@1.19.3 && \
      # For more details, visit https://github.com/CycloneDX/cyclonedx-node-npm/blob/main/README.md
      npx @cyclonedx/cyclonedx-npm --omit dev --output-format JSON --output-file artifactSBOM.json --spec-version 1.4 --flatten-components )
  - type: Command
    name: "Run cyclonedx-node-npm package for the VSCode Extension"
    command: |
      # Install dependencies & cyclonedx-node-npm package
      ( cd gui/extension && \
      npm install && npm install --save-dev @cyclonedx/cyclonedx-npm@1.19.3 && \
      # For more details, visit https://github.com/CycloneDX/cyclonedx-node-npm/blob/main/README.md
      npx @cyclonedx/cyclonedx-npm --omit dev --output-format JSON --output-file artifactSBOM.json --spec-version 1.4 --flatten-components )
  - type: Command
    name: "Merge multiple SBOMs using CycloneDX-cli"
    command: |
      # For more details, visit https://github.com/CycloneDX/cyclonedx-cli/blob/main/README.md
      chmod +x cyclonedx-linux-x64
      ./cyclonedx-linux-x64 merge --input-files ./mds_plugin/artifactSBOM.json ./mrs_plugin/artifactSBOM.json ./gui/backend/artifactSBOM.json ./gui/frontend/artifactSBOM.json ./gui/extension/artifactSBOM.json --output-file artifactSBOM.json

outputArtifacts:
  - name: artifactSBOM
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/artifactSBOM.json
