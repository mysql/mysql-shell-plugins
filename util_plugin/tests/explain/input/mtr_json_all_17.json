{
  "query": "/* select#1 */ select `test`.`t1`.`i1` AS `i1` from `test`.`t1` semi join (`test`.`t2` join `test`.`t3`) where ((`test`.`t2`.`c1` = `test`.`t3`.`c1`) and (`test`.`t2`.`c2` = (/* select#3 */ select min(`test`.`t3`.`c1`) from `test`.`t3`)) and ((/* select#3 */ select min(`test`.`t3`.`c1`) from `test`.`t3`) <> `test`.`t1`.`c1`))",
  "query_plan": {
    "inputs": [
      {
        "inputs": [
          {
            "operation": "Table scan on t1",
            "table_name": "t1",
            "access_type": "table",
            "schema_name": "test",
            "used_columns": [
              "i1",
              "c1"
            ],
            "estimated_rows": 1.0,
            "estimated_total_cost": 0.35
          },
          {
            "inputs": [
              {
                "operation": "Table scan on t3",
                "table_name": "t3",
                "access_type": "table",
                "schema_name": "test",
                "used_columns": [
                  "c1"
                ],
                "estimated_rows": 1.0,
                "estimated_total_cost": 0.35
              }
            ],
            "heading": "Select #3 (subquery in condition; run only once)",
            "subquery": true,
            "cacheable": true,
            "functions": [
              "min(t3.c1)"
            ],
            "operation": "Aggregate: min(t3.c1)",
            "access_type": "aggregate",
            "estimated_rows": 1.0,
            "subquery_location": "condition",
            "estimated_total_cost": 0.5804147465437788
          }
        ],
        "condition": "((select #3) <> t1.c1)",
        "operation": "Filter: ((select #3) <> t1.c1)",
        "access_type": "filter",
        "estimated_rows": 1.0,
        "filter_columns": [
          "test.t1.c1"
        ],
        "estimated_total_cost": 0.35
      },
      {
        "inputs": [
          {
            "operation": "Table scan on t3",
            "table_name": "t3",
            "access_type": "table",
            "schema_name": "test",
            "used_columns": [
              "c1"
            ],
            "estimated_rows": 1.0,
            "estimated_total_cost": 0.35
          },
          {
            "inputs": [
              {
                "covering": false,
                "operation": "Index lookup on t2 using c1 (c1 = t3.c1)",
                "index_name": "c1",
                "table_name": "t2",
                "access_type": "index",
                "key_columns": [
                  "c1"
                ],
                "schema_name": "test",
                "used_columns": [
                  "c1",
                  "c2"
                ],
                "estimated_rows": 1.0,
                "lookup_condition": "c1 = t3.c1",
                "index_access_type": "index_lookup",
                "lookup_references": [
                  "test.t3.c1"
                ],
                "estimated_total_cost": 0.15
              },
              {
                "inputs": [
                  {
                    "operation": "Table scan on t3",
                    "table_name": "t3",
                    "access_type": "table",
                    "schema_name": "test",
                    "used_columns": [
                      "c1"
                    ],
                    "estimated_rows": 1.0,
                    "estimated_total_cost": 0.35
                  }
                ],
                "heading": "Select #3 (subquery in condition; run only once)",
                "subquery": true,
                "cacheable": true,
                "functions": [
                  "min(t3.c1)"
                ],
                "operation": "Aggregate: min(t3.c1)",
                "access_type": "aggregate",
                "estimated_rows": 1.0,
                "subquery_location": "condition",
                "estimated_total_cost": 0.5804147465437788
              }
            ],
            "condition": "(t2.c2 = (select #3))",
            "operation": "Filter: (t2.c2 = (select #3))",
            "access_type": "filter",
            "estimated_rows": 0.5,
            "filter_columns": [
              "test.t2.c2"
            ],
            "estimated_total_cost": 0.15
          }
        ],
        "join_type": "inner join",
        "operation": "Nested loop inner join",
        "access_type": "join",
        "estimated_rows": 0.5,
        "join_algorithm": "nested_loop",
        "estimated_total_cost": 0.7
      }
    ],
    "join_type": "semijoin",
    "operation": "Nested loop semijoin (FirstMatch)",
    "access_type": "join",
    "estimated_rows": 0.5,
    "join_algorithm": "nested_loop",
    "semijoin_strategy": "firstmatch",
    "estimated_total_cost": 0.65
  },
  "query_type": "select",
  "json_schema_version": "2.0"
}
